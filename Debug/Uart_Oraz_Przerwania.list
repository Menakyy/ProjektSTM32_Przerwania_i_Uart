
Uart_Oraz_Przerwania.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002de8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08002f7c  08002f7c  00012f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fd4  08002fd4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002fd4  08002fd4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fd4  08002fd4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08002fe0  08002fe0  00012fe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002fec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000070  0800305c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  0800305c  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2c5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fca  00000000  00000000  0002b365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  0002d330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000720  00000000  00000000  0002db08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021295  00000000  00000000  0002e228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b12f  00000000  00000000  0004f4bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bce13  00000000  00000000  0005a5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001173ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fa8  00000000  00000000  00117454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002f64 	.word	0x08002f64

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08002f64 	.word	0x08002f64

080001d4 <_ZN7CButton4initEP12GPIO_TypeDeftm>:

#include <CButton.h>


void CButton::init(GPIO_TypeDef* GpioPort, uint16_t GpioPin, uint32_t timerDebounce)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	603b      	str	r3, [r7, #0]
 80001e0:	4613      	mov	r3, r2
 80001e2:	80fb      	strh	r3, [r7, #6]
	this->GpioPort 	= GpioPort;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	601a      	str	r2, [r3, #0]
	this->GpioPin 	= GpioPin;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	88fa      	ldrh	r2, [r7, #6]
 80001ee:	809a      	strh	r2, [r3, #4]
	m_timerDebounce = timerDebounce;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	683a      	ldr	r2, [r7, #0]
 80001f4:	60da      	str	r2, [r3, #12]
	state 			= idle;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	2200      	movs	r2, #0
 80001fa:	741a      	strb	r2, [r3, #16]
}
 80001fc:	bf00      	nop
 80001fe:	3714      	adds	r7, #20
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr

08000208 <_ZN7CDriverC1Ev>:

CButton CDriver::m_blueButton;
CStateMachineLed CDriver::m_stateMachineLed;


CDriver::CDriver()
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
{
}
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr

0800021e <_ZN7CDriverD1Ev>:
CDriver::~CDriver()
 800021e:	b480      	push	{r7}
 8000220:	b083      	sub	sp, #12
 8000222:	af00      	add	r7, sp, #0
 8000224:	6078      	str	r0, [r7, #4]
{
}
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4618      	mov	r0, r3
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr

08000234 <_ZN7CDriver4initEv>:

void CDriver::init()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	m_greenLed.init(LD2_GPIO_Port, LD2_Pin, CLed::LedStates::toggle);
 800023c:	2302      	movs	r3, #2
 800023e:	2220      	movs	r2, #32
 8000240:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000244:	4809      	ldr	r0, [pc, #36]	; (800026c <_ZN7CDriver4initEv+0x38>)
 8000246:	f000 f883 	bl	8000350 <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>

	m_blueButton.init(B1_GPIO_Port, B1_Pin, 20);
 800024a:	2314      	movs	r3, #20
 800024c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000250:	4907      	ldr	r1, [pc, #28]	; (8000270 <_ZN7CDriver4initEv+0x3c>)
 8000252:	4808      	ldr	r0, [pc, #32]	; (8000274 <_ZN7CDriver4initEv+0x40>)
 8000254:	f7ff ffbe 	bl	80001d4 <_ZN7CButton4initEP12GPIO_TypeDeftm>

	m_stateMachineLed.init(&m_greenLed,&m_blueButton);
 8000258:	4a06      	ldr	r2, [pc, #24]	; (8000274 <_ZN7CDriver4initEv+0x40>)
 800025a:	4904      	ldr	r1, [pc, #16]	; (800026c <_ZN7CDriver4initEv+0x38>)
 800025c:	4806      	ldr	r0, [pc, #24]	; (8000278 <_ZN7CDriver4initEv+0x44>)
 800025e:	f000 f8c9 	bl	80003f4 <_ZN16CStateMachineLed4initEP4CLedP7CButton>
}
 8000262:	bf00      	nop
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	2000008c 	.word	0x2000008c
 8000270:	48000800 	.word	0x48000800
 8000274:	200000a4 	.word	0x200000a4
 8000278:	200000bc 	.word	0x200000bc

0800027c <_Z41__static_initialization_and_destruction_0ii>:
{
	m_blueButton.update();
	m_greenLed.update();

	m_stateMachineLed.update();
}
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	6039      	str	r1, [r7, #0]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b01      	cmp	r3, #1
 800028a:	d10a      	bne.n	80002a2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000292:	4293      	cmp	r3, r2
 8000294:	d105      	bne.n	80002a2 <_Z41__static_initialization_and_destruction_0ii+0x26>
CLed CDriver::m_greenLed;
 8000296:	480c      	ldr	r0, [pc, #48]	; (80002c8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000298:	f000 f82a 	bl	80002f0 <_ZN4CLedC1Ev>
CStateMachineLed CDriver::m_stateMachineLed;
 800029c:	480b      	ldr	r0, [pc, #44]	; (80002cc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800029e:	f000 f879 	bl	8000394 <_ZN16CStateMachineLedC1Ev>
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d10a      	bne.n	80002be <_Z41__static_initialization_and_destruction_0ii+0x42>
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d105      	bne.n	80002be <_Z41__static_initialization_and_destruction_0ii+0x42>
 80002b2:	4806      	ldr	r0, [pc, #24]	; (80002cc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80002b4:	f000 f87e 	bl	80003b4 <_ZN16CStateMachineLedD1Ev>
CLed CDriver::m_greenLed;
 80002b8:	4803      	ldr	r0, [pc, #12]	; (80002c8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80002ba:	f000 f829 	bl	8000310 <_ZN4CLedD1Ev>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	2000008c 	.word	0x2000008c
 80002cc:	200000bc 	.word	0x200000bc

080002d0 <_GLOBAL__sub_I__ZN7CDriver10m_greenLedE>:
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80002d8:	2001      	movs	r0, #1
 80002da:	f7ff ffcf 	bl	800027c <_Z41__static_initialization_and_destruction_0ii>
 80002de:	bd80      	pop	{r7, pc}

080002e0 <_GLOBAL__sub_D__ZN7CDriver10m_greenLedE>:
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80002e8:	2000      	movs	r0, #0
 80002ea:	f7ff ffc7 	bl	800027c <_Z41__static_initialization_and_destruction_0ii>
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <_ZN4CLedC1Ev>:
 *      Author: Konra
 */

#include <CLed.h>

CLed::CLed() {
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	4a04      	ldr	r2, [pc, #16]	; (800030c <_ZN4CLedC1Ev+0x1c>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4618      	mov	r0, r3
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	08002f84 	.word	0x08002f84

08000310 <_ZN4CLedD1Ev>:

CLed::~CLed() {
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <_ZN4CLedD1Ev+0x1c>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4618      	mov	r0, r3
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	08002f84 	.word	0x08002f84

08000330 <_ZN4CLedD0Ev>:
CLed::~CLed() {
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
}
 8000338:	6878      	ldr	r0, [r7, #4]
 800033a:	f7ff ffe9 	bl	8000310 <_ZN4CLedD1Ev>
 800033e:	2118      	movs	r1, #24
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f002 fd78 	bl	8002e36 <_ZdlPvj>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4618      	mov	r0, r3
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>:

void CLed::init(GPIO_TypeDef* GpioPort, uint16_t GpioPin, LedStates state = off)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	4611      	mov	r1, r2
 800035c:	461a      	mov	r2, r3
 800035e:	460b      	mov	r3, r1
 8000360:	80fb      	strh	r3, [r7, #6]
 8000362:	4613      	mov	r3, r2
 8000364:	717b      	strb	r3, [r7, #5]
	this->GpioPort 	= GpioPort;
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	68ba      	ldr	r2, [r7, #8]
 800036a:	605a      	str	r2, [r3, #4]
	this->GpioPin 	= GpioPin;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	88fa      	ldrh	r2, [r7, #6]
 8000370:	811a      	strh	r2, [r3, #8]
	this->state 	= state;
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	797a      	ldrb	r2, [r7, #5]
 8000376:	729a      	strb	r2, [r3, #10]
	m_timerToggle 	= 500;
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800037e:	60da      	str	r2, [r3, #12]
	m_enter 		= false;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	2200      	movs	r2, #0
 8000384:	751a      	strb	r2, [r3, #20]
}
 8000386:	bf00      	nop
 8000388:	3714      	adds	r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
	...

08000394 <_ZN16CStateMachineLedC1Ev>:
 *      Author: Konra
 */

#include <CStateMachineLed.h>

CStateMachineLed::CStateMachineLed() {
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <_ZN16CStateMachineLedC1Ev+0x1c>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4618      	mov	r0, r3
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	08002f94 	.word	0x08002f94

080003b4 <_ZN16CStateMachineLedD1Ev>:

CStateMachineLed::~CStateMachineLed() {
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <_ZN16CStateMachineLedD1Ev+0x1c>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	08002f94 	.word	0x08002f94

080003d4 <_ZN16CStateMachineLedD0Ev>:
CStateMachineLed::~CStateMachineLed() {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
}
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	f7ff ffe9 	bl	80003b4 <_ZN16CStateMachineLedD1Ev>
 80003e2:	210c      	movs	r1, #12
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f002 fd26 	bl	8002e36 <_ZdlPvj>
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4618      	mov	r0, r3
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <_ZN16CStateMachineLed4initEP4CLedP7CButton>:

void CStateMachineLed::init(CLed* led, CButton* button)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	607a      	str	r2, [r7, #4]
	this->led = led;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	68ba      	ldr	r2, [r7, #8]
 8000404:	605a      	str	r2, [r3, #4]
	this->button = button;
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	609a      	str	r2, [r3, #8]
}
 800040c:	bf00      	nop
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	m_driver.init();
 800041c:	4806      	ldr	r0, [pc, #24]	; (8000438 <main+0x20>)
 800041e:	f7ff ff09 	bl	8000234 <_ZN7CDriver4initEv>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000422:	f000 fa7f 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000426:	f000 f809 	bl	800043c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800042a:	f000 f8b5 	bl	8000598 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800042e:	f000 f87f 	bl	8000530 <_ZL19MX_USART2_UART_Initv>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000432:	f000 f870 	bl	8000516 <_ZL12MX_NVIC_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000436:	e7fe      	b.n	8000436 <main+0x1e>
 8000438:	2000014c 	.word	0x2000014c

0800043c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b0a6      	sub	sp, #152	; 0x98
 8000440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000442:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000446:	2228      	movs	r2, #40	; 0x28
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f002 fd24 	bl	8002e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000450:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
 800045e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000460:	1d3b      	adds	r3, r7, #4
 8000462:	2258      	movs	r2, #88	; 0x58
 8000464:	2100      	movs	r1, #0
 8000466:	4618      	mov	r0, r3
 8000468:	f002 fd16 	bl	8002e98 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800046c:	2302      	movs	r3, #2
 800046e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000470:	2301      	movs	r3, #1
 8000472:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000474:	2310      	movs	r3, #16
 8000476:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047a:	2302      	movs	r3, #2
 800047c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000480:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000484:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000488:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800048c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000496:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800049a:	4618      	mov	r0, r3
 800049c:	f000 fd8e 	bl	8000fbc <HAL_RCC_OscConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	bf14      	ite	ne
 80004a6:	2301      	movne	r3, #1
 80004a8:	2300      	moveq	r3, #0
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <_Z18SystemClock_Configv+0x78>
  {
    Error_Handler();
 80004b0:	f000 f91c 	bl	80006ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b4:	230f      	movs	r3, #15
 80004b6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004b8:	2302      	movs	r3, #2
 80004ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004bc:	2300      	movs	r3, #0
 80004be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004ca:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80004ce:	2102      	movs	r1, #2
 80004d0:	4618      	mov	r0, r3
 80004d2:	f001 fc89 	bl	8001de8 <HAL_RCC_ClockConfig>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	bf14      	ite	ne
 80004dc:	2301      	movne	r3, #1
 80004de:	2300      	moveq	r3, #0
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d001      	beq.n	80004ea <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 80004e6:	f000 f901 	bl	80006ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004ea:	2302      	movs	r3, #2
 80004ec:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004ee:	2300      	movs	r3, #0
 80004f0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	4618      	mov	r0, r3
 80004f6:	f001 fead 	bl	8002254 <HAL_RCCEx_PeriphCLKConfig>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	bf14      	ite	ne
 8000500:	2301      	movne	r3, #1
 8000502:	2300      	moveq	r3, #0
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <_Z18SystemClock_Configv+0xd2>
  {
    Error_Handler();
 800050a:	f000 f8ef 	bl	80006ec <Error_Handler>
  }
}
 800050e:	bf00      	nop
 8000510:	3798      	adds	r7, #152	; 0x98
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}

08000516 <_ZL12MX_NVIC_Initv>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000516:	b580      	push	{r7, lr}
 8000518:	af00      	add	r7, sp, #0
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800051a:	2200      	movs	r2, #0
 800051c:	2100      	movs	r1, #0
 800051e:	2028      	movs	r0, #40	; 0x28
 8000520:	f000 fb41 	bl	8000ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000524:	2028      	movs	r0, #40	; 0x28
 8000526:	f000 fb5a 	bl	8000bde <HAL_NVIC_EnableIRQ>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000534:	4b16      	ldr	r3, [pc, #88]	; (8000590 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000536:	4a17      	ldr	r2, [pc, #92]	; (8000594 <_ZL19MX_USART2_UART_Initv+0x64>)
 8000538:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800053a:	4b15      	ldr	r3, [pc, #84]	; (8000590 <_ZL19MX_USART2_UART_Initv+0x60>)
 800053c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000540:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000542:	4b13      	ldr	r3, [pc, #76]	; (8000590 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <_ZL19MX_USART2_UART_Initv+0x60>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000550:	2200      	movs	r2, #0
 8000552:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000554:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000556:	220c      	movs	r2, #12
 8000558:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <_ZL19MX_USART2_UART_Initv+0x60>)
 800055c:	2200      	movs	r2, #0
 800055e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000560:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000562:	2200      	movs	r2, #0
 8000564:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000566:	4b0a      	ldr	r3, [pc, #40]	; (8000590 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000568:	2200      	movs	r2, #0
 800056a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <_ZL19MX_USART2_UART_Initv+0x60>)
 800056e:	2200      	movs	r2, #0
 8000570:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000572:	4807      	ldr	r0, [pc, #28]	; (8000590 <_ZL19MX_USART2_UART_Initv+0x60>)
 8000574:	f002 f88c 	bl	8002690 <HAL_UART_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	bf14      	ite	ne
 800057e:	2301      	movne	r3, #1
 8000580:	2300      	moveq	r3, #0
 8000582:	b2db      	uxtb	r3, r3
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8000588:	f000 f8b0 	bl	80006ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800058c:	bf00      	nop
 800058e:	bd80      	pop	{r7, pc}
 8000590:	200000c8 	.word	0x200000c8
 8000594:	40004400 	.word	0x40004400

08000598 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	4b3f      	ldr	r3, [pc, #252]	; (80006ac <_ZL12MX_GPIO_Initv+0x114>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a3e      	ldr	r2, [pc, #248]	; (80006ac <_ZL12MX_GPIO_Initv+0x114>)
 80005b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80005b8:	6153      	str	r3, [r2, #20]
 80005ba:	4b3c      	ldr	r3, [pc, #240]	; (80006ac <_ZL12MX_GPIO_Initv+0x114>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80005c2:	613b      	str	r3, [r7, #16]
 80005c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005c6:	4b39      	ldr	r3, [pc, #228]	; (80006ac <_ZL12MX_GPIO_Initv+0x114>)
 80005c8:	695b      	ldr	r3, [r3, #20]
 80005ca:	4a38      	ldr	r2, [pc, #224]	; (80006ac <_ZL12MX_GPIO_Initv+0x114>)
 80005cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80005d0:	6153      	str	r3, [r2, #20]
 80005d2:	4b36      	ldr	r3, [pc, #216]	; (80006ac <_ZL12MX_GPIO_Initv+0x114>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b33      	ldr	r3, [pc, #204]	; (80006ac <_ZL12MX_GPIO_Initv+0x114>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a32      	ldr	r2, [pc, #200]	; (80006ac <_ZL12MX_GPIO_Initv+0x114>)
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b30      	ldr	r3, [pc, #192]	; (80006ac <_ZL12MX_GPIO_Initv+0x114>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b2d      	ldr	r3, [pc, #180]	; (80006ac <_ZL12MX_GPIO_Initv+0x114>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a2c      	ldr	r2, [pc, #176]	; (80006ac <_ZL12MX_GPIO_Initv+0x114>)
 80005fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <_ZL12MX_GPIO_Initv+0x114>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Reddiode_GPIO_Port, Reddiode_Pin, GPIO_PIN_RESET);
 800060e:	2200      	movs	r2, #0
 8000610:	2102      	movs	r1, #2
 8000612:	4827      	ldr	r0, [pc, #156]	; (80006b0 <_ZL12MX_GPIO_Initv+0x118>)
 8000614:	f000 fc88 	bl	8000f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000618:	2200      	movs	r2, #0
 800061a:	2120      	movs	r1, #32
 800061c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000620:	f000 fc82 	bl	8000f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800062a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800062e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	4619      	mov	r1, r3
 800063a:	481d      	ldr	r0, [pc, #116]	; (80006b0 <_ZL12MX_GPIO_Initv+0x118>)
 800063c:	f000 faea 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : Mybutton_Pin */
  GPIO_InitStruct.Pin = Mybutton_Pin;
 8000640:	2301      	movs	r3, #1
 8000642:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000644:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000648:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800064a:	2301      	movs	r3, #1
 800064c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Mybutton_GPIO_Port, &GPIO_InitStruct);
 800064e:	f107 0314 	add.w	r3, r7, #20
 8000652:	4619      	mov	r1, r3
 8000654:	4816      	ldr	r0, [pc, #88]	; (80006b0 <_ZL12MX_GPIO_Initv+0x118>)
 8000656:	f000 fadd 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : Reddiode_Pin */
  GPIO_InitStruct.Pin = Reddiode_Pin;
 800065a:	2302      	movs	r3, #2
 800065c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800065e:	2301      	movs	r3, #1
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Reddiode_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	480f      	ldr	r0, [pc, #60]	; (80006b0 <_ZL12MX_GPIO_Initv+0x118>)
 8000672:	f000 facf 	bl	8000c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000676:	2320      	movs	r3, #32
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f000 fac0 	bl	8000c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	2006      	movs	r0, #6
 800069a:	f000 fa84 	bl	8000ba6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800069e:	2006      	movs	r0, #6
 80006a0:	f000 fa9d 	bl	8000bde <HAL_NVIC_EnableIRQ>
  
}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	; 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40021000 	.word	0x40021000
 80006b0:	48000800 	.word	0x48000800

080006b4 <HAL_GPIO_EXTI_Callback>:



/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Mybutton_Pin)
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	2b01      	cmp	r3, #1
 80006c2:	d103      	bne.n	80006cc <HAL_GPIO_EXTI_Callback+0x18>
	{
		HAL_GPIO_TogglePin(Reddiode_GPIO_Port, Reddiode_Pin);
 80006c4:	2102      	movs	r1, #2
 80006c6:	4808      	ldr	r0, [pc, #32]	; (80006e8 <HAL_GPIO_EXTI_Callback+0x34>)
 80006c8:	f000 fc46 	bl	8000f58 <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == B1_Pin)
 80006cc:	88fb      	ldrh	r3, [r7, #6]
 80006ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006d2:	d104      	bne.n	80006de <HAL_GPIO_EXTI_Callback+0x2a>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006d4:	2120      	movs	r1, #32
 80006d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006da:	f000 fc3d 	bl	8000f58 <HAL_GPIO_TogglePin>
	}
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	48000800 	.word	0x48000800

080006ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f0:	b672      	cpsid	i
}
 80006f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f4:	e7fe      	b.n	80006f4 <Error_Handler+0x8>
	...

080006f8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d10a      	bne.n	800071e <_Z41__static_initialization_and_destruction_0ii+0x26>
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800070e:	4293      	cmp	r3, r2
 8000710:	d105      	bne.n	800071e <_Z41__static_initialization_and_destruction_0ii+0x26>
CDriver m_driver;
 8000712:	480c      	ldr	r0, [pc, #48]	; (8000744 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000714:	f7ff fd78 	bl	8000208 <_ZN7CDriverC1Ev>
CLed m_led;
 8000718:	480b      	ldr	r0, [pc, #44]	; (8000748 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800071a:	f7ff fde9 	bl	80002f0 <_ZN4CLedC1Ev>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d10a      	bne.n	800073a <_Z41__static_initialization_and_destruction_0ii+0x42>
 8000724:	683b      	ldr	r3, [r7, #0]
 8000726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800072a:	4293      	cmp	r3, r2
 800072c:	d105      	bne.n	800073a <_Z41__static_initialization_and_destruction_0ii+0x42>
 800072e:	4806      	ldr	r0, [pc, #24]	; (8000748 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8000730:	f7ff fdee 	bl	8000310 <_ZN4CLedD1Ev>
CDriver m_driver;
 8000734:	4803      	ldr	r0, [pc, #12]	; (8000744 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000736:	f7ff fd72 	bl	800021e <_ZN7CDriverD1Ev>
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	2000014c 	.word	0x2000014c
 8000748:	20000150 	.word	0x20000150

0800074c <_GLOBAL__sub_I_huart2>:
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
 8000750:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000754:	2001      	movs	r0, #1
 8000756:	f7ff ffcf 	bl	80006f8 <_Z41__static_initialization_and_destruction_0ii>
 800075a:	bd80      	pop	{r7, pc}

0800075c <_GLOBAL__sub_D_huart2>:
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
 8000760:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000764:	2000      	movs	r0, #0
 8000766:	f7ff ffc7 	bl	80006f8 <_Z41__static_initialization_and_destruction_0ii>
 800076a:	bd80      	pop	{r7, pc}

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <HAL_MspInit+0x44>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	4a0e      	ldr	r2, [pc, #56]	; (80007b0 <HAL_MspInit+0x44>)
 8000778:	f043 0301 	orr.w	r3, r3, #1
 800077c:	6193      	str	r3, [r2, #24]
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <HAL_MspInit+0x44>)
 8000780:	699b      	ldr	r3, [r3, #24]
 8000782:	f003 0301 	and.w	r3, r3, #1
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <HAL_MspInit+0x44>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	4a08      	ldr	r2, [pc, #32]	; (80007b0 <HAL_MspInit+0x44>)
 8000790:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000794:	61d3      	str	r3, [r2, #28]
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <HAL_MspInit+0x44>)
 8000798:	69db      	ldr	r3, [r3, #28]
 800079a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800079e:	603b      	str	r3, [r7, #0]
 80007a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007a2:	2007      	movs	r0, #7
 80007a4:	f000 f9f4 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40021000 	.word	0x40021000

080007b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a17      	ldr	r2, [pc, #92]	; (8000830 <HAL_UART_MspInit+0x7c>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d128      	bne.n	8000828 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007d6:	4b17      	ldr	r3, [pc, #92]	; (8000834 <HAL_UART_MspInit+0x80>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a16      	ldr	r2, [pc, #88]	; (8000834 <HAL_UART_MspInit+0x80>)
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	61d3      	str	r3, [r2, #28]
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <HAL_UART_MspInit+0x80>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ea:	613b      	str	r3, [r7, #16]
 80007ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <HAL_UART_MspInit+0x80>)
 80007f0:	695b      	ldr	r3, [r3, #20]
 80007f2:	4a10      	ldr	r2, [pc, #64]	; (8000834 <HAL_UART_MspInit+0x80>)
 80007f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f8:	6153      	str	r3, [r2, #20]
 80007fa:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <HAL_UART_MspInit+0x80>)
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000806:	230c      	movs	r3, #12
 8000808:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800080a:	2302      	movs	r3, #2
 800080c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000816:	2307      	movs	r3, #7
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 0314 	add.w	r3, r7, #20
 800081e:	4619      	mov	r1, r3
 8000820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000824:	f000 f9f6 	bl	8000c14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000828:	bf00      	nop
 800082a:	3728      	adds	r7, #40	; 0x28
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40004400 	.word	0x40004400
 8000834:	40021000 	.word	0x40021000

08000838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800083c:	e7fe      	b.n	800083c <NMI_Handler+0x4>

0800083e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <HardFault_Handler+0x4>

08000844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <MemManage_Handler+0x4>

0800084a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800084e:	e7fe      	b.n	800084e <BusFault_Handler+0x4>

08000850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000854:	e7fe      	b.n	8000854 <UsageFault_Handler+0x4>

08000856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	46bd      	mov	sp, r7
 800085e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000862:	4770      	bx	lr

08000864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr

08000872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000884:	f000 f894 	bl	80009b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	bd80      	pop	{r7, pc}

0800088c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000890:	2001      	movs	r0, #1
 8000892:	f000 fb7b 	bl	8000f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}

0800089a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800089e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008a2:	f000 fb73 	bl	8000f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
	...

080008ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b0:	4b06      	ldr	r3, [pc, #24]	; (80008cc <SystemInit+0x20>)
 80008b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b6:	4a05      	ldr	r2, [pc, #20]	; (80008cc <SystemInit+0x20>)
 80008b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop
 80008cc:	e000ed00 	.word	0xe000ed00

080008d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000908 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <LoopForever+0x6>)
  ldr r1, =_edata
 80008d6:	490e      	ldr	r1, [pc, #56]	; (8000910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <LoopForever+0xe>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a0b      	ldr	r2, [pc, #44]	; (8000918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008ec:	4c0b      	ldr	r4, [pc, #44]	; (800091c <LoopForever+0x16>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80008fa:	f7ff ffd7 	bl	80008ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fe:	f002 fa9f 	bl	8002e40 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000902:	f7ff fd89 	bl	8000418 <main>

08000906 <LoopForever>:

LoopForever:
    b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000908:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000914:	08002fec 	.word	0x08002fec
  ldr r2, =_sbss
 8000918:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800091c:	2000017c 	.word	0x2000017c

08000920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC1_2_IRQHandler>
	...

08000924 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000928:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_Init+0x28>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a07      	ldr	r2, [pc, #28]	; (800094c <HAL_Init+0x28>)
 800092e:	f043 0310 	orr.w	r3, r3, #16
 8000932:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 f92b 	bl	8000b90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093a:	2000      	movs	r0, #0
 800093c:	f000 f808 	bl	8000950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000940:	f7ff ff14 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000944:	2300      	movs	r3, #0
}
 8000946:	4618      	mov	r0, r3
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40022000 	.word	0x40022000

08000950 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <HAL_InitTick+0x54>)
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x58>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	4619      	mov	r1, r3
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	fbb3 f3f1 	udiv	r3, r3, r1
 800096a:	fbb2 f3f3 	udiv	r3, r2, r3
 800096e:	4618      	mov	r0, r3
 8000970:	f000 f943 	bl	8000bfa <HAL_SYSTICK_Config>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	e00e      	b.n	800099c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b0f      	cmp	r3, #15
 8000982:	d80a      	bhi.n	800099a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000984:	2200      	movs	r2, #0
 8000986:	6879      	ldr	r1, [r7, #4]
 8000988:	f04f 30ff 	mov.w	r0, #4294967295
 800098c:	f000 f90b 	bl	8000ba6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000990:	4a06      	ldr	r2, [pc, #24]	; (80009ac <HAL_InitTick+0x5c>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	e000      	b.n	800099c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099a:	2301      	movs	r3, #1
}
 800099c:	4618      	mov	r0, r3
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000000 	.word	0x20000000
 80009a8:	20000008 	.word	0x20000008
 80009ac:	20000004 	.word	0x20000004

080009b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_IncTick+0x20>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <HAL_IncTick+0x24>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4413      	add	r3, r2
 80009c0:	4a04      	ldr	r2, [pc, #16]	; (80009d4 <HAL_IncTick+0x24>)
 80009c2:	6013      	str	r3, [r2, #0]
}
 80009c4:	bf00      	nop
 80009c6:	46bd      	mov	sp, r7
 80009c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	20000008 	.word	0x20000008
 80009d4:	2000016c 	.word	0x2000016c

080009d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  return uwTick;  
 80009dc:	4b03      	ldr	r3, [pc, #12]	; (80009ec <HAL_GetTick+0x14>)
 80009de:	681b      	ldr	r3, [r3, #0]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	2000016c 	.word	0x2000016c

080009f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b085      	sub	sp, #20
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f003 0307 	and.w	r3, r3, #7
 80009fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a0c:	4013      	ands	r3, r2
 8000a0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a14:	68bb      	ldr	r3, [r7, #8]
 8000a16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <__NVIC_SetPriorityGrouping+0x44>)
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	60d3      	str	r3, [r2, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <__NVIC_GetPriorityGrouping+0x18>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	0a1b      	lsrs	r3, r3, #8
 8000a42:	f003 0307 	and.w	r3, r3, #7
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr
 8000a50:	e000ed00 	.word	0xe000ed00

08000a54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	db0b      	blt.n	8000a7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f003 021f 	and.w	r2, r3, #31
 8000a6c:	4907      	ldr	r1, [pc, #28]	; (8000a8c <__NVIC_EnableIRQ+0x38>)
 8000a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a72:	095b      	lsrs	r3, r3, #5
 8000a74:	2001      	movs	r0, #1
 8000a76:	fa00 f202 	lsl.w	r2, r0, r2
 8000a7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a7e:	bf00      	nop
 8000a80:	370c      	adds	r7, #12
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	e000e100 	.word	0xe000e100

08000a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	6039      	str	r1, [r7, #0]
 8000a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	db0a      	blt.n	8000aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	490c      	ldr	r1, [pc, #48]	; (8000adc <__NVIC_SetPriority+0x4c>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	0112      	lsls	r2, r2, #4
 8000ab0:	b2d2      	uxtb	r2, r2
 8000ab2:	440b      	add	r3, r1
 8000ab4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ab8:	e00a      	b.n	8000ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	b2da      	uxtb	r2, r3
 8000abe:	4908      	ldr	r1, [pc, #32]	; (8000ae0 <__NVIC_SetPriority+0x50>)
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	f003 030f 	and.w	r3, r3, #15
 8000ac6:	3b04      	subs	r3, #4
 8000ac8:	0112      	lsls	r2, r2, #4
 8000aca:	b2d2      	uxtb	r2, r2
 8000acc:	440b      	add	r3, r1
 8000ace:	761a      	strb	r2, [r3, #24]
}
 8000ad0:	bf00      	nop
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	e000e100 	.word	0xe000e100
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b089      	sub	sp, #36	; 0x24
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000af8:	69fb      	ldr	r3, [r7, #28]
 8000afa:	f1c3 0307 	rsb	r3, r3, #7
 8000afe:	2b04      	cmp	r3, #4
 8000b00:	bf28      	it	cs
 8000b02:	2304      	movcs	r3, #4
 8000b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b06:	69fb      	ldr	r3, [r7, #28]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	2b06      	cmp	r3, #6
 8000b0c:	d902      	bls.n	8000b14 <NVIC_EncodePriority+0x30>
 8000b0e:	69fb      	ldr	r3, [r7, #28]
 8000b10:	3b03      	subs	r3, #3
 8000b12:	e000      	b.n	8000b16 <NVIC_EncodePriority+0x32>
 8000b14:	2300      	movs	r3, #0
 8000b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	f04f 32ff 	mov.w	r2, #4294967295
 8000b1c:	69bb      	ldr	r3, [r7, #24]
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43da      	mvns	r2, r3
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	401a      	ands	r2, r3
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b30:	697b      	ldr	r3, [r7, #20]
 8000b32:	fa01 f303 	lsl.w	r3, r1, r3
 8000b36:	43d9      	mvns	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b3c:	4313      	orrs	r3, r2
         );
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3724      	adds	r7, #36	; 0x24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b5c:	d301      	bcc.n	8000b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e00f      	b.n	8000b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b62:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <SysTick_Config+0x40>)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	3b01      	subs	r3, #1
 8000b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b6a:	210f      	movs	r1, #15
 8000b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b70:	f7ff ff8e 	bl	8000a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b74:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <SysTick_Config+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b7a:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <SysTick_Config+0x40>)
 8000b7c:	2207      	movs	r2, #7
 8000b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b80:	2300      	movs	r3, #0
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	e000e010 	.word	0xe000e010

08000b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b98:	6878      	ldr	r0, [r7, #4]
 8000b9a:	f7ff ff29 	bl	80009f0 <__NVIC_SetPriorityGrouping>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b086      	sub	sp, #24
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	4603      	mov	r3, r0
 8000bae:	60b9      	str	r1, [r7, #8]
 8000bb0:	607a      	str	r2, [r7, #4]
 8000bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb8:	f7ff ff3e 	bl	8000a38 <__NVIC_GetPriorityGrouping>
 8000bbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	68b9      	ldr	r1, [r7, #8]
 8000bc2:	6978      	ldr	r0, [r7, #20]
 8000bc4:	f7ff ff8e 	bl	8000ae4 <NVIC_EncodePriority>
 8000bc8:	4602      	mov	r2, r0
 8000bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bce:	4611      	mov	r1, r2
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ff5d 	bl	8000a90 <__NVIC_SetPriority>
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	4603      	mov	r3, r0
 8000be6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	4618      	mov	r0, r3
 8000bee:	f7ff ff31 	bl	8000a54 <__NVIC_EnableIRQ>
}
 8000bf2:	bf00      	nop
 8000bf4:	3708      	adds	r7, #8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c02:	6878      	ldr	r0, [r7, #4]
 8000c04:	f7ff ffa2 	bl	8000b4c <SysTick_Config>
 8000c08:	4603      	mov	r3, r0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b087      	sub	sp, #28
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c22:	e160      	b.n	8000ee6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	2101      	movs	r1, #1
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	f000 8152 	beq.w	8000ee0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f003 0303 	and.w	r3, r3, #3
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d005      	beq.n	8000c54 <HAL_GPIO_Init+0x40>
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d130      	bne.n	8000cb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	2203      	movs	r2, #3
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	693a      	ldr	r2, [r7, #16]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	68da      	ldr	r2, [r3, #12]
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	693a      	ldr	r2, [r7, #16]
 8000c82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	091b      	lsrs	r3, r3, #4
 8000ca0:	f003 0201 	and.w	r2, r3, #1
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	f003 0303 	and.w	r3, r3, #3
 8000cbe:	2b03      	cmp	r3, #3
 8000cc0:	d017      	beq.n	8000cf2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd2:	43db      	mvns	r3, r3
 8000cd4:	693a      	ldr	r2, [r7, #16]
 8000cd6:	4013      	ands	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	005b      	lsls	r3, r3, #1
 8000ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	4313      	orrs	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f003 0303 	and.w	r3, r3, #3
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d123      	bne.n	8000d46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	08da      	lsrs	r2, r3, #3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3208      	adds	r2, #8
 8000d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	f003 0307 	and.w	r3, r3, #7
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	220f      	movs	r2, #15
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	691a      	ldr	r2, [r3, #16]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	f003 0307 	and.w	r3, r3, #7
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	08da      	lsrs	r2, r3, #3
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3208      	adds	r2, #8
 8000d40:	6939      	ldr	r1, [r7, #16]
 8000d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	005b      	lsls	r3, r3, #1
 8000d50:	2203      	movs	r2, #3
 8000d52:	fa02 f303 	lsl.w	r3, r2, r3
 8000d56:	43db      	mvns	r3, r3
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	f003 0203 	and.w	r2, r3, #3
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	f000 80ac 	beq.w	8000ee0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d88:	4b5e      	ldr	r3, [pc, #376]	; (8000f04 <HAL_GPIO_Init+0x2f0>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a5d      	ldr	r2, [pc, #372]	; (8000f04 <HAL_GPIO_Init+0x2f0>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b5b      	ldr	r3, [pc, #364]	; (8000f04 <HAL_GPIO_Init+0x2f0>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000da0:	4a59      	ldr	r2, [pc, #356]	; (8000f08 <HAL_GPIO_Init+0x2f4>)
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	089b      	lsrs	r3, r3, #2
 8000da6:	3302      	adds	r3, #2
 8000da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	220f      	movs	r2, #15
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dca:	d025      	beq.n	8000e18 <HAL_GPIO_Init+0x204>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a4f      	ldr	r2, [pc, #316]	; (8000f0c <HAL_GPIO_Init+0x2f8>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d01f      	beq.n	8000e14 <HAL_GPIO_Init+0x200>
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4a4e      	ldr	r2, [pc, #312]	; (8000f10 <HAL_GPIO_Init+0x2fc>)
 8000dd8:	4293      	cmp	r3, r2
 8000dda:	d019      	beq.n	8000e10 <HAL_GPIO_Init+0x1fc>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4a4d      	ldr	r2, [pc, #308]	; (8000f14 <HAL_GPIO_Init+0x300>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d013      	beq.n	8000e0c <HAL_GPIO_Init+0x1f8>
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a4c      	ldr	r2, [pc, #304]	; (8000f18 <HAL_GPIO_Init+0x304>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d00d      	beq.n	8000e08 <HAL_GPIO_Init+0x1f4>
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	4a4b      	ldr	r2, [pc, #300]	; (8000f1c <HAL_GPIO_Init+0x308>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	d007      	beq.n	8000e04 <HAL_GPIO_Init+0x1f0>
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	4a4a      	ldr	r2, [pc, #296]	; (8000f20 <HAL_GPIO_Init+0x30c>)
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d101      	bne.n	8000e00 <HAL_GPIO_Init+0x1ec>
 8000dfc:	2306      	movs	r3, #6
 8000dfe:	e00c      	b.n	8000e1a <HAL_GPIO_Init+0x206>
 8000e00:	2307      	movs	r3, #7
 8000e02:	e00a      	b.n	8000e1a <HAL_GPIO_Init+0x206>
 8000e04:	2305      	movs	r3, #5
 8000e06:	e008      	b.n	8000e1a <HAL_GPIO_Init+0x206>
 8000e08:	2304      	movs	r3, #4
 8000e0a:	e006      	b.n	8000e1a <HAL_GPIO_Init+0x206>
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e004      	b.n	8000e1a <HAL_GPIO_Init+0x206>
 8000e10:	2302      	movs	r3, #2
 8000e12:	e002      	b.n	8000e1a <HAL_GPIO_Init+0x206>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <HAL_GPIO_Init+0x206>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	f002 0203 	and.w	r2, r2, #3
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	4093      	lsls	r3, r2
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e2a:	4937      	ldr	r1, [pc, #220]	; (8000f08 <HAL_GPIO_Init+0x2f4>)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e38:	4b3a      	ldr	r3, [pc, #232]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e5c:	4a31      	ldr	r2, [pc, #196]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e62:	4b30      	ldr	r3, [pc, #192]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e86:	4a27      	ldr	r2, [pc, #156]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8c:	4b25      	ldr	r3, [pc, #148]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43db      	mvns	r3, r3
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eb0:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000eb2:	693b      	ldr	r3, [r7, #16]
 8000eb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000eb8:	68db      	ldr	r3, [r3, #12]
 8000eba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	693a      	ldr	r2, [r7, #16]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000eda:	4a12      	ldr	r2, [pc, #72]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	f47f ae97 	bne.w	8000c24 <HAL_GPIO_Init+0x10>
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	bf00      	nop
 8000efa:	371c      	adds	r7, #28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010000 	.word	0x40010000
 8000f0c:	48000400 	.word	0x48000400
 8000f10:	48000800 	.word	0x48000800
 8000f14:	48000c00 	.word	0x48000c00
 8000f18:	48001000 	.word	0x48001000
 8000f1c:	48001400 	.word	0x48001400
 8000f20:	48001800 	.word	0x48001800
 8000f24:	40010400 	.word	0x40010400

08000f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	807b      	strh	r3, [r7, #2]
 8000f34:	4613      	mov	r3, r2
 8000f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f38:	787b      	ldrb	r3, [r7, #1]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f3e:	887a      	ldrh	r2, [r7, #2]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f46:	887a      	ldrh	r2, [r7, #2]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f6a:	887a      	ldrh	r2, [r7, #2]
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	041a      	lsls	r2, r3, #16
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	43d9      	mvns	r1, r3
 8000f76:	887b      	ldrh	r3, [r7, #2]
 8000f78:	400b      	ands	r3, r1
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	619a      	str	r2, [r3, #24]
}
 8000f80:	bf00      	nop
 8000f82:	3714      	adds	r7, #20
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr

08000f8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000f96:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f98:	695a      	ldr	r2, [r3, #20]
 8000f9a:	88fb      	ldrh	r3, [r7, #6]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d006      	beq.n	8000fb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fa4:	88fb      	ldrh	r3, [r7, #6]
 8000fa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fa8:	88fb      	ldrh	r3, [r7, #6]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff fb82 	bl	80006b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40010400 	.word	0x40010400

08000fbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	1d3b      	adds	r3, r7, #4
 8000fc6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d102      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	f000 bf01 	b.w	8001dd8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fd6:	1d3b      	adds	r3, r7, #4
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 8160 	beq.w	80012a6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000fe6:	4bae      	ldr	r3, [pc, #696]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d00c      	beq.n	800100c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ff2:	4bab      	ldr	r3, [pc, #684]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	2b08      	cmp	r3, #8
 8000ffc:	d159      	bne.n	80010b2 <HAL_RCC_OscConfig+0xf6>
 8000ffe:	4ba8      	ldr	r3, [pc, #672]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001006:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800100a:	d152      	bne.n	80010b2 <HAL_RCC_OscConfig+0xf6>
 800100c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001010:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001014:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001018:	fa93 f3a3 	rbit	r3, r3
 800101c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001020:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001024:	fab3 f383 	clz	r3, r3
 8001028:	b2db      	uxtb	r3, r3
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f043 0301 	orr.w	r3, r3, #1
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b01      	cmp	r3, #1
 8001036:	d102      	bne.n	800103e <HAL_RCC_OscConfig+0x82>
 8001038:	4b99      	ldr	r3, [pc, #612]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	e015      	b.n	800106a <HAL_RCC_OscConfig+0xae>
 800103e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001042:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001046:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001052:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001056:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800105a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800105e:	fa93 f3a3 	rbit	r3, r3
 8001062:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001066:	4b8e      	ldr	r3, [pc, #568]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 8001068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800106a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800106e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001072:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001076:	fa92 f2a2 	rbit	r2, r2
 800107a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800107e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001082:	fab2 f282 	clz	r2, r2
 8001086:	b2d2      	uxtb	r2, r2
 8001088:	f042 0220 	orr.w	r2, r2, #32
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	f002 021f 	and.w	r2, r2, #31
 8001092:	2101      	movs	r1, #1
 8001094:	fa01 f202 	lsl.w	r2, r1, r2
 8001098:	4013      	ands	r3, r2
 800109a:	2b00      	cmp	r3, #0
 800109c:	f000 8102 	beq.w	80012a4 <HAL_RCC_OscConfig+0x2e8>
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	f040 80fc 	bne.w	80012a4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	f000 be93 	b.w	8001dd8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010bc:	d106      	bne.n	80010cc <HAL_RCC_OscConfig+0x110>
 80010be:	4b78      	ldr	r3, [pc, #480]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a77      	ldr	r2, [pc, #476]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 80010c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c8:	6013      	str	r3, [r2, #0]
 80010ca:	e030      	b.n	800112e <HAL_RCC_OscConfig+0x172>
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <HAL_RCC_OscConfig+0x134>
 80010d6:	4b72      	ldr	r3, [pc, #456]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a71      	ldr	r2, [pc, #452]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 80010dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b6f      	ldr	r3, [pc, #444]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	4a6e      	ldr	r2, [pc, #440]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 80010e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ec:	6013      	str	r3, [r2, #0]
 80010ee:	e01e      	b.n	800112e <HAL_RCC_OscConfig+0x172>
 80010f0:	1d3b      	adds	r3, r7, #4
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010fa:	d10c      	bne.n	8001116 <HAL_RCC_OscConfig+0x15a>
 80010fc:	4b68      	ldr	r3, [pc, #416]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a67      	ldr	r2, [pc, #412]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 8001102:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001106:	6013      	str	r3, [r2, #0]
 8001108:	4b65      	ldr	r3, [pc, #404]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a64      	ldr	r2, [pc, #400]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 800110e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	e00b      	b.n	800112e <HAL_RCC_OscConfig+0x172>
 8001116:	4b62      	ldr	r3, [pc, #392]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4a61      	ldr	r2, [pc, #388]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 800111c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b5f      	ldr	r3, [pc, #380]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a5e      	ldr	r2, [pc, #376]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 8001128:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d059      	beq.n	80011ec <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001138:	f7ff fc4e 	bl	80009d8 <HAL_GetTick>
 800113c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001140:	e00a      	b.n	8001158 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001142:	f7ff fc49 	bl	80009d8 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	; 0x64
 8001150:	d902      	bls.n	8001158 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	f000 be40 	b.w	8001dd8 <HAL_RCC_OscConfig+0xe1c>
 8001158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800115c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001160:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001164:	fa93 f3a3 	rbit	r3, r3
 8001168:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800116c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001170:	fab3 f383 	clz	r3, r3
 8001174:	b2db      	uxtb	r3, r3
 8001176:	095b      	lsrs	r3, r3, #5
 8001178:	b2db      	uxtb	r3, r3
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	2b01      	cmp	r3, #1
 8001182:	d102      	bne.n	800118a <HAL_RCC_OscConfig+0x1ce>
 8001184:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	e015      	b.n	80011b6 <HAL_RCC_OscConfig+0x1fa>
 800118a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800118e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001192:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001196:	fa93 f3a3 	rbit	r3, r3
 800119a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800119e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011a2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011a6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80011b2:	4b3b      	ldr	r3, [pc, #236]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011ba:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80011be:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80011c2:	fa92 f2a2 	rbit	r2, r2
 80011c6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80011ca:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80011ce:	fab2 f282 	clz	r2, r2
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	f042 0220 	orr.w	r2, r2, #32
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	f002 021f 	and.w	r2, r2, #31
 80011de:	2101      	movs	r1, #1
 80011e0:	fa01 f202 	lsl.w	r2, r1, r2
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0ab      	beq.n	8001142 <HAL_RCC_OscConfig+0x186>
 80011ea:	e05c      	b.n	80012a6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fbf4 	bl	80009d8 <HAL_GetTick>
 80011f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f4:	e00a      	b.n	800120c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f6:	f7ff fbef 	bl	80009d8 <HAL_GetTick>
 80011fa:	4602      	mov	r2, r0
 80011fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b64      	cmp	r3, #100	; 0x64
 8001204:	d902      	bls.n	800120c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	f000 bde6 	b.w	8001dd8 <HAL_RCC_OscConfig+0xe1c>
 800120c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001210:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001214:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001218:	fa93 f3a3 	rbit	r3, r3
 800121c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001220:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001224:	fab3 f383 	clz	r3, r3
 8001228:	b2db      	uxtb	r3, r3
 800122a:	095b      	lsrs	r3, r3, #5
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b01      	cmp	r3, #1
 8001236:	d102      	bne.n	800123e <HAL_RCC_OscConfig+0x282>
 8001238:	4b19      	ldr	r3, [pc, #100]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	e015      	b.n	800126a <HAL_RCC_OscConfig+0x2ae>
 800123e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001242:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001246:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800124a:	fa93 f3a3 	rbit	r3, r3
 800124e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001252:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001256:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800125a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800125e:	fa93 f3a3 	rbit	r3, r3
 8001262:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <HAL_RCC_OscConfig+0x2e4>)
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800126e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001272:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001276:	fa92 f2a2 	rbit	r2, r2
 800127a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800127e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001282:	fab2 f282 	clz	r2, r2
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	f042 0220 	orr.w	r2, r2, #32
 800128c:	b2d2      	uxtb	r2, r2
 800128e:	f002 021f 	and.w	r2, r2, #31
 8001292:	2101      	movs	r1, #1
 8001294:	fa01 f202 	lsl.w	r2, r1, r2
 8001298:	4013      	ands	r3, r2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1ab      	bne.n	80011f6 <HAL_RCC_OscConfig+0x23a>
 800129e:	e002      	b.n	80012a6 <HAL_RCC_OscConfig+0x2ea>
 80012a0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 8170 	beq.w	8001596 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012b6:	4bd0      	ldr	r3, [pc, #832]	; (80015f8 <HAL_RCC_OscConfig+0x63c>)
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d00c      	beq.n	80012dc <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012c2:	4bcd      	ldr	r3, [pc, #820]	; (80015f8 <HAL_RCC_OscConfig+0x63c>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f003 030c 	and.w	r3, r3, #12
 80012ca:	2b08      	cmp	r3, #8
 80012cc:	d16d      	bne.n	80013aa <HAL_RCC_OscConfig+0x3ee>
 80012ce:	4bca      	ldr	r3, [pc, #808]	; (80015f8 <HAL_RCC_OscConfig+0x63c>)
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80012d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80012da:	d166      	bne.n	80013aa <HAL_RCC_OscConfig+0x3ee>
 80012dc:	2302      	movs	r3, #2
 80012de:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80012e6:	fa93 f3a3 	rbit	r3, r3
 80012ea:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80012ee:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	fab3 f383 	clz	r3, r3
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	095b      	lsrs	r3, r3, #5
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b01      	cmp	r3, #1
 8001304:	d102      	bne.n	800130c <HAL_RCC_OscConfig+0x350>
 8001306:	4bbc      	ldr	r3, [pc, #752]	; (80015f8 <HAL_RCC_OscConfig+0x63c>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	e013      	b.n	8001334 <HAL_RCC_OscConfig+0x378>
 800130c:	2302      	movs	r3, #2
 800130e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001312:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001316:	fa93 f3a3 	rbit	r3, r3
 800131a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800131e:	2302      	movs	r3, #2
 8001320:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001324:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001328:	fa93 f3a3 	rbit	r3, r3
 800132c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001330:	4bb1      	ldr	r3, [pc, #708]	; (80015f8 <HAL_RCC_OscConfig+0x63c>)
 8001332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001334:	2202      	movs	r2, #2
 8001336:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800133a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800133e:	fa92 f2a2 	rbit	r2, r2
 8001342:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001346:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800134a:	fab2 f282 	clz	r2, r2
 800134e:	b2d2      	uxtb	r2, r2
 8001350:	f042 0220 	orr.w	r2, r2, #32
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	f002 021f 	and.w	r2, r2, #31
 800135a:	2101      	movs	r1, #1
 800135c:	fa01 f202 	lsl.w	r2, r1, r2
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d007      	beq.n	8001376 <HAL_RCC_OscConfig+0x3ba>
 8001366:	1d3b      	adds	r3, r7, #4
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	2b01      	cmp	r3, #1
 800136e:	d002      	beq.n	8001376 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001370:	2301      	movs	r3, #1
 8001372:	f000 bd31 	b.w	8001dd8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001376:	4ba0      	ldr	r3, [pc, #640]	; (80015f8 <HAL_RCC_OscConfig+0x63c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	691b      	ldr	r3, [r3, #16]
 8001384:	21f8      	movs	r1, #248	; 0xf8
 8001386:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800138a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800138e:	fa91 f1a1 	rbit	r1, r1
 8001392:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001396:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800139a:	fab1 f181 	clz	r1, r1
 800139e:	b2c9      	uxtb	r1, r1
 80013a0:	408b      	lsls	r3, r1
 80013a2:	4995      	ldr	r1, [pc, #596]	; (80015f8 <HAL_RCC_OscConfig+0x63c>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a8:	e0f5      	b.n	8001596 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 8085 	beq.w	80014c0 <HAL_RCC_OscConfig+0x504>
 80013b6:	2301      	movs	r3, #1
 80013b8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013bc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80013c0:	fa93 f3a3 	rbit	r3, r3
 80013c4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80013c8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013cc:	fab3 f383 	clz	r3, r3
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	461a      	mov	r2, r3
 80013de:	2301      	movs	r3, #1
 80013e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e2:	f7ff faf9 	bl	80009d8 <HAL_GetTick>
 80013e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ea:	e00a      	b.n	8001402 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ec:	f7ff faf4 	bl	80009d8 <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d902      	bls.n	8001402 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	f000 bceb 	b.w	8001dd8 <HAL_RCC_OscConfig+0xe1c>
 8001402:	2302      	movs	r3, #2
 8001404:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001408:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800140c:	fa93 f3a3 	rbit	r3, r3
 8001410:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001414:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001418:	fab3 f383 	clz	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	095b      	lsrs	r3, r3, #5
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f043 0301 	orr.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b01      	cmp	r3, #1
 800142a:	d102      	bne.n	8001432 <HAL_RCC_OscConfig+0x476>
 800142c:	4b72      	ldr	r3, [pc, #456]	; (80015f8 <HAL_RCC_OscConfig+0x63c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	e013      	b.n	800145a <HAL_RCC_OscConfig+0x49e>
 8001432:	2302      	movs	r3, #2
 8001434:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001438:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800143c:	fa93 f3a3 	rbit	r3, r3
 8001440:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001444:	2302      	movs	r3, #2
 8001446:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800144a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800144e:	fa93 f3a3 	rbit	r3, r3
 8001452:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001456:	4b68      	ldr	r3, [pc, #416]	; (80015f8 <HAL_RCC_OscConfig+0x63c>)
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	2202      	movs	r2, #2
 800145c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001460:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001464:	fa92 f2a2 	rbit	r2, r2
 8001468:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 800146c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001470:	fab2 f282 	clz	r2, r2
 8001474:	b2d2      	uxtb	r2, r2
 8001476:	f042 0220 	orr.w	r2, r2, #32
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	f002 021f 	and.w	r2, r2, #31
 8001480:	2101      	movs	r1, #1
 8001482:	fa01 f202 	lsl.w	r2, r1, r2
 8001486:	4013      	ands	r3, r2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0af      	beq.n	80013ec <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800148c:	4b5a      	ldr	r3, [pc, #360]	; (80015f8 <HAL_RCC_OscConfig+0x63c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001494:	1d3b      	adds	r3, r7, #4
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	21f8      	movs	r1, #248	; 0xf8
 800149c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80014a4:	fa91 f1a1 	rbit	r1, r1
 80014a8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80014ac:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80014b0:	fab1 f181 	clz	r1, r1
 80014b4:	b2c9      	uxtb	r1, r1
 80014b6:	408b      	lsls	r3, r1
 80014b8:	494f      	ldr	r1, [pc, #316]	; (80015f8 <HAL_RCC_OscConfig+0x63c>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]
 80014be:	e06a      	b.n	8001596 <HAL_RCC_OscConfig+0x5da>
 80014c0:	2301      	movs	r3, #1
 80014c2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80014ca:	fa93 f3a3 	rbit	r3, r3
 80014ce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80014d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014d6:	fab3 f383 	clz	r3, r3
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	461a      	mov	r2, r3
 80014e8:	2300      	movs	r3, #0
 80014ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fa74 	bl	80009d8 <HAL_GetTick>
 80014f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014f6:	f7ff fa6f 	bl	80009d8 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d902      	bls.n	800150c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	f000 bc66 	b.w	8001dd8 <HAL_RCC_OscConfig+0xe1c>
 800150c:	2302      	movs	r3, #2
 800150e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800151e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	095b      	lsrs	r3, r3, #5
 800152a:	b2db      	uxtb	r3, r3
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b01      	cmp	r3, #1
 8001534:	d102      	bne.n	800153c <HAL_RCC_OscConfig+0x580>
 8001536:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <HAL_RCC_OscConfig+0x63c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	e013      	b.n	8001564 <HAL_RCC_OscConfig+0x5a8>
 800153c:	2302      	movs	r3, #2
 800153e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001542:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001546:	fa93 f3a3 	rbit	r3, r3
 800154a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800154e:	2302      	movs	r3, #2
 8001550:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001554:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001558:	fa93 f3a3 	rbit	r3, r3
 800155c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001560:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <HAL_RCC_OscConfig+0x63c>)
 8001562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001564:	2202      	movs	r2, #2
 8001566:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800156a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800156e:	fa92 f2a2 	rbit	r2, r2
 8001572:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001576:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800157a:	fab2 f282 	clz	r2, r2
 800157e:	b2d2      	uxtb	r2, r2
 8001580:	f042 0220 	orr.w	r2, r2, #32
 8001584:	b2d2      	uxtb	r2, r2
 8001586:	f002 021f 	and.w	r2, r2, #31
 800158a:	2101      	movs	r1, #1
 800158c:	fa01 f202 	lsl.w	r2, r1, r2
 8001590:	4013      	ands	r3, r2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1af      	bne.n	80014f6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f000 80da 	beq.w	800175a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d069      	beq.n	8001684 <HAL_RCC_OscConfig+0x6c8>
 80015b0:	2301      	movs	r3, #1
 80015b2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80015ba:	fa93 f3a3 	rbit	r3, r3
 80015be:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80015c2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c6:	fab3 f383 	clz	r3, r3
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <HAL_RCC_OscConfig+0x640>)
 80015d0:	4413      	add	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	461a      	mov	r2, r3
 80015d6:	2301      	movs	r3, #1
 80015d8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015da:	f7ff f9fd 	bl	80009d8 <HAL_GetTick>
 80015de:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e2:	e00d      	b.n	8001600 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015e4:	f7ff f9f8 	bl	80009d8 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d905      	bls.n	8001600 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e3ef      	b.n	8001dd8 <HAL_RCC_OscConfig+0xe1c>
 80015f8:	40021000 	.word	0x40021000
 80015fc:	10908120 	.word	0x10908120
 8001600:	2302      	movs	r3, #2
 8001602:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001606:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800160a:	fa93 f2a3 	rbit	r2, r3
 800160e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001618:	2202      	movs	r2, #2
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	fa93 f2a3 	rbit	r2, r3
 8001626:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001630:	2202      	movs	r2, #2
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	fa93 f2a3 	rbit	r2, r3
 800163e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001642:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001644:	4ba4      	ldr	r3, [pc, #656]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 8001646:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001648:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800164c:	2102      	movs	r1, #2
 800164e:	6019      	str	r1, [r3, #0]
 8001650:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	fa93 f1a3 	rbit	r1, r3
 800165a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800165e:	6019      	str	r1, [r3, #0]
  return result;
 8001660:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	fab3 f383 	clz	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001670:	b2db      	uxtb	r3, r3
 8001672:	f003 031f 	and.w	r3, r3, #31
 8001676:	2101      	movs	r1, #1
 8001678:	fa01 f303 	lsl.w	r3, r1, r3
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0b0      	beq.n	80015e4 <HAL_RCC_OscConfig+0x628>
 8001682:	e06a      	b.n	800175a <HAL_RCC_OscConfig+0x79e>
 8001684:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800168c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	fa93 f2a3 	rbit	r2, r3
 8001696:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800169a:	601a      	str	r2, [r3, #0]
  return result;
 800169c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80016a0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a2:	fab3 f383 	clz	r3, r3
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b8c      	ldr	r3, [pc, #560]	; (80018dc <HAL_RCC_OscConfig+0x920>)
 80016ac:	4413      	add	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	461a      	mov	r2, r3
 80016b2:	2300      	movs	r3, #0
 80016b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b6:	f7ff f98f 	bl	80009d8 <HAL_GetTick>
 80016ba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016be:	e009      	b.n	80016d4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80016c0:	f7ff f98a 	bl	80009d8 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e381      	b.n	8001dd8 <HAL_RCC_OscConfig+0xe1c>
 80016d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016d8:	2202      	movs	r2, #2
 80016da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016dc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	fa93 f2a3 	rbit	r2, r3
 80016e6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016f0:	2202      	movs	r2, #2
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	fa93 f2a3 	rbit	r2, r3
 80016fe:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001708:	2202      	movs	r2, #2
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	fa93 f2a3 	rbit	r2, r3
 8001716:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800171a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800171c:	4b6e      	ldr	r3, [pc, #440]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 800171e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001720:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001724:	2102      	movs	r1, #2
 8001726:	6019      	str	r1, [r3, #0]
 8001728:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	fa93 f1a3 	rbit	r1, r3
 8001732:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001736:	6019      	str	r1, [r3, #0]
  return result;
 8001738:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	fab3 f383 	clz	r3, r3
 8001742:	b2db      	uxtb	r3, r3
 8001744:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	2101      	movs	r1, #1
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	4013      	ands	r3, r2
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1b2      	bne.n	80016c0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800175a:	1d3b      	adds	r3, r7, #4
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	f000 8157 	beq.w	8001a18 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800176a:	2300      	movs	r3, #0
 800176c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001770:	4b59      	ldr	r3, [pc, #356]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d112      	bne.n	80017a2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800177c:	4b56      	ldr	r3, [pc, #344]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 800177e:	69db      	ldr	r3, [r3, #28]
 8001780:	4a55      	ldr	r2, [pc, #340]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 8001782:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001786:	61d3      	str	r3, [r2, #28]
 8001788:	4b53      	ldr	r3, [pc, #332]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	f107 030c 	add.w	r3, r7, #12
 800179a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800179c:	2301      	movs	r3, #1
 800179e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a2:	4b4f      	ldr	r3, [pc, #316]	; (80018e0 <HAL_RCC_OscConfig+0x924>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d11a      	bne.n	80017e4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ae:	4b4c      	ldr	r3, [pc, #304]	; (80018e0 <HAL_RCC_OscConfig+0x924>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a4b      	ldr	r2, [pc, #300]	; (80018e0 <HAL_RCC_OscConfig+0x924>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ba:	f7ff f90d 	bl	80009d8 <HAL_GetTick>
 80017be:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c2:	e009      	b.n	80017d8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c4:	f7ff f908 	bl	80009d8 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b64      	cmp	r3, #100	; 0x64
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e2ff      	b.n	8001dd8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d8:	4b41      	ldr	r3, [pc, #260]	; (80018e0 <HAL_RCC_OscConfig+0x924>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d0ef      	beq.n	80017c4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e4:	1d3b      	adds	r3, r7, #4
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d106      	bne.n	80017fc <HAL_RCC_OscConfig+0x840>
 80017ee:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 80017f0:	6a1b      	ldr	r3, [r3, #32]
 80017f2:	4a39      	ldr	r2, [pc, #228]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6213      	str	r3, [r2, #32]
 80017fa:	e02f      	b.n	800185c <HAL_RCC_OscConfig+0x8a0>
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d10c      	bne.n	8001820 <HAL_RCC_OscConfig+0x864>
 8001806:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	4a33      	ldr	r2, [pc, #204]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6213      	str	r3, [r2, #32]
 8001812:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	4a30      	ldr	r2, [pc, #192]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 8001818:	f023 0304 	bic.w	r3, r3, #4
 800181c:	6213      	str	r3, [r2, #32]
 800181e:	e01d      	b.n	800185c <HAL_RCC_OscConfig+0x8a0>
 8001820:	1d3b      	adds	r3, r7, #4
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	2b05      	cmp	r3, #5
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0x888>
 800182a:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 800182c:	6a1b      	ldr	r3, [r3, #32]
 800182e:	4a2a      	ldr	r2, [pc, #168]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	6213      	str	r3, [r2, #32]
 8001836:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	6213      	str	r3, [r2, #32]
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0x8a0>
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 8001846:	6a1b      	ldr	r3, [r3, #32]
 8001848:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 800184a:	f023 0301 	bic.w	r3, r3, #1
 800184e:	6213      	str	r3, [r2, #32]
 8001850:	4b21      	ldr	r3, [pc, #132]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 8001852:	6a1b      	ldr	r3, [r3, #32]
 8001854:	4a20      	ldr	r2, [pc, #128]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 8001856:	f023 0304 	bic.w	r3, r3, #4
 800185a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800185c:	1d3b      	adds	r3, r7, #4
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d06a      	beq.n	800193c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff f8b7 	bl	80009d8 <HAL_GetTick>
 800186a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186e:	e00b      	b.n	8001888 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001870:	f7ff f8b2 	bl	80009d8 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001880:	4293      	cmp	r3, r2
 8001882:	d901      	bls.n	8001888 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	e2a7      	b.n	8001dd8 <HAL_RCC_OscConfig+0xe1c>
 8001888:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800188c:	2202      	movs	r2, #2
 800188e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	fa93 f2a3 	rbit	r2, r3
 800189a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80018a4:	2202      	movs	r2, #2
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	fa93 f2a3 	rbit	r2, r3
 80018b2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80018b6:	601a      	str	r2, [r3, #0]
  return result;
 80018b8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80018bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018be:	fab3 f383 	clz	r3, r3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	095b      	lsrs	r3, r3, #5
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	f043 0302 	orr.w	r3, r3, #2
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d108      	bne.n	80018e4 <HAL_RCC_OscConfig+0x928>
 80018d2:	4b01      	ldr	r3, [pc, #4]	; (80018d8 <HAL_RCC_OscConfig+0x91c>)
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	e013      	b.n	8001900 <HAL_RCC_OscConfig+0x944>
 80018d8:	40021000 	.word	0x40021000
 80018dc:	10908120 	.word	0x10908120
 80018e0:	40007000 	.word	0x40007000
 80018e4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80018e8:	2202      	movs	r2, #2
 80018ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ec:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	4bc0      	ldr	r3, [pc, #768]	; (8001c00 <HAL_RCC_OscConfig+0xc44>)
 80018fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001900:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001904:	2102      	movs	r1, #2
 8001906:	6011      	str	r1, [r2, #0]
 8001908:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	fa92 f1a2 	rbit	r1, r2
 8001912:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001916:	6011      	str	r1, [r2, #0]
  return result;
 8001918:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800191c:	6812      	ldr	r2, [r2, #0]
 800191e:	fab2 f282 	clz	r2, r2
 8001922:	b2d2      	uxtb	r2, r2
 8001924:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	f002 021f 	and.w	r2, r2, #31
 800192e:	2101      	movs	r1, #1
 8001930:	fa01 f202 	lsl.w	r2, r1, r2
 8001934:	4013      	ands	r3, r2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d09a      	beq.n	8001870 <HAL_RCC_OscConfig+0x8b4>
 800193a:	e063      	b.n	8001a04 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193c:	f7ff f84c 	bl	80009d8 <HAL_GetTick>
 8001940:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001944:	e00b      	b.n	800195e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7ff f847 	bl	80009d8 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f241 3288 	movw	r2, #5000	; 0x1388
 8001956:	4293      	cmp	r3, r2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e23c      	b.n	8001dd8 <HAL_RCC_OscConfig+0xe1c>
 800195e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001962:	2202      	movs	r2, #2
 8001964:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	fa93 f2a3 	rbit	r2, r3
 8001970:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800197a:	2202      	movs	r2, #2
 800197c:	601a      	str	r2, [r3, #0]
 800197e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	fa93 f2a3 	rbit	r2, r3
 8001988:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800198c:	601a      	str	r2, [r3, #0]
  return result;
 800198e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001992:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001994:	fab3 f383 	clz	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	095b      	lsrs	r3, r3, #5
 800199c:	b2db      	uxtb	r3, r3
 800199e:	f043 0302 	orr.w	r3, r3, #2
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d102      	bne.n	80019ae <HAL_RCC_OscConfig+0x9f2>
 80019a8:	4b95      	ldr	r3, [pc, #596]	; (8001c00 <HAL_RCC_OscConfig+0xc44>)
 80019aa:	6a1b      	ldr	r3, [r3, #32]
 80019ac:	e00d      	b.n	80019ca <HAL_RCC_OscConfig+0xa0e>
 80019ae:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80019b2:	2202      	movs	r2, #2
 80019b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	4b8e      	ldr	r3, [pc, #568]	; (8001c00 <HAL_RCC_OscConfig+0xc44>)
 80019c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ca:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80019ce:	2102      	movs	r1, #2
 80019d0:	6011      	str	r1, [r2, #0]
 80019d2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	fa92 f1a2 	rbit	r1, r2
 80019dc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80019e0:	6011      	str	r1, [r2, #0]
  return result;
 80019e2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80019e6:	6812      	ldr	r2, [r2, #0]
 80019e8:	fab2 f282 	clz	r2, r2
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	f002 021f 	and.w	r2, r2, #31
 80019f8:	2101      	movs	r1, #1
 80019fa:	fa01 f202 	lsl.w	r2, r1, r2
 80019fe:	4013      	ands	r3, r2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1a0      	bne.n	8001946 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a04:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0c:	4b7c      	ldr	r3, [pc, #496]	; (8001c00 <HAL_RCC_OscConfig+0xc44>)
 8001a0e:	69db      	ldr	r3, [r3, #28]
 8001a10:	4a7b      	ldr	r2, [pc, #492]	; (8001c00 <HAL_RCC_OscConfig+0xc44>)
 8001a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a16:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	f000 81d9 	beq.w	8001dd6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a24:	4b76      	ldr	r3, [pc, #472]	; (8001c00 <HAL_RCC_OscConfig+0xc44>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	2b08      	cmp	r3, #8
 8001a2e:	f000 81a6 	beq.w	8001d7e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a32:	1d3b      	adds	r3, r7, #4
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	699b      	ldr	r3, [r3, #24]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	f040 811e 	bne.w	8001c7a <HAL_RCC_OscConfig+0xcbe>
 8001a3e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a48:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	fa93 f2a3 	rbit	r2, r3
 8001a52:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a56:	601a      	str	r2, [r3, #0]
  return result;
 8001a58:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a5c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	fab3 f383 	clz	r3, r3
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a68:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	461a      	mov	r2, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7fe ffb0 	bl	80009d8 <HAL_GetTick>
 8001a78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7c:	e009      	b.n	8001a92 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7e:	f7fe ffab 	bl	80009d8 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e1a2      	b.n	8001dd8 <HAL_RCC_OscConfig+0xe1c>
 8001a92:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a96:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	fa93 f2a3 	rbit	r2, r3
 8001aa6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001aaa:	601a      	str	r2, [r3, #0]
  return result;
 8001aac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001ab0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ab2:	fab3 f383 	clz	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	095b      	lsrs	r3, r3, #5
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d102      	bne.n	8001acc <HAL_RCC_OscConfig+0xb10>
 8001ac6:	4b4e      	ldr	r3, [pc, #312]	; (8001c00 <HAL_RCC_OscConfig+0xc44>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	e01b      	b.n	8001b04 <HAL_RCC_OscConfig+0xb48>
 8001acc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ad0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ad4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	fa93 f2a3 	rbit	r2, r3
 8001ae0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001aea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	fa93 f2a3 	rbit	r2, r3
 8001afa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	4b3f      	ldr	r3, [pc, #252]	; (8001c00 <HAL_RCC_OscConfig+0xc44>)
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001b08:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b0c:	6011      	str	r1, [r2, #0]
 8001b0e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001b12:	6812      	ldr	r2, [r2, #0]
 8001b14:	fa92 f1a2 	rbit	r1, r2
 8001b18:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b1c:	6011      	str	r1, [r2, #0]
  return result;
 8001b1e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001b22:	6812      	ldr	r2, [r2, #0]
 8001b24:	fab2 f282 	clz	r2, r2
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f042 0220 	orr.w	r2, r2, #32
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	f002 021f 	and.w	r2, r2, #31
 8001b34:	2101      	movs	r1, #1
 8001b36:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d19e      	bne.n	8001a7e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b40:	4b2f      	ldr	r3, [pc, #188]	; (8001c00 <HAL_RCC_OscConfig+0xc44>)
 8001b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b44:	f023 020f 	bic.w	r2, r3, #15
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	492c      	ldr	r1, [pc, #176]	; (8001c00 <HAL_RCC_OscConfig+0xc44>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001b54:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <HAL_RCC_OscConfig+0xc44>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001b5c:	1d3b      	adds	r3, r7, #4
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6a19      	ldr	r1, [r3, #32]
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	69db      	ldr	r3, [r3, #28]
 8001b68:	430b      	orrs	r3, r1
 8001b6a:	4925      	ldr	r1, [pc, #148]	; (8001c00 <HAL_RCC_OscConfig+0xc44>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
 8001b70:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b74:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	fa93 f2a3 	rbit	r2, r3
 8001b84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b88:	601a      	str	r2, [r3, #0]
  return result;
 8001b8a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001b8e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b90:	fab3 f383 	clz	r3, r3
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7fe ff17 	bl	80009d8 <HAL_GetTick>
 8001baa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001bae:	e009      	b.n	8001bc4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb0:	f7fe ff12 	bl	80009d8 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e109      	b.n	8001dd8 <HAL_RCC_OscConfig+0xe1c>
 8001bc4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bc8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	fa93 f2a3 	rbit	r2, r3
 8001bd8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001bdc:	601a      	str	r2, [r3, #0]
  return result;
 8001bde:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001be2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001be4:	fab3 f383 	clz	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d105      	bne.n	8001c04 <HAL_RCC_OscConfig+0xc48>
 8001bf8:	4b01      	ldr	r3, [pc, #4]	; (8001c00 <HAL_RCC_OscConfig+0xc44>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	e01e      	b.n	8001c3c <HAL_RCC_OscConfig+0xc80>
 8001bfe:	bf00      	nop
 8001c00:	40021000 	.word	0x40021000
 8001c04:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	fa93 f2a3 	rbit	r2, r3
 8001c18:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c22:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	fa93 f2a3 	rbit	r2, r3
 8001c32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	4b6a      	ldr	r3, [pc, #424]	; (8001de4 <HAL_RCC_OscConfig+0xe28>)
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001c40:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c44:	6011      	str	r1, [r2, #0]
 8001c46:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	fa92 f1a2 	rbit	r1, r2
 8001c50:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c54:	6011      	str	r1, [r2, #0]
  return result;
 8001c56:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c5a:	6812      	ldr	r2, [r2, #0]
 8001c5c:	fab2 f282 	clz	r2, r2
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f042 0220 	orr.w	r2, r2, #32
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	f002 021f 	and.w	r2, r2, #31
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d09b      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xbf4>
 8001c78:	e0ad      	b.n	8001dd6 <HAL_RCC_OscConfig+0xe1a>
 8001c7a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	fa93 f2a3 	rbit	r2, r3
 8001c8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c92:	601a      	str	r2, [r3, #0]
  return result;
 8001c94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c98:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c9a:	fab3 f383 	clz	r3, r3
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ca4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	461a      	mov	r2, r3
 8001cac:	2300      	movs	r3, #0
 8001cae:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7fe fe92 	bl	80009d8 <HAL_GetTick>
 8001cb4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb8:	e009      	b.n	8001cce <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cba:	f7fe fe8d 	bl	80009d8 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e084      	b.n	8001dd8 <HAL_RCC_OscConfig+0xe1c>
 8001cce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	fa93 f2a3 	rbit	r2, r3
 8001ce2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce6:	601a      	str	r2, [r3, #0]
  return result;
 8001ce8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cee:	fab3 f383 	clz	r3, r3
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	095b      	lsrs	r3, r3, #5
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d102      	bne.n	8001d08 <HAL_RCC_OscConfig+0xd4c>
 8001d02:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <HAL_RCC_OscConfig+0xe28>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	e01b      	b.n	8001d40 <HAL_RCC_OscConfig+0xd84>
 8001d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	fa93 f2a3 	rbit	r2, r3
 8001d1c:	f107 0320 	add.w	r3, r7, #32
 8001d20:	601a      	str	r2, [r3, #0]
 8001d22:	f107 031c 	add.w	r3, r7, #28
 8001d26:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	f107 031c 	add.w	r3, r7, #28
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	fa93 f2a3 	rbit	r2, r3
 8001d36:	f107 0318 	add.w	r3, r7, #24
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	4b29      	ldr	r3, [pc, #164]	; (8001de4 <HAL_RCC_OscConfig+0xe28>)
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	f107 0214 	add.w	r2, r7, #20
 8001d44:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d48:	6011      	str	r1, [r2, #0]
 8001d4a:	f107 0214 	add.w	r2, r7, #20
 8001d4e:	6812      	ldr	r2, [r2, #0]
 8001d50:	fa92 f1a2 	rbit	r1, r2
 8001d54:	f107 0210 	add.w	r2, r7, #16
 8001d58:	6011      	str	r1, [r2, #0]
  return result;
 8001d5a:	f107 0210 	add.w	r2, r7, #16
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	fab2 f282 	clz	r2, r2
 8001d64:	b2d2      	uxtb	r2, r2
 8001d66:	f042 0220 	orr.w	r2, r2, #32
 8001d6a:	b2d2      	uxtb	r2, r2
 8001d6c:	f002 021f 	and.w	r2, r2, #31
 8001d70:	2101      	movs	r1, #1
 8001d72:	fa01 f202 	lsl.w	r2, r1, r2
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d19e      	bne.n	8001cba <HAL_RCC_OscConfig+0xcfe>
 8001d7c:	e02b      	b.n	8001dd6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e025      	b.n	8001dd8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d8c:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_RCC_OscConfig+0xe28>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_RCC_OscConfig+0xe28>)
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001da0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001da4:	1d3b      	adds	r3, r7, #4
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d111      	bne.n	8001dd2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001dae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001db2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d108      	bne.n	8001dd2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001dc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dc4:	f003 020f 	and.w	r2, r3, #15
 8001dc8:	1d3b      	adds	r3, r7, #4
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d001      	beq.n	8001dd6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000

08001de8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b09e      	sub	sp, #120	; 0x78
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001df2:	2300      	movs	r3, #0
 8001df4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e162      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e00:	4b90      	ldr	r3, [pc, #576]	; (8002044 <HAL_RCC_ClockConfig+0x25c>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	683a      	ldr	r2, [r7, #0]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d910      	bls.n	8001e30 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0e:	4b8d      	ldr	r3, [pc, #564]	; (8002044 <HAL_RCC_ClockConfig+0x25c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f023 0207 	bic.w	r2, r3, #7
 8001e16:	498b      	ldr	r1, [pc, #556]	; (8002044 <HAL_RCC_ClockConfig+0x25c>)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1e:	4b89      	ldr	r3, [pc, #548]	; (8002044 <HAL_RCC_ClockConfig+0x25c>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0307 	and.w	r3, r3, #7
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e14a      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0302 	and.w	r3, r3, #2
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d008      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e3c:	4b82      	ldr	r3, [pc, #520]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	497f      	ldr	r1, [pc, #508]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80dc 	beq.w	8002014 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d13c      	bne.n	8001ede <HAL_RCC_ClockConfig+0xf6>
 8001e64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e68:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e6c:	fa93 f3a3 	rbit	r3, r3
 8001e70:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e74:	fab3 f383 	clz	r3, r3
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	095b      	lsrs	r3, r3, #5
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d102      	bne.n	8001e8e <HAL_RCC_ClockConfig+0xa6>
 8001e88:	4b6f      	ldr	r3, [pc, #444]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	e00f      	b.n	8001eae <HAL_RCC_ClockConfig+0xc6>
 8001e8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e92:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e96:	fa93 f3a3 	rbit	r3, r3
 8001e9a:	667b      	str	r3, [r7, #100]	; 0x64
 8001e9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ea0:	663b      	str	r3, [r7, #96]	; 0x60
 8001ea2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ea4:	fa93 f3a3 	rbit	r3, r3
 8001ea8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001eaa:	4b67      	ldr	r3, [pc, #412]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001eb2:	65ba      	str	r2, [r7, #88]	; 0x58
 8001eb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001eb6:	fa92 f2a2 	rbit	r2, r2
 8001eba:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001ebc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001ebe:	fab2 f282 	clz	r2, r2
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	f042 0220 	orr.w	r2, r2, #32
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	f002 021f 	and.w	r2, r2, #31
 8001ece:	2101      	movs	r1, #1
 8001ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d17b      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e0f3      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d13c      	bne.n	8001f60 <HAL_RCC_ClockConfig+0x178>
 8001ee6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eea:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eee:	fa93 f3a3 	rbit	r3, r3
 8001ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001ef4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	095b      	lsrs	r3, r3, #5
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d102      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x128>
 8001f0a:	4b4f      	ldr	r3, [pc, #316]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	e00f      	b.n	8001f30 <HAL_RCC_ClockConfig+0x148>
 8001f10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f18:	fa93 f3a3 	rbit	r3, r3
 8001f1c:	647b      	str	r3, [r7, #68]	; 0x44
 8001f1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f22:	643b      	str	r3, [r7, #64]	; 0x40
 8001f24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f2c:	4b46      	ldr	r3, [pc, #280]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f34:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f38:	fa92 f2a2 	rbit	r2, r2
 8001f3c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f40:	fab2 f282 	clz	r2, r2
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	f042 0220 	orr.w	r2, r2, #32
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	f002 021f 	and.w	r2, r2, #31
 8001f50:	2101      	movs	r1, #1
 8001f52:	fa01 f202 	lsl.w	r2, r1, r2
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d13a      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e0b2      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2de>
 8001f60:	2302      	movs	r3, #2
 8001f62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f6e:	fab3 f383 	clz	r3, r3
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	095b      	lsrs	r3, r3, #5
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	f043 0301 	orr.w	r3, r3, #1
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d102      	bne.n	8001f88 <HAL_RCC_ClockConfig+0x1a0>
 8001f82:	4b31      	ldr	r3, [pc, #196]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	e00d      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1bc>
 8001f88:	2302      	movs	r3, #2
 8001f8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f8e:	fa93 f3a3 	rbit	r3, r3
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
 8001f94:	2302      	movs	r3, #2
 8001f96:	623b      	str	r3, [r7, #32]
 8001f98:	6a3b      	ldr	r3, [r7, #32]
 8001f9a:	fa93 f3a3 	rbit	r3, r3
 8001f9e:	61fb      	str	r3, [r7, #28]
 8001fa0:	4b29      	ldr	r3, [pc, #164]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	61ba      	str	r2, [r7, #24]
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	fa92 f2a2 	rbit	r2, r2
 8001fae:	617a      	str	r2, [r7, #20]
  return result;
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	fab2 f282 	clz	r2, r2
 8001fb6:	b2d2      	uxtb	r2, r2
 8001fb8:	f042 0220 	orr.w	r2, r2, #32
 8001fbc:	b2d2      	uxtb	r2, r2
 8001fbe:	f002 021f 	and.w	r2, r2, #31
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001fc8:	4013      	ands	r3, r2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e079      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f023 0203 	bic.w	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	491a      	ldr	r1, [pc, #104]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe4:	f7fe fcf8 	bl	80009d8 <HAL_GetTick>
 8001fe8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	e00a      	b.n	8002002 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fec:	f7fe fcf4 	bl	80009d8 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e061      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_RCC_ClockConfig+0x260>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f003 020c 	and.w	r2, r3, #12
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	429a      	cmp	r2, r3
 8002012:	d1eb      	bne.n	8001fec <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <HAL_RCC_ClockConfig+0x25c>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d214      	bcs.n	800204c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_RCC_ClockConfig+0x25c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 0207 	bic.w	r2, r3, #7
 800202a:	4906      	ldr	r1, [pc, #24]	; (8002044 <HAL_RCC_ClockConfig+0x25c>)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <HAL_RCC_ClockConfig+0x25c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d005      	beq.n	800204c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e040      	b.n	80020c6 <HAL_RCC_ClockConfig+0x2de>
 8002044:	40022000 	.word	0x40022000
 8002048:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0304 	and.w	r3, r3, #4
 8002054:	2b00      	cmp	r3, #0
 8002056:	d008      	beq.n	800206a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002058:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <HAL_RCC_ClockConfig+0x2e8>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	491a      	ldr	r1, [pc, #104]	; (80020d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d009      	beq.n	800208a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002076:	4b16      	ldr	r3, [pc, #88]	; (80020d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4912      	ldr	r1, [pc, #72]	; (80020d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002086:	4313      	orrs	r3, r2
 8002088:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800208a:	f000 f829 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 800208e:	4601      	mov	r1, r0
 8002090:	4b0f      	ldr	r3, [pc, #60]	; (80020d0 <HAL_RCC_ClockConfig+0x2e8>)
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002098:	22f0      	movs	r2, #240	; 0xf0
 800209a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	fa92 f2a2 	rbit	r2, r2
 80020a2:	60fa      	str	r2, [r7, #12]
  return result;
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	fab2 f282 	clz	r2, r2
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	40d3      	lsrs	r3, r2
 80020ae:	4a09      	ldr	r2, [pc, #36]	; (80020d4 <HAL_RCC_ClockConfig+0x2ec>)
 80020b0:	5cd3      	ldrb	r3, [r2, r3]
 80020b2:	fa21 f303 	lsr.w	r3, r1, r3
 80020b6:	4a08      	ldr	r2, [pc, #32]	; (80020d8 <HAL_RCC_ClockConfig+0x2f0>)
 80020b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80020ba:	4b08      	ldr	r3, [pc, #32]	; (80020dc <HAL_RCC_ClockConfig+0x2f4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fc46 	bl	8000950 <HAL_InitTick>
  
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3778      	adds	r7, #120	; 0x78
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000
 80020d4:	08002f9c 	.word	0x08002f9c
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000004 	.word	0x20000004

080020e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b08b      	sub	sp, #44	; 0x2c
 80020e4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	2300      	movs	r3, #0
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	2300      	movs	r3, #0
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
 80020f2:	2300      	movs	r3, #0
 80020f4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80020fa:	4b2a      	ldr	r3, [pc, #168]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 030c 	and.w	r3, r3, #12
 8002106:	2b04      	cmp	r3, #4
 8002108:	d002      	beq.n	8002110 <HAL_RCC_GetSysClockFreq+0x30>
 800210a:	2b08      	cmp	r3, #8
 800210c:	d003      	beq.n	8002116 <HAL_RCC_GetSysClockFreq+0x36>
 800210e:	e03f      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002110:	4b25      	ldr	r3, [pc, #148]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002112:	623b      	str	r3, [r7, #32]
      break;
 8002114:	e03f      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800211c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002120:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	68ba      	ldr	r2, [r7, #8]
 8002124:	fa92 f2a2 	rbit	r2, r2
 8002128:	607a      	str	r2, [r7, #4]
  return result;
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	fab2 f282 	clz	r2, r2
 8002130:	b2d2      	uxtb	r2, r2
 8002132:	40d3      	lsrs	r3, r2
 8002134:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_RCC_GetSysClockFreq+0xcc>)
 8002136:	5cd3      	ldrb	r3, [r2, r3]
 8002138:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800213a:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800213c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	220f      	movs	r2, #15
 8002144:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	fa92 f2a2 	rbit	r2, r2
 800214c:	60fa      	str	r2, [r7, #12]
  return result;
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	fab2 f282 	clz	r2, r2
 8002154:	b2d2      	uxtb	r2, r2
 8002156:	40d3      	lsrs	r3, r2
 8002158:	4a15      	ldr	r2, [pc, #84]	; (80021b0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800215a:	5cd3      	ldrb	r3, [r2, r3]
 800215c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002168:	4a0f      	ldr	r2, [pc, #60]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800216a:	69bb      	ldr	r3, [r7, #24]
 800216c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	fb02 f303 	mul.w	r3, r2, r3
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
 8002178:	e007      	b.n	800218a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800217a:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	fb02 f303 	mul.w	r3, r2, r3
 8002188:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800218a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218c:	623b      	str	r3, [r7, #32]
      break;
 800218e:	e002      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002192:	623b      	str	r3, [r7, #32]
      break;
 8002194:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002196:	6a3b      	ldr	r3, [r7, #32]
}
 8002198:	4618      	mov	r0, r3
 800219a:	372c      	adds	r7, #44	; 0x2c
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	40021000 	.word	0x40021000
 80021a8:	007a1200 	.word	0x007a1200
 80021ac:	08002fb4 	.word	0x08002fb4
 80021b0:	08002fc4 	.word	0x08002fc4

080021b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b8:	4b03      	ldr	r3, [pc, #12]	; (80021c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021ba:	681b      	ldr	r3, [r3, #0]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	20000000 	.word	0x20000000

080021cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80021d2:	f7ff ffef 	bl	80021b4 <HAL_RCC_GetHCLKFreq>
 80021d6:	4601      	mov	r1, r0
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021e0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80021e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	fa92 f2a2 	rbit	r2, r2
 80021ec:	603a      	str	r2, [r7, #0]
  return result;
 80021ee:	683a      	ldr	r2, [r7, #0]
 80021f0:	fab2 f282 	clz	r2, r2
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	40d3      	lsrs	r3, r2
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <HAL_RCC_GetPCLK1Freq+0x40>)
 80021fa:	5cd3      	ldrb	r3, [r2, r3]
 80021fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002200:	4618      	mov	r0, r3
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40021000 	.word	0x40021000
 800220c:	08002fac 	.word	0x08002fac

08002210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002216:	f7ff ffcd 	bl	80021b4 <HAL_RCC_GetHCLKFreq>
 800221a:	4601      	mov	r1, r0
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002224:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002228:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	fa92 f2a2 	rbit	r2, r2
 8002230:	603a      	str	r2, [r7, #0]
  return result;
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	fab2 f282 	clz	r2, r2
 8002238:	b2d2      	uxtb	r2, r2
 800223a:	40d3      	lsrs	r3, r2
 800223c:	4a04      	ldr	r2, [pc, #16]	; (8002250 <HAL_RCC_GetPCLK2Freq+0x40>)
 800223e:	5cd3      	ldrb	r3, [r2, r3]
 8002240:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	08002fac 	.word	0x08002fac

08002254 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b092      	sub	sp, #72	; 0x48
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002272:	2b00      	cmp	r3, #0
 8002274:	f000 80d4 	beq.w	8002420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002278:	4b4e      	ldr	r3, [pc, #312]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d10e      	bne.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002284:	4b4b      	ldr	r3, [pc, #300]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002286:	69db      	ldr	r3, [r3, #28]
 8002288:	4a4a      	ldr	r2, [pc, #296]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800228e:	61d3      	str	r3, [r2, #28]
 8002290:	4b48      	ldr	r3, [pc, #288]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002298:	60bb      	str	r3, [r7, #8]
 800229a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800229c:	2301      	movs	r3, #1
 800229e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a2:	4b45      	ldr	r3, [pc, #276]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d118      	bne.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ae:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a41      	ldr	r2, [pc, #260]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ba:	f7fe fb8d 	bl	80009d8 <HAL_GetTick>
 80022be:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c0:	e008      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c2:	f7fe fb89 	bl	80009d8 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b64      	cmp	r3, #100	; 0x64
 80022ce:	d901      	bls.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e1d6      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022d4:	4b38      	ldr	r3, [pc, #224]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022e0:	4b34      	ldr	r3, [pc, #208]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 8084 	beq.w	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d07c      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002300:	4b2c      	ldr	r3, [pc, #176]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002308:	63fb      	str	r3, [r7, #60]	; 0x3c
 800230a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800230e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800231a:	fab3 f383 	clz	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	4b26      	ldr	r3, [pc, #152]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002324:	4413      	add	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	461a      	mov	r2, r3
 800232a:	2301      	movs	r3, #1
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002332:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800233c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800233e:	fab3 f383 	clz	r3, r3
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002348:	4413      	add	r3, r2
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	461a      	mov	r2, r3
 800234e:	2300      	movs	r3, #0
 8002350:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002352:	4a18      	ldr	r2, [pc, #96]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002356:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d04b      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002362:	f7fe fb39 	bl	80009d8 <HAL_GetTick>
 8002366:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002368:	e00a      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236a:	f7fe fb35 	bl	80009d8 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f241 3288 	movw	r2, #5000	; 0x1388
 8002378:	4293      	cmp	r3, r2
 800237a:	d901      	bls.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800237c:	2303      	movs	r3, #3
 800237e:	e180      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002380:	2302      	movs	r3, #2
 8002382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002386:	fa93 f3a3 	rbit	r3, r3
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
 800238c:	2302      	movs	r3, #2
 800238e:	623b      	str	r3, [r7, #32]
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	fa93 f3a3 	rbit	r3, r3
 8002396:	61fb      	str	r3, [r7, #28]
  return result;
 8002398:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800239a:	fab3 f383 	clz	r3, r3
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	095b      	lsrs	r3, r3, #5
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d108      	bne.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023ae:	4b01      	ldr	r3, [pc, #4]	; (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023b0:	6a1b      	ldr	r3, [r3, #32]
 80023b2:	e00d      	b.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40007000 	.word	0x40007000
 80023bc:	10908100 	.word	0x10908100
 80023c0:	2302      	movs	r3, #2
 80023c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	4ba0      	ldr	r3, [pc, #640]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d0:	2202      	movs	r2, #2
 80023d2:	613a      	str	r2, [r7, #16]
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	fa92 f2a2 	rbit	r2, r2
 80023da:	60fa      	str	r2, [r7, #12]
  return result;
 80023dc:	68fa      	ldr	r2, [r7, #12]
 80023de:	fab2 f282 	clz	r2, r2
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	f002 021f 	and.w	r2, r2, #31
 80023ee:	2101      	movs	r1, #1
 80023f0:	fa01 f202 	lsl.w	r2, r1, r2
 80023f4:	4013      	ands	r3, r2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0b7      	beq.n	800236a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023fa:	4b95      	ldr	r3, [pc, #596]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	4992      	ldr	r1, [pc, #584]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002408:	4313      	orrs	r3, r2
 800240a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800240c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002410:	2b01      	cmp	r3, #1
 8002412:	d105      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002414:	4b8e      	ldr	r3, [pc, #568]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002416:	69db      	ldr	r3, [r3, #28]
 8002418:	4a8d      	ldr	r2, [pc, #564]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800241a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800241e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800242c:	4b88      	ldr	r3, [pc, #544]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800242e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002430:	f023 0203 	bic.w	r2, r3, #3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4985      	ldr	r1, [pc, #532]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d008      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800244a:	4b81      	ldr	r3, [pc, #516]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800244c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	497e      	ldr	r1, [pc, #504]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002458:	4313      	orrs	r3, r2
 800245a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d008      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002468:	4b79      	ldr	r3, [pc, #484]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800246a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	4976      	ldr	r1, [pc, #472]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002476:	4313      	orrs	r3, r2
 8002478:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002486:	4b72      	ldr	r3, [pc, #456]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	f023 0210 	bic.w	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	496f      	ldr	r1, [pc, #444]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002494:	4313      	orrs	r3, r2
 8002496:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80024a4:	4b6a      	ldr	r3, [pc, #424]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024b0:	4967      	ldr	r1, [pc, #412]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024c2:	4b63      	ldr	r3, [pc, #396]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f023 0220 	bic.w	r2, r3, #32
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	4960      	ldr	r1, [pc, #384]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024e0:	4b5b      	ldr	r3, [pc, #364]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	4958      	ldr	r1, [pc, #352]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d008      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024fe:	4b54      	ldr	r3, [pc, #336]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	4951      	ldr	r1, [pc, #324]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800250c:	4313      	orrs	r3, r2
 800250e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800251c:	4b4c      	ldr	r3, [pc, #304]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	4949      	ldr	r1, [pc, #292]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800252a:	4313      	orrs	r3, r2
 800252c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002536:	2b00      	cmp	r3, #0
 8002538:	d008      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800253a:	4b45      	ldr	r3, [pc, #276]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4942      	ldr	r1, [pc, #264]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002558:	4b3d      	ldr	r3, [pc, #244]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002564:	493a      	ldr	r1, [pc, #232]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002566:	4313      	orrs	r3, r2
 8002568:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d008      	beq.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002576:	4b36      	ldr	r3, [pc, #216]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800257a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002582:	4933      	ldr	r1, [pc, #204]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002584:	4313      	orrs	r3, r2
 8002586:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002594:	4b2e      	ldr	r3, [pc, #184]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002598:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a0:	492b      	ldr	r1, [pc, #172]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d008      	beq.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80025b2:	4b27      	ldr	r3, [pc, #156]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	4924      	ldr	r1, [pc, #144]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d008      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80025d0:	4b1f      	ldr	r3, [pc, #124]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	491c      	ldr	r1, [pc, #112]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025de:	4313      	orrs	r3, r2
 80025e0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d008      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80025ee:	4b18      	ldr	r3, [pc, #96]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	4915      	ldr	r1, [pc, #84]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d008      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800260c:	4b10      	ldr	r3, [pc, #64]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800260e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002610:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002618:	490d      	ldr	r1, [pc, #52]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800261a:	4313      	orrs	r3, r2
 800261c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d008      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002636:	4906      	ldr	r1, [pc, #24]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002638:	4313      	orrs	r3, r2
 800263a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00c      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002648:	4b01      	ldr	r3, [pc, #4]	; (8002650 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	e002      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800264e:	bf00      	nop
 8002650:	40021000 	.word	0x40021000
 8002654:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800265c:	490b      	ldr	r1, [pc, #44]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800265e:	4313      	orrs	r3, r2
 8002660:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800267a:	4904      	ldr	r1, [pc, #16]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800267c:	4313      	orrs	r3, r2
 800267e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3748      	adds	r7, #72	; 0x48
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000

08002690 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e040      	b.n	8002724 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d106      	bne.n	80026b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f7fe f87e 	bl	80007b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2224      	movs	r2, #36	; 0x24
 80026bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0201 	bic.w	r2, r2, #1
 80026cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f82c 	bl	800272c <UART_SetConfig>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e022      	b.n	8002724 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d002      	beq.n	80026ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f9f6 	bl	8002ad8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800270a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 fa7d 	bl	8002c1c <UART_CheckIdleState>
 8002722:	4603      	mov	r3, r0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689a      	ldr	r2, [r3, #8]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	4313      	orrs	r3, r2
 800274e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	4bab      	ldr	r3, [pc, #684]	; (8002a04 <UART_SetConfig+0x2d8>)
 8002758:	4013      	ands	r3, r2
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	6979      	ldr	r1, [r7, #20]
 8002760:	430b      	orrs	r3, r1
 8002762:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68da      	ldr	r2, [r3, #12]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	430a      	orrs	r2, r1
 8002778:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	4313      	orrs	r3, r2
 8002788:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	430a      	orrs	r2, r1
 800279c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a99      	ldr	r2, [pc, #612]	; (8002a08 <UART_SetConfig+0x2dc>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d120      	bne.n	80027ea <UART_SetConfig+0xbe>
 80027a8:	4b98      	ldr	r3, [pc, #608]	; (8002a0c <UART_SetConfig+0x2e0>)
 80027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d817      	bhi.n	80027e4 <UART_SetConfig+0xb8>
 80027b4:	a201      	add	r2, pc, #4	; (adr r2, 80027bc <UART_SetConfig+0x90>)
 80027b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ba:	bf00      	nop
 80027bc:	080027cd 	.word	0x080027cd
 80027c0:	080027d9 	.word	0x080027d9
 80027c4:	080027df 	.word	0x080027df
 80027c8:	080027d3 	.word	0x080027d3
 80027cc:	2301      	movs	r3, #1
 80027ce:	77fb      	strb	r3, [r7, #31]
 80027d0:	e0b5      	b.n	800293e <UART_SetConfig+0x212>
 80027d2:	2302      	movs	r3, #2
 80027d4:	77fb      	strb	r3, [r7, #31]
 80027d6:	e0b2      	b.n	800293e <UART_SetConfig+0x212>
 80027d8:	2304      	movs	r3, #4
 80027da:	77fb      	strb	r3, [r7, #31]
 80027dc:	e0af      	b.n	800293e <UART_SetConfig+0x212>
 80027de:	2308      	movs	r3, #8
 80027e0:	77fb      	strb	r3, [r7, #31]
 80027e2:	e0ac      	b.n	800293e <UART_SetConfig+0x212>
 80027e4:	2310      	movs	r3, #16
 80027e6:	77fb      	strb	r3, [r7, #31]
 80027e8:	e0a9      	b.n	800293e <UART_SetConfig+0x212>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a88      	ldr	r2, [pc, #544]	; (8002a10 <UART_SetConfig+0x2e4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d124      	bne.n	800283e <UART_SetConfig+0x112>
 80027f4:	4b85      	ldr	r3, [pc, #532]	; (8002a0c <UART_SetConfig+0x2e0>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002800:	d011      	beq.n	8002826 <UART_SetConfig+0xfa>
 8002802:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002806:	d817      	bhi.n	8002838 <UART_SetConfig+0x10c>
 8002808:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800280c:	d011      	beq.n	8002832 <UART_SetConfig+0x106>
 800280e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002812:	d811      	bhi.n	8002838 <UART_SetConfig+0x10c>
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <UART_SetConfig+0xf4>
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800281c:	d006      	beq.n	800282c <UART_SetConfig+0x100>
 800281e:	e00b      	b.n	8002838 <UART_SetConfig+0x10c>
 8002820:	2300      	movs	r3, #0
 8002822:	77fb      	strb	r3, [r7, #31]
 8002824:	e08b      	b.n	800293e <UART_SetConfig+0x212>
 8002826:	2302      	movs	r3, #2
 8002828:	77fb      	strb	r3, [r7, #31]
 800282a:	e088      	b.n	800293e <UART_SetConfig+0x212>
 800282c:	2304      	movs	r3, #4
 800282e:	77fb      	strb	r3, [r7, #31]
 8002830:	e085      	b.n	800293e <UART_SetConfig+0x212>
 8002832:	2308      	movs	r3, #8
 8002834:	77fb      	strb	r3, [r7, #31]
 8002836:	e082      	b.n	800293e <UART_SetConfig+0x212>
 8002838:	2310      	movs	r3, #16
 800283a:	77fb      	strb	r3, [r7, #31]
 800283c:	e07f      	b.n	800293e <UART_SetConfig+0x212>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a74      	ldr	r2, [pc, #464]	; (8002a14 <UART_SetConfig+0x2e8>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d124      	bne.n	8002892 <UART_SetConfig+0x166>
 8002848:	4b70      	ldr	r3, [pc, #448]	; (8002a0c <UART_SetConfig+0x2e0>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002850:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002854:	d011      	beq.n	800287a <UART_SetConfig+0x14e>
 8002856:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800285a:	d817      	bhi.n	800288c <UART_SetConfig+0x160>
 800285c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002860:	d011      	beq.n	8002886 <UART_SetConfig+0x15a>
 8002862:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002866:	d811      	bhi.n	800288c <UART_SetConfig+0x160>
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <UART_SetConfig+0x148>
 800286c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002870:	d006      	beq.n	8002880 <UART_SetConfig+0x154>
 8002872:	e00b      	b.n	800288c <UART_SetConfig+0x160>
 8002874:	2300      	movs	r3, #0
 8002876:	77fb      	strb	r3, [r7, #31]
 8002878:	e061      	b.n	800293e <UART_SetConfig+0x212>
 800287a:	2302      	movs	r3, #2
 800287c:	77fb      	strb	r3, [r7, #31]
 800287e:	e05e      	b.n	800293e <UART_SetConfig+0x212>
 8002880:	2304      	movs	r3, #4
 8002882:	77fb      	strb	r3, [r7, #31]
 8002884:	e05b      	b.n	800293e <UART_SetConfig+0x212>
 8002886:	2308      	movs	r3, #8
 8002888:	77fb      	strb	r3, [r7, #31]
 800288a:	e058      	b.n	800293e <UART_SetConfig+0x212>
 800288c:	2310      	movs	r3, #16
 800288e:	77fb      	strb	r3, [r7, #31]
 8002890:	e055      	b.n	800293e <UART_SetConfig+0x212>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a60      	ldr	r2, [pc, #384]	; (8002a18 <UART_SetConfig+0x2ec>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d124      	bne.n	80028e6 <UART_SetConfig+0x1ba>
 800289c:	4b5b      	ldr	r3, [pc, #364]	; (8002a0c <UART_SetConfig+0x2e0>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80028a4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028a8:	d011      	beq.n	80028ce <UART_SetConfig+0x1a2>
 80028aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80028ae:	d817      	bhi.n	80028e0 <UART_SetConfig+0x1b4>
 80028b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028b4:	d011      	beq.n	80028da <UART_SetConfig+0x1ae>
 80028b6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80028ba:	d811      	bhi.n	80028e0 <UART_SetConfig+0x1b4>
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <UART_SetConfig+0x19c>
 80028c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028c4:	d006      	beq.n	80028d4 <UART_SetConfig+0x1a8>
 80028c6:	e00b      	b.n	80028e0 <UART_SetConfig+0x1b4>
 80028c8:	2300      	movs	r3, #0
 80028ca:	77fb      	strb	r3, [r7, #31]
 80028cc:	e037      	b.n	800293e <UART_SetConfig+0x212>
 80028ce:	2302      	movs	r3, #2
 80028d0:	77fb      	strb	r3, [r7, #31]
 80028d2:	e034      	b.n	800293e <UART_SetConfig+0x212>
 80028d4:	2304      	movs	r3, #4
 80028d6:	77fb      	strb	r3, [r7, #31]
 80028d8:	e031      	b.n	800293e <UART_SetConfig+0x212>
 80028da:	2308      	movs	r3, #8
 80028dc:	77fb      	strb	r3, [r7, #31]
 80028de:	e02e      	b.n	800293e <UART_SetConfig+0x212>
 80028e0:	2310      	movs	r3, #16
 80028e2:	77fb      	strb	r3, [r7, #31]
 80028e4:	e02b      	b.n	800293e <UART_SetConfig+0x212>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a4c      	ldr	r2, [pc, #304]	; (8002a1c <UART_SetConfig+0x2f0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d124      	bne.n	800293a <UART_SetConfig+0x20e>
 80028f0:	4b46      	ldr	r3, [pc, #280]	; (8002a0c <UART_SetConfig+0x2e0>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80028f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028fc:	d011      	beq.n	8002922 <UART_SetConfig+0x1f6>
 80028fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002902:	d817      	bhi.n	8002934 <UART_SetConfig+0x208>
 8002904:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002908:	d011      	beq.n	800292e <UART_SetConfig+0x202>
 800290a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800290e:	d811      	bhi.n	8002934 <UART_SetConfig+0x208>
 8002910:	2b00      	cmp	r3, #0
 8002912:	d003      	beq.n	800291c <UART_SetConfig+0x1f0>
 8002914:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002918:	d006      	beq.n	8002928 <UART_SetConfig+0x1fc>
 800291a:	e00b      	b.n	8002934 <UART_SetConfig+0x208>
 800291c:	2300      	movs	r3, #0
 800291e:	77fb      	strb	r3, [r7, #31]
 8002920:	e00d      	b.n	800293e <UART_SetConfig+0x212>
 8002922:	2302      	movs	r3, #2
 8002924:	77fb      	strb	r3, [r7, #31]
 8002926:	e00a      	b.n	800293e <UART_SetConfig+0x212>
 8002928:	2304      	movs	r3, #4
 800292a:	77fb      	strb	r3, [r7, #31]
 800292c:	e007      	b.n	800293e <UART_SetConfig+0x212>
 800292e:	2308      	movs	r3, #8
 8002930:	77fb      	strb	r3, [r7, #31]
 8002932:	e004      	b.n	800293e <UART_SetConfig+0x212>
 8002934:	2310      	movs	r3, #16
 8002936:	77fb      	strb	r3, [r7, #31]
 8002938:	e001      	b.n	800293e <UART_SetConfig+0x212>
 800293a:	2310      	movs	r3, #16
 800293c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002946:	d16d      	bne.n	8002a24 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8002948:	7ffb      	ldrb	r3, [r7, #31]
 800294a:	2b08      	cmp	r3, #8
 800294c:	d827      	bhi.n	800299e <UART_SetConfig+0x272>
 800294e:	a201      	add	r2, pc, #4	; (adr r2, 8002954 <UART_SetConfig+0x228>)
 8002950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002954:	08002979 	.word	0x08002979
 8002958:	08002981 	.word	0x08002981
 800295c:	08002989 	.word	0x08002989
 8002960:	0800299f 	.word	0x0800299f
 8002964:	0800298f 	.word	0x0800298f
 8002968:	0800299f 	.word	0x0800299f
 800296c:	0800299f 	.word	0x0800299f
 8002970:	0800299f 	.word	0x0800299f
 8002974:	08002997 	.word	0x08002997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002978:	f7ff fc28 	bl	80021cc <HAL_RCC_GetPCLK1Freq>
 800297c:	61b8      	str	r0, [r7, #24]
        break;
 800297e:	e013      	b.n	80029a8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002980:	f7ff fc46 	bl	8002210 <HAL_RCC_GetPCLK2Freq>
 8002984:	61b8      	str	r0, [r7, #24]
        break;
 8002986:	e00f      	b.n	80029a8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002988:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <UART_SetConfig+0x2f4>)
 800298a:	61bb      	str	r3, [r7, #24]
        break;
 800298c:	e00c      	b.n	80029a8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800298e:	f7ff fba7 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8002992:	61b8      	str	r0, [r7, #24]
        break;
 8002994:	e008      	b.n	80029a8 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800299a:	61bb      	str	r3, [r7, #24]
        break;
 800299c:	e004      	b.n	80029a8 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 800299e:	2300      	movs	r3, #0
 80029a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	77bb      	strb	r3, [r7, #30]
        break;
 80029a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 8086 	beq.w	8002abc <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	005a      	lsls	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	441a      	add	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b0f      	cmp	r3, #15
 80029cc:	d916      	bls.n	80029fc <UART_SetConfig+0x2d0>
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d4:	d212      	bcs.n	80029fc <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f023 030f 	bic.w	r3, r3, #15
 80029de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	085b      	lsrs	r3, r3, #1
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	f003 0307 	and.w	r3, r3, #7
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	89fb      	ldrh	r3, [r7, #14]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	89fa      	ldrh	r2, [r7, #14]
 80029f8:	60da      	str	r2, [r3, #12]
 80029fa:	e05f      	b.n	8002abc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	77bb      	strb	r3, [r7, #30]
 8002a00:	e05c      	b.n	8002abc <UART_SetConfig+0x390>
 8002a02:	bf00      	nop
 8002a04:	efff69f3 	.word	0xefff69f3
 8002a08:	40013800 	.word	0x40013800
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	40004400 	.word	0x40004400
 8002a14:	40004800 	.word	0x40004800
 8002a18:	40004c00 	.word	0x40004c00
 8002a1c:	40005000 	.word	0x40005000
 8002a20:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a24:	7ffb      	ldrb	r3, [r7, #31]
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d827      	bhi.n	8002a7a <UART_SetConfig+0x34e>
 8002a2a:	a201      	add	r2, pc, #4	; (adr r2, 8002a30 <UART_SetConfig+0x304>)
 8002a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a30:	08002a55 	.word	0x08002a55
 8002a34:	08002a5d 	.word	0x08002a5d
 8002a38:	08002a65 	.word	0x08002a65
 8002a3c:	08002a7b 	.word	0x08002a7b
 8002a40:	08002a6b 	.word	0x08002a6b
 8002a44:	08002a7b 	.word	0x08002a7b
 8002a48:	08002a7b 	.word	0x08002a7b
 8002a4c:	08002a7b 	.word	0x08002a7b
 8002a50:	08002a73 	.word	0x08002a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a54:	f7ff fbba 	bl	80021cc <HAL_RCC_GetPCLK1Freq>
 8002a58:	61b8      	str	r0, [r7, #24]
        break;
 8002a5a:	e013      	b.n	8002a84 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a5c:	f7ff fbd8 	bl	8002210 <HAL_RCC_GetPCLK2Freq>
 8002a60:	61b8      	str	r0, [r7, #24]
        break;
 8002a62:	e00f      	b.n	8002a84 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a64:	4b1b      	ldr	r3, [pc, #108]	; (8002ad4 <UART_SetConfig+0x3a8>)
 8002a66:	61bb      	str	r3, [r7, #24]
        break;
 8002a68:	e00c      	b.n	8002a84 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a6a:	f7ff fb39 	bl	80020e0 <HAL_RCC_GetSysClockFreq>
 8002a6e:	61b8      	str	r0, [r7, #24]
        break;
 8002a70:	e008      	b.n	8002a84 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a76:	61bb      	str	r3, [r7, #24]
        break;
 8002a78:	e004      	b.n	8002a84 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	77bb      	strb	r3, [r7, #30]
        break;
 8002a82:	bf00      	nop
    }

    if (pclk != 0U)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d018      	beq.n	8002abc <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	085a      	lsrs	r2, r3, #1
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	441a      	add	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	2b0f      	cmp	r3, #15
 8002aa4:	d908      	bls.n	8002ab8 <UART_SetConfig+0x38c>
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d204      	bcs.n	8002ab8 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	e001      	b.n	8002abc <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002ac8:	7fbb      	ldrb	r3, [r7, #30]
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	007a1200 	.word	0x007a1200

08002ad8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00a      	beq.n	8002b02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	f003 0304 	and.w	r3, r3, #4
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d00a      	beq.n	8002b46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00a      	beq.n	8002b68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	430a      	orrs	r2, r1
 8002b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	f003 0310 	and.w	r3, r3, #16
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d00a      	beq.n	8002b8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	430a      	orrs	r2, r1
 8002b88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	f003 0320 	and.w	r3, r3, #32
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d00a      	beq.n	8002bac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	430a      	orrs	r2, r1
 8002baa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01a      	beq.n	8002bee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bd6:	d10a      	bne.n	8002bee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	605a      	str	r2, [r3, #4]
  }
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c2c:	f7fd fed4 	bl	80009d8 <HAL_GetTick>
 8002c30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	2b08      	cmp	r3, #8
 8002c3e:	d10e      	bne.n	8002c5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f82d 	bl	8002cae <UART_WaitOnFlagUntilTimeout>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e023      	b.n	8002ca6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d10e      	bne.n	8002c8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c70:	9300      	str	r3, [sp, #0]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f817 	bl	8002cae <UART_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e00d      	b.n	8002ca6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2220      	movs	r2, #32
 8002c8e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2220      	movs	r2, #32
 8002c94:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b09c      	sub	sp, #112	; 0x70
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cbe:	e0a5      	b.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc6:	f000 80a1 	beq.w	8002e0c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cca:	f7fd fe85 	bl	80009d8 <HAL_GetTick>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	1ad3      	subs	r3, r2, r3
 8002cd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d302      	bcc.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x32>
 8002cda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d13e      	bne.n	8002d5e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce8:	e853 3f00 	ldrex	r3, [r3]
 8002cec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002cf4:	667b      	str	r3, [r7, #100]	; 0x64
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d00:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d06:	e841 2300 	strex	r3, r2, [r1]
 8002d0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1e6      	bne.n	8002ce0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3308      	adds	r3, #8
 8002d18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d1c:	e853 3f00 	ldrex	r3, [r3]
 8002d20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	663b      	str	r3, [r7, #96]	; 0x60
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3308      	adds	r3, #8
 8002d30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d32:	64ba      	str	r2, [r7, #72]	; 0x48
 8002d34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d3a:	e841 2300 	strex	r3, r2, [r1]
 8002d3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1e5      	bne.n	8002d12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2220      	movs	r2, #32
 8002d4a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e067      	b.n	8002e2e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d04f      	beq.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d7a:	d147      	bne.n	8002e0c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d84:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	e853 3f00 	ldrex	r3, [r3]
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d96:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	461a      	mov	r2, r3
 8002da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da4:	637b      	str	r3, [r7, #52]	; 0x34
 8002da6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002daa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dac:	e841 2300 	strex	r3, r2, [r1]
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002db2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1e6      	bne.n	8002d86 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3308      	adds	r3, #8
 8002dbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	e853 3f00 	ldrex	r3, [r3]
 8002dc6:	613b      	str	r3, [r7, #16]
   return(result);
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f023 0301 	bic.w	r3, r3, #1
 8002dce:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	3308      	adds	r3, #8
 8002dd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002dd8:	623a      	str	r2, [r7, #32]
 8002dda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ddc:	69f9      	ldr	r1, [r7, #28]
 8002dde:	6a3a      	ldr	r2, [r7, #32]
 8002de0:	e841 2300 	strex	r3, r2, [r1]
 8002de4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1e5      	bne.n	8002db8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2220      	movs	r2, #32
 8002df6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2220      	movs	r2, #32
 8002dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e010      	b.n	8002e2e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	69da      	ldr	r2, [r3, #28]
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4013      	ands	r3, r2
 8002e16:	68ba      	ldr	r2, [r7, #8]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	f43f af4a 	beq.w	8002cc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3770      	adds	r7, #112	; 0x70
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <_ZdlPvj>:
 8002e36:	f000 b800 	b.w	8002e3a <_ZdlPv>

08002e3a <_ZdlPv>:
 8002e3a:	f000 b825 	b.w	8002e88 <free>
	...

08002e40 <__libc_init_array>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	4d0d      	ldr	r5, [pc, #52]	; (8002e78 <__libc_init_array+0x38>)
 8002e44:	4c0d      	ldr	r4, [pc, #52]	; (8002e7c <__libc_init_array+0x3c>)
 8002e46:	1b64      	subs	r4, r4, r5
 8002e48:	10a4      	asrs	r4, r4, #2
 8002e4a:	2600      	movs	r6, #0
 8002e4c:	42a6      	cmp	r6, r4
 8002e4e:	d109      	bne.n	8002e64 <__libc_init_array+0x24>
 8002e50:	4d0b      	ldr	r5, [pc, #44]	; (8002e80 <__libc_init_array+0x40>)
 8002e52:	4c0c      	ldr	r4, [pc, #48]	; (8002e84 <__libc_init_array+0x44>)
 8002e54:	f000 f886 	bl	8002f64 <_init>
 8002e58:	1b64      	subs	r4, r4, r5
 8002e5a:	10a4      	asrs	r4, r4, #2
 8002e5c:	2600      	movs	r6, #0
 8002e5e:	42a6      	cmp	r6, r4
 8002e60:	d105      	bne.n	8002e6e <__libc_init_array+0x2e>
 8002e62:	bd70      	pop	{r4, r5, r6, pc}
 8002e64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e68:	4798      	blx	r3
 8002e6a:	3601      	adds	r6, #1
 8002e6c:	e7ee      	b.n	8002e4c <__libc_init_array+0xc>
 8002e6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e72:	4798      	blx	r3
 8002e74:	3601      	adds	r6, #1
 8002e76:	e7f2      	b.n	8002e5e <__libc_init_array+0x1e>
 8002e78:	08002fd4 	.word	0x08002fd4
 8002e7c:	08002fd4 	.word	0x08002fd4
 8002e80:	08002fd4 	.word	0x08002fd4
 8002e84:	08002fe0 	.word	0x08002fe0

08002e88 <free>:
 8002e88:	4b02      	ldr	r3, [pc, #8]	; (8002e94 <free+0xc>)
 8002e8a:	4601      	mov	r1, r0
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	f000 b80b 	b.w	8002ea8 <_free_r>
 8002e92:	bf00      	nop
 8002e94:	2000000c 	.word	0x2000000c

08002e98 <memset>:
 8002e98:	4402      	add	r2, r0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d100      	bne.n	8002ea2 <memset+0xa>
 8002ea0:	4770      	bx	lr
 8002ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ea6:	e7f9      	b.n	8002e9c <memset+0x4>

08002ea8 <_free_r>:
 8002ea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002eaa:	2900      	cmp	r1, #0
 8002eac:	d048      	beq.n	8002f40 <_free_r+0x98>
 8002eae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eb2:	9001      	str	r0, [sp, #4]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	f1a1 0404 	sub.w	r4, r1, #4
 8002eba:	bfb8      	it	lt
 8002ebc:	18e4      	addlt	r4, r4, r3
 8002ebe:	f000 f843 	bl	8002f48 <__malloc_lock>
 8002ec2:	4a20      	ldr	r2, [pc, #128]	; (8002f44 <_free_r+0x9c>)
 8002ec4:	9801      	ldr	r0, [sp, #4]
 8002ec6:	6813      	ldr	r3, [r2, #0]
 8002ec8:	4615      	mov	r5, r2
 8002eca:	b933      	cbnz	r3, 8002eda <_free_r+0x32>
 8002ecc:	6063      	str	r3, [r4, #4]
 8002ece:	6014      	str	r4, [r2, #0]
 8002ed0:	b003      	add	sp, #12
 8002ed2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002ed6:	f000 b83d 	b.w	8002f54 <__malloc_unlock>
 8002eda:	42a3      	cmp	r3, r4
 8002edc:	d90b      	bls.n	8002ef6 <_free_r+0x4e>
 8002ede:	6821      	ldr	r1, [r4, #0]
 8002ee0:	1862      	adds	r2, r4, r1
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	bf04      	itt	eq
 8002ee6:	681a      	ldreq	r2, [r3, #0]
 8002ee8:	685b      	ldreq	r3, [r3, #4]
 8002eea:	6063      	str	r3, [r4, #4]
 8002eec:	bf04      	itt	eq
 8002eee:	1852      	addeq	r2, r2, r1
 8002ef0:	6022      	streq	r2, [r4, #0]
 8002ef2:	602c      	str	r4, [r5, #0]
 8002ef4:	e7ec      	b.n	8002ed0 <_free_r+0x28>
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	b10b      	cbz	r3, 8002f00 <_free_r+0x58>
 8002efc:	42a3      	cmp	r3, r4
 8002efe:	d9fa      	bls.n	8002ef6 <_free_r+0x4e>
 8002f00:	6811      	ldr	r1, [r2, #0]
 8002f02:	1855      	adds	r5, r2, r1
 8002f04:	42a5      	cmp	r5, r4
 8002f06:	d10b      	bne.n	8002f20 <_free_r+0x78>
 8002f08:	6824      	ldr	r4, [r4, #0]
 8002f0a:	4421      	add	r1, r4
 8002f0c:	1854      	adds	r4, r2, r1
 8002f0e:	42a3      	cmp	r3, r4
 8002f10:	6011      	str	r1, [r2, #0]
 8002f12:	d1dd      	bne.n	8002ed0 <_free_r+0x28>
 8002f14:	681c      	ldr	r4, [r3, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	6053      	str	r3, [r2, #4]
 8002f1a:	4421      	add	r1, r4
 8002f1c:	6011      	str	r1, [r2, #0]
 8002f1e:	e7d7      	b.n	8002ed0 <_free_r+0x28>
 8002f20:	d902      	bls.n	8002f28 <_free_r+0x80>
 8002f22:	230c      	movs	r3, #12
 8002f24:	6003      	str	r3, [r0, #0]
 8002f26:	e7d3      	b.n	8002ed0 <_free_r+0x28>
 8002f28:	6825      	ldr	r5, [r4, #0]
 8002f2a:	1961      	adds	r1, r4, r5
 8002f2c:	428b      	cmp	r3, r1
 8002f2e:	bf04      	itt	eq
 8002f30:	6819      	ldreq	r1, [r3, #0]
 8002f32:	685b      	ldreq	r3, [r3, #4]
 8002f34:	6063      	str	r3, [r4, #4]
 8002f36:	bf04      	itt	eq
 8002f38:	1949      	addeq	r1, r1, r5
 8002f3a:	6021      	streq	r1, [r4, #0]
 8002f3c:	6054      	str	r4, [r2, #4]
 8002f3e:	e7c7      	b.n	8002ed0 <_free_r+0x28>
 8002f40:	b003      	add	sp, #12
 8002f42:	bd30      	pop	{r4, r5, pc}
 8002f44:	20000168 	.word	0x20000168

08002f48 <__malloc_lock>:
 8002f48:	4801      	ldr	r0, [pc, #4]	; (8002f50 <__malloc_lock+0x8>)
 8002f4a:	f000 b809 	b.w	8002f60 <__retarget_lock_acquire_recursive>
 8002f4e:	bf00      	nop
 8002f50:	20000174 	.word	0x20000174

08002f54 <__malloc_unlock>:
 8002f54:	4801      	ldr	r0, [pc, #4]	; (8002f5c <__malloc_unlock+0x8>)
 8002f56:	f000 b804 	b.w	8002f62 <__retarget_lock_release_recursive>
 8002f5a:	bf00      	nop
 8002f5c:	20000174 	.word	0x20000174

08002f60 <__retarget_lock_acquire_recursive>:
 8002f60:	4770      	bx	lr

08002f62 <__retarget_lock_release_recursive>:
 8002f62:	4770      	bx	lr

08002f64 <_init>:
 8002f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f66:	bf00      	nop
 8002f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f6a:	bc08      	pop	{r3}
 8002f6c:	469e      	mov	lr, r3
 8002f6e:	4770      	bx	lr

08002f70 <_fini>:
 8002f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f72:	bf00      	nop
 8002f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f76:	bc08      	pop	{r3}
 8002f78:	469e      	mov	lr, r3
 8002f7a:	4770      	bx	lr
