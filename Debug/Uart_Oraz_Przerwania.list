
Uart_Oraz_Przerwania.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004180  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004314  08004314  00014314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043a0  080043a0  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080043a0  080043a0  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043a0  080043a0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080043a0  080043a0  000143a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  080043ac  080043ac  000143ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080043b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000074  0800442c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  0800442c  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010a33  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f8c  00000000  00000000  00030ad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  00033a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  000344e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a62  00000000  00000000  00034e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e923  00000000  00000000  000588c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3159  00000000  00000000  000671e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012a33e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd0  00000000  00000000  0012a394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080042fc 	.word	0x080042fc

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	080042fc 	.word	0x080042fc

080001d4 <_ZN5IGPIOC1Ev>:
 */

#ifndef INC_IGPIO_H_
#define INC_IGPIO_H_

class IGPIO {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <_ZN5IGPIOC1Ev+0x1c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4618      	mov	r0, r3
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	08004330 	.word	0x08004330

080001f4 <_ZN7CButtonC1Ev>:


#include <CButton.h>


CButton::CButton() {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4618      	mov	r0, r3
 8000200:	f7ff ffe8 	bl	80001d4 <_ZN5IGPIOC1Ev>
 8000204:	4a03      	ldr	r2, [pc, #12]	; (8000214 <_ZN7CButtonC1Ev+0x20>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4618      	mov	r0, r3
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	0800431c 	.word	0x0800431c

08000218 <_ZN7CButtonD1Ev>:

CButton::~CButton() {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	4a04      	ldr	r2, [pc, #16]	; (8000234 <_ZN7CButtonD1Ev+0x1c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4618      	mov	r0, r3
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	0800431c 	.word	0x0800431c

08000238 <_ZN7CButtonD0Ev>:
CButton::~CButton() {
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
}
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f7ff ffe9 	bl	8000218 <_ZN7CButtonD1Ev>
 8000246:	211c      	movs	r1, #28
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f003 ff5c 	bl	8004106 <_ZdlPvj>
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4618      	mov	r0, r3
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}

08000258 <_ZN7CButton4initEP12GPIO_TypeDeftm>:

void CButton::init(GPIO_TypeDef* GpioPort, uint16_t GpioPin, uint32_t timerDebounce)
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	603b      	str	r3, [r7, #0]
 8000264:	4613      	mov	r3, r2
 8000266:	80fb      	strh	r3, [r7, #6]
	this->GpioPort 	= GpioPort;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	605a      	str	r2, [r3, #4]
	this->GpioPin 	= GpioPin;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	88fa      	ldrh	r2, [r7, #6]
 8000272:	811a      	strh	r2, [r3, #8]
	m_timerDebounce = timerDebounce;
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	683a      	ldr	r2, [r7, #0]
 8000278:	611a      	str	r2, [r3, #16]
	state 			= idle;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	2200      	movs	r2, #0
 800027e:	751a      	strb	r2, [r3, #20]
}
 8000280:	bf00      	nop
 8000282:	3714      	adds	r7, #20
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr

0800028c <_ZN7CButton6updateEv>:

void CButton::update()
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	switch(state)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	7d1b      	ldrb	r3, [r3, #20]
 8000298:	2b02      	cmp	r3, #2
 800029a:	d04b      	beq.n	8000334 <_ZN7CButton6updateEv+0xa8>
 800029c:	2b02      	cmp	r3, #2
 800029e:	dc62      	bgt.n	8000366 <_ZN7CButton6updateEv+0xda>
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d002      	beq.n	80002aa <_ZN7CButton6updateEv+0x1e>
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d019      	beq.n	80002dc <_ZN7CButton6updateEv+0x50>
			{
				state = idle;
			}
			break;
	}
}
 80002a8:	e05d      	b.n	8000366 <_ZN7CButton6updateEv+0xda>
			if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	891b      	ldrh	r3, [r3, #8]
 80002b2:	4619      	mov	r1, r3
 80002b4:	4610      	mov	r0, r2
 80002b6:	f001 f98f 	bl	80015d8 <HAL_GPIO_ReadPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	bf0c      	ite	eq
 80002c0:	2301      	moveq	r3, #1
 80002c2:	2300      	movne	r3, #0
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d048      	beq.n	800035c <_ZN7CButton6updateEv+0xd0>
				state = debounce;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2201      	movs	r2, #1
 80002ce:	751a      	strb	r2, [r3, #20]
				m_lastTick = HAL_GetTick();
 80002d0:	f000 fe64 	bl	8000f9c <HAL_GetTick>
 80002d4:	4602      	mov	r2, r0
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	60da      	str	r2, [r3, #12]
			break;
 80002da:	e03f      	b.n	800035c <_ZN7CButton6updateEv+0xd0>
			if((HAL_GetTick() - m_lastTick) > m_timerDebounce)
 80002dc:	f000 fe5e 	bl	8000f9c <HAL_GetTick>
 80002e0:	4602      	mov	r2, r0
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	1ad2      	subs	r2, r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	bf8c      	ite	hi
 80002f0:	2301      	movhi	r3, #1
 80002f2:	2300      	movls	r3, #0
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d032      	beq.n	8000360 <_ZN7CButton6updateEv+0xd4>
				if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	685a      	ldr	r2, [r3, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	891b      	ldrh	r3, [r3, #8]
 8000302:	4619      	mov	r1, r3
 8000304:	4610      	mov	r0, r2
 8000306:	f001 f967 	bl	80015d8 <HAL_GPIO_ReadPin>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	bf0c      	ite	eq
 8000310:	2301      	moveq	r3, #1
 8000312:	2300      	movne	r3, #0
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d008      	beq.n	800032c <_ZN7CButton6updateEv+0xa0>
					state = pressed;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2202      	movs	r2, #2
 800031e:	751a      	strb	r2, [r3, #20]
					m_lastTick = HAL_GetTick();
 8000320:	f000 fe3c 	bl	8000f9c <HAL_GetTick>
 8000324:	4602      	mov	r2, r0
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	60da      	str	r2, [r3, #12]
			break;
 800032a:	e019      	b.n	8000360 <_ZN7CButton6updateEv+0xd4>
					state = idle;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2200      	movs	r2, #0
 8000330:	751a      	strb	r2, [r3, #20]
			break;
 8000332:	e015      	b.n	8000360 <_ZN7CButton6updateEv+0xd4>
			if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	685a      	ldr	r2, [r3, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	891b      	ldrh	r3, [r3, #8]
 800033c:	4619      	mov	r1, r3
 800033e:	4610      	mov	r0, r2
 8000340:	f001 f94a 	bl	80015d8 <HAL_GPIO_ReadPin>
 8000344:	4603      	mov	r3, r0
 8000346:	2b01      	cmp	r3, #1
 8000348:	bf0c      	ite	eq
 800034a:	2301      	moveq	r3, #1
 800034c:	2300      	movne	r3, #0
 800034e:	b2db      	uxtb	r3, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	d007      	beq.n	8000364 <_ZN7CButton6updateEv+0xd8>
				state = idle;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2200      	movs	r2, #0
 8000358:	751a      	strb	r2, [r3, #20]
			break;
 800035a:	e003      	b.n	8000364 <_ZN7CButton6updateEv+0xd8>
			break;
 800035c:	bf00      	nop
 800035e:	e002      	b.n	8000366 <_ZN7CButton6updateEv+0xda>
			break;
 8000360:	bf00      	nop
 8000362:	e000      	b.n	8000366 <_ZN7CButton6updateEv+0xda>
			break;
 8000364:	bf00      	nop
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <_ZN7CDriverC1Ev>:
CButton CDriver::m_blueButton;
CStateMachineLed CDriver::m_stateMachineLed;

const char message[] = "test\r\n";

CDriver::CDriver()
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
{
}
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4618      	mov	r0, r3
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <_ZN7CDriverD1Ev>:
CDriver::~CDriver()
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
{
}
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4618      	mov	r0, r3
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
	...

0800039c <_ZN7CDriver4initEv>:

void CDriver::init()
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	m_uartDriver.init();
 80003a4:	480d      	ldr	r0, [pc, #52]	; (80003dc <_ZN7CDriver4initEv+0x40>)
 80003a6:	f000 fb21 	bl	80009ec <_ZN11CUartDriver4initEv>

	m_greenLed.init(LD2_GPIO_Port, LD2_Pin, CLed::LedStates::toggle);
 80003aa:	2302      	movs	r3, #2
 80003ac:	2220      	movs	r2, #32
 80003ae:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <_ZN7CDriver4initEv+0x44>)
 80003b4:	f000 fa16 	bl	80007e4 <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>
	m_blueButton.init(B1_GPIO_Port, B1_Pin, 20);
 80003b8:	2314      	movs	r3, #20
 80003ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003be:	4909      	ldr	r1, [pc, #36]	; (80003e4 <_ZN7CDriver4initEv+0x48>)
 80003c0:	4809      	ldr	r0, [pc, #36]	; (80003e8 <_ZN7CDriver4initEv+0x4c>)
 80003c2:	f7ff ff49 	bl	8000258 <_ZN7CButton4initEP12GPIO_TypeDeftm>
	m_stateMachineLed.init(&m_greenLed,&m_blueButton,&m_uartDriver);
 80003c6:	4b05      	ldr	r3, [pc, #20]	; (80003dc <_ZN7CDriver4initEv+0x40>)
 80003c8:	4a07      	ldr	r2, [pc, #28]	; (80003e8 <_ZN7CDriver4initEv+0x4c>)
 80003ca:	4905      	ldr	r1, [pc, #20]	; (80003e0 <_ZN7CDriver4initEv+0x44>)
 80003cc:	4807      	ldr	r0, [pc, #28]	; (80003ec <_ZN7CDriver4initEv+0x50>)
 80003ce:	f000 fac7 	bl	8000960 <_ZN16CStateMachineLed4initEP4CLedP7CButtonP11CUartDriver>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000090 	.word	0x20000090
 80003e0:	20000150 	.word	0x20000150
 80003e4:	48000800 	.word	0x48000800
 80003e8:	20000168 	.word	0x20000168
 80003ec:	20000184 	.word	0x20000184

080003f0 <_ZN7CDriver6updateEv>:


void CDriver::update()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
//	m_blueButton.update();
	m_greenLed.update();
 80003f8:	4803      	ldr	r0, [pc, #12]	; (8000408 <_ZN7CDriver6updateEv+0x18>)
 80003fa:	f000 fa14 	bl	8000826 <_ZN4CLed6updateEv>



	//m_uartDriver.transmit((uint8_t*)message, strlen(message),500);

}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000150 	.word	0x20000150

0800040c <_Z41__static_initialization_and_destruction_0ii>:
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	6039      	str	r1, [r7, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d110      	bne.n	800043e <_Z41__static_initialization_and_destruction_0ii+0x32>
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000422:	4293      	cmp	r3, r2
 8000424:	d10b      	bne.n	800043e <_Z41__static_initialization_and_destruction_0ii+0x32>
CUartDriver CDriver::m_uartDriver;
 8000426:	4812      	ldr	r0, [pc, #72]	; (8000470 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000428:	f000 fab0 	bl	800098c <_ZN11CUartDriverC1Ev>
CLed CDriver::m_greenLed;
 800042c:	4811      	ldr	r0, [pc, #68]	; (8000474 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800042e:	f000 f9a7 	bl	8000780 <_ZN4CLedC1Ev>
CButton CDriver::m_blueButton;
 8000432:	4811      	ldr	r0, [pc, #68]	; (8000478 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000434:	f7ff fede 	bl	80001f4 <_ZN7CButtonC1Ev>
CStateMachineLed CDriver::m_stateMachineLed;
 8000438:	4810      	ldr	r0, [pc, #64]	; (800047c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800043a:	f000 fa61 	bl	8000900 <_ZN16CStateMachineLedC1Ev>
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d110      	bne.n	8000466 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800044a:	4293      	cmp	r3, r2
 800044c:	d10b      	bne.n	8000466 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 800044e:	480b      	ldr	r0, [pc, #44]	; (800047c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000450:	f000 fa66 	bl	8000920 <_ZN16CStateMachineLedD1Ev>
CButton CDriver::m_blueButton;
 8000454:	4808      	ldr	r0, [pc, #32]	; (8000478 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000456:	f7ff fedf 	bl	8000218 <_ZN7CButtonD1Ev>
CLed CDriver::m_greenLed;
 800045a:	4806      	ldr	r0, [pc, #24]	; (8000474 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800045c:	f000 f9a2 	bl	80007a4 <_ZN4CLedD1Ev>
CUartDriver CDriver::m_uartDriver;
 8000460:	4803      	ldr	r0, [pc, #12]	; (8000470 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000462:	f000 faa3 	bl	80009ac <_ZN11CUartDriverD1Ev>
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000090 	.word	0x20000090
 8000474:	20000150 	.word	0x20000150
 8000478:	20000168 	.word	0x20000168
 800047c:	20000184 	.word	0x20000184

08000480 <_GLOBAL__sub_I__ZN7CDriver12driverBufferE>:
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
 8000484:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000488:	2001      	movs	r0, #1
 800048a:	f7ff ffbf 	bl	800040c <_Z41__static_initialization_and_destruction_0ii>
 800048e:	bd80      	pop	{r7, pc}

08000490 <_GLOBAL__sub_D__ZN7CDriver12driverBufferE>:
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
 8000494:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000498:	2000      	movs	r0, #0
 800049a:	f7ff ffb7 	bl	800040c <_Z41__static_initialization_and_destruction_0ii>
 800049e:	bd80      	pop	{r7, pc}

080004a0 <_ZN11CUartDriver7getUartEv>:
	BufferState readFromBuffer(uint8_t* value);
	void Flush();
	void isEndLine(uint8_t value);
	void writeToReceivedBuffer();

	UART_HandleTypeDef* getUart() {return &m_huart2;}
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	3334      	adds	r3, #52	; 0x34
 80004ac:	4618      	mov	r0, r3
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <_ZN7CHelper4initEv>:

//UART_HandleTypeDef CHelper::huart2;


void CHelper::init()
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	SystemClock_Config();
 80004bc:	f000 f8ee 	bl	800069c <_ZN7CHelper18SystemClock_ConfigEv>
	MX_GPIO_Init();
 80004c0:	f000 f84a 	bl	8000558 <_ZN7CHelper12MX_GPIO_InitEv>
	MX_NVIC_Init();
 80004c4:	f000 f8d6 	bl	8000674 <_ZN7CHelper12MX_NVIC_InitEv>
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Mybutton_Pin)
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d103      	bne.n	80004e4 <HAL_GPIO_EXTI_Callback+0x18>
	{
		HAL_GPIO_TogglePin(Reddiode_GPIO_Port, Reddiode_Pin);
 80004dc:	2102      	movs	r1, #2
 80004de:	4808      	ldr	r0, [pc, #32]	; (8000500 <HAL_GPIO_EXTI_Callback+0x34>)
 80004e0:	f001 f8aa 	bl	8001638 <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == B1_Pin)
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004ea:	d104      	bne.n	80004f6 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004ec:	2120      	movs	r1, #32
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f2:	f001 f8a1 	bl	8001638 <HAL_GPIO_TogglePin>
	}
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	48000800 	.word	0x48000800

08000504 <HAL_UART_TxCpltCallback>:

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	if(huart == CDriver::m_uartDriver.getUart()) //huart->Instance == USART2
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <HAL_UART_TxCpltCallback+0x1c>)
 800050e:	f7ff ffc7 	bl	80004a0 <_ZN11CUartDriver7getUartEv>
 8000512:	4602      	mov	r2, r0
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4293      	cmp	r3, r2
	{

	}
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000090 	.word	0x20000090

08000524 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	if(huart == CDriver::m_uartDriver.getUart())
 800052c:	4809      	ldr	r0, [pc, #36]	; (8000554 <HAL_UART_RxCpltCallback+0x30>)
 800052e:	f7ff ffb7 	bl	80004a0 <_ZN11CUartDriver7getUartEv>
 8000532:	4602      	mov	r2, r0
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4293      	cmp	r3, r2
 8000538:	bf0c      	ite	eq
 800053a:	2301      	moveq	r3, #1
 800053c:	2300      	movne	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <HAL_UART_RxCpltCallback+0x26>
	{
		CDriver::m_uartDriver.irqRxComplete();
 8000544:	4803      	ldr	r0, [pc, #12]	; (8000554 <HAL_UART_RxCpltCallback+0x30>)
 8000546:	f000 fa8d 	bl	8000a64 <_ZN11CUartDriver13irqRxCompleteEv>
	}
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000090 	.word	0x20000090

08000558 <_ZN7CHelper12MX_GPIO_InitEv>:

void CHelper::MX_GPIO_Init()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	; 0x28
 800055c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	4b3f      	ldr	r3, [pc, #252]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a3e      	ldr	r2, [pc, #248]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b3c      	ldr	r3, [pc, #240]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000586:	4b39      	ldr	r3, [pc, #228]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a38      	ldr	r2, [pc, #224]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800058c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b36      	ldr	r3, [pc, #216]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b33      	ldr	r3, [pc, #204]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a32      	ldr	r2, [pc, #200]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80005a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b30      	ldr	r3, [pc, #192]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b2d      	ldr	r3, [pc, #180]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a2c      	ldr	r2, [pc, #176]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80005bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b2a      	ldr	r3, [pc, #168]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Reddiode_GPIO_Port, Reddiode_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2102      	movs	r1, #2
 80005d2:	4827      	ldr	r0, [pc, #156]	; (8000670 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80005d4:	f001 f818 	bl	8001608 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2120      	movs	r1, #32
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f001 f812 	bl	8001608 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80005e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4619      	mov	r1, r3
 80005fa:	481d      	ldr	r0, [pc, #116]	; (8000670 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80005fc:	f000 fe62 	bl	80012c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : Mybutton_Pin */
	GPIO_InitStruct.Pin = Mybutton_Pin;
 8000600:	2301      	movs	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000604:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000608:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800060a:	2301      	movs	r3, #1
 800060c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Mybutton_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	4816      	ldr	r0, [pc, #88]	; (8000670 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 8000616:	f000 fe55 	bl	80012c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : Reddiode_Pin */
	GPIO_InitStruct.Pin = Reddiode_Pin;
 800061a:	2302      	movs	r3, #2
 800061c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Reddiode_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	480f      	ldr	r0, [pc, #60]	; (8000670 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 8000632:	f000 fe47 	bl	80012c4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000636:	2320      	movs	r3, #32
 8000638:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f000 fe38 	bl	80012c4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	2006      	movs	r0, #6
 800065a:	f000 fd86 	bl	800116a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800065e:	2006      	movs	r0, #6
 8000660:	f000 fd9f 	bl	80011a2 <HAL_NVIC_EnableIRQ>
}
 8000664:	bf00      	nop
 8000666:	3728      	adds	r7, #40	; 0x28
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40021000 	.word	0x40021000
 8000670:	48000800 	.word	0x48000800

08000674 <_ZN7CHelper12MX_NVIC_InitEv>:

void CHelper::MX_NVIC_Init()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	2028      	movs	r0, #40	; 0x28
 800067e:	f000 fd74 	bl	800116a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000682:	2028      	movs	r0, #40	; 0x28
 8000684:	f000 fd8d 	bl	80011a2 <HAL_NVIC_EnableIRQ>

	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	2026      	movs	r0, #38	; 0x26
 800068e:	f000 fd6c 	bl	800116a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000692:	2026      	movs	r0, #38	; 0x26
 8000694:	f000 fd85 	bl	80011a2 <HAL_NVIC_EnableIRQ>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <_ZN7CHelper18SystemClock_ConfigEv>:

void CHelper::SystemClock_Config()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0a6      	sub	sp, #152	; 0x98
 80006a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006a6:	2228      	movs	r2, #40	; 0x28
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fd7c 	bl	80041a8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2258      	movs	r2, #88	; 0x58
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fd6e 	bl	80041a8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2310      	movs	r3, #16
 80006d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 ffce 	bl	800169c <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	bf14      	ite	ne
 8000706:	2301      	movne	r3, #1
 8000708:	2300      	moveq	r3, #0
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <_ZN7CHelper18SystemClock_ConfigEv+0x78>
	{
	Error_Handler();
 8000710:	f000 f831 	bl	8000776 <_ZN7CHelper13Error_HandlerEv>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	65fb      	str	r3, [r7, #92]	; 0x5c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000724:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800072e:	2102      	movs	r1, #2
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fec9 	bl	80024c8 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <_ZN7CHelper18SystemClock_ConfigEv+0xae>
	{
	Error_Handler();
 8000746:	f000 f816 	bl	8000776 <_ZN7CHelper13Error_HandlerEv>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800074a:	2302      	movs	r3, #2
 800074c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4618      	mov	r0, r3
 8000756:	f002 f8ed 	bl	8002934 <HAL_RCCEx_PeriphCLKConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <_ZN7CHelper18SystemClock_ConfigEv+0xd2>
	{
	Error_Handler();
 800076a:	f000 f804 	bl	8000776 <_ZN7CHelper13Error_HandlerEv>
	}
}
 800076e:	bf00      	nop
 8000770:	3798      	adds	r7, #152	; 0x98
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <_ZN7CHelper13Error_HandlerEv>:

void CHelper::Error_Handler()
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077a:	b672      	cpsid	i
}
 800077c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800077e:	e7fe      	b.n	800077e <_ZN7CHelper13Error_HandlerEv+0x8>

08000780 <_ZN4CLedC1Ev>:
 *      Author: Konra
 */

#include <CLed.h>

CLed::CLed() {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fd22 	bl	80001d4 <_ZN5IGPIOC1Ev>
 8000790:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <_ZN4CLedC1Ev+0x20>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	0800433c 	.word	0x0800433c

080007a4 <_ZN4CLedD1Ev>:

CLed::~CLed() {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <_ZN4CLedD1Ev+0x1c>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	0800433c 	.word	0x0800433c

080007c4 <_ZN4CLedD0Ev>:
CLed::~CLed() {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
}
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ffe9 	bl	80007a4 <_ZN4CLedD1Ev>
 80007d2:	2118      	movs	r1, #24
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f003 fc96 	bl	8004106 <_ZdlPvj>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>:

void CLed::init(GPIO_TypeDef* GpioPort, uint16_t GpioPin, LedStates state = off)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	4611      	mov	r1, r2
 80007f0:	461a      	mov	r2, r3
 80007f2:	460b      	mov	r3, r1
 80007f4:	80fb      	strh	r3, [r7, #6]
 80007f6:	4613      	mov	r3, r2
 80007f8:	717b      	strb	r3, [r7, #5]
	this->GpioPort 	= GpioPort;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	68ba      	ldr	r2, [r7, #8]
 80007fe:	605a      	str	r2, [r3, #4]
	this->GpioPin 	= GpioPin;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	811a      	strh	r2, [r3, #8]
	this->state 	= state;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	797a      	ldrb	r2, [r7, #5]
 800080a:	729a      	strb	r2, [r3, #10]
	m_timerToggle 	= 500;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000812:	60da      	str	r2, [r3, #12]
	m_enter 		= false;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2200      	movs	r2, #0
 8000818:	751a      	strb	r2, [r3, #20]
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <_ZN4CLed6updateEv>:
void CLed::update()
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
	switch(state)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7a9b      	ldrb	r3, [r3, #10]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d00e      	beq.n	8000854 <_ZN4CLed6updateEv+0x2e>
 8000836:	2b02      	cmp	r3, #2
 8000838:	dc2e      	bgt.n	8000898 <_ZN4CLed6updateEv+0x72>
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <_ZN4CLed6updateEv+0x1e>
 800083e:	2b01      	cmp	r3, #1
 8000840:	d004      	beq.n	800084c <_ZN4CLed6updateEv+0x26>
				m_enter = false;
			}

			break;
	}
}
 8000842:	e029      	b.n	8000898 <_ZN4CLed6updateEv+0x72>
			turnOnLed();
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 f83b 	bl	80008c0 <_ZN4CLed9turnOnLedEv>
			break;
 800084a:	e025      	b.n	8000898 <_ZN4CLed6updateEv+0x72>
			turnOffLed();
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 f847 	bl	80008e0 <_ZN4CLed10turnOffLedEv>
			break;
 8000852:	e021      	b.n	8000898 <_ZN4CLed6updateEv+0x72>
			if(m_enter == false)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7d1b      	ldrb	r3, [r3, #20]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d107      	bne.n	800086c <_ZN4CLed6updateEv+0x46>
				m_lastTick = HAL_GetTick();
 800085c:	f000 fb9e 	bl	8000f9c <HAL_GetTick>
 8000860:	4602      	mov	r2, r0
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	611a      	str	r2, [r3, #16]
				m_enter = true;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2201      	movs	r2, #1
 800086a:	751a      	strb	r2, [r3, #20]
			if((HAL_GetTick() - m_lastTick) > m_timerToggle)
 800086c:	f000 fb96 	bl	8000f9c <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	691b      	ldr	r3, [r3, #16]
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	bf8c      	ite	hi
 8000880:	2301      	movhi	r3, #1
 8000882:	2300      	movls	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d005      	beq.n	8000896 <_ZN4CLed6updateEv+0x70>
				togglePin();
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 f808 	bl	80008a0 <_ZN4CLed9togglePinEv>
				m_enter = false;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	751a      	strb	r2, [r3, #20]
			break;
 8000896:	bf00      	nop
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <_ZN4CLed9togglePinEv>:
void CLed::togglePin()
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GpioPort, GpioPin);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	891b      	ldrh	r3, [r3, #8]
 80008b0:	4619      	mov	r1, r3
 80008b2:	4610      	mov	r0, r2
 80008b4:	f000 fec0 	bl	8001638 <HAL_GPIO_TogglePin>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_ZN4CLed9turnOnLedEv>:

void CLed::turnOnLed()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GpioPort, GpioPin, GPIO_PIN_SET);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6858      	ldr	r0, [r3, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	891b      	ldrh	r3, [r3, #8]
 80008d0:	2201      	movs	r2, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	f000 fe98 	bl	8001608 <HAL_GPIO_WritePin>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_ZN4CLed10turnOffLedEv>:

void CLed::turnOffLed()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GpioPort, GpioPin, GPIO_PIN_RESET);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6858      	ldr	r0, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	891b      	ldrh	r3, [r3, #8]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4619      	mov	r1, r3
 80008f4:	f000 fe88 	bl	8001608 <HAL_GPIO_WritePin>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <_ZN16CStateMachineLedC1Ev>:
#include "stdio.h"


uint8_t CStateMachineLed::buffer[32];

CStateMachineLed::CStateMachineLed() {
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <_ZN16CStateMachineLedC1Ev+0x1c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	08004350 	.word	0x08004350

08000920 <_ZN16CStateMachineLedD1Ev>:

CStateMachineLed::~CStateMachineLed() {
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <_ZN16CStateMachineLedD1Ev+0x1c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4618      	mov	r0, r3
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	08004350 	.word	0x08004350

08000940 <_ZN16CStateMachineLedD0Ev>:
CStateMachineLed::~CStateMachineLed() {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
}
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff ffe9 	bl	8000920 <_ZN16CStateMachineLedD1Ev>
 800094e:	2110      	movs	r1, #16
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f003 fbd8 	bl	8004106 <_ZdlPvj>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <_ZN16CStateMachineLed4initEP4CLedP7CButtonP11CUartDriver>:

void CStateMachineLed::init(CLed* led, CButton* button, CUartDriver* uart)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	603b      	str	r3, [r7, #0]
	this->led 		= led;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	605a      	str	r2, [r3, #4]
	this->button 	= button;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	609a      	str	r2, [r3, #8]
	this->uart 		= uart;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	683a      	ldr	r2, [r7, #0]
 800097e:	60da      	str	r2, [r3, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <_ZN11CUartDriverC1Ev>:

#include <CUartDriver.h>

//UART_HandleTypeDef CUartDriver::m_huart2;

CUartDriver::CUartDriver() {
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <_ZN11CUartDriverC1Ev+0x1c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	08004360 	.word	0x08004360

080009ac <_ZN11CUartDriverD1Ev>:

CUartDriver::~CUartDriver() {
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <_ZN11CUartDriverD1Ev+0x1c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	08004360 	.word	0x08004360

080009cc <_ZN11CUartDriverD0Ev>:
CUartDriver::~CUartDriver() {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
}
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ffe9 	bl	80009ac <_ZN11CUartDriverD1Ev>
 80009da:	21c0      	movs	r1, #192	; 0xc0
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f003 fb92 	bl	8004106 <_ZdlPvj>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <_ZN11CUartDriver4initEv>:

void CUartDriver::init()
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	m_huart2.Instance = USART2;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a1a      	ldr	r2, [pc, #104]	; (8000a60 <_ZN11CUartDriver4initEv+0x74>)
 80009f8:	635a      	str	r2, [r3, #52]	; 0x34
	m_huart2.Init.BaudRate = 38400;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000a00:	639a      	str	r2, [r3, #56]	; 0x38
	m_huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	63da      	str	r2, [r3, #60]	; 0x3c
	m_huart2.Init.StopBits = UART_STOPBITS_1;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	641a      	str	r2, [r3, #64]	; 0x40
	m_huart2.Init.Parity = UART_PARITY_NONE;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	645a      	str	r2, [r3, #68]	; 0x44
	m_huart2.Init.Mode = UART_MODE_TX_RX;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	220c      	movs	r2, #12
 8000a18:	649a      	str	r2, [r3, #72]	; 0x48
	m_huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	64da      	str	r2, [r3, #76]	; 0x4c
	m_huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	651a      	str	r2, [r3, #80]	; 0x50
	m_huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	655a      	str	r2, [r3, #84]	; 0x54
	m_huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_UART_Init(&m_huart2) != HAL_OK)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3334      	adds	r3, #52	; 0x34
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 f99a 	bl	8002d70 <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	bf14      	ite	ne
 8000a42:	2301      	movne	r3, #1
 8000a44:	2300      	moveq	r3, #0
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d002      	beq.n	8000a52 <_ZN11CUartDriver4initEv+0x66>
	{
		Error_Handler();
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f000 f8f8 	bl	8000c42 <_ZN11CUartDriver13Error_HandlerEv>
	}

	turnOnReceivingIfOff();
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f000 f82d 	bl	8000ab2 <_ZN11CUartDriver20turnOnReceivingIfOffEv>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40004400 	.word	0x40004400

08000a64 <_ZN11CUartDriver13irqRxCompleteEv>:

void CUartDriver::irqRxComplete()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	if(writeToBuffer(m_dataReceive) == BS_OK)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8000a72:	4619      	mov	r1, r3
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 f888 	bl	8000b8a <_ZN11CUartDriver13writeToBufferEh>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	bf0c      	ite	eq
 8000a80:	2301      	moveq	r3, #1
 8000a82:	2300      	movne	r3, #0
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d006      	beq.n	8000a98 <_ZN11CUartDriver13irqRxCompleteEv+0x34>
	{
		isEndLine(m_dataReceive);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8000a90:	4619      	mov	r1, r3
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f82d 	bl	8000af2 <_ZN11CUartDriver9isEndLineEh>
	}
	HAL_UART_Receive_IT(&m_huart2, &m_dataReceive, sizeof(m_dataReceive));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	33bc      	adds	r3, #188	; 0xbc
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f002 f9b1 	bl	8002e0c <HAL_UART_Receive_IT>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <_ZN11CUartDriver20turnOnReceivingIfOffEv>:

void CUartDriver::turnOnReceivingIfOff()
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b082      	sub	sp, #8
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
    if (m_huart2.gState == HAL_UART_STATE_READY || m_huart2.gState == HAL_UART_STATE_BUSY_TX)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000ac0:	2b20      	cmp	r3, #32
 8000ac2:	d004      	beq.n	8000ace <_ZN11CUartDriver20turnOnReceivingIfOffEv+0x1c>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000aca:	2b21      	cmp	r3, #33	; 0x21
 8000acc:	d101      	bne.n	8000ad2 <_ZN11CUartDriver20turnOnReceivingIfOffEv+0x20>
 8000ace:	2301      	movs	r3, #1
 8000ad0:	e000      	b.n	8000ad4 <_ZN11CUartDriver20turnOnReceivingIfOffEv+0x22>
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d008      	beq.n	8000aea <_ZN11CUartDriver20turnOnReceivingIfOffEv+0x38>
    {
        HAL_UART_Receive_IT(&m_huart2, &m_dataReceive, sizeof(m_dataReceive));
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	33bc      	adds	r3, #188	; 0xbc
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f002 f991 	bl	8002e0c <HAL_UART_Receive_IT>
    }
}
 8000aea:	bf00      	nop
 8000aec:	3708      	adds	r7, #8
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}

08000af2 <_ZN11CUartDriver9isEndLineEh>:

void CUartDriver::isEndLine(uint8_t value)
{
 8000af2:	b580      	push	{r7, lr}
 8000af4:	b082      	sub	sp, #8
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
 8000afa:	460b      	mov	r3, r1
 8000afc:	70fb      	strb	r3, [r7, #3]
	if(value == '\n')
 8000afe:	78fb      	ldrb	r3, [r7, #3]
 8000b00:	2b0a      	cmp	r3, #10
 8000b02:	d10a      	bne.n	8000b1a <_ZN11CUartDriver9isEndLineEh+0x28>
	{
		m_receivedLines++;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
		writeToReceivedBuffer();
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f000 f804 	bl	8000b22 <_ZN11CUartDriver21writeToReceivedBufferEv>
	}
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <_ZN11CUartDriver21writeToReceivedBufferEv>:

void CUartDriver::writeToReceivedBuffer()
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]
	do
	{
		readFromBuffer(&m_tmpReceivedData);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	33be      	adds	r3, #190	; 0xbe
 8000b32:	4619      	mov	r1, r3
 8000b34:	6878      	ldr	r0, [r7, #4]
 8000b36:	f000 f856 	bl	8000be6 <_ZN11CUartDriver14readFromBufferEPh>
		if(m_tmpReceivedData == '\n')
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8000b40:	2b0a      	cmp	r3, #10
 8000b42:	d105      	bne.n	8000b50 <_ZN11CUartDriver21writeToReceivedBufferEv+0x2e>
		{
			m_receivedBuffer[index] = 0;
 8000b44:	7bfb      	ldrb	r3, [r7, #15]
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	4413      	add	r3, r2
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	751a      	strb	r2, [r3, #20]
 8000b4e:	e007      	b.n	8000b60 <_ZN11CUartDriver21writeToReceivedBufferEv+0x3e>
		}
		else
		{
			m_receivedBuffer[index] = m_tmpReceivedData;
 8000b50:	7bfb      	ldrb	r3, [r7, #15]
 8000b52:	687a      	ldr	r2, [r7, #4]
 8000b54:	f892 10be 	ldrb.w	r1, [r2, #190]	; 0xbe
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	4413      	add	r3, r2
 8000b5c:	460a      	mov	r2, r1
 8000b5e:	751a      	strb	r2, [r3, #20]
		}
		index++;
 8000b60:	7bfb      	ldrb	r3, [r7, #15]
 8000b62:	3301      	adds	r3, #1
 8000b64:	73fb      	strb	r3, [r7, #15]
	}while(m_tmpReceivedData != '\n');
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8000b6c:	2b0a      	cmp	r3, #10
 8000b6e:	d000      	beq.n	8000b72 <_ZN11CUartDriver21writeToReceivedBufferEv+0x50>
	do
 8000b70:	e7dd      	b.n	8000b2e <_ZN11CUartDriver21writeToReceivedBufferEv+0xc>

	m_receivedLines--;
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8000b78:	3b01      	subs	r3, #1
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd

}
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_ZN11CUartDriver13writeToBufferEh>:
{
	HAL_UART_Receive_IT(&m_huart2, pData, Size);
}

CUartDriver::BufferState CUartDriver::writeToBuffer(uint8_t value)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b085      	sub	sp, #20
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	460b      	mov	r3, r1
 8000b94:	70fb      	strb	r3, [r7, #3]

	uint8_t tempHead = (m_head + 1) % BUFFER_SIZE;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	425a      	negs	r2, r3
 8000ba0:	f003 030f 	and.w	r3, r3, #15
 8000ba4:	f002 020f 	and.w	r2, r2, #15
 8000ba8:	bf58      	it	pl
 8000baa:	4253      	negpl	r3, r2
 8000bac:	73fb      	strb	r3, [r7, #15]

	if(tempHead == m_tail)
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d101      	bne.n	8000bbe <_ZN11CUartDriver13writeToBufferEh+0x34>
	{
		return BufferState::BS_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00d      	b.n	8000bda <_ZN11CUartDriver13writeToBufferEh+0x50>
	}

	m_buffer[m_head] = value;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8000bc4:	461a      	mov	r2, r3
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	78fa      	ldrb	r2, [r7, #3]
 8000bcc:	711a      	strb	r2, [r3, #4]
	m_head = tempHead;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

	return BufferState::BS_OK;
 8000bd8:	2300      	movs	r3, #0
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_ZN11CUartDriver14readFromBufferEPh>:

CUartDriver::BufferState CUartDriver::readFromBuffer(uint8_t* value)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	6039      	str	r1, [r7, #0]
	if(m_head == m_tail)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d101      	bne.n	8000c04 <_ZN11CUartDriver14readFromBufferEPh+0x1e>
	{
		return BufferState::BS_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	e018      	b.n	8000c36 <_ZN11CUartDriver14readFromBufferEPh+0x50>
	}

	*value = m_buffer[m_tail];
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	4413      	add	r3, r2
 8000c10:	791a      	ldrb	r2, [r3, #4]
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	701a      	strb	r2, [r3, #0]
	m_tail = (m_tail + 1) % BUFFER_SIZE;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	425a      	negs	r2, r3
 8000c20:	f003 030f 	and.w	r3, r3, #15
 8000c24:	f002 020f 	and.w	r2, r2, #15
 8000c28:	bf58      	it	pl
 8000c2a:	4253      	negpl	r3, r2
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
	return BufferState::BS_OK;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <_ZN11CUartDriver13Error_HandlerEv>:
	m_head = 0;
	m_tail = 0;
}

void CUartDriver::Error_Handler()
{
 8000c42:	b480      	push	{r7}
 8000c44:	b083      	sub	sp, #12
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
	while(1)
 8000c4a:	e7fe      	b.n	8000c4a <_ZN11CUartDriver13Error_HandlerEv+0x8>

08000c4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c50:	f000 f94a 	bl	8000ee8 <HAL_Init>

  /* USER CODE BEGIN Init */
  CHelper::init();
 8000c54:	f7ff fc30 	bl	80004b8 <_ZN7CHelper4initEv>
  m_driver.init();
 8000c58:	4803      	ldr	r0, [pc, #12]	; (8000c68 <main+0x1c>)
 8000c5a:	f7ff fb9f 	bl	800039c <_ZN7CDriver4initEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  m_driver.update();
 8000c5e:	4802      	ldr	r0, [pc, #8]	; (8000c68 <main+0x1c>)
 8000c60:	f7ff fbc6 	bl	80003f0 <_ZN7CDriver6updateEv>
 8000c64:	e7fb      	b.n	8000c5e <main+0x12>
 8000c66:	bf00      	nop
 8000c68:	20000194 	.word	0x20000194

08000c6c <_Z41__static_initialization_and_destruction_0ii>:
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d107      	bne.n	8000c8c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c82:	4293      	cmp	r3, r2
 8000c84:	d102      	bne.n	8000c8c <_Z41__static_initialization_and_destruction_0ii+0x20>
CDriver m_driver;
 8000c86:	4809      	ldr	r0, [pc, #36]	; (8000cac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000c88:	f7ff fb71 	bl	800036e <_ZN7CDriverC1Ev>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d107      	bne.n	8000ca2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d102      	bne.n	8000ca2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000c9e:	f7ff fb71 	bl	8000384 <_ZN7CDriverD1Ev>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000194 	.word	0x20000194

08000cb0 <_GLOBAL__sub_I_m_driver>:
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cb8:	2001      	movs	r0, #1
 8000cba:	f7ff ffd7 	bl	8000c6c <_Z41__static_initialization_and_destruction_0ii>
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <_GLOBAL__sub_D_m_driver>:
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff ffcf 	bl	8000c6c <_Z41__static_initialization_and_destruction_0ii>
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <HAL_MspInit+0x44>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	4a0e      	ldr	r2, [pc, #56]	; (8000d14 <HAL_MspInit+0x44>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6193      	str	r3, [r2, #24]
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <HAL_MspInit+0x44>)
 8000ce4:	699b      	ldr	r3, [r3, #24]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	607b      	str	r3, [r7, #4]
 8000cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <HAL_MspInit+0x44>)
 8000cf0:	69db      	ldr	r3, [r3, #28]
 8000cf2:	4a08      	ldr	r2, [pc, #32]	; (8000d14 <HAL_MspInit+0x44>)
 8000cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	61d3      	str	r3, [r2, #28]
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <HAL_MspInit+0x44>)
 8000cfc:	69db      	ldr	r3, [r3, #28]
 8000cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d02:	603b      	str	r3, [r7, #0]
 8000d04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d06:	2007      	movs	r0, #7
 8000d08:	f000 fa24 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0c:	bf00      	nop
 8000d0e:	3708      	adds	r7, #8
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021000 	.word	0x40021000

08000d18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	; 0x28
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a17      	ldr	r2, [pc, #92]	; (8000d94 <HAL_UART_MspInit+0x7c>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d128      	bne.n	8000d8c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3a:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <HAL_UART_MspInit+0x80>)
 8000d3c:	69db      	ldr	r3, [r3, #28]
 8000d3e:	4a16      	ldr	r2, [pc, #88]	; (8000d98 <HAL_UART_MspInit+0x80>)
 8000d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d44:	61d3      	str	r3, [r2, #28]
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <HAL_UART_MspInit+0x80>)
 8000d48:	69db      	ldr	r3, [r3, #28]
 8000d4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <HAL_UART_MspInit+0x80>)
 8000d54:	695b      	ldr	r3, [r3, #20]
 8000d56:	4a10      	ldr	r2, [pc, #64]	; (8000d98 <HAL_UART_MspInit+0x80>)
 8000d58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5c:	6153      	str	r3, [r2, #20]
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <HAL_UART_MspInit+0x80>)
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d6a:	230c      	movs	r3, #12
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	2300      	movs	r3, #0
 8000d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d7a:	2307      	movs	r3, #7
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d88:	f000 fa9c 	bl	80012c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d8c:	bf00      	nop
 8000d8e:	3728      	adds	r7, #40	; 0x28
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	40004400 	.word	0x40004400
 8000d98:	40021000 	.word	0x40021000

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <NMI_Handler+0x4>

08000da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <MemManage_Handler+0x4>

08000dae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de8:	f000 f8c4 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f000 fc39 	bl	800166c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
	...

08000e00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(CDriver::m_uartDriver.getUart());
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <USART2_IRQHandler+0x18>)
 8000e06:	f7ff fb4b 	bl	80004a0 <_ZN11CUartDriver7getUartEv>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f002 f84b 	bl	8002ea8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20000090 	.word	0x20000090

08000e1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000e20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000e24:	f000 fc22 	bl	800166c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
	return 1;
 8000e30:	2301      	movs	r3, #1
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <_kill>:

int _kill(int pid, int sig)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000e46:	f003 f97d 	bl	8004144 <__errno>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2216      	movs	r2, #22
 8000e4e:	601a      	str	r2, [r3, #0]
	return -1;
 8000e50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <_exit>:

void _exit (int status)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000e64:	f04f 31ff 	mov.w	r1, #4294967295
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff ffe7 	bl	8000e3c <_kill>
	while (1) {}		/* Make sure we hang here */
 8000e6e:	e7fe      	b.n	8000e6e <_exit+0x12>

08000e70 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <SystemInit+0x20>)
 8000e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <SystemInit+0x20>)
 8000e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e84:	bf00      	nop
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ecc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e9a:	490e      	ldr	r1, [pc, #56]	; (8000ed4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <LoopForever+0xe>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0b      	ldr	r2, [pc, #44]	; (8000edc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb0:	4c0b      	ldr	r4, [pc, #44]	; (8000ee0 <LoopForever+0x16>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ebe:	f7ff ffd7 	bl	8000e70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec2:	f003 f945 	bl	8004150 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ec6:	f7ff fec1 	bl	8000c4c <main>

08000eca <LoopForever>:

LoopForever:
    b LoopForever
 8000eca:	e7fe      	b.n	8000eca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ecc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ed8:	080043b8 	.word	0x080043b8
  ldr r2, =_sbss
 8000edc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ee0:	200001b0 	.word	0x200001b0

08000ee4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC1_2_IRQHandler>
	...

08000ee8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_Init+0x28>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_Init+0x28>)
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 f92b 	bl	8001154 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efe:	2000      	movs	r0, #0
 8000f00:	f000 f808 	bl	8000f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f04:	f7ff fee4 	bl	8000cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40022000 	.word	0x40022000

08000f14 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x54>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x58>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f943 	bl	80011be <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00e      	b.n	8000f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d80a      	bhi.n	8000f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f000 f90b 	bl	800116a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <HAL_InitTick+0x5c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e000      	b.n	8000f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000000 	.word	0x20000000
 8000f6c:	20000008 	.word	0x20000008
 8000f70:	20000004 	.word	0x20000004

08000f74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_IncTick+0x20>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <HAL_IncTick+0x24>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <HAL_IncTick+0x24>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	20000008 	.word	0x20000008
 8000f98:	2000019c 	.word	0x2000019c

08000f9c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000fa0:	4b03      	ldr	r3, [pc, #12]	; (8000fb0 <HAL_GetTick+0x14>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	2000019c 	.word	0x2000019c

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	2b00      	cmp	r3, #0
 8001028:	db0b      	blt.n	8001042 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 021f 	and.w	r2, r3, #31
 8001030:	4907      	ldr	r1, [pc, #28]	; (8001050 <__NVIC_EnableIRQ+0x38>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	095b      	lsrs	r3, r3, #5
 8001038:	2001      	movs	r0, #1
 800103a:	fa00 f202 	lsl.w	r2, r0, r2
 800103e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	e000e100 	.word	0xe000e100

08001054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	6039      	str	r1, [r7, #0]
 800105e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0a      	blt.n	800107e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	490c      	ldr	r1, [pc, #48]	; (80010a0 <__NVIC_SetPriority+0x4c>)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800107c:	e00a      	b.n	8001094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	b2da      	uxtb	r2, r3
 8001082:	4908      	ldr	r1, [pc, #32]	; (80010a4 <__NVIC_SetPriority+0x50>)
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	f003 030f 	and.w	r3, r3, #15
 800108a:	3b04      	subs	r3, #4
 800108c:	0112      	lsls	r2, r2, #4
 800108e:	b2d2      	uxtb	r2, r2
 8001090:	440b      	add	r3, r1
 8001092:	761a      	strb	r2, [r3, #24]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	e000e100 	.word	0xe000e100
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	f1c3 0307 	rsb	r3, r3, #7
 80010c2:	2b04      	cmp	r3, #4
 80010c4:	bf28      	it	cs
 80010c6:	2304      	movcs	r3, #4
 80010c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	3304      	adds	r3, #4
 80010ce:	2b06      	cmp	r3, #6
 80010d0:	d902      	bls.n	80010d8 <NVIC_EncodePriority+0x30>
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3b03      	subs	r3, #3
 80010d6:	e000      	b.n	80010da <NVIC_EncodePriority+0x32>
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	f04f 32ff 	mov.w	r2, #4294967295
 80010e0:	69bb      	ldr	r3, [r7, #24]
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43da      	mvns	r2, r3
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	401a      	ands	r2, r3
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f0:	f04f 31ff 	mov.w	r1, #4294967295
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa01 f303 	lsl.w	r3, r1, r3
 80010fa:	43d9      	mvns	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001100:	4313      	orrs	r3, r2
         );
}
 8001102:	4618      	mov	r0, r3
 8001104:	3724      	adds	r7, #36	; 0x24
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3b01      	subs	r3, #1
 800111c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001120:	d301      	bcc.n	8001126 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001122:	2301      	movs	r3, #1
 8001124:	e00f      	b.n	8001146 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a0a      	ldr	r2, [pc, #40]	; (8001150 <SysTick_Config+0x40>)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800112e:	210f      	movs	r1, #15
 8001130:	f04f 30ff 	mov.w	r0, #4294967295
 8001134:	f7ff ff8e 	bl	8001054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <SysTick_Config+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	4b04      	ldr	r3, [pc, #16]	; (8001150 <SysTick_Config+0x40>)
 8001140:	2207      	movs	r2, #7
 8001142:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	e000e010 	.word	0xe000e010

08001154 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f7ff ff29 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001162:	bf00      	nop
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800116a:	b580      	push	{r7, lr}
 800116c:	b086      	sub	sp, #24
 800116e:	af00      	add	r7, sp, #0
 8001170:	4603      	mov	r3, r0
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
 8001176:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800117c:	f7ff ff3e 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001180:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	68b9      	ldr	r1, [r7, #8]
 8001186:	6978      	ldr	r0, [r7, #20]
 8001188:	f7ff ff8e 	bl	80010a8 <NVIC_EncodePriority>
 800118c:	4602      	mov	r2, r0
 800118e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff5d 	bl	8001054 <__NVIC_SetPriority>
}
 800119a:	bf00      	nop
 800119c:	3718      	adds	r7, #24
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	4618      	mov	r0, r3
 80011b2:	f7ff ff31 	bl	8001018 <__NVIC_EnableIRQ>
}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b082      	sub	sp, #8
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ffa2 	bl	8001110 <SysTick_Config>
 80011cc:	4603      	mov	r3, r0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011d6:	b480      	push	{r7}
 80011d8:	b083      	sub	sp, #12
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d008      	beq.n	80011fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2204      	movs	r2, #4
 80011ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e020      	b.n	800123c <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 020e 	bic.w	r2, r2, #14
 8001208:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f022 0201 	bic.w	r2, r2, #1
 8001218:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001222:	2101      	movs	r1, #1
 8001224:	fa01 f202 	lsl.w	r2, r1, r2
 8001228:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2201      	movs	r2, #1
 800122e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001250:	2300      	movs	r3, #0
 8001252:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800125a:	2b02      	cmp	r3, #2
 800125c:	d005      	beq.n	800126a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2204      	movs	r2, #4
 8001262:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	73fb      	strb	r3, [r7, #15]
 8001268:	e027      	b.n	80012ba <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 020e 	bic.w	r2, r2, #14
 8001278:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	681a      	ldr	r2, [r3, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0201 	bic.w	r2, r2, #1
 8001288:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001292:	2101      	movs	r1, #1
 8001294:	fa01 f202 	lsl.w	r2, r1, r2
 8001298:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	4798      	blx	r3
    } 
  }
  return status;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012d2:	e160      	b.n	8001596 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	2101      	movs	r1, #1
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	fa01 f303 	lsl.w	r3, r1, r3
 80012e0:	4013      	ands	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 8152 	beq.w	8001590 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d005      	beq.n	8001304 <HAL_GPIO_Init+0x40>
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d130      	bne.n	8001366 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	2203      	movs	r2, #3
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68da      	ldr	r2, [r3, #12]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4313      	orrs	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800133a:	2201      	movs	r2, #1
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43db      	mvns	r3, r3
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	4013      	ands	r3, r2
 8001348:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	091b      	lsrs	r3, r3, #4
 8001350:	f003 0201 	and.w	r2, r3, #1
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4313      	orrs	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	2b03      	cmp	r3, #3
 8001370:	d017      	beq.n	80013a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	68db      	ldr	r3, [r3, #12]
 8001376:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	2203      	movs	r2, #3
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	4013      	ands	r3, r2
 8001388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	689a      	ldr	r2, [r3, #8]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d123      	bne.n	80013f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	08da      	lsrs	r2, r3, #3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3208      	adds	r2, #8
 80013b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f003 0307 	and.w	r3, r3, #7
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	220f      	movs	r2, #15
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	693a      	ldr	r2, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	691a      	ldr	r2, [r3, #16]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f003 0307 	and.w	r3, r3, #7
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	693a      	ldr	r2, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	08da      	lsrs	r2, r3, #3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3208      	adds	r2, #8
 80013f0:	6939      	ldr	r1, [r7, #16]
 80013f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	2203      	movs	r2, #3
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	4013      	ands	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f003 0203 	and.w	r2, r3, #3
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	693a      	ldr	r2, [r7, #16]
 8001428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 80ac 	beq.w	8001590 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001438:	4b5e      	ldr	r3, [pc, #376]	; (80015b4 <HAL_GPIO_Init+0x2f0>)
 800143a:	699b      	ldr	r3, [r3, #24]
 800143c:	4a5d      	ldr	r2, [pc, #372]	; (80015b4 <HAL_GPIO_Init+0x2f0>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6193      	str	r3, [r2, #24]
 8001444:	4b5b      	ldr	r3, [pc, #364]	; (80015b4 <HAL_GPIO_Init+0x2f0>)
 8001446:	699b      	ldr	r3, [r3, #24]
 8001448:	f003 0301 	and.w	r3, r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
 800144e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001450:	4a59      	ldr	r2, [pc, #356]	; (80015b8 <HAL_GPIO_Init+0x2f4>)
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	089b      	lsrs	r3, r3, #2
 8001456:	3302      	adds	r3, #2
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	f003 0303 	and.w	r3, r3, #3
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	220f      	movs	r2, #15
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800147a:	d025      	beq.n	80014c8 <HAL_GPIO_Init+0x204>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a4f      	ldr	r2, [pc, #316]	; (80015bc <HAL_GPIO_Init+0x2f8>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d01f      	beq.n	80014c4 <HAL_GPIO_Init+0x200>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a4e      	ldr	r2, [pc, #312]	; (80015c0 <HAL_GPIO_Init+0x2fc>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d019      	beq.n	80014c0 <HAL_GPIO_Init+0x1fc>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a4d      	ldr	r2, [pc, #308]	; (80015c4 <HAL_GPIO_Init+0x300>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d013      	beq.n	80014bc <HAL_GPIO_Init+0x1f8>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a4c      	ldr	r2, [pc, #304]	; (80015c8 <HAL_GPIO_Init+0x304>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d00d      	beq.n	80014b8 <HAL_GPIO_Init+0x1f4>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a4b      	ldr	r2, [pc, #300]	; (80015cc <HAL_GPIO_Init+0x308>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d007      	beq.n	80014b4 <HAL_GPIO_Init+0x1f0>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a4a      	ldr	r2, [pc, #296]	; (80015d0 <HAL_GPIO_Init+0x30c>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d101      	bne.n	80014b0 <HAL_GPIO_Init+0x1ec>
 80014ac:	2306      	movs	r3, #6
 80014ae:	e00c      	b.n	80014ca <HAL_GPIO_Init+0x206>
 80014b0:	2307      	movs	r3, #7
 80014b2:	e00a      	b.n	80014ca <HAL_GPIO_Init+0x206>
 80014b4:	2305      	movs	r3, #5
 80014b6:	e008      	b.n	80014ca <HAL_GPIO_Init+0x206>
 80014b8:	2304      	movs	r3, #4
 80014ba:	e006      	b.n	80014ca <HAL_GPIO_Init+0x206>
 80014bc:	2303      	movs	r3, #3
 80014be:	e004      	b.n	80014ca <HAL_GPIO_Init+0x206>
 80014c0:	2302      	movs	r3, #2
 80014c2:	e002      	b.n	80014ca <HAL_GPIO_Init+0x206>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <HAL_GPIO_Init+0x206>
 80014c8:	2300      	movs	r3, #0
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	f002 0203 	and.w	r2, r2, #3
 80014d0:	0092      	lsls	r2, r2, #2
 80014d2:	4093      	lsls	r3, r2
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014da:	4937      	ldr	r1, [pc, #220]	; (80015b8 <HAL_GPIO_Init+0x2f4>)
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	089b      	lsrs	r3, r3, #2
 80014e0:	3302      	adds	r3, #2
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014e8:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <HAL_GPIO_Init+0x310>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800150c:	4a31      	ldr	r2, [pc, #196]	; (80015d4 <HAL_GPIO_Init+0x310>)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001512:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <HAL_GPIO_Init+0x310>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001536:	4a27      	ldr	r2, [pc, #156]	; (80015d4 <HAL_GPIO_Init+0x310>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800153c:	4b25      	ldr	r3, [pc, #148]	; (80015d4 <HAL_GPIO_Init+0x310>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001560:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <HAL_GPIO_Init+0x310>)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <HAL_GPIO_Init+0x310>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	43db      	mvns	r3, r3
 8001570:	693a      	ldr	r2, [r7, #16]
 8001572:	4013      	ands	r3, r2
 8001574:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d003      	beq.n	800158a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800158a:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <HAL_GPIO_Init+0x310>)
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	3301      	adds	r3, #1
 8001594:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	fa22 f303 	lsr.w	r3, r2, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	f47f ae97 	bne.w	80012d4 <HAL_GPIO_Init+0x10>
  }
}
 80015a6:	bf00      	nop
 80015a8:	bf00      	nop
 80015aa:	371c      	adds	r7, #28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40010000 	.word	0x40010000
 80015bc:	48000400 	.word	0x48000400
 80015c0:	48000800 	.word	0x48000800
 80015c4:	48000c00 	.word	0x48000c00
 80015c8:	48001000 	.word	0x48001000
 80015cc:	48001400 	.word	0x48001400
 80015d0:	48001800 	.word	0x48001800
 80015d4:	40010400 	.word	0x40010400

080015d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015d8:	b480      	push	{r7}
 80015da:	b085      	sub	sp, #20
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	691a      	ldr	r2, [r3, #16]
 80015e8:	887b      	ldrh	r3, [r7, #2]
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d002      	beq.n	80015f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80015f0:	2301      	movs	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	e001      	b.n	80015fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80015fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	460b      	mov	r3, r1
 8001612:	807b      	strh	r3, [r7, #2]
 8001614:	4613      	mov	r3, r2
 8001616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001618:	787b      	ldrb	r3, [r7, #1]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d003      	beq.n	8001626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800161e:	887a      	ldrh	r2, [r7, #2]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001624:	e002      	b.n	800162c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001626:	887a      	ldrh	r2, [r7, #2]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr

08001638 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800164a:	887a      	ldrh	r2, [r7, #2]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	4013      	ands	r3, r2
 8001650:	041a      	lsls	r2, r3, #16
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43d9      	mvns	r1, r3
 8001656:	887b      	ldrh	r3, [r7, #2]
 8001658:	400b      	ands	r3, r1
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	619a      	str	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001678:	695a      	ldr	r2, [r3, #20]
 800167a:	88fb      	ldrh	r3, [r7, #6]
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001684:	88fb      	ldrh	r3, [r7, #6]
 8001686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	4618      	mov	r0, r3
 800168c:	f7fe ff1e 	bl	80004cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40010400 	.word	0x40010400

0800169c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	f000 bf01 	b.w	80024b8 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 8160 	beq.w	8001986 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80016c6:	4bae      	ldr	r3, [pc, #696]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b04      	cmp	r3, #4
 80016d0:	d00c      	beq.n	80016ec <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016d2:	4bab      	ldr	r3, [pc, #684]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f003 030c 	and.w	r3, r3, #12
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d159      	bne.n	8001792 <HAL_RCC_OscConfig+0xf6>
 80016de:	4ba8      	ldr	r3, [pc, #672]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80016e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ea:	d152      	bne.n	8001792 <HAL_RCC_OscConfig+0xf6>
 80016ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016f0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80016f8:	fa93 f3a3 	rbit	r3, r3
 80016fc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001700:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001704:	fab3 f383 	clz	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	b2db      	uxtb	r3, r3
 800170e:	f043 0301 	orr.w	r3, r3, #1
 8001712:	b2db      	uxtb	r3, r3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d102      	bne.n	800171e <HAL_RCC_OscConfig+0x82>
 8001718:	4b99      	ldr	r3, [pc, #612]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	e015      	b.n	800174a <HAL_RCC_OscConfig+0xae>
 800171e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001722:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001726:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800172a:	fa93 f3a3 	rbit	r3, r3
 800172e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001732:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001736:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800173a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800173e:	fa93 f3a3 	rbit	r3, r3
 8001742:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001746:	4b8e      	ldr	r3, [pc, #568]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800174e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001752:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001756:	fa92 f2a2 	rbit	r2, r2
 800175a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800175e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001762:	fab2 f282 	clz	r2, r2
 8001766:	b2d2      	uxtb	r2, r2
 8001768:	f042 0220 	orr.w	r2, r2, #32
 800176c:	b2d2      	uxtb	r2, r2
 800176e:	f002 021f 	and.w	r2, r2, #31
 8001772:	2101      	movs	r1, #1
 8001774:	fa01 f202 	lsl.w	r2, r1, r2
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 8102 	beq.w	8001984 <HAL_RCC_OscConfig+0x2e8>
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	f040 80fc 	bne.w	8001984 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	f000 be93 	b.w	80024b8 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800179c:	d106      	bne.n	80017ac <HAL_RCC_OscConfig+0x110>
 800179e:	4b78      	ldr	r3, [pc, #480]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a77      	ldr	r2, [pc, #476]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e030      	b.n	800180e <HAL_RCC_OscConfig+0x172>
 80017ac:	1d3b      	adds	r3, r7, #4
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0x134>
 80017b6:	4b72      	ldr	r3, [pc, #456]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a71      	ldr	r2, [pc, #452]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80017bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4b6f      	ldr	r3, [pc, #444]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a6e      	ldr	r2, [pc, #440]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80017c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e01e      	b.n	800180e <HAL_RCC_OscConfig+0x172>
 80017d0:	1d3b      	adds	r3, r7, #4
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017da:	d10c      	bne.n	80017f6 <HAL_RCC_OscConfig+0x15a>
 80017dc:	4b68      	ldr	r3, [pc, #416]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a67      	ldr	r2, [pc, #412]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80017e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	4b65      	ldr	r3, [pc, #404]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a64      	ldr	r2, [pc, #400]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80017ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f2:	6013      	str	r3, [r2, #0]
 80017f4:	e00b      	b.n	800180e <HAL_RCC_OscConfig+0x172>
 80017f6:	4b62      	ldr	r3, [pc, #392]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a61      	ldr	r2, [pc, #388]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 80017fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001800:	6013      	str	r3, [r2, #0]
 8001802:	4b5f      	ldr	r3, [pc, #380]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a5e      	ldr	r2, [pc, #376]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 8001808:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800180c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800180e:	1d3b      	adds	r3, r7, #4
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d059      	beq.n	80018cc <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001818:	f7ff fbc0 	bl	8000f9c <HAL_GetTick>
 800181c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001820:	e00a      	b.n	8001838 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001822:	f7ff fbbb 	bl	8000f9c <HAL_GetTick>
 8001826:	4602      	mov	r2, r0
 8001828:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b64      	cmp	r3, #100	; 0x64
 8001830:	d902      	bls.n	8001838 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	f000 be40 	b.w	80024b8 <HAL_RCC_OscConfig+0xe1c>
 8001838:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800183c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001840:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001844:	fa93 f3a3 	rbit	r3, r3
 8001848:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800184c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001850:	fab3 f383 	clz	r3, r3
 8001854:	b2db      	uxtb	r3, r3
 8001856:	095b      	lsrs	r3, r3, #5
 8001858:	b2db      	uxtb	r3, r3
 800185a:	f043 0301 	orr.w	r3, r3, #1
 800185e:	b2db      	uxtb	r3, r3
 8001860:	2b01      	cmp	r3, #1
 8001862:	d102      	bne.n	800186a <HAL_RCC_OscConfig+0x1ce>
 8001864:	4b46      	ldr	r3, [pc, #280]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	e015      	b.n	8001896 <HAL_RCC_OscConfig+0x1fa>
 800186a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800186e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001872:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001876:	fa93 f3a3 	rbit	r3, r3
 800187a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800187e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001882:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001886:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001892:	4b3b      	ldr	r3, [pc, #236]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800189a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800189e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80018a2:	fa92 f2a2 	rbit	r2, r2
 80018a6:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80018aa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80018ae:	fab2 f282 	clz	r2, r2
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	f042 0220 	orr.w	r2, r2, #32
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	f002 021f 	and.w	r2, r2, #31
 80018be:	2101      	movs	r1, #1
 80018c0:	fa01 f202 	lsl.w	r2, r1, r2
 80018c4:	4013      	ands	r3, r2
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0ab      	beq.n	8001822 <HAL_RCC_OscConfig+0x186>
 80018ca:	e05c      	b.n	8001986 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fb66 	bl	8000f9c <HAL_GetTick>
 80018d0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018d6:	f7ff fb61 	bl	8000f9c <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b64      	cmp	r3, #100	; 0x64
 80018e4:	d902      	bls.n	80018ec <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	f000 bde6 	b.w	80024b8 <HAL_RCC_OscConfig+0xe1c>
 80018ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80018f8:	fa93 f3a3 	rbit	r3, r3
 80018fc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8001900:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	095b      	lsrs	r3, r3, #5
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f043 0301 	orr.w	r3, r3, #1
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b01      	cmp	r3, #1
 8001916:	d102      	bne.n	800191e <HAL_RCC_OscConfig+0x282>
 8001918:	4b19      	ldr	r3, [pc, #100]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	e015      	b.n	800194a <HAL_RCC_OscConfig+0x2ae>
 800191e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001922:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001926:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800192a:	fa93 f3a3 	rbit	r3, r3
 800192e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001932:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001936:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800193a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800193e:	fa93 f3a3 	rbit	r3, r3
 8001942:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_RCC_OscConfig+0x2e4>)
 8001948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800194a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800194e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001952:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001956:	fa92 f2a2 	rbit	r2, r2
 800195a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800195e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001962:	fab2 f282 	clz	r2, r2
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	f042 0220 	orr.w	r2, r2, #32
 800196c:	b2d2      	uxtb	r2, r2
 800196e:	f002 021f 	and.w	r2, r2, #31
 8001972:	2101      	movs	r1, #1
 8001974:	fa01 f202 	lsl.w	r2, r1, r2
 8001978:	4013      	ands	r3, r2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d1ab      	bne.n	80018d6 <HAL_RCC_OscConfig+0x23a>
 800197e:	e002      	b.n	8001986 <HAL_RCC_OscConfig+0x2ea>
 8001980:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	1d3b      	adds	r3, r7, #4
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	f000 8170 	beq.w	8001c76 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001996:	4bd0      	ldr	r3, [pc, #832]	; (8001cd8 <HAL_RCC_OscConfig+0x63c>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d00c      	beq.n	80019bc <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019a2:	4bcd      	ldr	r3, [pc, #820]	; (8001cd8 <HAL_RCC_OscConfig+0x63c>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f003 030c 	and.w	r3, r3, #12
 80019aa:	2b08      	cmp	r3, #8
 80019ac:	d16d      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3ee>
 80019ae:	4bca      	ldr	r3, [pc, #808]	; (8001cd8 <HAL_RCC_OscConfig+0x63c>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80019b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019ba:	d166      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3ee>
 80019bc:	2302      	movs	r3, #2
 80019be:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80019ce:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	fab3 f383 	clz	r3, r3
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	095b      	lsrs	r3, r3, #5
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d102      	bne.n	80019ec <HAL_RCC_OscConfig+0x350>
 80019e6:	4bbc      	ldr	r3, [pc, #752]	; (8001cd8 <HAL_RCC_OscConfig+0x63c>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	e013      	b.n	8001a14 <HAL_RCC_OscConfig+0x378>
 80019ec:	2302      	movs	r3, #2
 80019ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80019fe:	2302      	movs	r3, #2
 8001a00:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001a04:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001a10:	4bb1      	ldr	r3, [pc, #708]	; (8001cd8 <HAL_RCC_OscConfig+0x63c>)
 8001a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a14:	2202      	movs	r2, #2
 8001a16:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001a1a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001a1e:	fa92 f2a2 	rbit	r2, r2
 8001a22:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001a26:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001a2a:	fab2 f282 	clz	r2, r2
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	f042 0220 	orr.w	r2, r2, #32
 8001a34:	b2d2      	uxtb	r2, r2
 8001a36:	f002 021f 	and.w	r2, r2, #31
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a40:	4013      	ands	r3, r2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d007      	beq.n	8001a56 <HAL_RCC_OscConfig+0x3ba>
 8001a46:	1d3b      	adds	r3, r7, #4
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d002      	beq.n	8001a56 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	f000 bd31 	b.w	80024b8 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a56:	4ba0      	ldr	r3, [pc, #640]	; (8001cd8 <HAL_RCC_OscConfig+0x63c>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	21f8      	movs	r1, #248	; 0xf8
 8001a66:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001a6e:	fa91 f1a1 	rbit	r1, r1
 8001a72:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001a76:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001a7a:	fab1 f181 	clz	r1, r1
 8001a7e:	b2c9      	uxtb	r1, r1
 8001a80:	408b      	lsls	r3, r1
 8001a82:	4995      	ldr	r1, [pc, #596]	; (8001cd8 <HAL_RCC_OscConfig+0x63c>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a88:	e0f5      	b.n	8001c76 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 8085 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x504>
 8001a96:	2301      	movs	r3, #1
 8001a98:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001aa8:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aac:	fab3 f383 	clz	r3, r3
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ab6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	461a      	mov	r2, r3
 8001abe:	2301      	movs	r3, #1
 8001ac0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fa6b 	bl	8000f9c <HAL_GetTick>
 8001ac6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001acc:	f7ff fa66 	bl	8000f9c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d902      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	f000 bceb 	b.w	80024b8 <HAL_RCC_OscConfig+0xe1c>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001aec:	fa93 f3a3 	rbit	r3, r3
 8001af0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001af4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	095b      	lsrs	r3, r3, #5
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d102      	bne.n	8001b12 <HAL_RCC_OscConfig+0x476>
 8001b0c:	4b72      	ldr	r3, [pc, #456]	; (8001cd8 <HAL_RCC_OscConfig+0x63c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	e013      	b.n	8001b3a <HAL_RCC_OscConfig+0x49e>
 8001b12:	2302      	movs	r3, #2
 8001b14:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b18:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001b1c:	fa93 f3a3 	rbit	r3, r3
 8001b20:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001b24:	2302      	movs	r3, #2
 8001b26:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001b2a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001b2e:	fa93 f3a3 	rbit	r3, r3
 8001b32:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001b36:	4b68      	ldr	r3, [pc, #416]	; (8001cd8 <HAL_RCC_OscConfig+0x63c>)
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001b40:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001b44:	fa92 f2a2 	rbit	r2, r2
 8001b48:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001b4c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001b50:	fab2 f282 	clz	r2, r2
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	f042 0220 	orr.w	r2, r2, #32
 8001b5a:	b2d2      	uxtb	r2, r2
 8001b5c:	f002 021f 	and.w	r2, r2, #31
 8001b60:	2101      	movs	r1, #1
 8001b62:	fa01 f202 	lsl.w	r2, r1, r2
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0af      	beq.n	8001acc <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b6c:	4b5a      	ldr	r3, [pc, #360]	; (8001cd8 <HAL_RCC_OscConfig+0x63c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	21f8      	movs	r1, #248	; 0xf8
 8001b7c:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001b84:	fa91 f1a1 	rbit	r1, r1
 8001b88:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001b8c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001b90:	fab1 f181 	clz	r1, r1
 8001b94:	b2c9      	uxtb	r1, r1
 8001b96:	408b      	lsls	r3, r1
 8001b98:	494f      	ldr	r1, [pc, #316]	; (8001cd8 <HAL_RCC_OscConfig+0x63c>)
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	600b      	str	r3, [r1, #0]
 8001b9e:	e06a      	b.n	8001c76 <HAL_RCC_OscConfig+0x5da>
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001bb2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb6:	fab3 f383 	clz	r3, r3
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bc0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	2300      	movs	r3, #0
 8001bca:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f9e6 	bl	8000f9c <HAL_GetTick>
 8001bd0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd4:	e00a      	b.n	8001bec <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd6:	f7ff f9e1 	bl	8000f9c <HAL_GetTick>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d902      	bls.n	8001bec <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	f000 bc66 	b.w	80024b8 <HAL_RCC_OscConfig+0xe1c>
 8001bec:	2302      	movs	r3, #2
 8001bee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001bf6:	fa93 f3a3 	rbit	r3, r3
 8001bfa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001bfe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	095b      	lsrs	r3, r3, #5
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d102      	bne.n	8001c1c <HAL_RCC_OscConfig+0x580>
 8001c16:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <HAL_RCC_OscConfig+0x63c>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	e013      	b.n	8001c44 <HAL_RCC_OscConfig+0x5a8>
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001c26:	fa93 f3a3 	rbit	r3, r3
 8001c2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001c2e:	2302      	movs	r3, #2
 8001c30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001c34:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001c38:	fa93 f3a3 	rbit	r3, r3
 8001c3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001c40:	4b25      	ldr	r3, [pc, #148]	; (8001cd8 <HAL_RCC_OscConfig+0x63c>)
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	2202      	movs	r2, #2
 8001c46:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001c4a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001c4e:	fa92 f2a2 	rbit	r2, r2
 8001c52:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001c56:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001c5a:	fab2 f282 	clz	r2, r2
 8001c5e:	b2d2      	uxtb	r2, r2
 8001c60:	f042 0220 	orr.w	r2, r2, #32
 8001c64:	b2d2      	uxtb	r2, r2
 8001c66:	f002 021f 	and.w	r2, r2, #31
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c70:	4013      	ands	r3, r2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1af      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 80da 	beq.w	8001e3a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d069      	beq.n	8001d64 <HAL_RCC_OscConfig+0x6c8>
 8001c90:	2301      	movs	r3, #1
 8001c92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001c9a:	fa93 f3a3 	rbit	r3, r3
 8001c9e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001ca2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ca6:	fab3 f383 	clz	r3, r3
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	461a      	mov	r2, r3
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_RCC_OscConfig+0x640>)
 8001cb0:	4413      	add	r3, r2
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cba:	f7ff f96f 	bl	8000f9c <HAL_GetTick>
 8001cbe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc2:	e00d      	b.n	8001ce0 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cc4:	f7ff f96a 	bl	8000f9c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d905      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e3ef      	b.n	80024b8 <HAL_RCC_OscConfig+0xe1c>
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	10908120 	.word	0x10908120
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001cea:	fa93 f2a3 	rbit	r2, r3
 8001cee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	fa93 f2a3 	rbit	r2, r3
 8001d06:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d10:	2202      	movs	r2, #2
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	fa93 f2a3 	rbit	r2, r3
 8001d1e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001d22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d24:	4ba4      	ldr	r3, [pc, #656]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001d26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d28:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d2c:	2102      	movs	r1, #2
 8001d2e:	6019      	str	r1, [r3, #0]
 8001d30:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	fa93 f1a3 	rbit	r1, r3
 8001d3a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d3e:	6019      	str	r1, [r3, #0]
  return result;
 8001d40:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f003 031f 	and.w	r3, r3, #31
 8001d56:	2101      	movs	r1, #1
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0b0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x628>
 8001d62:	e06a      	b.n	8001e3a <HAL_RCC_OscConfig+0x79e>
 8001d64:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d6c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	fa93 f2a3 	rbit	r2, r3
 8001d76:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d7a:	601a      	str	r2, [r3, #0]
  return result;
 8001d7c:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001d80:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b8c      	ldr	r3, [pc, #560]	; (8001fbc <HAL_RCC_OscConfig+0x920>)
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	461a      	mov	r2, r3
 8001d92:	2300      	movs	r3, #0
 8001d94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d96:	f7ff f901 	bl	8000f9c <HAL_GetTick>
 8001d9a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d9e:	e009      	b.n	8001db4 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001da0:	f7ff f8fc 	bl	8000f9c <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e381      	b.n	80024b8 <HAL_RCC_OscConfig+0xe1c>
 8001db4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001db8:	2202      	movs	r2, #2
 8001dba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	fa93 f2a3 	rbit	r2, r3
 8001dc6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dd0:	2202      	movs	r2, #2
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	fa93 f2a3 	rbit	r2, r3
 8001dde:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001de8:	2202      	movs	r2, #2
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	fa93 f2a3 	rbit	r2, r3
 8001df6:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001dfa:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dfc:	4b6e      	ldr	r3, [pc, #440]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001dfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e00:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e04:	2102      	movs	r1, #2
 8001e06:	6019      	str	r1, [r3, #0]
 8001e08:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	fa93 f1a3 	rbit	r1, r3
 8001e12:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e16:	6019      	str	r1, [r3, #0]
  return result;
 8001e18:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	2101      	movs	r1, #1
 8001e30:	fa01 f303 	lsl.w	r3, r1, r3
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1b2      	bne.n	8001da0 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0304 	and.w	r3, r3, #4
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	f000 8157 	beq.w	80020f8 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e50:	4b59      	ldr	r3, [pc, #356]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001e52:	69db      	ldr	r3, [r3, #28]
 8001e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d112      	bne.n	8001e82 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5c:	4b56      	ldr	r3, [pc, #344]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001e5e:	69db      	ldr	r3, [r3, #28]
 8001e60:	4a55      	ldr	r2, [pc, #340]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e66:	61d3      	str	r3, [r2, #28]
 8001e68:	4b53      	ldr	r3, [pc, #332]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001e6a:	69db      	ldr	r3, [r3, #28]
 8001e6c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001e70:	f107 030c 	add.w	r3, r7, #12
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	f107 030c 	add.w	r3, r7, #12
 8001e7a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e82:	4b4f      	ldr	r3, [pc, #316]	; (8001fc0 <HAL_RCC_OscConfig+0x924>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d11a      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e8e:	4b4c      	ldr	r3, [pc, #304]	; (8001fc0 <HAL_RCC_OscConfig+0x924>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a4b      	ldr	r2, [pc, #300]	; (8001fc0 <HAL_RCC_OscConfig+0x924>)
 8001e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e98:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e9a:	f7ff f87f 	bl	8000f9c <HAL_GetTick>
 8001e9e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea2:	e009      	b.n	8001eb8 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea4:	f7ff f87a 	bl	8000f9c <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b64      	cmp	r3, #100	; 0x64
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e2ff      	b.n	80024b8 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb8:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <HAL_RCC_OscConfig+0x924>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0ef      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec4:	1d3b      	adds	r3, r7, #4
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d106      	bne.n	8001edc <HAL_RCC_OscConfig+0x840>
 8001ece:	4b3a      	ldr	r3, [pc, #232]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001ed0:	6a1b      	ldr	r3, [r3, #32]
 8001ed2:	4a39      	ldr	r2, [pc, #228]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6213      	str	r3, [r2, #32]
 8001eda:	e02f      	b.n	8001f3c <HAL_RCC_OscConfig+0x8a0>
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x864>
 8001ee6:	4b34      	ldr	r3, [pc, #208]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001ee8:	6a1b      	ldr	r3, [r3, #32]
 8001eea:	4a33      	ldr	r2, [pc, #204]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001eec:	f023 0301 	bic.w	r3, r3, #1
 8001ef0:	6213      	str	r3, [r2, #32]
 8001ef2:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	4a30      	ldr	r2, [pc, #192]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001ef8:	f023 0304 	bic.w	r3, r3, #4
 8001efc:	6213      	str	r3, [r2, #32]
 8001efe:	e01d      	b.n	8001f3c <HAL_RCC_OscConfig+0x8a0>
 8001f00:	1d3b      	adds	r3, r7, #4
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2b05      	cmp	r3, #5
 8001f08:	d10c      	bne.n	8001f24 <HAL_RCC_OscConfig+0x888>
 8001f0a:	4b2b      	ldr	r3, [pc, #172]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	4a2a      	ldr	r2, [pc, #168]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001f10:	f043 0304 	orr.w	r3, r3, #4
 8001f14:	6213      	str	r3, [r2, #32]
 8001f16:	4b28      	ldr	r3, [pc, #160]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	4a27      	ldr	r2, [pc, #156]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6213      	str	r3, [r2, #32]
 8001f22:	e00b      	b.n	8001f3c <HAL_RCC_OscConfig+0x8a0>
 8001f24:	4b24      	ldr	r3, [pc, #144]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	4a23      	ldr	r2, [pc, #140]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001f2a:	f023 0301 	bic.w	r3, r3, #1
 8001f2e:	6213      	str	r3, [r2, #32]
 8001f30:	4b21      	ldr	r3, [pc, #132]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	4a20      	ldr	r2, [pc, #128]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001f36:	f023 0304 	bic.w	r3, r3, #4
 8001f3a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d06a      	beq.n	800201c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f46:	f7ff f829 	bl	8000f9c <HAL_GetTick>
 8001f4a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f50:	f7ff f824 	bl	8000f9c <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e2a7      	b.n	80024b8 <HAL_RCC_OscConfig+0xe1c>
 8001f68:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	fa93 f2a3 	rbit	r2, r3
 8001f7a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f84:	2202      	movs	r2, #2
 8001f86:	601a      	str	r2, [r3, #0]
 8001f88:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	fa93 f2a3 	rbit	r2, r3
 8001f92:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f96:	601a      	str	r2, [r3, #0]
  return result;
 8001f98:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001f9c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f9e:	fab3 f383 	clz	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	095b      	lsrs	r3, r3, #5
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f043 0302 	orr.w	r3, r3, #2
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	d108      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x928>
 8001fb2:	4b01      	ldr	r3, [pc, #4]	; (8001fb8 <HAL_RCC_OscConfig+0x91c>)
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	e013      	b.n	8001fe0 <HAL_RCC_OscConfig+0x944>
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	10908120 	.word	0x10908120
 8001fc0:	40007000 	.word	0x40007000
 8001fc4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fc8:	2202      	movs	r2, #2
 8001fca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	fa93 f2a3 	rbit	r2, r3
 8001fd6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001fda:	601a      	str	r2, [r3, #0]
 8001fdc:	4bc0      	ldr	r3, [pc, #768]	; (80022e0 <HAL_RCC_OscConfig+0xc44>)
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001fe4:	2102      	movs	r1, #2
 8001fe6:	6011      	str	r1, [r2, #0]
 8001fe8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001fec:	6812      	ldr	r2, [r2, #0]
 8001fee:	fa92 f1a2 	rbit	r1, r2
 8001ff2:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ff6:	6011      	str	r1, [r2, #0]
  return result;
 8001ff8:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	fab2 f282 	clz	r2, r2
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002008:	b2d2      	uxtb	r2, r2
 800200a:	f002 021f 	and.w	r2, r2, #31
 800200e:	2101      	movs	r1, #1
 8002010:	fa01 f202 	lsl.w	r2, r1, r2
 8002014:	4013      	ands	r3, r2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d09a      	beq.n	8001f50 <HAL_RCC_OscConfig+0x8b4>
 800201a:	e063      	b.n	80020e4 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800201c:	f7fe ffbe 	bl	8000f9c <HAL_GetTick>
 8002020:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002024:	e00b      	b.n	800203e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7fe ffb9 	bl	8000f9c <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	f241 3288 	movw	r2, #5000	; 0x1388
 8002036:	4293      	cmp	r3, r2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e23c      	b.n	80024b8 <HAL_RCC_OscConfig+0xe1c>
 800203e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002042:	2202      	movs	r2, #2
 8002044:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	fa93 f2a3 	rbit	r2, r3
 8002050:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002054:	601a      	str	r2, [r3, #0]
 8002056:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800205a:	2202      	movs	r2, #2
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	fa93 f2a3 	rbit	r2, r3
 8002068:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800206c:	601a      	str	r2, [r3, #0]
  return result;
 800206e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002072:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f043 0302 	orr.w	r3, r3, #2
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d102      	bne.n	800208e <HAL_RCC_OscConfig+0x9f2>
 8002088:	4b95      	ldr	r3, [pc, #596]	; (80022e0 <HAL_RCC_OscConfig+0xc44>)
 800208a:	6a1b      	ldr	r3, [r3, #32]
 800208c:	e00d      	b.n	80020aa <HAL_RCC_OscConfig+0xa0e>
 800208e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002092:	2202      	movs	r2, #2
 8002094:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	fa93 f2a3 	rbit	r2, r3
 80020a0:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80020a4:	601a      	str	r2, [r3, #0]
 80020a6:	4b8e      	ldr	r3, [pc, #568]	; (80022e0 <HAL_RCC_OscConfig+0xc44>)
 80020a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020aa:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80020ae:	2102      	movs	r1, #2
 80020b0:	6011      	str	r1, [r2, #0]
 80020b2:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	fa92 f1a2 	rbit	r1, r2
 80020bc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020c0:	6011      	str	r1, [r2, #0]
  return result;
 80020c2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	fab2 f282 	clz	r2, r2
 80020cc:	b2d2      	uxtb	r2, r2
 80020ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	f002 021f 	and.w	r2, r2, #31
 80020d8:	2101      	movs	r1, #1
 80020da:	fa01 f202 	lsl.w	r2, r1, r2
 80020de:	4013      	ands	r3, r2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1a0      	bne.n	8002026 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020e4:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ec:	4b7c      	ldr	r3, [pc, #496]	; (80022e0 <HAL_RCC_OscConfig+0xc44>)
 80020ee:	69db      	ldr	r3, [r3, #28]
 80020f0:	4a7b      	ldr	r2, [pc, #492]	; (80022e0 <HAL_RCC_OscConfig+0xc44>)
 80020f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020f6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 81d9 	beq.w	80024b6 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002104:	4b76      	ldr	r3, [pc, #472]	; (80022e0 <HAL_RCC_OscConfig+0xc44>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b08      	cmp	r3, #8
 800210e:	f000 81a6 	beq.w	800245e <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002112:	1d3b      	adds	r3, r7, #4
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	2b02      	cmp	r3, #2
 800211a:	f040 811e 	bne.w	800235a <HAL_RCC_OscConfig+0xcbe>
 800211e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002122:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002126:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002128:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	fa93 f2a3 	rbit	r2, r3
 8002132:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002136:	601a      	str	r2, [r3, #0]
  return result;
 8002138:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800213c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213e:	fab3 f383 	clz	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002148:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	461a      	mov	r2, r3
 8002150:	2300      	movs	r3, #0
 8002152:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002154:	f7fe ff22 	bl	8000f9c <HAL_GetTick>
 8002158:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800215c:	e009      	b.n	8002172 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800215e:	f7fe ff1d 	bl	8000f9c <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e1a2      	b.n	80024b8 <HAL_RCC_OscConfig+0xe1c>
 8002172:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002176:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800217a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	fa93 f2a3 	rbit	r2, r3
 8002186:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800218a:	601a      	str	r2, [r3, #0]
  return result;
 800218c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002190:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	095b      	lsrs	r3, r3, #5
 800219a:	b2db      	uxtb	r3, r3
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d102      	bne.n	80021ac <HAL_RCC_OscConfig+0xb10>
 80021a6:	4b4e      	ldr	r3, [pc, #312]	; (80022e0 <HAL_RCC_OscConfig+0xc44>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	e01b      	b.n	80021e4 <HAL_RCC_OscConfig+0xb48>
 80021ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	fa93 f2a3 	rbit	r2, r3
 80021c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80021c4:	601a      	str	r2, [r3, #0]
 80021c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ce:	601a      	str	r2, [r3, #0]
 80021d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	fa93 f2a3 	rbit	r2, r3
 80021da:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	4b3f      	ldr	r3, [pc, #252]	; (80022e0 <HAL_RCC_OscConfig+0xc44>)
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80021e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80021ec:	6011      	str	r1, [r2, #0]
 80021ee:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80021f2:	6812      	ldr	r2, [r2, #0]
 80021f4:	fa92 f1a2 	rbit	r1, r2
 80021f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80021fc:	6011      	str	r1, [r2, #0]
  return result;
 80021fe:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002202:	6812      	ldr	r2, [r2, #0]
 8002204:	fab2 f282 	clz	r2, r2
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	f042 0220 	orr.w	r2, r2, #32
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	f002 021f 	and.w	r2, r2, #31
 8002214:	2101      	movs	r1, #1
 8002216:	fa01 f202 	lsl.w	r2, r1, r2
 800221a:	4013      	ands	r3, r2
 800221c:	2b00      	cmp	r3, #0
 800221e:	d19e      	bne.n	800215e <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002220:	4b2f      	ldr	r3, [pc, #188]	; (80022e0 <HAL_RCC_OscConfig+0xc44>)
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	f023 020f 	bic.w	r2, r3, #15
 8002228:	1d3b      	adds	r3, r7, #4
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222e:	492c      	ldr	r1, [pc, #176]	; (80022e0 <HAL_RCC_OscConfig+0xc44>)
 8002230:	4313      	orrs	r3, r2
 8002232:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002234:	4b2a      	ldr	r3, [pc, #168]	; (80022e0 <HAL_RCC_OscConfig+0xc44>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6a19      	ldr	r1, [r3, #32]
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	69db      	ldr	r3, [r3, #28]
 8002248:	430b      	orrs	r3, r1
 800224a:	4925      	ldr	r1, [pc, #148]	; (80022e0 <HAL_RCC_OscConfig+0xc44>)
 800224c:	4313      	orrs	r3, r2
 800224e:	604b      	str	r3, [r1, #4]
 8002250:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002254:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002258:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	fa93 f2a3 	rbit	r2, r3
 8002264:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002268:	601a      	str	r2, [r3, #0]
  return result;
 800226a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800226e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800227a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	461a      	mov	r2, r3
 8002282:	2301      	movs	r3, #1
 8002284:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7fe fe89 	bl	8000f9c <HAL_GetTick>
 800228a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800228e:	e009      	b.n	80022a4 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe fe84 	bl	8000f9c <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e109      	b.n	80024b8 <HAL_RCC_OscConfig+0xe1c>
 80022a4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	fa93 f2a3 	rbit	r2, r3
 80022b8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022bc:	601a      	str	r2, [r3, #0]
  return result;
 80022be:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80022c2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	095b      	lsrs	r3, r3, #5
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d105      	bne.n	80022e4 <HAL_RCC_OscConfig+0xc48>
 80022d8:	4b01      	ldr	r3, [pc, #4]	; (80022e0 <HAL_RCC_OscConfig+0xc44>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	e01e      	b.n	800231c <HAL_RCC_OscConfig+0xc80>
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	fa93 f2a3 	rbit	r2, r3
 80022f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002302:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	fa93 f2a3 	rbit	r2, r3
 8002312:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	4b6a      	ldr	r3, [pc, #424]	; (80024c4 <HAL_RCC_OscConfig+0xe28>)
 800231a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002320:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002324:	6011      	str	r1, [r2, #0]
 8002326:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800232a:	6812      	ldr	r2, [r2, #0]
 800232c:	fa92 f1a2 	rbit	r1, r2
 8002330:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002334:	6011      	str	r1, [r2, #0]
  return result;
 8002336:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	fab2 f282 	clz	r2, r2
 8002340:	b2d2      	uxtb	r2, r2
 8002342:	f042 0220 	orr.w	r2, r2, #32
 8002346:	b2d2      	uxtb	r2, r2
 8002348:	f002 021f 	and.w	r2, r2, #31
 800234c:	2101      	movs	r1, #1
 800234e:	fa01 f202 	lsl.w	r2, r1, r2
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d09b      	beq.n	8002290 <HAL_RCC_OscConfig+0xbf4>
 8002358:	e0ad      	b.n	80024b6 <HAL_RCC_OscConfig+0xe1a>
 800235a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800235e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002362:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002364:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	fa93 f2a3 	rbit	r2, r3
 800236e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002372:	601a      	str	r2, [r3, #0]
  return result;
 8002374:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002378:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002384:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	461a      	mov	r2, r3
 800238c:	2300      	movs	r3, #0
 800238e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7fe fe04 	bl	8000f9c <HAL_GetTick>
 8002394:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002398:	e009      	b.n	80023ae <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239a:	f7fe fdff 	bl	8000f9c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e084      	b.n	80024b8 <HAL_RCC_OscConfig+0xe1c>
 80023ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023b2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	fa93 f2a3 	rbit	r2, r3
 80023c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023c6:	601a      	str	r2, [r3, #0]
  return result;
 80023c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023cc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	095b      	lsrs	r3, r3, #5
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d102      	bne.n	80023e8 <HAL_RCC_OscConfig+0xd4c>
 80023e2:	4b38      	ldr	r3, [pc, #224]	; (80024c4 <HAL_RCC_OscConfig+0xe28>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	e01b      	b.n	8002420 <HAL_RCC_OscConfig+0xd84>
 80023e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	fa93 f2a3 	rbit	r2, r3
 80023fc:	f107 0320 	add.w	r3, r7, #32
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	f107 031c 	add.w	r3, r7, #28
 8002406:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	f107 031c 	add.w	r3, r7, #28
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	fa93 f2a3 	rbit	r2, r3
 8002416:	f107 0318 	add.w	r3, r7, #24
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	4b29      	ldr	r3, [pc, #164]	; (80024c4 <HAL_RCC_OscConfig+0xe28>)
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	f107 0214 	add.w	r2, r7, #20
 8002424:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002428:	6011      	str	r1, [r2, #0]
 800242a:	f107 0214 	add.w	r2, r7, #20
 800242e:	6812      	ldr	r2, [r2, #0]
 8002430:	fa92 f1a2 	rbit	r1, r2
 8002434:	f107 0210 	add.w	r2, r7, #16
 8002438:	6011      	str	r1, [r2, #0]
  return result;
 800243a:	f107 0210 	add.w	r2, r7, #16
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	fab2 f282 	clz	r2, r2
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	f042 0220 	orr.w	r2, r2, #32
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	f002 021f 	and.w	r2, r2, #31
 8002450:	2101      	movs	r1, #1
 8002452:	fa01 f202 	lsl.w	r2, r1, r2
 8002456:	4013      	ands	r3, r2
 8002458:	2b00      	cmp	r3, #0
 800245a:	d19e      	bne.n	800239a <HAL_RCC_OscConfig+0xcfe>
 800245c:	e02b      	b.n	80024b6 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e025      	b.n	80024b8 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <HAL_RCC_OscConfig+0xe28>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <HAL_RCC_OscConfig+0xe28>)
 8002476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002478:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800247c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002480:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002484:	1d3b      	adds	r3, r7, #4
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	429a      	cmp	r2, r3
 800248c:	d111      	bne.n	80024b2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800248e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002492:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800249c:	429a      	cmp	r2, r3
 800249e:	d108      	bne.n	80024b2 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80024a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024a4:	f003 020f 	and.w	r2, r3, #15
 80024a8:	1d3b      	adds	r3, r7, #4
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d001      	beq.n	80024b6 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40021000 	.word	0x40021000

080024c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b09e      	sub	sp, #120	; 0x78
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e162      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b90      	ldr	r3, [pc, #576]	; (8002724 <HAL_RCC_ClockConfig+0x25c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d910      	bls.n	8002510 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b8d      	ldr	r3, [pc, #564]	; (8002724 <HAL_RCC_ClockConfig+0x25c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 0207 	bic.w	r2, r3, #7
 80024f6:	498b      	ldr	r1, [pc, #556]	; (8002724 <HAL_RCC_ClockConfig+0x25c>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b89      	ldr	r3, [pc, #548]	; (8002724 <HAL_RCC_ClockConfig+0x25c>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e14a      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800251c:	4b82      	ldr	r3, [pc, #520]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	497f      	ldr	r1, [pc, #508]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 80dc 	beq.w	80026f4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d13c      	bne.n	80025be <HAL_RCC_ClockConfig+0xf6>
 8002544:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002548:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d102      	bne.n	800256e <HAL_RCC_ClockConfig+0xa6>
 8002568:	4b6f      	ldr	r3, [pc, #444]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	e00f      	b.n	800258e <HAL_RCC_ClockConfig+0xc6>
 800256e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002572:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002576:	fa93 f3a3 	rbit	r3, r3
 800257a:	667b      	str	r3, [r7, #100]	; 0x64
 800257c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002580:	663b      	str	r3, [r7, #96]	; 0x60
 8002582:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002584:	fa93 f3a3 	rbit	r3, r3
 8002588:	65fb      	str	r3, [r7, #92]	; 0x5c
 800258a:	4b67      	ldr	r3, [pc, #412]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002592:	65ba      	str	r2, [r7, #88]	; 0x58
 8002594:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002596:	fa92 f2a2 	rbit	r2, r2
 800259a:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 800259c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800259e:	fab2 f282 	clz	r2, r2
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	f042 0220 	orr.w	r2, r2, #32
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	f002 021f 	and.w	r2, r2, #31
 80025ae:	2101      	movs	r1, #1
 80025b0:	fa01 f202 	lsl.w	r2, r1, r2
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d17b      	bne.n	80026b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0f3      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d13c      	bne.n	8002640 <HAL_RCC_ClockConfig+0x178>
 80025c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	095b      	lsrs	r3, r3, #5
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d102      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x128>
 80025ea:	4b4f      	ldr	r3, [pc, #316]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	e00f      	b.n	8002610 <HAL_RCC_ClockConfig+0x148>
 80025f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025f4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025f8:	fa93 f3a3 	rbit	r3, r3
 80025fc:	647b      	str	r3, [r7, #68]	; 0x44
 80025fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002602:	643b      	str	r3, [r7, #64]	; 0x40
 8002604:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002606:	fa93 f3a3 	rbit	r3, r3
 800260a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800260c:	4b46      	ldr	r3, [pc, #280]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 800260e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002610:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002614:	63ba      	str	r2, [r7, #56]	; 0x38
 8002616:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002618:	fa92 f2a2 	rbit	r2, r2
 800261c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800261e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002620:	fab2 f282 	clz	r2, r2
 8002624:	b2d2      	uxtb	r2, r2
 8002626:	f042 0220 	orr.w	r2, r2, #32
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	f002 021f 	and.w	r2, r2, #31
 8002630:	2101      	movs	r1, #1
 8002632:	fa01 f202 	lsl.w	r2, r1, r2
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d13a      	bne.n	80026b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e0b2      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2de>
 8002640:	2302      	movs	r3, #2
 8002642:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002646:	fa93 f3a3 	rbit	r3, r3
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	fab3 f383 	clz	r3, r3
 8002652:	b2db      	uxtb	r3, r3
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d102      	bne.n	8002668 <HAL_RCC_ClockConfig+0x1a0>
 8002662:	4b31      	ldr	r3, [pc, #196]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	e00d      	b.n	8002684 <HAL_RCC_ClockConfig+0x1bc>
 8002668:	2302      	movs	r3, #2
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266e:	fa93 f3a3 	rbit	r3, r3
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
 8002674:	2302      	movs	r3, #2
 8002676:	623b      	str	r3, [r7, #32]
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	61fb      	str	r3, [r7, #28]
 8002680:	4b29      	ldr	r3, [pc, #164]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	2202      	movs	r2, #2
 8002686:	61ba      	str	r2, [r7, #24]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	fa92 f2a2 	rbit	r2, r2
 800268e:	617a      	str	r2, [r7, #20]
  return result;
 8002690:	697a      	ldr	r2, [r7, #20]
 8002692:	fab2 f282 	clz	r2, r2
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	f042 0220 	orr.w	r2, r2, #32
 800269c:	b2d2      	uxtb	r2, r2
 800269e:	f002 021f 	and.w	r2, r2, #31
 80026a2:	2101      	movs	r1, #1
 80026a4:	fa01 f202 	lsl.w	r2, r1, r2
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e079      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026b2:	4b1d      	ldr	r3, [pc, #116]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f023 0203 	bic.w	r2, r3, #3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	491a      	ldr	r1, [pc, #104]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026c4:	f7fe fc6a 	bl	8000f9c <HAL_GetTick>
 80026c8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026cc:	f7fe fc66 	bl	8000f9c <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e061      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e2:	4b11      	ldr	r3, [pc, #68]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f003 020c 	and.w	r2, r3, #12
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d1eb      	bne.n	80026cc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026f4:	4b0b      	ldr	r3, [pc, #44]	; (8002724 <HAL_RCC_ClockConfig+0x25c>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d214      	bcs.n	800272c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b08      	ldr	r3, [pc, #32]	; (8002724 <HAL_RCC_ClockConfig+0x25c>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 0207 	bic.w	r2, r3, #7
 800270a:	4906      	ldr	r1, [pc, #24]	; (8002724 <HAL_RCC_ClockConfig+0x25c>)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b04      	ldr	r3, [pc, #16]	; (8002724 <HAL_RCC_ClockConfig+0x25c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d005      	beq.n	800272c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e040      	b.n	80027a6 <HAL_RCC_ClockConfig+0x2de>
 8002724:	40022000 	.word	0x40022000
 8002728:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d008      	beq.n	800274a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002738:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <HAL_RCC_ClockConfig+0x2e8>)
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	491a      	ldr	r1, [pc, #104]	; (80027b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002746:	4313      	orrs	r3, r2
 8002748:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0308 	and.w	r3, r3, #8
 8002752:	2b00      	cmp	r3, #0
 8002754:	d009      	beq.n	800276a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002756:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	4912      	ldr	r1, [pc, #72]	; (80027b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002766:	4313      	orrs	r3, r2
 8002768:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800276a:	f000 f829 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 800276e:	4601      	mov	r1, r0
 8002770:	4b0f      	ldr	r3, [pc, #60]	; (80027b0 <HAL_RCC_ClockConfig+0x2e8>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002778:	22f0      	movs	r2, #240	; 0xf0
 800277a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	fa92 f2a2 	rbit	r2, r2
 8002782:	60fa      	str	r2, [r7, #12]
  return result;
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	fab2 f282 	clz	r2, r2
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	40d3      	lsrs	r3, r2
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x2ec>)
 8002790:	5cd3      	ldrb	r3, [r2, r3]
 8002792:	fa21 f303 	lsr.w	r3, r1, r3
 8002796:	4a08      	ldr	r2, [pc, #32]	; (80027b8 <HAL_RCC_ClockConfig+0x2f0>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <HAL_RCC_ClockConfig+0x2f4>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fbb8 	bl	8000f14 <HAL_InitTick>
  
  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3778      	adds	r7, #120	; 0x78
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	08004368 	.word	0x08004368
 80027b8:	20000000 	.word	0x20000000
 80027bc:	20000004 	.word	0x20000004

080027c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b08b      	sub	sp, #44	; 0x2c
 80027c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	2300      	movs	r3, #0
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
 80027d2:	2300      	movs	r3, #0
 80027d4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027d6:	2300      	movs	r3, #0
 80027d8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b04      	cmp	r3, #4
 80027e8:	d002      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x30>
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d003      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0x36>
 80027ee:	e03f      	b.n	8002870 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027f0:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027f2:	623b      	str	r3, [r7, #32]
      break;
 80027f4:	e03f      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80027fc:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002800:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	fa92 f2a2 	rbit	r2, r2
 8002808:	607a      	str	r2, [r7, #4]
  return result;
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	fab2 f282 	clz	r2, r2
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	40d3      	lsrs	r3, r2
 8002814:	4a1d      	ldr	r2, [pc, #116]	; (800288c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002816:	5cd3      	ldrb	r3, [r2, r3]
 8002818:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800281a:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <HAL_RCC_GetSysClockFreq+0xc4>)
 800281c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	220f      	movs	r2, #15
 8002824:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	fa92 f2a2 	rbit	r2, r2
 800282c:	60fa      	str	r2, [r7, #12]
  return result;
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	40d3      	lsrs	r3, r2
 8002838:	4a15      	ldr	r2, [pc, #84]	; (8002890 <HAL_RCC_GetSysClockFreq+0xd0>)
 800283a:	5cd3      	ldrb	r3, [r2, r3]
 800283c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d008      	beq.n	800285a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002848:	4a0f      	ldr	r2, [pc, #60]	; (8002888 <HAL_RCC_GetSysClockFreq+0xc8>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fb02 f303 	mul.w	r3, r2, r3
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
 8002858:	e007      	b.n	800286a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800285a:	4a0b      	ldr	r2, [pc, #44]	; (8002888 <HAL_RCC_GetSysClockFreq+0xc8>)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	fb02 f303 	mul.w	r3, r2, r3
 8002868:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800286a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286c:	623b      	str	r3, [r7, #32]
      break;
 800286e:	e002      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002870:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002872:	623b      	str	r3, [r7, #32]
      break;
 8002874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002876:	6a3b      	ldr	r3, [r7, #32]
}
 8002878:	4618      	mov	r0, r3
 800287a:	372c      	adds	r7, #44	; 0x2c
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40021000 	.word	0x40021000
 8002888:	007a1200 	.word	0x007a1200
 800288c:	08004380 	.word	0x08004380
 8002890:	08004390 	.word	0x08004390

08002894 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	20000000 	.word	0x20000000

080028ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028b2:	f7ff ffef 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028b6:	4601      	mov	r1, r0
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028c0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028c4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	fa92 f2a2 	rbit	r2, r2
 80028cc:	603a      	str	r2, [r7, #0]
  return result;
 80028ce:	683a      	ldr	r2, [r7, #0]
 80028d0:	fab2 f282 	clz	r2, r2
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	40d3      	lsrs	r3, r2
 80028d8:	4a04      	ldr	r2, [pc, #16]	; (80028ec <HAL_RCC_GetPCLK1Freq+0x40>)
 80028da:	5cd3      	ldrb	r3, [r2, r3]
 80028dc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028e0:	4618      	mov	r0, r3
 80028e2:	3708      	adds	r7, #8
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40021000 	.word	0x40021000
 80028ec:	08004378 	.word	0x08004378

080028f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028f6:	f7ff ffcd 	bl	8002894 <HAL_RCC_GetHCLKFreq>
 80028fa:	4601      	mov	r1, r0
 80028fc:	4b0b      	ldr	r3, [pc, #44]	; (800292c <HAL_RCC_GetPCLK2Freq+0x3c>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002904:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002908:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	fa92 f2a2 	rbit	r2, r2
 8002910:	603a      	str	r2, [r7, #0]
  return result;
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	fab2 f282 	clz	r2, r2
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	40d3      	lsrs	r3, r2
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_RCC_GetPCLK2Freq+0x40>)
 800291e:	5cd3      	ldrb	r3, [r2, r3]
 8002920:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	40021000 	.word	0x40021000
 8002930:	08004378 	.word	0x08004378

08002934 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b092      	sub	sp, #72	; 0x48
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800293c:	2300      	movs	r3, #0
 800293e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002940:	2300      	movs	r3, #0
 8002942:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002944:	2300      	movs	r3, #0
 8002946:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80d4 	beq.w	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002958:	4b4e      	ldr	r3, [pc, #312]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800295a:	69db      	ldr	r3, [r3, #28]
 800295c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10e      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002964:	4b4b      	ldr	r3, [pc, #300]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	4a4a      	ldr	r2, [pc, #296]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800296e:	61d3      	str	r3, [r2, #28]
 8002970:	4b48      	ldr	r3, [pc, #288]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800297c:	2301      	movs	r3, #1
 800297e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002982:	4b45      	ldr	r3, [pc, #276]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298a:	2b00      	cmp	r3, #0
 800298c:	d118      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800298e:	4b42      	ldr	r3, [pc, #264]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a41      	ldr	r2, [pc, #260]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002994:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002998:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800299a:	f7fe faff 	bl	8000f9c <HAL_GetTick>
 800299e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029a0:	e008      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a2:	f7fe fafb 	bl	8000f9c <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b64      	cmp	r3, #100	; 0x64
 80029ae:	d901      	bls.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e1d6      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b4:	4b38      	ldr	r3, [pc, #224]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d0f0      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029c0:	4b34      	ldr	r3, [pc, #208]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 8084 	beq.w	8002ada <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029dc:	429a      	cmp	r2, r3
 80029de:	d07c      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029e0:	4b2c      	ldr	r3, [pc, #176]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	fa93 f3a3 	rbit	r3, r3
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80029f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029fa:	fab3 f383 	clz	r3, r3
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a04:	4413      	add	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	6013      	str	r3, [r2, #0]
 8002a0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a1e:	fab3 f383 	clz	r3, r3
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2300      	movs	r3, #0
 8002a30:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a32:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a36:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d04b      	beq.n	8002ada <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a42:	f7fe faab 	bl	8000f9c <HAL_GetTick>
 8002a46:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a48:	e00a      	b.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4a:	f7fe faa7 	bl	8000f9c <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e180      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a60:	2302      	movs	r3, #2
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	623b      	str	r3, [r7, #32]
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	61fb      	str	r3, [r7, #28]
  return result;
 8002a78:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	f043 0302 	orr.w	r3, r3, #2
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d108      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a8e:	4b01      	ldr	r3, [pc, #4]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	e00d      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40007000 	.word	0x40007000
 8002a9c:	10908100 	.word	0x10908100
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	fa93 f3a3 	rbit	r3, r3
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	4ba0      	ldr	r3, [pc, #640]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	613a      	str	r2, [r7, #16]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	fa92 f2a2 	rbit	r2, r2
 8002aba:	60fa      	str	r2, [r7, #12]
  return result;
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	fab2 f282 	clz	r2, r2
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	f002 021f 	and.w	r2, r2, #31
 8002ace:	2101      	movs	r1, #1
 8002ad0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0b7      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ada:	4b95      	ldr	r3, [pc, #596]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	4992      	ldr	r1, [pc, #584]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002aec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d105      	bne.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af4:	4b8e      	ldr	r3, [pc, #568]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002af6:	69db      	ldr	r3, [r3, #28]
 8002af8:	4a8d      	ldr	r2, [pc, #564]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002afe:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b0c:	4b88      	ldr	r3, [pc, #544]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	f023 0203 	bic.w	r2, r3, #3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	4985      	ldr	r1, [pc, #532]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d008      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b2a:	4b81      	ldr	r3, [pc, #516]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	497e      	ldr	r1, [pc, #504]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d008      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b48:	4b79      	ldr	r3, [pc, #484]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	4976      	ldr	r1, [pc, #472]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b66:	4b72      	ldr	r3, [pc, #456]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	f023 0210 	bic.w	r2, r3, #16
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	496f      	ldr	r1, [pc, #444]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b84:	4b6a      	ldr	r3, [pc, #424]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b90:	4967      	ldr	r1, [pc, #412]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d008      	beq.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ba2:	4b63      	ldr	r3, [pc, #396]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	f023 0220 	bic.w	r2, r3, #32
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4960      	ldr	r1, [pc, #384]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d008      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bc0:	4b5b      	ldr	r3, [pc, #364]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bcc:	4958      	ldr	r1, [pc, #352]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 0308 	and.w	r3, r3, #8
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d008      	beq.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bde:	4b54      	ldr	r3, [pc, #336]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	4951      	ldr	r1, [pc, #324]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d008      	beq.n	8002c0e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002bfc:	4b4c      	ldr	r3, [pc, #304]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	4949      	ldr	r1, [pc, #292]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d008      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c1a:	4b45      	ldr	r3, [pc, #276]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c26:	4942      	ldr	r1, [pc, #264]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d008      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c38:	4b3d      	ldr	r3, [pc, #244]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	493a      	ldr	r1, [pc, #232]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d008      	beq.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c56:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	4933      	ldr	r1, [pc, #204]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c64:	4313      	orrs	r3, r2
 8002c66:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d008      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c74:	4b2e      	ldr	r3, [pc, #184]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c80:	492b      	ldr	r1, [pc, #172]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d008      	beq.n	8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c92:	4b27      	ldr	r3, [pc, #156]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	4924      	ldr	r1, [pc, #144]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002cb0:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	491c      	ldr	r1, [pc, #112]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d008      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002cce:	4b18      	ldr	r3, [pc, #96]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cda:	4915      	ldr	r1, [pc, #84]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002cec:	4b10      	ldr	r3, [pc, #64]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	490d      	ldr	r1, [pc, #52]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d008      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002d0a:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d16:	4906      	ldr	r1, [pc, #24]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00c      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002d28:	4b01      	ldr	r3, [pc, #4]	; (8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	e002      	b.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3c:	490b      	ldr	r1, [pc, #44]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002d4e:	4b07      	ldr	r3, [pc, #28]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5a:	4904      	ldr	r1, [pc, #16]	; (8002d6c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3748      	adds	r7, #72	; 0x48
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40021000 	.word	0x40021000

08002d70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e040      	b.n	8002e04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d106      	bne.n	8002d98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7fd ffc0 	bl	8000d18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2224      	movs	r2, #36	; 0x24
 8002d9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 0201 	bic.w	r2, r2, #1
 8002dac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 fb6e 	bl	8003490 <UART_SetConfig>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e022      	b.n	8002e04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d002      	beq.n	8002dcc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fd38 	bl	800383c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685a      	ldr	r2, [r3, #4]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f042 0201 	orr.w	r2, r2, #1
 8002dfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fdbf 	bl	8003980 <UART_CheckIdleState>
 8002e02:	4603      	mov	r3, r0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b08a      	sub	sp, #40	; 0x28
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	60b9      	str	r1, [r7, #8]
 8002e16:	4613      	mov	r3, r2
 8002e18:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e1e:	2b20      	cmp	r3, #32
 8002e20:	d13d      	bne.n	8002e9e <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <HAL_UART_Receive_IT+0x22>
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e036      	b.n	8002ea0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_UART_Receive_IT+0x34>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e02f      	b.n	8002ea0 <HAL_UART_Receive_IT+0x94>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d018      	beq.n	8002e8e <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	e853 3f00 	ldrex	r3, [r3]
 8002e68:	613b      	str	r3, [r7, #16]
   return(result);
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e70:	627b      	str	r3, [r7, #36]	; 0x24
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	461a      	mov	r2, r3
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	623b      	str	r3, [r7, #32]
 8002e7c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7e:	69f9      	ldr	r1, [r7, #28]
 8002e80:	6a3a      	ldr	r2, [r7, #32]
 8002e82:	e841 2300 	strex	r3, r2, [r1]
 8002e86:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1e6      	bne.n	8002e5c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	461a      	mov	r2, r3
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fe81 	bl	8003b9c <UART_Start_Receive_IT>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	e000      	b.n	8002ea0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e9e:	2302      	movs	r3, #2
  }
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3728      	adds	r7, #40	; 0x28
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b0ba      	sub	sp, #232	; 0xe8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ece:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002ed2:	f640 030f 	movw	r3, #2063	; 0x80f
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002edc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d115      	bne.n	8002f10 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee8:	f003 0320 	and.w	r3, r3, #32
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00f      	beq.n	8002f10 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d009      	beq.n	8002f10 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f000 82a3 	beq.w	800344c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	4798      	blx	r3
      }
      return;
 8002f0e:	e29d      	b.n	800344c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8117 	beq.w	8003148 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f1e:	f003 0301 	and.w	r3, r3, #1
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d106      	bne.n	8002f34 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002f26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f2a:	4b85      	ldr	r3, [pc, #532]	; (8003140 <HAL_UART_IRQHandler+0x298>)
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 810a 	beq.w	8003148 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d011      	beq.n	8002f64 <HAL_UART_IRQHandler+0xbc>
 8002f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00b      	beq.n	8002f64 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2201      	movs	r2, #1
 8002f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5a:	f043 0201 	orr.w	r2, r3, #1
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d011      	beq.n	8002f94 <HAL_UART_IRQHandler+0xec>
 8002f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f74:	f003 0301 	and.w	r3, r3, #1
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00b      	beq.n	8002f94 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2202      	movs	r2, #2
 8002f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f8a:	f043 0204 	orr.w	r2, r3, #4
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d011      	beq.n	8002fc4 <HAL_UART_IRQHandler+0x11c>
 8002fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2204      	movs	r2, #4
 8002fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fba:	f043 0202 	orr.w	r2, r3, #2
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc8:	f003 0308 	and.w	r3, r3, #8
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d017      	beq.n	8003000 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd4:	f003 0320 	and.w	r3, r3, #32
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d105      	bne.n	8002fe8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fe0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d00b      	beq.n	8003000 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2208      	movs	r2, #8
 8002fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ff6:	f043 0208 	orr.w	r2, r3, #8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003008:	2b00      	cmp	r3, #0
 800300a:	d012      	beq.n	8003032 <HAL_UART_IRQHandler+0x18a>
 800300c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00c      	beq.n	8003032 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003020:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003028:	f043 0220 	orr.w	r2, r3, #32
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003038:	2b00      	cmp	r3, #0
 800303a:	f000 8209 	beq.w	8003450 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800303e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003042:	f003 0320 	and.w	r3, r3, #32
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00d      	beq.n	8003066 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800304a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800304e:	f003 0320 	and.w	r3, r3, #32
 8003052:	2b00      	cmp	r3, #0
 8003054:	d007      	beq.n	8003066 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800306c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307a:	2b40      	cmp	r3, #64	; 0x40
 800307c:	d005      	beq.n	800308a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800307e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003082:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003086:	2b00      	cmp	r3, #0
 8003088:	d04f      	beq.n	800312a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 fe32 	bl	8003cf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309a:	2b40      	cmp	r3, #64	; 0x40
 800309c:	d141      	bne.n	8003122 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3308      	adds	r3, #8
 80030a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030ac:	e853 3f00 	ldrex	r3, [r3]
 80030b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3308      	adds	r3, #8
 80030c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80030ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80030ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80030d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80030da:	e841 2300 	strex	r3, r2, [r1]
 80030de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80030e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1d9      	bne.n	800309e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d013      	beq.n	800311a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f6:	4a13      	ldr	r2, [pc, #76]	; (8003144 <HAL_UART_IRQHandler+0x29c>)
 80030f8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe f8a2 	bl	8001248 <HAL_DMA_Abort_IT>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d017      	beq.n	800313a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800310e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003114:	4610      	mov	r0, r2
 8003116:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003118:	e00f      	b.n	800313a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f9a2 	bl	8003464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003120:	e00b      	b.n	800313a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f99e 	bl	8003464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003128:	e007      	b.n	800313a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f99a 	bl	8003464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003138:	e18a      	b.n	8003450 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800313a:	bf00      	nop
    return;
 800313c:	e188      	b.n	8003450 <HAL_UART_IRQHandler+0x5a8>
 800313e:	bf00      	nop
 8003140:	04000120 	.word	0x04000120
 8003144:	08003dbb 	.word	0x08003dbb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800314c:	2b01      	cmp	r3, #1
 800314e:	f040 8143 	bne.w	80033d8 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 813c 	beq.w	80033d8 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 8135 	beq.w	80033d8 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2210      	movs	r2, #16
 8003174:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003180:	2b40      	cmp	r3, #64	; 0x40
 8003182:	f040 80b1 	bne.w	80032e8 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003192:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 815c 	beq.w	8003454 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80031a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031a6:	429a      	cmp	r2, r3
 80031a8:	f080 8154 	bcs.w	8003454 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b20      	cmp	r3, #32
 80031be:	f000 8085 	beq.w	80032cc <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80031ce:	e853 3f00 	ldrex	r3, [r3]
 80031d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80031d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80031da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	461a      	mov	r2, r3
 80031e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80031ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80031f0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80031f8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80031fc:	e841 2300 	strex	r3, r2, [r1]
 8003200:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003204:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1da      	bne.n	80031c2 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3308      	adds	r3, #8
 8003212:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800321c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3308      	adds	r3, #8
 800322c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003230:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003234:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003238:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800323c:	e841 2300 	strex	r3, r2, [r1]
 8003240:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1e1      	bne.n	800320c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	3308      	adds	r3, #8
 800324e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003250:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003252:	e853 3f00 	ldrex	r3, [r3]
 8003256:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800325a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800325e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3308      	adds	r3, #8
 8003268:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800326c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800326e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003270:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003272:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003274:	e841 2300 	strex	r3, r2, [r1]
 8003278:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800327a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800327c:	2b00      	cmp	r3, #0
 800327e:	d1e3      	bne.n	8003248 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2220      	movs	r2, #32
 8003284:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800329a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800329c:	f023 0310 	bic.w	r3, r3, #16
 80032a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	461a      	mov	r2, r3
 80032aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80032b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80032bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e4      	bne.n	800328c <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7fd ff85 	bl	80011d6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	b29b      	uxth	r3, r3
 80032de:	4619      	mov	r1, r3
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f8c9 	bl	8003478 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80032e6:	e0b5      	b.n	8003454 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80a7 	beq.w	8003458 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800330a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800330e:	2b00      	cmp	r3, #0
 8003310:	f000 80a2 	beq.w	8003458 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800331c:	e853 3f00 	ldrex	r3, [r3]
 8003320:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003324:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003328:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	461a      	mov	r2, r3
 8003332:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003336:	647b      	str	r3, [r7, #68]	; 0x44
 8003338:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800333c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e4      	bne.n	8003314 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3308      	adds	r3, #8
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	e853 3f00 	ldrex	r3, [r3]
 8003358:	623b      	str	r3, [r7, #32]
   return(result);
 800335a:	6a3b      	ldr	r3, [r7, #32]
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	3308      	adds	r3, #8
 800336a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800336e:	633a      	str	r2, [r7, #48]	; 0x30
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003376:	e841 2300 	strex	r3, r2, [r1]
 800337a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	2b00      	cmp	r3, #0
 8003380:	d1e3      	bne.n	800334a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2220      	movs	r2, #32
 8003386:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f023 0310 	bic.w	r3, r3, #16
 80033a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ba:	69b9      	ldr	r1, [r7, #24]
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	e841 2300 	strex	r3, r2, [r1]
 80033c2:	617b      	str	r3, [r7, #20]
   return(result);
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e4      	bne.n	8003394 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033ce:	4619      	mov	r1, r3
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f851 	bl	8003478 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033d6:	e03f      	b.n	8003458 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d00e      	beq.n	8003402 <HAL_UART_IRQHandler+0x55a>
 80033e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d008      	beq.n	8003402 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80033f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 fe79 	bl	80040f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003400:	e02d      	b.n	800345e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00e      	beq.n	800342c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800340e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003416:	2b00      	cmp	r3, #0
 8003418:	d008      	beq.n	800342c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800341e:	2b00      	cmp	r3, #0
 8003420:	d01c      	beq.n	800345c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
    }
    return;
 800342a:	e017      	b.n	800345c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800342c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003434:	2b00      	cmp	r3, #0
 8003436:	d012      	beq.n	800345e <HAL_UART_IRQHandler+0x5b6>
 8003438:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800343c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00c      	beq.n	800345e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fcce 	bl	8003de6 <UART_EndTransmit_IT>
    return;
 800344a:	e008      	b.n	800345e <HAL_UART_IRQHandler+0x5b6>
      return;
 800344c:	bf00      	nop
 800344e:	e006      	b.n	800345e <HAL_UART_IRQHandler+0x5b6>
    return;
 8003450:	bf00      	nop
 8003452:	e004      	b.n	800345e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003454:	bf00      	nop
 8003456:	e002      	b.n	800345e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003458:	bf00      	nop
 800345a:	e000      	b.n	800345e <HAL_UART_IRQHandler+0x5b6>
    return;
 800345c:	bf00      	nop
  }

}
 800345e:	37e8      	adds	r7, #232	; 0xe8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003478:	b480      	push	{r7}
 800347a:	b083      	sub	sp, #12
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	460b      	mov	r3, r1
 8003482:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr

08003490 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003498:	2300      	movs	r3, #0
 800349a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	431a      	orrs	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	4bab      	ldr	r3, [pc, #684]	; (8003768 <UART_SetConfig+0x2d8>)
 80034bc:	4013      	ands	r3, r2
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6812      	ldr	r2, [r2, #0]
 80034c2:	6979      	ldr	r1, [r7, #20]
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68da      	ldr	r2, [r3, #12]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a99      	ldr	r2, [pc, #612]	; (800376c <UART_SetConfig+0x2dc>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d120      	bne.n	800354e <UART_SetConfig+0xbe>
 800350c:	4b98      	ldr	r3, [pc, #608]	; (8003770 <UART_SetConfig+0x2e0>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	2b03      	cmp	r3, #3
 8003516:	d817      	bhi.n	8003548 <UART_SetConfig+0xb8>
 8003518:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <UART_SetConfig+0x90>)
 800351a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351e:	bf00      	nop
 8003520:	08003531 	.word	0x08003531
 8003524:	0800353d 	.word	0x0800353d
 8003528:	08003543 	.word	0x08003543
 800352c:	08003537 	.word	0x08003537
 8003530:	2301      	movs	r3, #1
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	e0b5      	b.n	80036a2 <UART_SetConfig+0x212>
 8003536:	2302      	movs	r3, #2
 8003538:	77fb      	strb	r3, [r7, #31]
 800353a:	e0b2      	b.n	80036a2 <UART_SetConfig+0x212>
 800353c:	2304      	movs	r3, #4
 800353e:	77fb      	strb	r3, [r7, #31]
 8003540:	e0af      	b.n	80036a2 <UART_SetConfig+0x212>
 8003542:	2308      	movs	r3, #8
 8003544:	77fb      	strb	r3, [r7, #31]
 8003546:	e0ac      	b.n	80036a2 <UART_SetConfig+0x212>
 8003548:	2310      	movs	r3, #16
 800354a:	77fb      	strb	r3, [r7, #31]
 800354c:	e0a9      	b.n	80036a2 <UART_SetConfig+0x212>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a88      	ldr	r2, [pc, #544]	; (8003774 <UART_SetConfig+0x2e4>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d124      	bne.n	80035a2 <UART_SetConfig+0x112>
 8003558:	4b85      	ldr	r3, [pc, #532]	; (8003770 <UART_SetConfig+0x2e0>)
 800355a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003560:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003564:	d011      	beq.n	800358a <UART_SetConfig+0xfa>
 8003566:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800356a:	d817      	bhi.n	800359c <UART_SetConfig+0x10c>
 800356c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003570:	d011      	beq.n	8003596 <UART_SetConfig+0x106>
 8003572:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003576:	d811      	bhi.n	800359c <UART_SetConfig+0x10c>
 8003578:	2b00      	cmp	r3, #0
 800357a:	d003      	beq.n	8003584 <UART_SetConfig+0xf4>
 800357c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003580:	d006      	beq.n	8003590 <UART_SetConfig+0x100>
 8003582:	e00b      	b.n	800359c <UART_SetConfig+0x10c>
 8003584:	2300      	movs	r3, #0
 8003586:	77fb      	strb	r3, [r7, #31]
 8003588:	e08b      	b.n	80036a2 <UART_SetConfig+0x212>
 800358a:	2302      	movs	r3, #2
 800358c:	77fb      	strb	r3, [r7, #31]
 800358e:	e088      	b.n	80036a2 <UART_SetConfig+0x212>
 8003590:	2304      	movs	r3, #4
 8003592:	77fb      	strb	r3, [r7, #31]
 8003594:	e085      	b.n	80036a2 <UART_SetConfig+0x212>
 8003596:	2308      	movs	r3, #8
 8003598:	77fb      	strb	r3, [r7, #31]
 800359a:	e082      	b.n	80036a2 <UART_SetConfig+0x212>
 800359c:	2310      	movs	r3, #16
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e07f      	b.n	80036a2 <UART_SetConfig+0x212>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a74      	ldr	r2, [pc, #464]	; (8003778 <UART_SetConfig+0x2e8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d124      	bne.n	80035f6 <UART_SetConfig+0x166>
 80035ac:	4b70      	ldr	r3, [pc, #448]	; (8003770 <UART_SetConfig+0x2e0>)
 80035ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80035b4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035b8:	d011      	beq.n	80035de <UART_SetConfig+0x14e>
 80035ba:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80035be:	d817      	bhi.n	80035f0 <UART_SetConfig+0x160>
 80035c0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035c4:	d011      	beq.n	80035ea <UART_SetConfig+0x15a>
 80035c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035ca:	d811      	bhi.n	80035f0 <UART_SetConfig+0x160>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <UART_SetConfig+0x148>
 80035d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035d4:	d006      	beq.n	80035e4 <UART_SetConfig+0x154>
 80035d6:	e00b      	b.n	80035f0 <UART_SetConfig+0x160>
 80035d8:	2300      	movs	r3, #0
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e061      	b.n	80036a2 <UART_SetConfig+0x212>
 80035de:	2302      	movs	r3, #2
 80035e0:	77fb      	strb	r3, [r7, #31]
 80035e2:	e05e      	b.n	80036a2 <UART_SetConfig+0x212>
 80035e4:	2304      	movs	r3, #4
 80035e6:	77fb      	strb	r3, [r7, #31]
 80035e8:	e05b      	b.n	80036a2 <UART_SetConfig+0x212>
 80035ea:	2308      	movs	r3, #8
 80035ec:	77fb      	strb	r3, [r7, #31]
 80035ee:	e058      	b.n	80036a2 <UART_SetConfig+0x212>
 80035f0:	2310      	movs	r3, #16
 80035f2:	77fb      	strb	r3, [r7, #31]
 80035f4:	e055      	b.n	80036a2 <UART_SetConfig+0x212>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a60      	ldr	r2, [pc, #384]	; (800377c <UART_SetConfig+0x2ec>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d124      	bne.n	800364a <UART_SetConfig+0x1ba>
 8003600:	4b5b      	ldr	r3, [pc, #364]	; (8003770 <UART_SetConfig+0x2e0>)
 8003602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003604:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003608:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800360c:	d011      	beq.n	8003632 <UART_SetConfig+0x1a2>
 800360e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003612:	d817      	bhi.n	8003644 <UART_SetConfig+0x1b4>
 8003614:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003618:	d011      	beq.n	800363e <UART_SetConfig+0x1ae>
 800361a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800361e:	d811      	bhi.n	8003644 <UART_SetConfig+0x1b4>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <UART_SetConfig+0x19c>
 8003624:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003628:	d006      	beq.n	8003638 <UART_SetConfig+0x1a8>
 800362a:	e00b      	b.n	8003644 <UART_SetConfig+0x1b4>
 800362c:	2300      	movs	r3, #0
 800362e:	77fb      	strb	r3, [r7, #31]
 8003630:	e037      	b.n	80036a2 <UART_SetConfig+0x212>
 8003632:	2302      	movs	r3, #2
 8003634:	77fb      	strb	r3, [r7, #31]
 8003636:	e034      	b.n	80036a2 <UART_SetConfig+0x212>
 8003638:	2304      	movs	r3, #4
 800363a:	77fb      	strb	r3, [r7, #31]
 800363c:	e031      	b.n	80036a2 <UART_SetConfig+0x212>
 800363e:	2308      	movs	r3, #8
 8003640:	77fb      	strb	r3, [r7, #31]
 8003642:	e02e      	b.n	80036a2 <UART_SetConfig+0x212>
 8003644:	2310      	movs	r3, #16
 8003646:	77fb      	strb	r3, [r7, #31]
 8003648:	e02b      	b.n	80036a2 <UART_SetConfig+0x212>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a4c      	ldr	r2, [pc, #304]	; (8003780 <UART_SetConfig+0x2f0>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d124      	bne.n	800369e <UART_SetConfig+0x20e>
 8003654:	4b46      	ldr	r3, [pc, #280]	; (8003770 <UART_SetConfig+0x2e0>)
 8003656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003658:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800365c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003660:	d011      	beq.n	8003686 <UART_SetConfig+0x1f6>
 8003662:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003666:	d817      	bhi.n	8003698 <UART_SetConfig+0x208>
 8003668:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800366c:	d011      	beq.n	8003692 <UART_SetConfig+0x202>
 800366e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003672:	d811      	bhi.n	8003698 <UART_SetConfig+0x208>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <UART_SetConfig+0x1f0>
 8003678:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800367c:	d006      	beq.n	800368c <UART_SetConfig+0x1fc>
 800367e:	e00b      	b.n	8003698 <UART_SetConfig+0x208>
 8003680:	2300      	movs	r3, #0
 8003682:	77fb      	strb	r3, [r7, #31]
 8003684:	e00d      	b.n	80036a2 <UART_SetConfig+0x212>
 8003686:	2302      	movs	r3, #2
 8003688:	77fb      	strb	r3, [r7, #31]
 800368a:	e00a      	b.n	80036a2 <UART_SetConfig+0x212>
 800368c:	2304      	movs	r3, #4
 800368e:	77fb      	strb	r3, [r7, #31]
 8003690:	e007      	b.n	80036a2 <UART_SetConfig+0x212>
 8003692:	2308      	movs	r3, #8
 8003694:	77fb      	strb	r3, [r7, #31]
 8003696:	e004      	b.n	80036a2 <UART_SetConfig+0x212>
 8003698:	2310      	movs	r3, #16
 800369a:	77fb      	strb	r3, [r7, #31]
 800369c:	e001      	b.n	80036a2 <UART_SetConfig+0x212>
 800369e:	2310      	movs	r3, #16
 80036a0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036aa:	d16d      	bne.n	8003788 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 80036ac:	7ffb      	ldrb	r3, [r7, #31]
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d827      	bhi.n	8003702 <UART_SetConfig+0x272>
 80036b2:	a201      	add	r2, pc, #4	; (adr r2, 80036b8 <UART_SetConfig+0x228>)
 80036b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b8:	080036dd 	.word	0x080036dd
 80036bc:	080036e5 	.word	0x080036e5
 80036c0:	080036ed 	.word	0x080036ed
 80036c4:	08003703 	.word	0x08003703
 80036c8:	080036f3 	.word	0x080036f3
 80036cc:	08003703 	.word	0x08003703
 80036d0:	08003703 	.word	0x08003703
 80036d4:	08003703 	.word	0x08003703
 80036d8:	080036fb 	.word	0x080036fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036dc:	f7ff f8e6 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 80036e0:	61b8      	str	r0, [r7, #24]
        break;
 80036e2:	e013      	b.n	800370c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036e4:	f7ff f904 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 80036e8:	61b8      	str	r0, [r7, #24]
        break;
 80036ea:	e00f      	b.n	800370c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036ec:	4b25      	ldr	r3, [pc, #148]	; (8003784 <UART_SetConfig+0x2f4>)
 80036ee:	61bb      	str	r3, [r7, #24]
        break;
 80036f0:	e00c      	b.n	800370c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036f2:	f7ff f865 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 80036f6:	61b8      	str	r0, [r7, #24]
        break;
 80036f8:	e008      	b.n	800370c <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036fe:	61bb      	str	r3, [r7, #24]
        break;
 8003700:	e004      	b.n	800370c <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	77bb      	strb	r3, [r7, #30]
        break;
 800370a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	2b00      	cmp	r3, #0
 8003710:	f000 8086 	beq.w	8003820 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	005a      	lsls	r2, r3, #1
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	085b      	lsrs	r3, r3, #1
 800371e:	441a      	add	r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	b29b      	uxth	r3, r3
 800372a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	2b0f      	cmp	r3, #15
 8003730:	d916      	bls.n	8003760 <UART_SetConfig+0x2d0>
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003738:	d212      	bcs.n	8003760 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	b29b      	uxth	r3, r3
 800373e:	f023 030f 	bic.w	r3, r3, #15
 8003742:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	085b      	lsrs	r3, r3, #1
 8003748:	b29b      	uxth	r3, r3
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	b29a      	uxth	r2, r3
 8003750:	89fb      	ldrh	r3, [r7, #14]
 8003752:	4313      	orrs	r3, r2
 8003754:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	89fa      	ldrh	r2, [r7, #14]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	e05f      	b.n	8003820 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	77bb      	strb	r3, [r7, #30]
 8003764:	e05c      	b.n	8003820 <UART_SetConfig+0x390>
 8003766:	bf00      	nop
 8003768:	efff69f3 	.word	0xefff69f3
 800376c:	40013800 	.word	0x40013800
 8003770:	40021000 	.word	0x40021000
 8003774:	40004400 	.word	0x40004400
 8003778:	40004800 	.word	0x40004800
 800377c:	40004c00 	.word	0x40004c00
 8003780:	40005000 	.word	0x40005000
 8003784:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8003788:	7ffb      	ldrb	r3, [r7, #31]
 800378a:	2b08      	cmp	r3, #8
 800378c:	d827      	bhi.n	80037de <UART_SetConfig+0x34e>
 800378e:	a201      	add	r2, pc, #4	; (adr r2, 8003794 <UART_SetConfig+0x304>)
 8003790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003794:	080037b9 	.word	0x080037b9
 8003798:	080037c1 	.word	0x080037c1
 800379c:	080037c9 	.word	0x080037c9
 80037a0:	080037df 	.word	0x080037df
 80037a4:	080037cf 	.word	0x080037cf
 80037a8:	080037df 	.word	0x080037df
 80037ac:	080037df 	.word	0x080037df
 80037b0:	080037df 	.word	0x080037df
 80037b4:	080037d7 	.word	0x080037d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037b8:	f7ff f878 	bl	80028ac <HAL_RCC_GetPCLK1Freq>
 80037bc:	61b8      	str	r0, [r7, #24]
        break;
 80037be:	e013      	b.n	80037e8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80037c0:	f7ff f896 	bl	80028f0 <HAL_RCC_GetPCLK2Freq>
 80037c4:	61b8      	str	r0, [r7, #24]
        break;
 80037c6:	e00f      	b.n	80037e8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80037c8:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <UART_SetConfig+0x3a8>)
 80037ca:	61bb      	str	r3, [r7, #24]
        break;
 80037cc:	e00c      	b.n	80037e8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037ce:	f7fe fff7 	bl	80027c0 <HAL_RCC_GetSysClockFreq>
 80037d2:	61b8      	str	r0, [r7, #24]
        break;
 80037d4:	e008      	b.n	80037e8 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80037da:	61bb      	str	r3, [r7, #24]
        break;
 80037dc:	e004      	b.n	80037e8 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 80037de:	2300      	movs	r3, #0
 80037e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	77bb      	strb	r3, [r7, #30]
        break;
 80037e6:	bf00      	nop
    }

    if (pclk != 0U)
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d018      	beq.n	8003820 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	085a      	lsrs	r2, r3, #1
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	441a      	add	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003800:	b29b      	uxth	r3, r3
 8003802:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b0f      	cmp	r3, #15
 8003808:	d908      	bls.n	800381c <UART_SetConfig+0x38c>
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003810:	d204      	bcs.n	800381c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	60da      	str	r2, [r3, #12]
 800381a:	e001      	b.n	8003820 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800382c:	7fbb      	ldrb	r3, [r7, #30]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3720      	adds	r7, #32
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	007a1200 	.word	0x007a1200

0800383c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	430a      	orrs	r2, r1
 8003886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d00a      	beq.n	80038aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00a      	beq.n	80038cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	f003 0310 	and.w	r3, r3, #16
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d00a      	beq.n	80038ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	430a      	orrs	r2, r1
 80038ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d00a      	beq.n	8003910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003918:	2b00      	cmp	r3, #0
 800391a:	d01a      	beq.n	8003952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800393a:	d10a      	bne.n	8003952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00a      	beq.n	8003974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	605a      	str	r2, [r3, #4]
  }
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af02      	add	r7, sp, #8
 8003986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003990:	f7fd fb04 	bl	8000f9c <HAL_GetTick>
 8003994:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0308 	and.w	r3, r3, #8
 80039a0:	2b08      	cmp	r3, #8
 80039a2:	d10e      	bne.n	80039c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 f82d 	bl	8003a12 <UART_WaitOnFlagUntilTimeout>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e023      	b.n	8003a0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d10e      	bne.n	80039ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f817 	bl	8003a12 <UART_WaitOnFlagUntilTimeout>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e00d      	b.n	8003a0a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b09c      	sub	sp, #112	; 0x70
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	603b      	str	r3, [r7, #0]
 8003a1e:	4613      	mov	r3, r2
 8003a20:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a22:	e0a5      	b.n	8003b70 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	f000 80a1 	beq.w	8003b70 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2e:	f7fd fab5 	bl	8000f9c <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d302      	bcc.n	8003a44 <UART_WaitOnFlagUntilTimeout+0x32>
 8003a3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d13e      	bne.n	8003ac2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4c:	e853 3f00 	ldrex	r3, [r3]
 8003a50:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a58:	667b      	str	r3, [r7, #100]	; 0x64
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a64:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a66:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003a68:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003a6a:	e841 2300 	strex	r3, r2, [r1]
 8003a6e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003a70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d1e6      	bne.n	8003a44 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a80:	e853 3f00 	ldrex	r3, [r3]
 8003a84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	663b      	str	r3, [r7, #96]	; 0x60
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3308      	adds	r3, #8
 8003a94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003a96:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a9e:	e841 2300 	strex	r3, r2, [r1]
 8003aa2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003aa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1e5      	bne.n	8003a76 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2220      	movs	r2, #32
 8003aae:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e067      	b.n	8003b92 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0304 	and.w	r3, r3, #4
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d04f      	beq.n	8003b70 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ade:	d147      	bne.n	8003b70 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ae8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003afe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	461a      	mov	r2, r3
 8003b06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b08:	637b      	str	r3, [r7, #52]	; 0x34
 8003b0a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b10:	e841 2300 	strex	r3, r2, [r1]
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1e6      	bne.n	8003aea <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	3308      	adds	r3, #8
 8003b22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	e853 3f00 	ldrex	r3, [r3]
 8003b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	3308      	adds	r3, #8
 8003b3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003b3c:	623a      	str	r2, [r7, #32]
 8003b3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b40:	69f9      	ldr	r1, [r7, #28]
 8003b42:	6a3a      	ldr	r2, [r7, #32]
 8003b44:	e841 2300 	strex	r3, r2, [r1]
 8003b48:	61bb      	str	r3, [r7, #24]
   return(result);
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d1e5      	bne.n	8003b1c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2220      	movs	r2, #32
 8003b54:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e010      	b.n	8003b92 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	69da      	ldr	r2, [r3, #28]
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	bf0c      	ite	eq
 8003b80:	2301      	moveq	r3, #1
 8003b82:	2300      	movne	r3, #0
 8003b84:	b2db      	uxtb	r3, r3
 8003b86:	461a      	mov	r2, r3
 8003b88:	79fb      	ldrb	r3, [r7, #7]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	f43f af4a 	beq.w	8003a24 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3770      	adds	r7, #112	; 0x70
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
	...

08003b9c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b091      	sub	sp, #68	; 0x44
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	68ba      	ldr	r2, [r7, #8]
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	88fa      	ldrh	r2, [r7, #6]
 8003bb4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	88fa      	ldrh	r2, [r7, #6]
 8003bbc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bce:	d10e      	bne.n	8003bee <UART_Start_Receive_IT+0x52>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d105      	bne.n	8003be4 <UART_Start_Receive_IT+0x48>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003bde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003be2:	e02d      	b.n	8003c40 <UART_Start_Receive_IT+0xa4>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	22ff      	movs	r2, #255	; 0xff
 8003be8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bec:	e028      	b.n	8003c40 <UART_Start_Receive_IT+0xa4>
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10d      	bne.n	8003c12 <UART_Start_Receive_IT+0x76>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d104      	bne.n	8003c08 <UART_Start_Receive_IT+0x6c>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	22ff      	movs	r2, #255	; 0xff
 8003c02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c06:	e01b      	b.n	8003c40 <UART_Start_Receive_IT+0xa4>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	227f      	movs	r2, #127	; 0x7f
 8003c0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c10:	e016      	b.n	8003c40 <UART_Start_Receive_IT+0xa4>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c1a:	d10d      	bne.n	8003c38 <UART_Start_Receive_IT+0x9c>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d104      	bne.n	8003c2e <UART_Start_Receive_IT+0x92>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	227f      	movs	r2, #127	; 0x7f
 8003c28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c2c:	e008      	b.n	8003c40 <UART_Start_Receive_IT+0xa4>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	223f      	movs	r2, #63	; 0x3f
 8003c32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c36:	e003      	b.n	8003c40 <UART_Start_Receive_IT+0xa4>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2200      	movs	r2, #0
 8003c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2222      	movs	r2, #34	; 0x22
 8003c4c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	3308      	adds	r3, #8
 8003c54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c58:	e853 3f00 	ldrex	r3, [r3]
 8003c5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c6e:	637a      	str	r2, [r7, #52]	; 0x34
 8003c70:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c76:	e841 2300 	strex	r3, r2, [r1]
 8003c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1e5      	bne.n	8003c4e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8a:	d107      	bne.n	8003c9c <UART_Start_Receive_IT+0x100>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d103      	bne.n	8003c9c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4a15      	ldr	r2, [pc, #84]	; (8003cec <UART_Start_Receive_IT+0x150>)
 8003c98:	665a      	str	r2, [r3, #100]	; 0x64
 8003c9a:	e002      	b.n	8003ca2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	4a14      	ldr	r2, [pc, #80]	; (8003cf0 <UART_Start_Receive_IT+0x154>)
 8003ca0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	e853 3f00 	ldrex	r3, [r3]
 8003cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003cbe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	623b      	str	r3, [r7, #32]
 8003cca:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ccc:	69f9      	ldr	r1, [r7, #28]
 8003cce:	6a3a      	ldr	r2, [r7, #32]
 8003cd0:	e841 2300 	strex	r3, r2, [r1]
 8003cd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e6      	bne.n	8003caa <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3744      	adds	r7, #68	; 0x44
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	08003f97 	.word	0x08003f97
 8003cf0:	08003e3b 	.word	0x08003e3b

08003cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b095      	sub	sp, #84	; 0x54
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d1a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e6      	bne.n	8003cfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	3308      	adds	r3, #8
 8003d34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	f023 0301 	bic.w	r3, r3, #1
 8003d44:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3308      	adds	r3, #8
 8003d4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e5      	bne.n	8003d2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d118      	bne.n	8003d9c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	e853 3f00 	ldrex	r3, [r3]
 8003d76:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f023 0310 	bic.w	r3, r3, #16
 8003d7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d88:	61bb      	str	r3, [r7, #24]
 8003d8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8c:	6979      	ldr	r1, [r7, #20]
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	e841 2300 	strex	r3, r2, [r1]
 8003d94:	613b      	str	r3, [r7, #16]
   return(result);
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d1e6      	bne.n	8003d6a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003dae:	bf00      	nop
 8003db0:	3754      	adds	r7, #84	; 0x54
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f7ff fb43 	bl	8003464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003dde:	bf00      	nop
 8003de0:	3710      	adds	r7, #16
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b088      	sub	sp, #32
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	e853 3f00 	ldrex	r3, [r3]
 8003dfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	461a      	mov	r2, r3
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	61bb      	str	r3, [r7, #24]
 8003e0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e10:	6979      	ldr	r1, [r7, #20]
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	e841 2300 	strex	r3, r2, [r1]
 8003e18:	613b      	str	r3, [r7, #16]
   return(result);
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e6      	bne.n	8003dee <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2220      	movs	r2, #32
 8003e24:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f7fc fb69 	bl	8000504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e32:	bf00      	nop
 8003e34:	3720      	adds	r7, #32
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003e3a:	b580      	push	{r7, lr}
 8003e3c:	b096      	sub	sp, #88	; 0x58
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e48:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e50:	2b22      	cmp	r3, #34	; 0x22
 8003e52:	f040 8094 	bne.w	8003f7e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003e5c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003e60:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003e64:	b2d9      	uxtb	r1, r3
 8003e66:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e70:	400a      	ands	r2, r1
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d177      	bne.n	8003f8e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea6:	e853 3f00 	ldrex	r3, [r3]
 8003eaa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eb2:	653b      	str	r3, [r7, #80]	; 0x50
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ebc:	647b      	str	r3, [r7, #68]	; 0x44
 8003ebe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e6      	bne.n	8003e9e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	e853 3f00 	ldrex	r3, [r3]
 8003ede:	623b      	str	r3, [r7, #32]
   return(result);
 8003ee0:	6a3b      	ldr	r3, [r7, #32]
 8003ee2:	f023 0301 	bic.w	r3, r3, #1
 8003ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3308      	adds	r3, #8
 8003eee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ef0:	633a      	str	r2, [r7, #48]	; 0x30
 8003ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ef6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ef8:	e841 2300 	strex	r3, r2, [r1]
 8003efc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e5      	bne.n	8003ed0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2220      	movs	r2, #32
 8003f08:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d12e      	bne.n	8003f76 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	e853 3f00 	ldrex	r3, [r3]
 8003f2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0310 	bic.w	r3, r3, #16
 8003f32:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	461a      	mov	r2, r3
 8003f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f40:	69b9      	ldr	r1, [r7, #24]
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	e841 2300 	strex	r3, r2, [r1]
 8003f48:	617b      	str	r3, [r7, #20]
   return(result);
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e6      	bne.n	8003f1e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	69db      	ldr	r3, [r3, #28]
 8003f56:	f003 0310 	and.w	r3, r3, #16
 8003f5a:	2b10      	cmp	r3, #16
 8003f5c:	d103      	bne.n	8003f66 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2210      	movs	r2, #16
 8003f64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff fa82 	bl	8003478 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003f74:	e00b      	b.n	8003f8e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fc fad4 	bl	8000524 <HAL_UART_RxCpltCallback>
}
 8003f7c:	e007      	b.n	8003f8e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699a      	ldr	r2, [r3, #24]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0208 	orr.w	r2, r2, #8
 8003f8c:	619a      	str	r2, [r3, #24]
}
 8003f8e:	bf00      	nop
 8003f90:	3758      	adds	r7, #88	; 0x58
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b096      	sub	sp, #88	; 0x58
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003fa4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fac:	2b22      	cmp	r3, #34	; 0x22
 8003fae:	f040 8094 	bne.w	80040da <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fb8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003fc2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003fc6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003fca:	4013      	ands	r3, r2
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fd0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	1c9a      	adds	r2, r3, #2
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d177      	bne.n	80040ea <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004002:	e853 3f00 	ldrex	r3, [r3]
 8004006:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800400e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004018:	643b      	str	r3, [r7, #64]	; 0x40
 800401a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800401e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004020:	e841 2300 	strex	r3, r2, [r1]
 8004024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1e6      	bne.n	8003ffa <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3308      	adds	r3, #8
 8004032:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	61fb      	str	r3, [r7, #28]
   return(result);
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	64bb      	str	r3, [r7, #72]	; 0x48
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3308      	adds	r3, #8
 800404a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800404c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800405a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e5      	bne.n	800402c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2220      	movs	r2, #32
 8004064:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004070:	2b01      	cmp	r3, #1
 8004072:	d12e      	bne.n	80040d2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	60bb      	str	r3, [r7, #8]
   return(result);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f023 0310 	bic.w	r3, r3, #16
 800408e:	647b      	str	r3, [r7, #68]	; 0x44
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	461a      	mov	r2, r3
 8004096:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004098:	61bb      	str	r3, [r7, #24]
 800409a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6979      	ldr	r1, [r7, #20]
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	613b      	str	r3, [r7, #16]
   return(result);
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e6      	bne.n	800407a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	f003 0310 	and.w	r3, r3, #16
 80040b6:	2b10      	cmp	r3, #16
 80040b8:	d103      	bne.n	80040c2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2210      	movs	r2, #16
 80040c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80040c8:	4619      	mov	r1, r3
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7ff f9d4 	bl	8003478 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80040d0:	e00b      	b.n	80040ea <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fc fa26 	bl	8000524 <HAL_UART_RxCpltCallback>
}
 80040d8:	e007      	b.n	80040ea <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	699a      	ldr	r2, [r3, #24]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0208 	orr.w	r2, r2, #8
 80040e8:	619a      	str	r2, [r3, #24]
}
 80040ea:	bf00      	nop
 80040ec:	3758      	adds	r7, #88	; 0x58
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <_ZdlPvj>:
 8004106:	f000 b803 	b.w	8004110 <_ZdlPv>

0800410a <__cxa_pure_virtual>:
 800410a:	b508      	push	{r3, lr}
 800410c:	f000 f80e 	bl	800412c <_ZSt9terminatev>

08004110 <_ZdlPv>:
 8004110:	f000 b842 	b.w	8004198 <free>

08004114 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004114:	b508      	push	{r3, lr}
 8004116:	4780      	blx	r0
 8004118:	f000 f80d 	bl	8004136 <abort>

0800411c <_ZSt13get_terminatev>:
 800411c:	4b02      	ldr	r3, [pc, #8]	; (8004128 <_ZSt13get_terminatev+0xc>)
 800411e:	6818      	ldr	r0, [r3, #0]
 8004120:	f3bf 8f5b 	dmb	ish
 8004124:	4770      	bx	lr
 8004126:	bf00      	nop
 8004128:	2000000c 	.word	0x2000000c

0800412c <_ZSt9terminatev>:
 800412c:	b508      	push	{r3, lr}
 800412e:	f7ff fff5 	bl	800411c <_ZSt13get_terminatev>
 8004132:	f7ff ffef 	bl	8004114 <_ZN10__cxxabiv111__terminateEPFvvE>

08004136 <abort>:
 8004136:	b508      	push	{r3, lr}
 8004138:	2006      	movs	r0, #6
 800413a:	f000 f8b5 	bl	80042a8 <raise>
 800413e:	2001      	movs	r0, #1
 8004140:	f7fc fe8c 	bl	8000e5c <_exit>

08004144 <__errno>:
 8004144:	4b01      	ldr	r3, [pc, #4]	; (800414c <__errno+0x8>)
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	4770      	bx	lr
 800414a:	bf00      	nop
 800414c:	20000010 	.word	0x20000010

08004150 <__libc_init_array>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	4d0d      	ldr	r5, [pc, #52]	; (8004188 <__libc_init_array+0x38>)
 8004154:	4c0d      	ldr	r4, [pc, #52]	; (800418c <__libc_init_array+0x3c>)
 8004156:	1b64      	subs	r4, r4, r5
 8004158:	10a4      	asrs	r4, r4, #2
 800415a:	2600      	movs	r6, #0
 800415c:	42a6      	cmp	r6, r4
 800415e:	d109      	bne.n	8004174 <__libc_init_array+0x24>
 8004160:	4d0b      	ldr	r5, [pc, #44]	; (8004190 <__libc_init_array+0x40>)
 8004162:	4c0c      	ldr	r4, [pc, #48]	; (8004194 <__libc_init_array+0x44>)
 8004164:	f000 f8ca 	bl	80042fc <_init>
 8004168:	1b64      	subs	r4, r4, r5
 800416a:	10a4      	asrs	r4, r4, #2
 800416c:	2600      	movs	r6, #0
 800416e:	42a6      	cmp	r6, r4
 8004170:	d105      	bne.n	800417e <__libc_init_array+0x2e>
 8004172:	bd70      	pop	{r4, r5, r6, pc}
 8004174:	f855 3b04 	ldr.w	r3, [r5], #4
 8004178:	4798      	blx	r3
 800417a:	3601      	adds	r6, #1
 800417c:	e7ee      	b.n	800415c <__libc_init_array+0xc>
 800417e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004182:	4798      	blx	r3
 8004184:	3601      	adds	r6, #1
 8004186:	e7f2      	b.n	800416e <__libc_init_array+0x1e>
 8004188:	080043a0 	.word	0x080043a0
 800418c:	080043a0 	.word	0x080043a0
 8004190:	080043a0 	.word	0x080043a0
 8004194:	080043ac 	.word	0x080043ac

08004198 <free>:
 8004198:	4b02      	ldr	r3, [pc, #8]	; (80041a4 <free+0xc>)
 800419a:	4601      	mov	r1, r0
 800419c:	6818      	ldr	r0, [r3, #0]
 800419e:	f000 b80b 	b.w	80041b8 <_free_r>
 80041a2:	bf00      	nop
 80041a4:	20000010 	.word	0x20000010

080041a8 <memset>:
 80041a8:	4402      	add	r2, r0
 80041aa:	4603      	mov	r3, r0
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d100      	bne.n	80041b2 <memset+0xa>
 80041b0:	4770      	bx	lr
 80041b2:	f803 1b01 	strb.w	r1, [r3], #1
 80041b6:	e7f9      	b.n	80041ac <memset+0x4>

080041b8 <_free_r>:
 80041b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041ba:	2900      	cmp	r1, #0
 80041bc:	d048      	beq.n	8004250 <_free_r+0x98>
 80041be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041c2:	9001      	str	r0, [sp, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f1a1 0404 	sub.w	r4, r1, #4
 80041ca:	bfb8      	it	lt
 80041cc:	18e4      	addlt	r4, r4, r3
 80041ce:	f000 f887 	bl	80042e0 <__malloc_lock>
 80041d2:	4a20      	ldr	r2, [pc, #128]	; (8004254 <_free_r+0x9c>)
 80041d4:	9801      	ldr	r0, [sp, #4]
 80041d6:	6813      	ldr	r3, [r2, #0]
 80041d8:	4615      	mov	r5, r2
 80041da:	b933      	cbnz	r3, 80041ea <_free_r+0x32>
 80041dc:	6063      	str	r3, [r4, #4]
 80041de:	6014      	str	r4, [r2, #0]
 80041e0:	b003      	add	sp, #12
 80041e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80041e6:	f000 b881 	b.w	80042ec <__malloc_unlock>
 80041ea:	42a3      	cmp	r3, r4
 80041ec:	d90b      	bls.n	8004206 <_free_r+0x4e>
 80041ee:	6821      	ldr	r1, [r4, #0]
 80041f0:	1862      	adds	r2, r4, r1
 80041f2:	4293      	cmp	r3, r2
 80041f4:	bf04      	itt	eq
 80041f6:	681a      	ldreq	r2, [r3, #0]
 80041f8:	685b      	ldreq	r3, [r3, #4]
 80041fa:	6063      	str	r3, [r4, #4]
 80041fc:	bf04      	itt	eq
 80041fe:	1852      	addeq	r2, r2, r1
 8004200:	6022      	streq	r2, [r4, #0]
 8004202:	602c      	str	r4, [r5, #0]
 8004204:	e7ec      	b.n	80041e0 <_free_r+0x28>
 8004206:	461a      	mov	r2, r3
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	b10b      	cbz	r3, 8004210 <_free_r+0x58>
 800420c:	42a3      	cmp	r3, r4
 800420e:	d9fa      	bls.n	8004206 <_free_r+0x4e>
 8004210:	6811      	ldr	r1, [r2, #0]
 8004212:	1855      	adds	r5, r2, r1
 8004214:	42a5      	cmp	r5, r4
 8004216:	d10b      	bne.n	8004230 <_free_r+0x78>
 8004218:	6824      	ldr	r4, [r4, #0]
 800421a:	4421      	add	r1, r4
 800421c:	1854      	adds	r4, r2, r1
 800421e:	42a3      	cmp	r3, r4
 8004220:	6011      	str	r1, [r2, #0]
 8004222:	d1dd      	bne.n	80041e0 <_free_r+0x28>
 8004224:	681c      	ldr	r4, [r3, #0]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	6053      	str	r3, [r2, #4]
 800422a:	4421      	add	r1, r4
 800422c:	6011      	str	r1, [r2, #0]
 800422e:	e7d7      	b.n	80041e0 <_free_r+0x28>
 8004230:	d902      	bls.n	8004238 <_free_r+0x80>
 8004232:	230c      	movs	r3, #12
 8004234:	6003      	str	r3, [r0, #0]
 8004236:	e7d3      	b.n	80041e0 <_free_r+0x28>
 8004238:	6825      	ldr	r5, [r4, #0]
 800423a:	1961      	adds	r1, r4, r5
 800423c:	428b      	cmp	r3, r1
 800423e:	bf04      	itt	eq
 8004240:	6819      	ldreq	r1, [r3, #0]
 8004242:	685b      	ldreq	r3, [r3, #4]
 8004244:	6063      	str	r3, [r4, #4]
 8004246:	bf04      	itt	eq
 8004248:	1949      	addeq	r1, r1, r5
 800424a:	6021      	streq	r1, [r4, #0]
 800424c:	6054      	str	r4, [r2, #4]
 800424e:	e7c7      	b.n	80041e0 <_free_r+0x28>
 8004250:	b003      	add	sp, #12
 8004252:	bd30      	pop	{r4, r5, pc}
 8004254:	20000198 	.word	0x20000198

08004258 <_raise_r>:
 8004258:	291f      	cmp	r1, #31
 800425a:	b538      	push	{r3, r4, r5, lr}
 800425c:	4604      	mov	r4, r0
 800425e:	460d      	mov	r5, r1
 8004260:	d904      	bls.n	800426c <_raise_r+0x14>
 8004262:	2316      	movs	r3, #22
 8004264:	6003      	str	r3, [r0, #0]
 8004266:	f04f 30ff 	mov.w	r0, #4294967295
 800426a:	bd38      	pop	{r3, r4, r5, pc}
 800426c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800426e:	b112      	cbz	r2, 8004276 <_raise_r+0x1e>
 8004270:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004274:	b94b      	cbnz	r3, 800428a <_raise_r+0x32>
 8004276:	4620      	mov	r0, r4
 8004278:	f000 f830 	bl	80042dc <_getpid_r>
 800427c:	462a      	mov	r2, r5
 800427e:	4601      	mov	r1, r0
 8004280:	4620      	mov	r0, r4
 8004282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004286:	f000 b817 	b.w	80042b8 <_kill_r>
 800428a:	2b01      	cmp	r3, #1
 800428c:	d00a      	beq.n	80042a4 <_raise_r+0x4c>
 800428e:	1c59      	adds	r1, r3, #1
 8004290:	d103      	bne.n	800429a <_raise_r+0x42>
 8004292:	2316      	movs	r3, #22
 8004294:	6003      	str	r3, [r0, #0]
 8004296:	2001      	movs	r0, #1
 8004298:	e7e7      	b.n	800426a <_raise_r+0x12>
 800429a:	2400      	movs	r4, #0
 800429c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80042a0:	4628      	mov	r0, r5
 80042a2:	4798      	blx	r3
 80042a4:	2000      	movs	r0, #0
 80042a6:	e7e0      	b.n	800426a <_raise_r+0x12>

080042a8 <raise>:
 80042a8:	4b02      	ldr	r3, [pc, #8]	; (80042b4 <raise+0xc>)
 80042aa:	4601      	mov	r1, r0
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	f7ff bfd3 	b.w	8004258 <_raise_r>
 80042b2:	bf00      	nop
 80042b4:	20000010 	.word	0x20000010

080042b8 <_kill_r>:
 80042b8:	b538      	push	{r3, r4, r5, lr}
 80042ba:	4d07      	ldr	r5, [pc, #28]	; (80042d8 <_kill_r+0x20>)
 80042bc:	2300      	movs	r3, #0
 80042be:	4604      	mov	r4, r0
 80042c0:	4608      	mov	r0, r1
 80042c2:	4611      	mov	r1, r2
 80042c4:	602b      	str	r3, [r5, #0]
 80042c6:	f7fc fdb9 	bl	8000e3c <_kill>
 80042ca:	1c43      	adds	r3, r0, #1
 80042cc:	d102      	bne.n	80042d4 <_kill_r+0x1c>
 80042ce:	682b      	ldr	r3, [r5, #0]
 80042d0:	b103      	cbz	r3, 80042d4 <_kill_r+0x1c>
 80042d2:	6023      	str	r3, [r4, #0]
 80042d4:	bd38      	pop	{r3, r4, r5, pc}
 80042d6:	bf00      	nop
 80042d8:	200001a0 	.word	0x200001a0

080042dc <_getpid_r>:
 80042dc:	f7fc bda6 	b.w	8000e2c <_getpid>

080042e0 <__malloc_lock>:
 80042e0:	4801      	ldr	r0, [pc, #4]	; (80042e8 <__malloc_lock+0x8>)
 80042e2:	f000 b809 	b.w	80042f8 <__retarget_lock_acquire_recursive>
 80042e6:	bf00      	nop
 80042e8:	200001a8 	.word	0x200001a8

080042ec <__malloc_unlock>:
 80042ec:	4801      	ldr	r0, [pc, #4]	; (80042f4 <__malloc_unlock+0x8>)
 80042ee:	f000 b804 	b.w	80042fa <__retarget_lock_release_recursive>
 80042f2:	bf00      	nop
 80042f4:	200001a8 	.word	0x200001a8

080042f8 <__retarget_lock_acquire_recursive>:
 80042f8:	4770      	bx	lr

080042fa <__retarget_lock_release_recursive>:
 80042fa:	4770      	bx	lr

080042fc <_init>:
 80042fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042fe:	bf00      	nop
 8004300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004302:	bc08      	pop	{r3}
 8004304:	469e      	mov	lr, r3
 8004306:	4770      	bx	lr

08004308 <_fini>:
 8004308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800430a:	bf00      	nop
 800430c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800430e:	bc08      	pop	{r3}
 8004310:	469e      	mov	lr, r3
 8004312:	4770      	bx	lr
