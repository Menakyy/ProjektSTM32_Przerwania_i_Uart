
Uart_Oraz_Przerwania.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040ac  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004240  08004240  00014240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042cc  080042cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080042cc  080042cc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042cc  080042cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  080042d8  080042d8  000142d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080042e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000074  08004358  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08004358  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109ac  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f8c  00000000  00000000  00030a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  000339e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000970  00000000  00000000  00034458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a62  00000000  00000000  00034dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e8d5  00000000  00000000  0005882a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c30e7  00000000  00000000  000670ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012a1e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cb0  00000000  00000000  0012a23c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004228 	.word	0x08004228

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	08004228 	.word	0x08004228

080001d4 <_ZN5IGPIOC1Ev>:
 */

#ifndef INC_IGPIO_H_
#define INC_IGPIO_H_

class IGPIO {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <_ZN5IGPIOC1Ev+0x1c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4618      	mov	r0, r3
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	0800425c 	.word	0x0800425c

080001f4 <_ZN7CButtonC1Ev>:


#include <CButton.h>


CButton::CButton() {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4618      	mov	r0, r3
 8000200:	f7ff ffe8 	bl	80001d4 <_ZN5IGPIOC1Ev>
 8000204:	4a03      	ldr	r2, [pc, #12]	; (8000214 <_ZN7CButtonC1Ev+0x20>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4618      	mov	r0, r3
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	08004248 	.word	0x08004248

08000218 <_ZN7CButtonD1Ev>:

CButton::~CButton() {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	4a04      	ldr	r2, [pc, #16]	; (8000234 <_ZN7CButtonD1Ev+0x1c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4618      	mov	r0, r3
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	08004248 	.word	0x08004248

08000238 <_ZN7CButtonD0Ev>:
CButton::~CButton() {
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
}
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f7ff ffe9 	bl	8000218 <_ZN7CButtonD1Ev>
 8000246:	211c      	movs	r1, #28
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f003 fef2 	bl	8004032 <_ZdlPvj>
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4618      	mov	r0, r3
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}

08000258 <_ZN7CButton4initEP12GPIO_TypeDeftm>:

void CButton::init(GPIO_TypeDef* GpioPort, uint16_t GpioPin, uint32_t timerDebounce)
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	603b      	str	r3, [r7, #0]
 8000264:	4613      	mov	r3, r2
 8000266:	80fb      	strh	r3, [r7, #6]
	this->GpioPort 	= GpioPort;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	605a      	str	r2, [r3, #4]
	this->GpioPin 	= GpioPin;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	88fa      	ldrh	r2, [r7, #6]
 8000272:	811a      	strh	r2, [r3, #8]
	m_timerDebounce = timerDebounce;
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	683a      	ldr	r2, [r7, #0]
 8000278:	611a      	str	r2, [r3, #16]
	state 			= idle;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	2200      	movs	r2, #0
 800027e:	751a      	strb	r2, [r3, #20]
}
 8000280:	bf00      	nop
 8000282:	3714      	adds	r7, #20
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr

0800028c <_ZN7CButton6updateEv>:

void CButton::update()
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	switch(state)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	7d1b      	ldrb	r3, [r3, #20]
 8000298:	2b02      	cmp	r3, #2
 800029a:	d04b      	beq.n	8000334 <_ZN7CButton6updateEv+0xa8>
 800029c:	2b02      	cmp	r3, #2
 800029e:	dc62      	bgt.n	8000366 <_ZN7CButton6updateEv+0xda>
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d002      	beq.n	80002aa <_ZN7CButton6updateEv+0x1e>
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d019      	beq.n	80002dc <_ZN7CButton6updateEv+0x50>
			{
				state = idle;
			}
			break;
	}
}
 80002a8:	e05d      	b.n	8000366 <_ZN7CButton6updateEv+0xda>
			if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	891b      	ldrh	r3, [r3, #8]
 80002b2:	4619      	mov	r1, r3
 80002b4:	4610      	mov	r0, r2
 80002b6:	f001 f925 	bl	8001504 <HAL_GPIO_ReadPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	bf0c      	ite	eq
 80002c0:	2301      	moveq	r3, #1
 80002c2:	2300      	movne	r3, #0
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d048      	beq.n	800035c <_ZN7CButton6updateEv+0xd0>
				state = debounce;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2201      	movs	r2, #1
 80002ce:	751a      	strb	r2, [r3, #20]
				m_lastTick = HAL_GetTick();
 80002d0:	f000 fdfa 	bl	8000ec8 <HAL_GetTick>
 80002d4:	4602      	mov	r2, r0
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	60da      	str	r2, [r3, #12]
			break;
 80002da:	e03f      	b.n	800035c <_ZN7CButton6updateEv+0xd0>
			if((HAL_GetTick() - m_lastTick) > m_timerDebounce)
 80002dc:	f000 fdf4 	bl	8000ec8 <HAL_GetTick>
 80002e0:	4602      	mov	r2, r0
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	1ad2      	subs	r2, r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	bf8c      	ite	hi
 80002f0:	2301      	movhi	r3, #1
 80002f2:	2300      	movls	r3, #0
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d032      	beq.n	8000360 <_ZN7CButton6updateEv+0xd4>
				if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	685a      	ldr	r2, [r3, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	891b      	ldrh	r3, [r3, #8]
 8000302:	4619      	mov	r1, r3
 8000304:	4610      	mov	r0, r2
 8000306:	f001 f8fd 	bl	8001504 <HAL_GPIO_ReadPin>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	bf0c      	ite	eq
 8000310:	2301      	moveq	r3, #1
 8000312:	2300      	movne	r3, #0
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d008      	beq.n	800032c <_ZN7CButton6updateEv+0xa0>
					state = pressed;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2202      	movs	r2, #2
 800031e:	751a      	strb	r2, [r3, #20]
					m_lastTick = HAL_GetTick();
 8000320:	f000 fdd2 	bl	8000ec8 <HAL_GetTick>
 8000324:	4602      	mov	r2, r0
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	60da      	str	r2, [r3, #12]
			break;
 800032a:	e019      	b.n	8000360 <_ZN7CButton6updateEv+0xd4>
					state = idle;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2200      	movs	r2, #0
 8000330:	751a      	strb	r2, [r3, #20]
			break;
 8000332:	e015      	b.n	8000360 <_ZN7CButton6updateEv+0xd4>
			if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	685a      	ldr	r2, [r3, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	891b      	ldrh	r3, [r3, #8]
 800033c:	4619      	mov	r1, r3
 800033e:	4610      	mov	r0, r2
 8000340:	f001 f8e0 	bl	8001504 <HAL_GPIO_ReadPin>
 8000344:	4603      	mov	r3, r0
 8000346:	2b01      	cmp	r3, #1
 8000348:	bf0c      	ite	eq
 800034a:	2301      	moveq	r3, #1
 800034c:	2300      	movne	r3, #0
 800034e:	b2db      	uxtb	r3, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	d007      	beq.n	8000364 <_ZN7CButton6updateEv+0xd8>
				state = idle;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2200      	movs	r2, #0
 8000358:	751a      	strb	r2, [r3, #20]
			break;
 800035a:	e003      	b.n	8000364 <_ZN7CButton6updateEv+0xd8>
			break;
 800035c:	bf00      	nop
 800035e:	e002      	b.n	8000366 <_ZN7CButton6updateEv+0xda>
			break;
 8000360:	bf00      	nop
 8000362:	e000      	b.n	8000366 <_ZN7CButton6updateEv+0xda>
			break;
 8000364:	bf00      	nop
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <_ZN7CDriverC1Ev>:
CButton CDriver::m_blueButton;
CStateMachineLed CDriver::m_stateMachineLed;

const char message[] = "test\r\n";

CDriver::CDriver()
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
{
}
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4618      	mov	r0, r3
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <_ZN7CDriverD1Ev>:
CDriver::~CDriver()
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
{
}
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4618      	mov	r0, r3
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
	...

0800039c <_ZN7CDriver4initEv>:

void CDriver::init()
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
	m_uartDriver.init();
 80003a4:	480d      	ldr	r0, [pc, #52]	; (80003dc <_ZN7CDriver4initEv+0x40>)
 80003a6:	f000 fb21 	bl	80009ec <_ZN11CUartDriver4initEv>

	m_greenLed.init(LD2_GPIO_Port, LD2_Pin, CLed::LedStates::toggle);
 80003aa:	2302      	movs	r3, #2
 80003ac:	2220      	movs	r2, #32
 80003ae:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <_ZN7CDriver4initEv+0x44>)
 80003b4:	f000 fa16 	bl	80007e4 <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>
	m_blueButton.init(B1_GPIO_Port, B1_Pin, 20);
 80003b8:	2314      	movs	r3, #20
 80003ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003be:	4909      	ldr	r1, [pc, #36]	; (80003e4 <_ZN7CDriver4initEv+0x48>)
 80003c0:	4809      	ldr	r0, [pc, #36]	; (80003e8 <_ZN7CDriver4initEv+0x4c>)
 80003c2:	f7ff ff49 	bl	8000258 <_ZN7CButton4initEP12GPIO_TypeDeftm>
	m_stateMachineLed.init(&m_greenLed,&m_blueButton,&m_uartDriver);
 80003c6:	4b05      	ldr	r3, [pc, #20]	; (80003dc <_ZN7CDriver4initEv+0x40>)
 80003c8:	4a07      	ldr	r2, [pc, #28]	; (80003e8 <_ZN7CDriver4initEv+0x4c>)
 80003ca:	4905      	ldr	r1, [pc, #20]	; (80003e0 <_ZN7CDriver4initEv+0x44>)
 80003cc:	4807      	ldr	r0, [pc, #28]	; (80003ec <_ZN7CDriver4initEv+0x50>)
 80003ce:	f000 fac7 	bl	8000960 <_ZN16CStateMachineLed4initEP4CLedP7CButtonP11CUartDriver>
}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	20000090 	.word	0x20000090
 80003e0:	20000128 	.word	0x20000128
 80003e4:	48000800 	.word	0x48000800
 80003e8:	20000140 	.word	0x20000140
 80003ec:	2000015c 	.word	0x2000015c

080003f0 <_ZN7CDriver6updateEv>:


void CDriver::update()
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
//	m_blueButton.update();
	m_greenLed.update();
 80003f8:	4803      	ldr	r0, [pc, #12]	; (8000408 <_ZN7CDriver6updateEv+0x18>)
 80003fa:	f000 fa14 	bl	8000826 <_ZN4CLed6updateEv>



	//m_uartDriver.transmit((uint8_t*)message, strlen(message),500);

}
 80003fe:	bf00      	nop
 8000400:	3708      	adds	r7, #8
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}
 8000406:	bf00      	nop
 8000408:	20000128 	.word	0x20000128

0800040c <_Z41__static_initialization_and_destruction_0ii>:
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	6039      	str	r1, [r7, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d110      	bne.n	800043e <_Z41__static_initialization_and_destruction_0ii+0x32>
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000422:	4293      	cmp	r3, r2
 8000424:	d10b      	bne.n	800043e <_Z41__static_initialization_and_destruction_0ii+0x32>
CUartDriver CDriver::m_uartDriver;
 8000426:	4812      	ldr	r0, [pc, #72]	; (8000470 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000428:	f000 fab0 	bl	800098c <_ZN11CUartDriverC1Ev>
CLed CDriver::m_greenLed;
 800042c:	4811      	ldr	r0, [pc, #68]	; (8000474 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800042e:	f000 f9a7 	bl	8000780 <_ZN4CLedC1Ev>
CButton CDriver::m_blueButton;
 8000432:	4811      	ldr	r0, [pc, #68]	; (8000478 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000434:	f7ff fede 	bl	80001f4 <_ZN7CButtonC1Ev>
CStateMachineLed CDriver::m_stateMachineLed;
 8000438:	4810      	ldr	r0, [pc, #64]	; (800047c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800043a:	f000 fa61 	bl	8000900 <_ZN16CStateMachineLedC1Ev>
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d110      	bne.n	8000466 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800044a:	4293      	cmp	r3, r2
 800044c:	d10b      	bne.n	8000466 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 800044e:	480b      	ldr	r0, [pc, #44]	; (800047c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000450:	f000 fa66 	bl	8000920 <_ZN16CStateMachineLedD1Ev>
CButton CDriver::m_blueButton;
 8000454:	4808      	ldr	r0, [pc, #32]	; (8000478 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000456:	f7ff fedf 	bl	8000218 <_ZN7CButtonD1Ev>
CLed CDriver::m_greenLed;
 800045a:	4806      	ldr	r0, [pc, #24]	; (8000474 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800045c:	f000 f9a2 	bl	80007a4 <_ZN4CLedD1Ev>
CUartDriver CDriver::m_uartDriver;
 8000460:	4803      	ldr	r0, [pc, #12]	; (8000470 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000462:	f000 faa3 	bl	80009ac <_ZN11CUartDriverD1Ev>
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000090 	.word	0x20000090
 8000474:	20000128 	.word	0x20000128
 8000478:	20000140 	.word	0x20000140
 800047c:	2000015c 	.word	0x2000015c

08000480 <_GLOBAL__sub_I__ZN7CDriver12driverBufferE>:
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
 8000484:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000488:	2001      	movs	r0, #1
 800048a:	f7ff ffbf 	bl	800040c <_Z41__static_initialization_and_destruction_0ii>
 800048e:	bd80      	pop	{r7, pc}

08000490 <_GLOBAL__sub_D__ZN7CDriver12driverBufferE>:
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
 8000494:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000498:	2000      	movs	r0, #0
 800049a:	f7ff ffb7 	bl	800040c <_Z41__static_initialization_and_destruction_0ii>
 800049e:	bd80      	pop	{r7, pc}

080004a0 <_ZN11CUartDriver7getUartEv>:
	BufferState writeToBuffer(uint8_t value);
	BufferState readFromBuffer(uint8_t* value);
	void Flush();
	void isEndLine(uint8_t value);

	UART_HandleTypeDef* getUart() {return &m_huart2;}
 80004a0:	b480      	push	{r7}
 80004a2:	b083      	sub	sp, #12
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	330c      	adds	r3, #12
 80004ac:	4618      	mov	r0, r3
 80004ae:	370c      	adds	r7, #12
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <_ZN7CHelper4initEv>:

//UART_HandleTypeDef CHelper::huart2;


void CHelper::init()
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	SystemClock_Config();
 80004bc:	f000 f8ee 	bl	800069c <_ZN7CHelper18SystemClock_ConfigEv>
	MX_GPIO_Init();
 80004c0:	f000 f84a 	bl	8000558 <_ZN7CHelper12MX_GPIO_InitEv>
	MX_NVIC_Init();
 80004c4:	f000 f8d6 	bl	8000674 <_ZN7CHelper12MX_NVIC_InitEv>
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Mybutton_Pin)
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d103      	bne.n	80004e4 <HAL_GPIO_EXTI_Callback+0x18>
	{
		HAL_GPIO_TogglePin(Reddiode_GPIO_Port, Reddiode_Pin);
 80004dc:	2102      	movs	r1, #2
 80004de:	4808      	ldr	r0, [pc, #32]	; (8000500 <HAL_GPIO_EXTI_Callback+0x34>)
 80004e0:	f001 f840 	bl	8001564 <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == B1_Pin)
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004ea:	d104      	bne.n	80004f6 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004ec:	2120      	movs	r1, #32
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f2:	f001 f837 	bl	8001564 <HAL_GPIO_TogglePin>
	}
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	48000800 	.word	0x48000800

08000504 <HAL_UART_TxCpltCallback>:

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	if(huart == CDriver::m_uartDriver.getUart()) //huart->Instance == USART2
 800050c:	4804      	ldr	r0, [pc, #16]	; (8000520 <HAL_UART_TxCpltCallback+0x1c>)
 800050e:	f7ff ffc7 	bl	80004a0 <_ZN11CUartDriver7getUartEv>
 8000512:	4602      	mov	r2, r0
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4293      	cmp	r3, r2
	{

	}
}
 8000518:	bf00      	nop
 800051a:	3708      	adds	r7, #8
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20000090 	.word	0x20000090

08000524 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	if(huart == CDriver::m_uartDriver.getUart())
 800052c:	4809      	ldr	r0, [pc, #36]	; (8000554 <HAL_UART_RxCpltCallback+0x30>)
 800052e:	f7ff ffb7 	bl	80004a0 <_ZN11CUartDriver7getUartEv>
 8000532:	4602      	mov	r2, r0
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	4293      	cmp	r3, r2
 8000538:	bf0c      	ite	eq
 800053a:	2301      	moveq	r3, #1
 800053c:	2300      	movne	r3, #0
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b00      	cmp	r3, #0
 8000542:	d002      	beq.n	800054a <HAL_UART_RxCpltCallback+0x26>
	{
		CDriver::m_uartDriver.irqRxComplete();
 8000544:	4803      	ldr	r0, [pc, #12]	; (8000554 <HAL_UART_RxCpltCallback+0x30>)
 8000546:	f000 fa8d 	bl	8000a64 <_ZN11CUartDriver13irqRxCompleteEv>
	}
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000090 	.word	0x20000090

08000558 <_ZN7CHelper12MX_GPIO_InitEv>:

void CHelper::MX_GPIO_Init()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b08a      	sub	sp, #40	; 0x28
 800055c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]
 800056c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	4b3f      	ldr	r3, [pc, #252]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000570:	695b      	ldr	r3, [r3, #20]
 8000572:	4a3e      	ldr	r2, [pc, #248]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000578:	6153      	str	r3, [r2, #20]
 800057a:	4b3c      	ldr	r3, [pc, #240]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800057c:	695b      	ldr	r3, [r3, #20]
 800057e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000586:	4b39      	ldr	r3, [pc, #228]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000588:	695b      	ldr	r3, [r3, #20]
 800058a:	4a38      	ldr	r2, [pc, #224]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800058c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000590:	6153      	str	r3, [r2, #20]
 8000592:	4b36      	ldr	r3, [pc, #216]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800059e:	4b33      	ldr	r3, [pc, #204]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a32      	ldr	r2, [pc, #200]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80005a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b30      	ldr	r3, [pc, #192]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	4b2d      	ldr	r3, [pc, #180]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	4a2c      	ldr	r2, [pc, #176]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80005bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c0:	6153      	str	r3, [r2, #20]
 80005c2:	4b2a      	ldr	r3, [pc, #168]	; (800066c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80005c4:	695b      	ldr	r3, [r3, #20]
 80005c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80005ca:	607b      	str	r3, [r7, #4]
 80005cc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Reddiode_GPIO_Port, Reddiode_Pin, GPIO_PIN_RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2102      	movs	r1, #2
 80005d2:	4827      	ldr	r0, [pc, #156]	; (8000670 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80005d4:	f000 ffae 	bl	8001534 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d8:	2200      	movs	r2, #0
 80005da:	2120      	movs	r1, #32
 80005dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e0:	f000 ffa8 	bl	8001534 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80005e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005f4:	f107 0314 	add.w	r3, r7, #20
 80005f8:	4619      	mov	r1, r3
 80005fa:	481d      	ldr	r0, [pc, #116]	; (8000670 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80005fc:	f000 fdf8 	bl	80011f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : Mybutton_Pin */
	GPIO_InitStruct.Pin = Mybutton_Pin;
 8000600:	2301      	movs	r3, #1
 8000602:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000604:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000608:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800060a:	2301      	movs	r3, #1
 800060c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Mybutton_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	4816      	ldr	r0, [pc, #88]	; (8000670 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 8000616:	f000 fdeb 	bl	80011f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : Reddiode_Pin */
	GPIO_InitStruct.Pin = Reddiode_Pin;
 800061a:	2302      	movs	r3, #2
 800061c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000626:	2300      	movs	r3, #0
 8000628:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Reddiode_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	480f      	ldr	r0, [pc, #60]	; (8000670 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 8000632:	f000 fddd 	bl	80011f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000636:	2320      	movs	r3, #32
 8000638:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f000 fdce 	bl	80011f0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	2100      	movs	r1, #0
 8000658:	2006      	movs	r0, #6
 800065a:	f000 fd1c 	bl	8001096 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800065e:	2006      	movs	r0, #6
 8000660:	f000 fd35 	bl	80010ce <HAL_NVIC_EnableIRQ>
}
 8000664:	bf00      	nop
 8000666:	3728      	adds	r7, #40	; 0x28
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40021000 	.word	0x40021000
 8000670:	48000800 	.word	0x48000800

08000674 <_ZN7CHelper12MX_NVIC_InitEv>:

void CHelper::MX_NVIC_Init()
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000678:	2200      	movs	r2, #0
 800067a:	2100      	movs	r1, #0
 800067c:	2028      	movs	r0, #40	; 0x28
 800067e:	f000 fd0a 	bl	8001096 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000682:	2028      	movs	r0, #40	; 0x28
 8000684:	f000 fd23 	bl	80010ce <HAL_NVIC_EnableIRQ>

	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000688:	2200      	movs	r2, #0
 800068a:	2100      	movs	r1, #0
 800068c:	2026      	movs	r0, #38	; 0x26
 800068e:	f000 fd02 	bl	8001096 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000692:	2026      	movs	r0, #38	; 0x26
 8000694:	f000 fd1b 	bl	80010ce <HAL_NVIC_EnableIRQ>
}
 8000698:	bf00      	nop
 800069a:	bd80      	pop	{r7, pc}

0800069c <_ZN7CHelper18SystemClock_ConfigEv>:

void CHelper::SystemClock_Config()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0a6      	sub	sp, #152	; 0x98
 80006a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006a6:	2228      	movs	r2, #40	; 0x28
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 fd12 	bl	80040d4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2258      	movs	r2, #88	; 0x58
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fd04 	bl	80040d4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2310      	movs	r3, #16
 80006d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 ff64 	bl	80015c8 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	bf14      	ite	ne
 8000706:	2301      	movne	r3, #1
 8000708:	2300      	moveq	r3, #0
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <_ZN7CHelper18SystemClock_ConfigEv+0x78>
	{
	Error_Handler();
 8000710:	f000 f831 	bl	8000776 <_ZN7CHelper13Error_HandlerEv>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	65fb      	str	r3, [r7, #92]	; 0x5c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000724:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800072e:	2102      	movs	r1, #2
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fe5f 	bl	80023f4 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <_ZN7CHelper18SystemClock_ConfigEv+0xae>
	{
	Error_Handler();
 8000746:	f000 f816 	bl	8000776 <_ZN7CHelper13Error_HandlerEv>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800074a:	2302      	movs	r3, #2
 800074c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4618      	mov	r0, r3
 8000756:	f002 f883 	bl	8002860 <HAL_RCCEx_PeriphCLKConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <_ZN7CHelper18SystemClock_ConfigEv+0xd2>
	{
	Error_Handler();
 800076a:	f000 f804 	bl	8000776 <_ZN7CHelper13Error_HandlerEv>
	}
}
 800076e:	bf00      	nop
 8000770:	3798      	adds	r7, #152	; 0x98
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <_ZN7CHelper13Error_HandlerEv>:

void CHelper::Error_Handler()
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077a:	b672      	cpsid	i
}
 800077c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800077e:	e7fe      	b.n	800077e <_ZN7CHelper13Error_HandlerEv+0x8>

08000780 <_ZN4CLedC1Ev>:
 *      Author: Konra
 */

#include <CLed.h>

CLed::CLed() {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fd22 	bl	80001d4 <_ZN5IGPIOC1Ev>
 8000790:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <_ZN4CLedC1Ev+0x20>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	08004268 	.word	0x08004268

080007a4 <_ZN4CLedD1Ev>:

CLed::~CLed() {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <_ZN4CLedD1Ev+0x1c>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	08004268 	.word	0x08004268

080007c4 <_ZN4CLedD0Ev>:
CLed::~CLed() {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
}
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ffe9 	bl	80007a4 <_ZN4CLedD1Ev>
 80007d2:	2118      	movs	r1, #24
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f003 fc2c 	bl	8004032 <_ZdlPvj>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>:

void CLed::init(GPIO_TypeDef* GpioPort, uint16_t GpioPin, LedStates state = off)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	4611      	mov	r1, r2
 80007f0:	461a      	mov	r2, r3
 80007f2:	460b      	mov	r3, r1
 80007f4:	80fb      	strh	r3, [r7, #6]
 80007f6:	4613      	mov	r3, r2
 80007f8:	717b      	strb	r3, [r7, #5]
	this->GpioPort 	= GpioPort;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	68ba      	ldr	r2, [r7, #8]
 80007fe:	605a      	str	r2, [r3, #4]
	this->GpioPin 	= GpioPin;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	811a      	strh	r2, [r3, #8]
	this->state 	= state;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	797a      	ldrb	r2, [r7, #5]
 800080a:	729a      	strb	r2, [r3, #10]
	m_timerToggle 	= 500;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000812:	60da      	str	r2, [r3, #12]
	m_enter 		= false;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2200      	movs	r2, #0
 8000818:	751a      	strb	r2, [r3, #20]
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <_ZN4CLed6updateEv>:
void CLed::update()
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
	switch(state)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7a9b      	ldrb	r3, [r3, #10]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d00e      	beq.n	8000854 <_ZN4CLed6updateEv+0x2e>
 8000836:	2b02      	cmp	r3, #2
 8000838:	dc2e      	bgt.n	8000898 <_ZN4CLed6updateEv+0x72>
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <_ZN4CLed6updateEv+0x1e>
 800083e:	2b01      	cmp	r3, #1
 8000840:	d004      	beq.n	800084c <_ZN4CLed6updateEv+0x26>
				m_enter = false;
			}

			break;
	}
}
 8000842:	e029      	b.n	8000898 <_ZN4CLed6updateEv+0x72>
			turnOnLed();
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 f83b 	bl	80008c0 <_ZN4CLed9turnOnLedEv>
			break;
 800084a:	e025      	b.n	8000898 <_ZN4CLed6updateEv+0x72>
			turnOffLed();
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 f847 	bl	80008e0 <_ZN4CLed10turnOffLedEv>
			break;
 8000852:	e021      	b.n	8000898 <_ZN4CLed6updateEv+0x72>
			if(m_enter == false)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7d1b      	ldrb	r3, [r3, #20]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d107      	bne.n	800086c <_ZN4CLed6updateEv+0x46>
				m_lastTick = HAL_GetTick();
 800085c:	f000 fb34 	bl	8000ec8 <HAL_GetTick>
 8000860:	4602      	mov	r2, r0
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	611a      	str	r2, [r3, #16]
				m_enter = true;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2201      	movs	r2, #1
 800086a:	751a      	strb	r2, [r3, #20]
			if((HAL_GetTick() - m_lastTick) > m_timerToggle)
 800086c:	f000 fb2c 	bl	8000ec8 <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	691b      	ldr	r3, [r3, #16]
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	bf8c      	ite	hi
 8000880:	2301      	movhi	r3, #1
 8000882:	2300      	movls	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d005      	beq.n	8000896 <_ZN4CLed6updateEv+0x70>
				togglePin();
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 f808 	bl	80008a0 <_ZN4CLed9togglePinEv>
				m_enter = false;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	751a      	strb	r2, [r3, #20]
			break;
 8000896:	bf00      	nop
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <_ZN4CLed9togglePinEv>:
void CLed::togglePin()
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GpioPort, GpioPin);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	891b      	ldrh	r3, [r3, #8]
 80008b0:	4619      	mov	r1, r3
 80008b2:	4610      	mov	r0, r2
 80008b4:	f000 fe56 	bl	8001564 <HAL_GPIO_TogglePin>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_ZN4CLed9turnOnLedEv>:

void CLed::turnOnLed()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GpioPort, GpioPin, GPIO_PIN_SET);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6858      	ldr	r0, [r3, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	891b      	ldrh	r3, [r3, #8]
 80008d0:	2201      	movs	r2, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	f000 fe2e 	bl	8001534 <HAL_GPIO_WritePin>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_ZN4CLed10turnOffLedEv>:

void CLed::turnOffLed()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GpioPort, GpioPin, GPIO_PIN_RESET);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6858      	ldr	r0, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	891b      	ldrh	r3, [r3, #8]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4619      	mov	r1, r3
 80008f4:	f000 fe1e 	bl	8001534 <HAL_GPIO_WritePin>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <_ZN16CStateMachineLedC1Ev>:
#include "stdio.h"


uint8_t CStateMachineLed::buffer[32];

CStateMachineLed::CStateMachineLed() {
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <_ZN16CStateMachineLedC1Ev+0x1c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	0800427c 	.word	0x0800427c

08000920 <_ZN16CStateMachineLedD1Ev>:

CStateMachineLed::~CStateMachineLed() {
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <_ZN16CStateMachineLedD1Ev+0x1c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4618      	mov	r0, r3
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	0800427c 	.word	0x0800427c

08000940 <_ZN16CStateMachineLedD0Ev>:
CStateMachineLed::~CStateMachineLed() {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
}
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff ffe9 	bl	8000920 <_ZN16CStateMachineLedD1Ev>
 800094e:	2110      	movs	r1, #16
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f003 fb6e 	bl	8004032 <_ZdlPvj>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <_ZN16CStateMachineLed4initEP4CLedP7CButtonP11CUartDriver>:

void CStateMachineLed::init(CLed* led, CButton* button, CUartDriver* uart)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	603b      	str	r3, [r7, #0]
	this->led 		= led;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	605a      	str	r2, [r3, #4]
	this->button 	= button;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	609a      	str	r2, [r3, #8]
	this->uart 		= uart;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	683a      	ldr	r2, [r7, #0]
 800097e:	60da      	str	r2, [r3, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <_ZN11CUartDriverC1Ev>:

#include <CUartDriver.h>

//UART_HandleTypeDef CUartDriver::m_huart2;

CUartDriver::CUartDriver() {
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <_ZN11CUartDriverC1Ev+0x1c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	0800428c 	.word	0x0800428c

080009ac <_ZN11CUartDriverD1Ev>:

CUartDriver::~CUartDriver() {
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <_ZN11CUartDriverD1Ev+0x1c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	0800428c 	.word	0x0800428c

080009cc <_ZN11CUartDriverD0Ev>:
CUartDriver::~CUartDriver() {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
}
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ffe9 	bl	80009ac <_ZN11CUartDriverD1Ev>
 80009da:	2198      	movs	r1, #152	; 0x98
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f003 fb28 	bl	8004032 <_ZdlPvj>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <_ZN11CUartDriver4initEv>:

void CUartDriver::init()
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
	m_huart2.Instance = USART2;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a1a      	ldr	r2, [pc, #104]	; (8000a60 <_ZN11CUartDriver4initEv+0x74>)
 80009f8:	60da      	str	r2, [r3, #12]
	m_huart2.Init.BaudRate = 38400;
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000a00:	611a      	str	r2, [r3, #16]
	m_huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
	m_huart2.Init.StopBits = UART_STOPBITS_1;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
	m_huart2.Init.Parity = UART_PARITY_NONE;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
	m_huart2.Init.Mode = UART_MODE_TX_RX;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	220c      	movs	r2, #12
 8000a18:	621a      	str	r2, [r3, #32]
	m_huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	625a      	str	r2, [r3, #36]	; 0x24
	m_huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	2200      	movs	r2, #0
 8000a24:	629a      	str	r2, [r3, #40]	; 0x28
	m_huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	62da      	str	r2, [r3, #44]	; 0x2c
	m_huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_UART_Init(&m_huart2) != HAL_OK)
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	330c      	adds	r3, #12
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 f930 	bl	8002c9c <HAL_UART_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	bf14      	ite	ne
 8000a42:	2301      	movne	r3, #1
 8000a44:	2300      	moveq	r3, #0
 8000a46:	b2db      	uxtb	r3, r3
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d002      	beq.n	8000a52 <_ZN11CUartDriver4initEv+0x66>
	{
		Error_Handler();
 8000a4c:	6878      	ldr	r0, [r7, #4]
 8000a4e:	f000 f88d 	bl	8000b6c <_ZN11CUartDriver13Error_HandlerEv>
	}

	turnOnReceivingIfOff();
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f000 f825 	bl	8000aa2 <_ZN11CUartDriver20turnOnReceivingIfOffEv>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40004400 	.word	0x40004400

08000a64 <_ZN11CUartDriver13irqRxCompleteEv>:

void CUartDriver::irqRxComplete()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	writeToBuffer(m_dataReceive);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8000a72:	4619      	mov	r1, r3
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f000 f84b 	bl	8000b10 <_ZN11CUartDriver13writeToBufferEh>
	isEndLine(m_dataReceive);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8000a80:	4619      	mov	r1, r3
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f82d 	bl	8000ae2 <_ZN11CUartDriver9isEndLineEh>
	HAL_UART_Receive_IT(&m_huart2, &m_dataReceive, sizeof(m_dataReceive));
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	f103 000c 	add.w	r0, r3, #12
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3394      	adds	r3, #148	; 0x94
 8000a92:	2201      	movs	r2, #1
 8000a94:	4619      	mov	r1, r3
 8000a96:	f002 f94f 	bl	8002d38 <HAL_UART_Receive_IT>
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}

08000aa2 <_ZN11CUartDriver20turnOnReceivingIfOffEv>:

void CUartDriver::turnOnReceivingIfOff()
{
 8000aa2:	b580      	push	{r7, lr}
 8000aa4:	b082      	sub	sp, #8
 8000aa6:	af00      	add	r7, sp, #0
 8000aa8:	6078      	str	r0, [r7, #4]
    if (m_huart2.gState == HAL_UART_STATE_READY || m_huart2.gState == HAL_UART_STATE_BUSY_TX)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ab0:	2b20      	cmp	r3, #32
 8000ab2:	d004      	beq.n	8000abe <_ZN11CUartDriver20turnOnReceivingIfOffEv+0x1c>
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000aba:	2b21      	cmp	r3, #33	; 0x21
 8000abc:	d101      	bne.n	8000ac2 <_ZN11CUartDriver20turnOnReceivingIfOffEv+0x20>
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e000      	b.n	8000ac4 <_ZN11CUartDriver20turnOnReceivingIfOffEv+0x22>
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d008      	beq.n	8000ada <_ZN11CUartDriver20turnOnReceivingIfOffEv+0x38>
    {
        HAL_UART_Receive_IT(&m_huart2, &m_dataReceive, sizeof(m_dataReceive));
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f103 000c 	add.w	r0, r3, #12
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	3394      	adds	r3, #148	; 0x94
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	f002 f92f 	bl	8002d38 <HAL_UART_Receive_IT>
    }
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <_ZN11CUartDriver9isEndLineEh>:

void CUartDriver::isEndLine(uint8_t value)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	b083      	sub	sp, #12
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
 8000aea:	460b      	mov	r3, r1
 8000aec:	70fb      	strb	r3, [r7, #3]
	if(value == '\n')
 8000aee:	78fb      	ldrb	r3, [r7, #3]
 8000af0:	2b0a      	cmp	r3, #10
 8000af2:	d107      	bne.n	8000b04 <_ZN11CUartDriver9isEndLineEh+0x22>
	{
		m_receivedLines++;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8000afa:	3301      	adds	r3, #1
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
	}
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <_ZN11CUartDriver13writeToBufferEh>:
{
	HAL_UART_Receive_IT(&m_huart2, pData, Size);
}

CUartDriver::BufferState CUartDriver::writeToBuffer(uint8_t value)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b085      	sub	sp, #20
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
 8000b18:	460b      	mov	r3, r1
 8000b1a:	70fb      	strb	r3, [r7, #3]

	uint8_t tempHead = (m_head + 1) % BUFFER_SIZE;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8000b22:	3301      	adds	r3, #1
 8000b24:	425a      	negs	r2, r3
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	f002 0207 	and.w	r2, r2, #7
 8000b2e:	bf58      	it	pl
 8000b30:	4253      	negpl	r3, r2
 8000b32:	73fb      	strb	r3, [r7, #15]

	if(tempHead == m_tail)
 8000b34:	7bfb      	ldrb	r3, [r7, #15]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	f8b2 2090 	ldrh.w	r2, [r2, #144]	; 0x90
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d101      	bne.n	8000b44 <_ZN11CUartDriver13writeToBufferEh+0x34>
	{
		return BufferState::BS_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	e00d      	b.n	8000b60 <_ZN11CUartDriver13writeToBufferEh+0x50>
	}

	m_buffer[m_head] = value;
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	78fa      	ldrb	r2, [r7, #3]
 8000b52:	711a      	strb	r2, [r3, #4]
	m_head = tempHead;
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92

	return BufferState::BS_OK;
 8000b5e:	2300      	movs	r3, #0
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3714      	adds	r7, #20
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <_ZN11CUartDriver13Error_HandlerEv>:
	m_head = 0;
	m_tail = 0;
}

void CUartDriver::Error_Handler()
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
	while(1)
 8000b74:	e7fe      	b.n	8000b74 <_ZN11CUartDriver13Error_HandlerEv+0x8>
	...

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7c:	f000 f94a 	bl	8000e14 <HAL_Init>

  /* USER CODE BEGIN Init */
  CHelper::init();
 8000b80:	f7ff fc9a 	bl	80004b8 <_ZN7CHelper4initEv>
  m_driver.init();
 8000b84:	4803      	ldr	r0, [pc, #12]	; (8000b94 <main+0x1c>)
 8000b86:	f7ff fc09 	bl	800039c <_ZN7CDriver4initEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  m_driver.update();
 8000b8a:	4802      	ldr	r0, [pc, #8]	; (8000b94 <main+0x1c>)
 8000b8c:	f7ff fc30 	bl	80003f0 <_ZN7CDriver6updateEv>
 8000b90:	e7fb      	b.n	8000b8a <main+0x12>
 8000b92:	bf00      	nop
 8000b94:	2000016c 	.word	0x2000016c

08000b98 <_Z41__static_initialization_and_destruction_0ii>:
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d107      	bne.n	8000bb8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	d102      	bne.n	8000bb8 <_Z41__static_initialization_and_destruction_0ii+0x20>
CDriver m_driver;
 8000bb2:	4809      	ldr	r0, [pc, #36]	; (8000bd8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000bb4:	f7ff fbdb 	bl	800036e <_ZN7CDriverC1Ev>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d107      	bne.n	8000bce <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d102      	bne.n	8000bce <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000bc8:	4803      	ldr	r0, [pc, #12]	; (8000bd8 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000bca:	f7ff fbdb 	bl	8000384 <_ZN7CDriverD1Ev>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2000016c 	.word	0x2000016c

08000bdc <_GLOBAL__sub_I_m_driver>:
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000be4:	2001      	movs	r0, #1
 8000be6:	f7ff ffd7 	bl	8000b98 <_Z41__static_initialization_and_destruction_0ii>
 8000bea:	bd80      	pop	{r7, pc}

08000bec <_GLOBAL__sub_D_m_driver>:
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f7ff ffcf 	bl	8000b98 <_Z41__static_initialization_and_destruction_0ii>
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c02:	4b0f      	ldr	r3, [pc, #60]	; (8000c40 <HAL_MspInit+0x44>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	4a0e      	ldr	r2, [pc, #56]	; (8000c40 <HAL_MspInit+0x44>)
 8000c08:	f043 0301 	orr.w	r3, r3, #1
 8000c0c:	6193      	str	r3, [r2, #24]
 8000c0e:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <HAL_MspInit+0x44>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	f003 0301 	and.w	r3, r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_MspInit+0x44>)
 8000c1c:	69db      	ldr	r3, [r3, #28]
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_MspInit+0x44>)
 8000c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c24:	61d3      	str	r3, [r2, #28]
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_MspInit+0x44>)
 8000c28:	69db      	ldr	r3, [r3, #28]
 8000c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c2e:	603b      	str	r3, [r7, #0]
 8000c30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c32:	2007      	movs	r0, #7
 8000c34:	f000 fa24 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40021000 	.word	0x40021000

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <HAL_UART_MspInit+0x7c>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d128      	bne.n	8000cb8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c68:	69db      	ldr	r3, [r3, #28]
 8000c6a:	4a16      	ldr	r2, [pc, #88]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c70:	61d3      	str	r3, [r2, #28]
 8000c72:	4b14      	ldr	r3, [pc, #80]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7e:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	4a10      	ldr	r2, [pc, #64]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	6153      	str	r3, [r2, #20]
 8000c8a:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_UART_MspInit+0x80>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c96:	230c      	movs	r3, #12
 8000c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb4:	f000 fa9c 	bl	80011f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cb8:	bf00      	nop
 8000cba:	3728      	adds	r7, #40	; 0x28
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40004400 	.word	0x40004400
 8000cc4:	40021000 	.word	0x40021000

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d14:	f000 f8c4 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f000 fc39 	bl	8001598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(CDriver::m_uartDriver.getUart());
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <USART2_IRQHandler+0x18>)
 8000d32:	f7ff fbb5 	bl	80004a0 <_ZN11CUartDriver7getUartEv>
 8000d36:	4603      	mov	r3, r0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f002 f84b 	bl	8002dd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000090 	.word	0x20000090

08000d48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000d4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000d50:	f000 fc22 	bl	8001598 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	return 1;
 8000d5c:	2301      	movs	r3, #1
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_kill>:

int _kill(int pid, int sig)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d72:	f003 f97d 	bl	8004070 <__errno>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2216      	movs	r2, #22
 8000d7a:	601a      	str	r2, [r3, #0]
	return -1;
 8000d7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <_exit>:

void _exit (int status)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff ffe7 	bl	8000d68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d9a:	e7fe      	b.n	8000d9a <_exit+0x12>

08000d9c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <SystemInit+0x20>)
 8000da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000da6:	4a05      	ldr	r2, [pc, #20]	; (8000dbc <SystemInit+0x20>)
 8000da8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000ed00 	.word	0xe000ed00

08000dc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000df8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc6:	490e      	ldr	r1, [pc, #56]	; (8000e00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc8:	4a0e      	ldr	r2, [pc, #56]	; (8000e04 <LoopForever+0xe>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ddc:	4c0b      	ldr	r4, [pc, #44]	; (8000e0c <LoopForever+0x16>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dea:	f7ff ffd7 	bl	8000d9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dee:	f003 f945 	bl	800407c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000df2:	f7ff fec1 	bl	8000b78 <main>

08000df6 <LoopForever>:

LoopForever:
    b LoopForever
 8000df6:	e7fe      	b.n	8000df6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000df8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e00:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e04:	080042e4 	.word	0x080042e4
  ldr r2, =_sbss
 8000e08:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e0c:	20000188 	.word	0x20000188

08000e10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e10:	e7fe      	b.n	8000e10 <ADC1_2_IRQHandler>
	...

08000e14 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_Init+0x28>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_Init+0x28>)
 8000e1e:	f043 0310 	orr.w	r3, r3, #16
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f92b 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f808 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fee4 	bl	8000bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40022000 	.word	0x40022000

08000e40 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x54>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x58>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f943 	bl	80010ea <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00e      	b.n	8000e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d80a      	bhi.n	8000e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	f000 f90b 	bl	8001096 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <HAL_InitTick+0x5c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x20>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000174 	.word	0x20000174

08000ec8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_GetTick+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	20000174 	.word	0x20000174

08000ee0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <__NVIC_GetPriorityGrouping+0x18>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	0a1b      	lsrs	r3, r3, #8
 8000f32:	f003 0307 	and.w	r3, r3, #7
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	db0b      	blt.n	8000f6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	f003 021f 	and.w	r2, r3, #31
 8000f5c:	4907      	ldr	r1, [pc, #28]	; (8000f7c <__NVIC_EnableIRQ+0x38>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	2001      	movs	r0, #1
 8000f66:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	db0a      	blt.n	8000faa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	490c      	ldr	r1, [pc, #48]	; (8000fcc <__NVIC_SetPriority+0x4c>)
 8000f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9e:	0112      	lsls	r2, r2, #4
 8000fa0:	b2d2      	uxtb	r2, r2
 8000fa2:	440b      	add	r3, r1
 8000fa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fa8:	e00a      	b.n	8000fc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	4908      	ldr	r1, [pc, #32]	; (8000fd0 <__NVIC_SetPriority+0x50>)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	f003 030f 	and.w	r3, r3, #15
 8000fb6:	3b04      	subs	r3, #4
 8000fb8:	0112      	lsls	r2, r2, #4
 8000fba:	b2d2      	uxtb	r2, r2
 8000fbc:	440b      	add	r3, r1
 8000fbe:	761a      	strb	r2, [r3, #24]
}
 8000fc0:	bf00      	nop
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b089      	sub	sp, #36	; 0x24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f1c3 0307 	rsb	r3, r3, #7
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	bf28      	it	cs
 8000ff2:	2304      	movcs	r3, #4
 8000ff4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	3304      	adds	r3, #4
 8000ffa:	2b06      	cmp	r3, #6
 8000ffc:	d902      	bls.n	8001004 <NVIC_EncodePriority+0x30>
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3b03      	subs	r3, #3
 8001002:	e000      	b.n	8001006 <NVIC_EncodePriority+0x32>
 8001004:	2300      	movs	r3, #0
 8001006:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43da      	mvns	r2, r3
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800101c:	f04f 31ff 	mov.w	r1, #4294967295
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43d9      	mvns	r1, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800102c:	4313      	orrs	r3, r2
         );
}
 800102e:	4618      	mov	r0, r3
 8001030:	3724      	adds	r7, #36	; 0x24
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f7ff ff8e 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff29 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff3e 	bl	8000f28 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff8e 	bl	8000fd4 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5d 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff31 	bl	8000f44 <__NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffa2 	bl	800103c <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001102:	b480      	push	{r7}
 8001104:	b083      	sub	sp, #12
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001110:	2b02      	cmp	r3, #2
 8001112:	d008      	beq.n	8001126 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2204      	movs	r2, #4
 8001118:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e020      	b.n	8001168 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 020e 	bic.w	r2, r2, #14
 8001134:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0201 	bic.w	r2, r2, #1
 8001144:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800114e:	2101      	movs	r1, #1
 8001150:	fa01 f202 	lsl.w	r2, r1, r2
 8001154:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2201      	movs	r2, #1
 800115a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2200      	movs	r2, #0
 8001162:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001186:	2b02      	cmp	r3, #2
 8001188:	d005      	beq.n	8001196 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2204      	movs	r2, #4
 800118e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	73fb      	strb	r3, [r7, #15]
 8001194:	e027      	b.n	80011e6 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f022 020e 	bic.w	r2, r2, #14
 80011a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0201 	bic.w	r2, r2, #1
 80011b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011be:	2101      	movs	r1, #1
 80011c0:	fa01 f202 	lsl.w	r2, r1, r2
 80011c4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2200      	movs	r2, #0
 80011d2:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	4798      	blx	r3
    } 
  }
  return status;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
 80011f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fe:	e160      	b.n	80014c2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	2101      	movs	r1, #1
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	fa01 f303 	lsl.w	r3, r1, r3
 800120c:	4013      	ands	r3, r2
 800120e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 8152 	beq.w	80014bc <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	2b01      	cmp	r3, #1
 8001222:	d005      	beq.n	8001230 <HAL_GPIO_Init+0x40>
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0303 	and.w	r3, r3, #3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d130      	bne.n	8001292 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	2203      	movs	r2, #3
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	43db      	mvns	r3, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4013      	ands	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	693a      	ldr	r2, [r7, #16]
 8001256:	4313      	orrs	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	693a      	ldr	r2, [r7, #16]
 800125e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001266:	2201      	movs	r2, #1
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	f003 0201 	and.w	r2, r3, #1
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa02 f303 	lsl.w	r3, r2, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b03      	cmp	r3, #3
 800129c:	d017      	beq.n	80012ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d123      	bne.n	8001322 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	08da      	lsrs	r2, r3, #3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3208      	adds	r2, #8
 80012e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	220f      	movs	r2, #15
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	4013      	ands	r3, r2
 80012fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	691a      	ldr	r2, [r3, #16]
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	f003 0307 	and.w	r3, r3, #7
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	08da      	lsrs	r2, r3, #3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	3208      	adds	r2, #8
 800131c:	6939      	ldr	r1, [r7, #16]
 800131e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	2203      	movs	r2, #3
 800132e:	fa02 f303 	lsl.w	r3, r2, r3
 8001332:	43db      	mvns	r3, r3
 8001334:	693a      	ldr	r2, [r7, #16]
 8001336:	4013      	ands	r3, r2
 8001338:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0203 	and.w	r2, r3, #3
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	693a      	ldr	r2, [r7, #16]
 800134c:	4313      	orrs	r3, r2
 800134e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800135e:	2b00      	cmp	r3, #0
 8001360:	f000 80ac 	beq.w	80014bc <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001364:	4b5e      	ldr	r3, [pc, #376]	; (80014e0 <HAL_GPIO_Init+0x2f0>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	4a5d      	ldr	r2, [pc, #372]	; (80014e0 <HAL_GPIO_Init+0x2f0>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6193      	str	r3, [r2, #24]
 8001370:	4b5b      	ldr	r3, [pc, #364]	; (80014e0 <HAL_GPIO_Init+0x2f0>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	60bb      	str	r3, [r7, #8]
 800137a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800137c:	4a59      	ldr	r2, [pc, #356]	; (80014e4 <HAL_GPIO_Init+0x2f4>)
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	3302      	adds	r3, #2
 8001384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001388:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	009b      	lsls	r3, r3, #2
 8001392:	220f      	movs	r2, #15
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	43db      	mvns	r3, r3
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	4013      	ands	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013a6:	d025      	beq.n	80013f4 <HAL_GPIO_Init+0x204>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a4f      	ldr	r2, [pc, #316]	; (80014e8 <HAL_GPIO_Init+0x2f8>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d01f      	beq.n	80013f0 <HAL_GPIO_Init+0x200>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a4e      	ldr	r2, [pc, #312]	; (80014ec <HAL_GPIO_Init+0x2fc>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d019      	beq.n	80013ec <HAL_GPIO_Init+0x1fc>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a4d      	ldr	r2, [pc, #308]	; (80014f0 <HAL_GPIO_Init+0x300>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d013      	beq.n	80013e8 <HAL_GPIO_Init+0x1f8>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a4c      	ldr	r2, [pc, #304]	; (80014f4 <HAL_GPIO_Init+0x304>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d00d      	beq.n	80013e4 <HAL_GPIO_Init+0x1f4>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a4b      	ldr	r2, [pc, #300]	; (80014f8 <HAL_GPIO_Init+0x308>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d007      	beq.n	80013e0 <HAL_GPIO_Init+0x1f0>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a4a      	ldr	r2, [pc, #296]	; (80014fc <HAL_GPIO_Init+0x30c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d101      	bne.n	80013dc <HAL_GPIO_Init+0x1ec>
 80013d8:	2306      	movs	r3, #6
 80013da:	e00c      	b.n	80013f6 <HAL_GPIO_Init+0x206>
 80013dc:	2307      	movs	r3, #7
 80013de:	e00a      	b.n	80013f6 <HAL_GPIO_Init+0x206>
 80013e0:	2305      	movs	r3, #5
 80013e2:	e008      	b.n	80013f6 <HAL_GPIO_Init+0x206>
 80013e4:	2304      	movs	r3, #4
 80013e6:	e006      	b.n	80013f6 <HAL_GPIO_Init+0x206>
 80013e8:	2303      	movs	r3, #3
 80013ea:	e004      	b.n	80013f6 <HAL_GPIO_Init+0x206>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e002      	b.n	80013f6 <HAL_GPIO_Init+0x206>
 80013f0:	2301      	movs	r3, #1
 80013f2:	e000      	b.n	80013f6 <HAL_GPIO_Init+0x206>
 80013f4:	2300      	movs	r3, #0
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	f002 0203 	and.w	r2, r2, #3
 80013fc:	0092      	lsls	r2, r2, #2
 80013fe:	4093      	lsls	r3, r2
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4313      	orrs	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001406:	4937      	ldr	r1, [pc, #220]	; (80014e4 <HAL_GPIO_Init+0x2f4>)
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	089b      	lsrs	r3, r3, #2
 800140c:	3302      	adds	r3, #2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001414:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <HAL_GPIO_Init+0x310>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4313      	orrs	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001438:	4a31      	ldr	r2, [pc, #196]	; (8001500 <HAL_GPIO_Init+0x310>)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800143e:	4b30      	ldr	r3, [pc, #192]	; (8001500 <HAL_GPIO_Init+0x310>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	43db      	mvns	r3, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4013      	ands	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4313      	orrs	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001462:	4a27      	ldr	r2, [pc, #156]	; (8001500 <HAL_GPIO_Init+0x310>)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001468:	4b25      	ldr	r3, [pc, #148]	; (8001500 <HAL_GPIO_Init+0x310>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800148c:	4a1c      	ldr	r2, [pc, #112]	; (8001500 <HAL_GPIO_Init+0x310>)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001492:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <HAL_GPIO_Init+0x310>)
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014b6:	4a12      	ldr	r2, [pc, #72]	; (8001500 <HAL_GPIO_Init+0x310>)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	fa22 f303 	lsr.w	r3, r2, r3
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	f47f ae97 	bne.w	8001200 <HAL_GPIO_Init+0x10>
  }
}
 80014d2:	bf00      	nop
 80014d4:	bf00      	nop
 80014d6:	371c      	adds	r7, #28
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000
 80014e8:	48000400 	.word	0x48000400
 80014ec:	48000800 	.word	0x48000800
 80014f0:	48000c00 	.word	0x48000c00
 80014f4:	48001000 	.word	0x48001000
 80014f8:	48001400 	.word	0x48001400
 80014fc:	48001800 	.word	0x48001800
 8001500:	40010400 	.word	0x40010400

08001504 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	460b      	mov	r3, r1
 800150e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	887b      	ldrh	r3, [r7, #2]
 8001516:	4013      	ands	r3, r2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800151c:	2301      	movs	r3, #1
 800151e:	73fb      	strb	r3, [r7, #15]
 8001520:	e001      	b.n	8001526 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001526:	7bfb      	ldrb	r3, [r7, #15]
}
 8001528:	4618      	mov	r0, r3
 800152a:	3714      	adds	r7, #20
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	807b      	strh	r3, [r7, #2]
 8001540:	4613      	mov	r3, r2
 8001542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001544:	787b      	ldrb	r3, [r7, #1]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800154a:	887a      	ldrh	r2, [r7, #2]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001550:	e002      	b.n	8001558 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001552:	887a      	ldrh	r2, [r7, #2]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	460b      	mov	r3, r1
 800156e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001576:	887a      	ldrh	r2, [r7, #2]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4013      	ands	r3, r2
 800157c:	041a      	lsls	r2, r3, #16
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43d9      	mvns	r1, r3
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	400b      	ands	r3, r1
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	619a      	str	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	88fb      	ldrh	r3, [r7, #6]
 80015a8:	4013      	ands	r3, r2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015ae:	4a05      	ldr	r2, [pc, #20]	; (80015c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015b0:	88fb      	ldrh	r3, [r7, #6]
 80015b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015b4:	88fb      	ldrh	r3, [r7, #6]
 80015b6:	4618      	mov	r0, r3
 80015b8:	f7fe ff88 	bl	80004cc <HAL_GPIO_EXTI_Callback>
  }
}
 80015bc:	bf00      	nop
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	40010400 	.word	0x40010400

080015c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d102      	bne.n	80015e2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	f000 bf01 	b.w	80023e4 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0301 	and.w	r3, r3, #1
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f000 8160 	beq.w	80018b2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80015f2:	4bae      	ldr	r3, [pc, #696]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d00c      	beq.n	8001618 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015fe:	4bab      	ldr	r3, [pc, #684]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f003 030c 	and.w	r3, r3, #12
 8001606:	2b08      	cmp	r3, #8
 8001608:	d159      	bne.n	80016be <HAL_RCC_OscConfig+0xf6>
 800160a:	4ba8      	ldr	r3, [pc, #672]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001616:	d152      	bne.n	80016be <HAL_RCC_OscConfig+0xf6>
 8001618:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800161c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001620:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001624:	fa93 f3a3 	rbit	r3, r3
 8001628:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800162c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	fab3 f383 	clz	r3, r3
 8001634:	b2db      	uxtb	r3, r3
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	b2db      	uxtb	r3, r3
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	b2db      	uxtb	r3, r3
 8001640:	2b01      	cmp	r3, #1
 8001642:	d102      	bne.n	800164a <HAL_RCC_OscConfig+0x82>
 8001644:	4b99      	ldr	r3, [pc, #612]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	e015      	b.n	8001676 <HAL_RCC_OscConfig+0xae>
 800164a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800164e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001652:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001656:	fa93 f3a3 	rbit	r3, r3
 800165a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800165e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001662:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001666:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001672:	4b8e      	ldr	r3, [pc, #568]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800167a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800167e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001682:	fa92 f2a2 	rbit	r2, r2
 8001686:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800168a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800168e:	fab2 f282 	clz	r2, r2
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	f042 0220 	orr.w	r2, r2, #32
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	f002 021f 	and.w	r2, r2, #31
 800169e:	2101      	movs	r1, #1
 80016a0:	fa01 f202 	lsl.w	r2, r1, r2
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 8102 	beq.w	80018b0 <HAL_RCC_OscConfig+0x2e8>
 80016ac:	1d3b      	adds	r3, r7, #4
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	f040 80fc 	bne.w	80018b0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	f000 be93 	b.w	80023e4 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016be:	1d3b      	adds	r3, r7, #4
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c8:	d106      	bne.n	80016d8 <HAL_RCC_OscConfig+0x110>
 80016ca:	4b78      	ldr	r3, [pc, #480]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a77      	ldr	r2, [pc, #476]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 80016d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	e030      	b.n	800173a <HAL_RCC_OscConfig+0x172>
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0x134>
 80016e2:	4b72      	ldr	r3, [pc, #456]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a71      	ldr	r2, [pc, #452]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 80016e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	4b6f      	ldr	r3, [pc, #444]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a6e      	ldr	r2, [pc, #440]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 80016f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	e01e      	b.n	800173a <HAL_RCC_OscConfig+0x172>
 80016fc:	1d3b      	adds	r3, r7, #4
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001706:	d10c      	bne.n	8001722 <HAL_RCC_OscConfig+0x15a>
 8001708:	4b68      	ldr	r3, [pc, #416]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a67      	ldr	r2, [pc, #412]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 800170e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001712:	6013      	str	r3, [r2, #0]
 8001714:	4b65      	ldr	r3, [pc, #404]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a64      	ldr	r2, [pc, #400]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 800171a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	e00b      	b.n	800173a <HAL_RCC_OscConfig+0x172>
 8001722:	4b62      	ldr	r3, [pc, #392]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a61      	ldr	r2, [pc, #388]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 8001728:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	4b5f      	ldr	r3, [pc, #380]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a5e      	ldr	r2, [pc, #376]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 8001734:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001738:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800173a:	1d3b      	adds	r3, r7, #4
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d059      	beq.n	80017f8 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001744:	f7ff fbc0 	bl	8000ec8 <HAL_GetTick>
 8001748:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800174c:	e00a      	b.n	8001764 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800174e:	f7ff fbbb 	bl	8000ec8 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d902      	bls.n	8001764 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	f000 be40 	b.w	80023e4 <HAL_RCC_OscConfig+0xe1c>
 8001764:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001768:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800176c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001770:	fa93 f3a3 	rbit	r3, r3
 8001774:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001778:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800177c:	fab3 f383 	clz	r3, r3
 8001780:	b2db      	uxtb	r3, r3
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	b2db      	uxtb	r3, r3
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	b2db      	uxtb	r3, r3
 800178c:	2b01      	cmp	r3, #1
 800178e:	d102      	bne.n	8001796 <HAL_RCC_OscConfig+0x1ce>
 8001790:	4b46      	ldr	r3, [pc, #280]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	e015      	b.n	80017c2 <HAL_RCC_OscConfig+0x1fa>
 8001796:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800179a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80017a2:	fa93 f3a3 	rbit	r3, r3
 80017a6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80017aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017ae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80017b2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80017b6:	fa93 f3a3 	rbit	r3, r3
 80017ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80017be:	4b3b      	ldr	r3, [pc, #236]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017c6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80017ca:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80017ce:	fa92 f2a2 	rbit	r2, r2
 80017d2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 80017d6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80017da:	fab2 f282 	clz	r2, r2
 80017de:	b2d2      	uxtb	r2, r2
 80017e0:	f042 0220 	orr.w	r2, r2, #32
 80017e4:	b2d2      	uxtb	r2, r2
 80017e6:	f002 021f 	and.w	r2, r2, #31
 80017ea:	2101      	movs	r1, #1
 80017ec:	fa01 f202 	lsl.w	r2, r1, r2
 80017f0:	4013      	ands	r3, r2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0ab      	beq.n	800174e <HAL_RCC_OscConfig+0x186>
 80017f6:	e05c      	b.n	80018b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fb66 	bl	8000ec8 <HAL_GetTick>
 80017fc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001800:	e00a      	b.n	8001818 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001802:	f7ff fb61 	bl	8000ec8 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	2b64      	cmp	r3, #100	; 0x64
 8001810:	d902      	bls.n	8001818 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8001812:	2303      	movs	r3, #3
 8001814:	f000 bde6 	b.w	80023e4 <HAL_RCC_OscConfig+0xe1c>
 8001818:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800181c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001824:	fa93 f3a3 	rbit	r3, r3
 8001828:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800182c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001830:	fab3 f383 	clz	r3, r3
 8001834:	b2db      	uxtb	r3, r3
 8001836:	095b      	lsrs	r3, r3, #5
 8001838:	b2db      	uxtb	r3, r3
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b01      	cmp	r3, #1
 8001842:	d102      	bne.n	800184a <HAL_RCC_OscConfig+0x282>
 8001844:	4b19      	ldr	r3, [pc, #100]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	e015      	b.n	8001876 <HAL_RCC_OscConfig+0x2ae>
 800184a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800184e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001856:	fa93 f3a3 	rbit	r3, r3
 800185a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800185e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001862:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001866:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800186a:	fa93 f3a3 	rbit	r3, r3
 800186e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001872:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_RCC_OscConfig+0x2e4>)
 8001874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001876:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800187a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800187e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001882:	fa92 f2a2 	rbit	r2, r2
 8001886:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800188a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800188e:	fab2 f282 	clz	r2, r2
 8001892:	b2d2      	uxtb	r2, r2
 8001894:	f042 0220 	orr.w	r2, r2, #32
 8001898:	b2d2      	uxtb	r2, r2
 800189a:	f002 021f 	and.w	r2, r2, #31
 800189e:	2101      	movs	r1, #1
 80018a0:	fa01 f202 	lsl.w	r2, r1, r2
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1ab      	bne.n	8001802 <HAL_RCC_OscConfig+0x23a>
 80018aa:	e002      	b.n	80018b2 <HAL_RCC_OscConfig+0x2ea>
 80018ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 8170 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80018c2:	4bd0      	ldr	r3, [pc, #832]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00c      	beq.n	80018e8 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80018ce:	4bcd      	ldr	r3, [pc, #820]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 030c 	and.w	r3, r3, #12
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d16d      	bne.n	80019b6 <HAL_RCC_OscConfig+0x3ee>
 80018da:	4bca      	ldr	r3, [pc, #808]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80018e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018e6:	d166      	bne.n	80019b6 <HAL_RCC_OscConfig+0x3ee>
 80018e8:	2302      	movs	r3, #2
 80018ea:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018ee:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80018f2:	fa93 f3a3 	rbit	r3, r3
 80018f6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80018fa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	fab3 f383 	clz	r3, r3
 8001902:	b2db      	uxtb	r3, r3
 8001904:	095b      	lsrs	r3, r3, #5
 8001906:	b2db      	uxtb	r3, r3
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b01      	cmp	r3, #1
 8001910:	d102      	bne.n	8001918 <HAL_RCC_OscConfig+0x350>
 8001912:	4bbc      	ldr	r3, [pc, #752]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	e013      	b.n	8001940 <HAL_RCC_OscConfig+0x378>
 8001918:	2302      	movs	r3, #2
 800191a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001922:	fa93 f3a3 	rbit	r3, r3
 8001926:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800192a:	2302      	movs	r3, #2
 800192c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001930:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001934:	fa93 f3a3 	rbit	r3, r3
 8001938:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800193c:	4bb1      	ldr	r3, [pc, #708]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	2202      	movs	r2, #2
 8001942:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001946:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800194a:	fa92 f2a2 	rbit	r2, r2
 800194e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001952:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001956:	fab2 f282 	clz	r2, r2
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	f042 0220 	orr.w	r2, r2, #32
 8001960:	b2d2      	uxtb	r2, r2
 8001962:	f002 021f 	and.w	r2, r2, #31
 8001966:	2101      	movs	r1, #1
 8001968:	fa01 f202 	lsl.w	r2, r1, r2
 800196c:	4013      	ands	r3, r2
 800196e:	2b00      	cmp	r3, #0
 8001970:	d007      	beq.n	8001982 <HAL_RCC_OscConfig+0x3ba>
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d002      	beq.n	8001982 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	f000 bd31 	b.w	80023e4 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001982:	4ba0      	ldr	r3, [pc, #640]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800198a:	1d3b      	adds	r3, r7, #4
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	21f8      	movs	r1, #248	; 0xf8
 8001992:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001996:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800199a:	fa91 f1a1 	rbit	r1, r1
 800199e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80019a2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80019a6:	fab1 f181 	clz	r1, r1
 80019aa:	b2c9      	uxtb	r1, r1
 80019ac:	408b      	lsls	r3, r1
 80019ae:	4995      	ldr	r1, [pc, #596]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b4:	e0f5      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 8085 	beq.w	8001acc <HAL_RCC_OscConfig+0x504>
 80019c2:	2301      	movs	r3, #1
 80019c4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80019cc:	fa93 f3a3 	rbit	r3, r3
 80019d0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80019d4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d8:	fab3 f383 	clz	r3, r3
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019e2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	461a      	mov	r2, r3
 80019ea:	2301      	movs	r3, #1
 80019ec:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ee:	f7ff fa6b 	bl	8000ec8 <HAL_GetTick>
 80019f2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f6:	e00a      	b.n	8001a0e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f8:	f7ff fa66 	bl	8000ec8 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a02:	1ad3      	subs	r3, r2, r3
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d902      	bls.n	8001a0e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001a08:	2303      	movs	r3, #3
 8001a0a:	f000 bceb 	b.w	80023e4 <HAL_RCC_OscConfig+0xe1c>
 8001a0e:	2302      	movs	r3, #2
 8001a10:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001a18:	fa93 f3a3 	rbit	r3, r3
 8001a1c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001a20:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a24:	fab3 f383 	clz	r3, r3
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d102      	bne.n	8001a3e <HAL_RCC_OscConfig+0x476>
 8001a38:	4b72      	ldr	r3, [pc, #456]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	e013      	b.n	8001a66 <HAL_RCC_OscConfig+0x49e>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a44:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001a48:	fa93 f3a3 	rbit	r3, r3
 8001a4c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001a50:	2302      	movs	r3, #2
 8001a52:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a56:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001a5a:	fa93 f3a3 	rbit	r3, r3
 8001a5e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001a62:	4b68      	ldr	r3, [pc, #416]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	2202      	movs	r2, #2
 8001a68:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001a6c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001a70:	fa92 f2a2 	rbit	r2, r2
 8001a74:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001a78:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001a7c:	fab2 f282 	clz	r2, r2
 8001a80:	b2d2      	uxtb	r2, r2
 8001a82:	f042 0220 	orr.w	r2, r2, #32
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	f002 021f 	and.w	r2, r2, #31
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a92:	4013      	ands	r3, r2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0af      	beq.n	80019f8 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4b5a      	ldr	r3, [pc, #360]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	691b      	ldr	r3, [r3, #16]
 8001aa6:	21f8      	movs	r1, #248	; 0xf8
 8001aa8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aac:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001ab0:	fa91 f1a1 	rbit	r1, r1
 8001ab4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001ab8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001abc:	fab1 f181 	clz	r1, r1
 8001ac0:	b2c9      	uxtb	r1, r1
 8001ac2:	408b      	lsls	r3, r1
 8001ac4:	494f      	ldr	r1, [pc, #316]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	600b      	str	r3, [r1, #0]
 8001aca:	e06a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x5da>
 8001acc:	2301      	movs	r3, #1
 8001ace:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001ade:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae2:	fab3 f383 	clz	r3, r3
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001aec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	461a      	mov	r2, r3
 8001af4:	2300      	movs	r3, #0
 8001af6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af8:	f7ff f9e6 	bl	8000ec8 <HAL_GetTick>
 8001afc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b00:	e00a      	b.n	8001b18 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b02:	f7ff f9e1 	bl	8000ec8 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d902      	bls.n	8001b18 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	f000 bc66 	b.w	80023e4 <HAL_RCC_OscConfig+0xe1c>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001b22:	fa93 f3a3 	rbit	r3, r3
 8001b26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001b2a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	095b      	lsrs	r3, r3, #5
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d102      	bne.n	8001b48 <HAL_RCC_OscConfig+0x580>
 8001b42:	4b30      	ldr	r3, [pc, #192]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	e013      	b.n	8001b70 <HAL_RCC_OscConfig+0x5a8>
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001b52:	fa93 f3a3 	rbit	r3, r3
 8001b56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001b60:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001b6c:	4b25      	ldr	r3, [pc, #148]	; (8001c04 <HAL_RCC_OscConfig+0x63c>)
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	2202      	movs	r2, #2
 8001b72:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001b76:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001b7a:	fa92 f2a2 	rbit	r2, r2
 8001b7e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001b82:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001b86:	fab2 f282 	clz	r2, r2
 8001b8a:	b2d2      	uxtb	r2, r2
 8001b8c:	f042 0220 	orr.w	r2, r2, #32
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	f002 021f 	and.w	r2, r2, #31
 8001b96:	2101      	movs	r1, #1
 8001b98:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1af      	bne.n	8001b02 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80da 	beq.w	8001d66 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bb2:	1d3b      	adds	r3, r7, #4
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d069      	beq.n	8001c90 <HAL_RCC_OscConfig+0x6c8>
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001bc6:	fa93 f3a3 	rbit	r3, r3
 8001bca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001bce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd2:	fab3 f383 	clz	r3, r3
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	461a      	mov	r2, r3
 8001bda:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <HAL_RCC_OscConfig+0x640>)
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	461a      	mov	r2, r3
 8001be2:	2301      	movs	r3, #1
 8001be4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be6:	f7ff f96f 	bl	8000ec8 <HAL_GetTick>
 8001bea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bee:	e00d      	b.n	8001c0c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bf0:	f7ff f96a 	bl	8000ec8 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d905      	bls.n	8001c0c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e3ef      	b.n	80023e4 <HAL_RCC_OscConfig+0xe1c>
 8001c04:	40021000 	.word	0x40021000
 8001c08:	10908120 	.word	0x10908120
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001c16:	fa93 f2a3 	rbit	r2, r3
 8001c1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001c1e:	601a      	str	r2, [r3, #0]
 8001c20:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001c24:	2202      	movs	r2, #2
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	fa93 f2a3 	rbit	r2, r3
 8001c32:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001c4e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c50:	4ba4      	ldr	r3, [pc, #656]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c54:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c58:	2102      	movs	r1, #2
 8001c5a:	6019      	str	r1, [r3, #0]
 8001c5c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	fa93 f1a3 	rbit	r1, r3
 8001c66:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001c6a:	6019      	str	r1, [r3, #0]
  return result;
 8001c6c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	fab3 f383 	clz	r3, r3
 8001c76:	b2db      	uxtb	r3, r3
 8001c78:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	f003 031f 	and.w	r3, r3, #31
 8001c82:	2101      	movs	r1, #1
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0b0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x628>
 8001c8e:	e06a      	b.n	8001d66 <HAL_RCC_OscConfig+0x79e>
 8001c90:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	fa93 f2a3 	rbit	r2, r3
 8001ca2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001ca6:	601a      	str	r2, [r3, #0]
  return result;
 8001ca8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001cac:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cae:	fab3 f383 	clz	r3, r3
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b8c      	ldr	r3, [pc, #560]	; (8001ee8 <HAL_RCC_OscConfig+0x920>)
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc2:	f7ff f901 	bl	8000ec8 <HAL_GetTick>
 8001cc6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cca:	e009      	b.n	8001ce0 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ccc:	f7ff f8fc 	bl	8000ec8 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e381      	b.n	80023e4 <HAL_RCC_OscConfig+0xe1c>
 8001ce0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ce4:	2202      	movs	r2, #2
 8001ce6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	fa93 f2a3 	rbit	r2, r3
 8001cf2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001cf6:	601a      	str	r2, [r3, #0]
 8001cf8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001cfc:	2202      	movs	r2, #2
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	fa93 f2a3 	rbit	r2, r3
 8001d0a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d14:	2202      	movs	r2, #2
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	fa93 f2a3 	rbit	r2, r3
 8001d22:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001d26:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d28:	4b6e      	ldr	r3, [pc, #440]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001d2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d30:	2102      	movs	r1, #2
 8001d32:	6019      	str	r1, [r3, #0]
 8001d34:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	fa93 f1a3 	rbit	r1, r3
 8001d3e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d42:	6019      	str	r1, [r3, #0]
  return result;
 8001d44:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	fab3 f383 	clz	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1b2      	bne.n	8001ccc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d66:	1d3b      	adds	r3, r7, #4
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 8157 	beq.w	8002024 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d7c:	4b59      	ldr	r3, [pc, #356]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d112      	bne.n	8001dae <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d88:	4b56      	ldr	r3, [pc, #344]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001d8a:	69db      	ldr	r3, [r3, #28]
 8001d8c:	4a55      	ldr	r2, [pc, #340]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d92:	61d3      	str	r3, [r2, #28]
 8001d94:	4b53      	ldr	r3, [pc, #332]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001d96:	69db      	ldr	r3, [r3, #28]
 8001d98:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001d9c:	f107 030c 	add.w	r3, r7, #12
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001da8:	2301      	movs	r3, #1
 8001daa:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dae:	4b4f      	ldr	r3, [pc, #316]	; (8001eec <HAL_RCC_OscConfig+0x924>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d11a      	bne.n	8001df0 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dba:	4b4c      	ldr	r3, [pc, #304]	; (8001eec <HAL_RCC_OscConfig+0x924>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a4b      	ldr	r2, [pc, #300]	; (8001eec <HAL_RCC_OscConfig+0x924>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dc6:	f7ff f87f 	bl	8000ec8 <HAL_GetTick>
 8001dca:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dce:	e009      	b.n	8001de4 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd0:	f7ff f87a 	bl	8000ec8 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b64      	cmp	r3, #100	; 0x64
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e2ff      	b.n	80023e4 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	4b41      	ldr	r3, [pc, #260]	; (8001eec <HAL_RCC_OscConfig+0x924>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d0ef      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d106      	bne.n	8001e08 <HAL_RCC_OscConfig+0x840>
 8001dfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	4a39      	ldr	r2, [pc, #228]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	6213      	str	r3, [r2, #32]
 8001e06:	e02f      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a0>
 8001e08:	1d3b      	adds	r3, r7, #4
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x864>
 8001e12:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001e14:	6a1b      	ldr	r3, [r3, #32]
 8001e16:	4a33      	ldr	r2, [pc, #204]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	6213      	str	r3, [r2, #32]
 8001e1e:	4b31      	ldr	r3, [pc, #196]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	4a30      	ldr	r2, [pc, #192]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001e24:	f023 0304 	bic.w	r3, r3, #4
 8001e28:	6213      	str	r3, [r2, #32]
 8001e2a:	e01d      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a0>
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b05      	cmp	r3, #5
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x888>
 8001e36:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001e38:	6a1b      	ldr	r3, [r3, #32]
 8001e3a:	4a2a      	ldr	r2, [pc, #168]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	6213      	str	r3, [r2, #32]
 8001e42:	4b28      	ldr	r3, [pc, #160]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001e44:	6a1b      	ldr	r3, [r3, #32]
 8001e46:	4a27      	ldr	r2, [pc, #156]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001e48:	f043 0301 	orr.w	r3, r3, #1
 8001e4c:	6213      	str	r3, [r2, #32]
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCC_OscConfig+0x8a0>
 8001e50:	4b24      	ldr	r3, [pc, #144]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4a23      	ldr	r2, [pc, #140]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	6213      	str	r3, [r2, #32]
 8001e5c:	4b21      	ldr	r3, [pc, #132]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	4a20      	ldr	r2, [pc, #128]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001e62:	f023 0304 	bic.w	r3, r3, #4
 8001e66:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d06a      	beq.n	8001f48 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e72:	f7ff f829 	bl	8000ec8 <HAL_GetTick>
 8001e76:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e7a:	e00b      	b.n	8001e94 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e7c:	f7ff f824 	bl	8000ec8 <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e86:	1ad3      	subs	r3, r2, r3
 8001e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e2a7      	b.n	80023e4 <HAL_RCC_OscConfig+0xe1c>
 8001e94:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001e98:	2202      	movs	r2, #2
 8001e9a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e9c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	fa93 f2a3 	rbit	r2, r3
 8001ea6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	fa93 f2a3 	rbit	r2, r3
 8001ebe:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ec2:	601a      	str	r2, [r3, #0]
  return result;
 8001ec4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001ec8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001eca:	fab3 f383 	clz	r3, r3
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	095b      	lsrs	r3, r3, #5
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f043 0302 	orr.w	r3, r3, #2
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d108      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x928>
 8001ede:	4b01      	ldr	r3, [pc, #4]	; (8001ee4 <HAL_RCC_OscConfig+0x91c>)
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	e013      	b.n	8001f0c <HAL_RCC_OscConfig+0x944>
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	10908120 	.word	0x10908120
 8001eec:	40007000 	.word	0x40007000
 8001ef0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	fa93 f2a3 	rbit	r2, r3
 8001f02:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	4bc0      	ldr	r3, [pc, #768]	; (800220c <HAL_RCC_OscConfig+0xc44>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001f10:	2102      	movs	r1, #2
 8001f12:	6011      	str	r1, [r2, #0]
 8001f14:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001f18:	6812      	ldr	r2, [r2, #0]
 8001f1a:	fa92 f1a2 	rbit	r1, r2
 8001f1e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f22:	6011      	str	r1, [r2, #0]
  return result;
 8001f24:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	fab2 f282 	clz	r2, r2
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	f002 021f 	and.w	r2, r2, #31
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d09a      	beq.n	8001e7c <HAL_RCC_OscConfig+0x8b4>
 8001f46:	e063      	b.n	8002010 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f48:	f7fe ffbe 	bl	8000ec8 <HAL_GetTick>
 8001f4c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f50:	e00b      	b.n	8001f6a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f52:	f7fe ffb9 	bl	8000ec8 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e23c      	b.n	80023e4 <HAL_RCC_OscConfig+0xe1c>
 8001f6a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f6e:	2202      	movs	r2, #2
 8001f70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f72:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	fa93 f2a3 	rbit	r2, r3
 8001f7c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f86:	2202      	movs	r2, #2
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	fa93 f2a3 	rbit	r2, r3
 8001f94:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f98:	601a      	str	r2, [r3, #0]
  return result;
 8001f9a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001f9e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa0:	fab3 f383 	clz	r3, r3
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	095b      	lsrs	r3, r3, #5
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f043 0302 	orr.w	r3, r3, #2
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d102      	bne.n	8001fba <HAL_RCC_OscConfig+0x9f2>
 8001fb4:	4b95      	ldr	r3, [pc, #596]	; (800220c <HAL_RCC_OscConfig+0xc44>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	e00d      	b.n	8001fd6 <HAL_RCC_OscConfig+0xa0e>
 8001fba:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fc2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	fa93 f2a3 	rbit	r2, r3
 8001fcc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	4b8e      	ldr	r3, [pc, #568]	; (800220c <HAL_RCC_OscConfig+0xc44>)
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001fda:	2102      	movs	r1, #2
 8001fdc:	6011      	str	r1, [r2, #0]
 8001fde:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	fa92 f1a2 	rbit	r1, r2
 8001fe8:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001fec:	6011      	str	r1, [r2, #0]
  return result;
 8001fee:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	fab2 f282 	clz	r2, r2
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	f002 021f 	and.w	r2, r2, #31
 8002004:	2101      	movs	r1, #1
 8002006:	fa01 f202 	lsl.w	r2, r1, r2
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1a0      	bne.n	8001f52 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002010:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8002014:	2b01      	cmp	r3, #1
 8002016:	d105      	bne.n	8002024 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002018:	4b7c      	ldr	r3, [pc, #496]	; (800220c <HAL_RCC_OscConfig+0xc44>)
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	4a7b      	ldr	r2, [pc, #492]	; (800220c <HAL_RCC_OscConfig+0xc44>)
 800201e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002022:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 81d9 	beq.w	80023e2 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002030:	4b76      	ldr	r3, [pc, #472]	; (800220c <HAL_RCC_OscConfig+0xc44>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b08      	cmp	r3, #8
 800203a:	f000 81a6 	beq.w	800238a <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2b02      	cmp	r3, #2
 8002046:	f040 811e 	bne.w	8002286 <HAL_RCC_OscConfig+0xcbe>
 800204a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800204e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002052:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002054:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	fa93 f2a3 	rbit	r2, r3
 800205e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002062:	601a      	str	r2, [r3, #0]
  return result;
 8002064:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002068:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002074:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	461a      	mov	r2, r3
 800207c:	2300      	movs	r3, #0
 800207e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7fe ff22 	bl	8000ec8 <HAL_GetTick>
 8002084:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002088:	e009      	b.n	800209e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800208a:	f7fe ff1d 	bl	8000ec8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	2b02      	cmp	r3, #2
 8002098:	d901      	bls.n	800209e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800209a:	2303      	movs	r3, #3
 800209c:	e1a2      	b.n	80023e4 <HAL_RCC_OscConfig+0xe1c>
 800209e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	fa93 f2a3 	rbit	r2, r3
 80020b2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80020b6:	601a      	str	r2, [r3, #0]
  return result;
 80020b8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80020bc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020be:	fab3 f383 	clz	r3, r3
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d102      	bne.n	80020d8 <HAL_RCC_OscConfig+0xb10>
 80020d2:	4b4e      	ldr	r3, [pc, #312]	; (800220c <HAL_RCC_OscConfig+0xc44>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	e01b      	b.n	8002110 <HAL_RCC_OscConfig+0xb48>
 80020d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020dc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	fa93 f2a3 	rbit	r2, r3
 80020ec:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020f0:	601a      	str	r2, [r3, #0]
 80020f2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	fa93 f2a3 	rbit	r2, r3
 8002106:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	4b3f      	ldr	r3, [pc, #252]	; (800220c <HAL_RCC_OscConfig+0xc44>)
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002114:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002118:	6011      	str	r1, [r2, #0]
 800211a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	fa92 f1a2 	rbit	r1, r2
 8002124:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002128:	6011      	str	r1, [r2, #0]
  return result;
 800212a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	fab2 f282 	clz	r2, r2
 8002134:	b2d2      	uxtb	r2, r2
 8002136:	f042 0220 	orr.w	r2, r2, #32
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	f002 021f 	and.w	r2, r2, #31
 8002140:	2101      	movs	r1, #1
 8002142:	fa01 f202 	lsl.w	r2, r1, r2
 8002146:	4013      	ands	r3, r2
 8002148:	2b00      	cmp	r3, #0
 800214a:	d19e      	bne.n	800208a <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800214c:	4b2f      	ldr	r3, [pc, #188]	; (800220c <HAL_RCC_OscConfig+0xc44>)
 800214e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002150:	f023 020f 	bic.w	r2, r3, #15
 8002154:	1d3b      	adds	r3, r7, #4
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	492c      	ldr	r1, [pc, #176]	; (800220c <HAL_RCC_OscConfig+0xc44>)
 800215c:	4313      	orrs	r3, r2
 800215e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002160:	4b2a      	ldr	r3, [pc, #168]	; (800220c <HAL_RCC_OscConfig+0xc44>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002168:	1d3b      	adds	r3, r7, #4
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6a19      	ldr	r1, [r3, #32]
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	430b      	orrs	r3, r1
 8002176:	4925      	ldr	r1, [pc, #148]	; (800220c <HAL_RCC_OscConfig+0xc44>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
 800217c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002180:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002184:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	fa93 f2a3 	rbit	r2, r3
 8002190:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002194:	601a      	str	r2, [r3, #0]
  return result;
 8002196:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800219a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800219c:	fab3 f383 	clz	r3, r3
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	461a      	mov	r2, r3
 80021ae:	2301      	movs	r3, #1
 80021b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7fe fe89 	bl	8000ec8 <HAL_GetTick>
 80021b6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ba:	e009      	b.n	80021d0 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021bc:	f7fe fe84 	bl	8000ec8 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e109      	b.n	80023e4 <HAL_RCC_OscConfig+0xe1c>
 80021d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	fa93 f2a3 	rbit	r2, r3
 80021e4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021e8:	601a      	str	r2, [r3, #0]
  return result;
 80021ea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80021ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021f0:	fab3 f383 	clz	r3, r3
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	2b01      	cmp	r3, #1
 8002202:	d105      	bne.n	8002210 <HAL_RCC_OscConfig+0xc48>
 8002204:	4b01      	ldr	r3, [pc, #4]	; (800220c <HAL_RCC_OscConfig+0xc44>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	e01e      	b.n	8002248 <HAL_RCC_OscConfig+0xc80>
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002214:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002218:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	fa93 f2a3 	rbit	r2, r3
 8002224:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800222e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	fa93 f2a3 	rbit	r2, r3
 800223e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002242:	601a      	str	r2, [r3, #0]
 8002244:	4b6a      	ldr	r3, [pc, #424]	; (80023f0 <HAL_RCC_OscConfig+0xe28>)
 8002246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002248:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800224c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002250:	6011      	str	r1, [r2, #0]
 8002252:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002256:	6812      	ldr	r2, [r2, #0]
 8002258:	fa92 f1a2 	rbit	r1, r2
 800225c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002260:	6011      	str	r1, [r2, #0]
  return result;
 8002262:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002266:	6812      	ldr	r2, [r2, #0]
 8002268:	fab2 f282 	clz	r2, r2
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f042 0220 	orr.w	r2, r2, #32
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	f002 021f 	and.w	r2, r2, #31
 8002278:	2101      	movs	r1, #1
 800227a:	fa01 f202 	lsl.w	r2, r1, r2
 800227e:	4013      	ands	r3, r2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d09b      	beq.n	80021bc <HAL_RCC_OscConfig+0xbf4>
 8002284:	e0ad      	b.n	80023e2 <HAL_RCC_OscConfig+0xe1a>
 8002286:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800228a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800228e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002290:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	fa93 f2a3 	rbit	r2, r3
 800229a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800229e:	601a      	str	r2, [r3, #0]
  return result;
 80022a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022a4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022a6:	fab3 f383 	clz	r3, r3
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022b0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	461a      	mov	r2, r3
 80022b8:	2300      	movs	r3, #0
 80022ba:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022bc:	f7fe fe04 	bl	8000ec8 <HAL_GetTick>
 80022c0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022c4:	e009      	b.n	80022da <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c6:	f7fe fdff 	bl	8000ec8 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e084      	b.n	80023e4 <HAL_RCC_OscConfig+0xe1c>
 80022da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	fa93 f2a3 	rbit	r2, r3
 80022ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f2:	601a      	str	r2, [r3, #0]
  return result;
 80022f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	095b      	lsrs	r3, r3, #5
 8002302:	b2db      	uxtb	r3, r3
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b01      	cmp	r3, #1
 800230c:	d102      	bne.n	8002314 <HAL_RCC_OscConfig+0xd4c>
 800230e:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <HAL_RCC_OscConfig+0xe28>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	e01b      	b.n	800234c <HAL_RCC_OscConfig+0xd84>
 8002314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002318:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800231c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	fa93 f2a3 	rbit	r2, r3
 8002328:	f107 0320 	add.w	r3, r7, #32
 800232c:	601a      	str	r2, [r3, #0]
 800232e:	f107 031c 	add.w	r3, r7, #28
 8002332:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f107 031c 	add.w	r3, r7, #28
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	fa93 f2a3 	rbit	r2, r3
 8002342:	f107 0318 	add.w	r3, r7, #24
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	4b29      	ldr	r3, [pc, #164]	; (80023f0 <HAL_RCC_OscConfig+0xe28>)
 800234a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800234c:	f107 0214 	add.w	r2, r7, #20
 8002350:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002354:	6011      	str	r1, [r2, #0]
 8002356:	f107 0214 	add.w	r2, r7, #20
 800235a:	6812      	ldr	r2, [r2, #0]
 800235c:	fa92 f1a2 	rbit	r1, r2
 8002360:	f107 0210 	add.w	r2, r7, #16
 8002364:	6011      	str	r1, [r2, #0]
  return result;
 8002366:	f107 0210 	add.w	r2, r7, #16
 800236a:	6812      	ldr	r2, [r2, #0]
 800236c:	fab2 f282 	clz	r2, r2
 8002370:	b2d2      	uxtb	r2, r2
 8002372:	f042 0220 	orr.w	r2, r2, #32
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	f002 021f 	and.w	r2, r2, #31
 800237c:	2101      	movs	r1, #1
 800237e:	fa01 f202 	lsl.w	r2, r1, r2
 8002382:	4013      	ands	r3, r2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d19e      	bne.n	80022c6 <HAL_RCC_OscConfig+0xcfe>
 8002388:	e02b      	b.n	80023e2 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800238a:	1d3b      	adds	r3, r7, #4
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e025      	b.n	80023e4 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002398:	4b15      	ldr	r3, [pc, #84]	; (80023f0 <HAL_RCC_OscConfig+0xe28>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80023a0:	4b13      	ldr	r3, [pc, #76]	; (80023f0 <HAL_RCC_OscConfig+0xe28>)
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80023ac:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d111      	bne.n	80023de <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80023be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80023c2:	1d3b      	adds	r3, r7, #4
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d108      	bne.n	80023de <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80023cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023d0:	f003 020f 	and.w	r2, r3, #15
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80023da:	429a      	cmp	r2, r3
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e000      	b.n	80023e4 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000

080023f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b09e      	sub	sp, #120	; 0x78
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e162      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800240c:	4b90      	ldr	r3, [pc, #576]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	683a      	ldr	r2, [r7, #0]
 8002416:	429a      	cmp	r2, r3
 8002418:	d910      	bls.n	800243c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800241a:	4b8d      	ldr	r3, [pc, #564]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 0207 	bic.w	r2, r3, #7
 8002422:	498b      	ldr	r1, [pc, #556]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b89      	ldr	r3, [pc, #548]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d001      	beq.n	800243c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e14a      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002448:	4b82      	ldr	r3, [pc, #520]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	497f      	ldr	r1, [pc, #508]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 80dc 	beq.w	8002620 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d13c      	bne.n	80024ea <HAL_RCC_ClockConfig+0xf6>
 8002470:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002474:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002478:	fa93 f3a3 	rbit	r3, r3
 800247c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800247e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	b2db      	uxtb	r3, r3
 800248a:	f043 0301 	orr.w	r3, r3, #1
 800248e:	b2db      	uxtb	r3, r3
 8002490:	2b01      	cmp	r3, #1
 8002492:	d102      	bne.n	800249a <HAL_RCC_ClockConfig+0xa6>
 8002494:	4b6f      	ldr	r3, [pc, #444]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	e00f      	b.n	80024ba <HAL_RCC_ClockConfig+0xc6>
 800249a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800249e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80024a2:	fa93 f3a3 	rbit	r3, r3
 80024a6:	667b      	str	r3, [r7, #100]	; 0x64
 80024a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ac:	663b      	str	r3, [r7, #96]	; 0x60
 80024ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80024b6:	4b67      	ldr	r3, [pc, #412]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024be:	65ba      	str	r2, [r7, #88]	; 0x58
 80024c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80024c2:	fa92 f2a2 	rbit	r2, r2
 80024c6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80024c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80024ca:	fab2 f282 	clz	r2, r2
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	f042 0220 	orr.w	r2, r2, #32
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	f002 021f 	and.w	r2, r2, #31
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f202 	lsl.w	r2, r1, r2
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d17b      	bne.n	80025de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0f3      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d13c      	bne.n	800256c <HAL_RCC_ClockConfig+0x178>
 80024f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024f6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024fa:	fa93 f3a3 	rbit	r3, r3
 80024fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002502:	fab3 f383 	clz	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b01      	cmp	r3, #1
 8002514:	d102      	bne.n	800251c <HAL_RCC_ClockConfig+0x128>
 8002516:	4b4f      	ldr	r3, [pc, #316]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	e00f      	b.n	800253c <HAL_RCC_ClockConfig+0x148>
 800251c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002520:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002524:	fa93 f3a3 	rbit	r3, r3
 8002528:	647b      	str	r3, [r7, #68]	; 0x44
 800252a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800252e:	643b      	str	r3, [r7, #64]	; 0x40
 8002530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002538:	4b46      	ldr	r3, [pc, #280]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002540:	63ba      	str	r2, [r7, #56]	; 0x38
 8002542:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002544:	fa92 f2a2 	rbit	r2, r2
 8002548:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800254a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800254c:	fab2 f282 	clz	r2, r2
 8002550:	b2d2      	uxtb	r2, r2
 8002552:	f042 0220 	orr.w	r2, r2, #32
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	f002 021f 	and.w	r2, r2, #31
 800255c:	2101      	movs	r1, #1
 800255e:	fa01 f202 	lsl.w	r2, r1, r2
 8002562:	4013      	ands	r3, r2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d13a      	bne.n	80025de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0b2      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
 800256c:	2302      	movs	r3, #2
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	fa93 f3a3 	rbit	r3, r3
 8002576:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d102      	bne.n	8002594 <HAL_RCC_ClockConfig+0x1a0>
 800258e:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e00d      	b.n	80025b0 <HAL_RCC_ClockConfig+0x1bc>
 8002594:	2302      	movs	r3, #2
 8002596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	fa93 f3a3 	rbit	r3, r3
 800259e:	627b      	str	r3, [r7, #36]	; 0x24
 80025a0:	2302      	movs	r3, #2
 80025a2:	623b      	str	r3, [r7, #32]
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	fa93 f3a3 	rbit	r3, r3
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	4b29      	ldr	r3, [pc, #164]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 80025ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b0:	2202      	movs	r2, #2
 80025b2:	61ba      	str	r2, [r7, #24]
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	fa92 f2a2 	rbit	r2, r2
 80025ba:	617a      	str	r2, [r7, #20]
  return result;
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	fab2 f282 	clz	r2, r2
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	f042 0220 	orr.w	r2, r2, #32
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	f002 021f 	and.w	r2, r2, #31
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f202 	lsl.w	r2, r1, r2
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e079      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025de:	4b1d      	ldr	r3, [pc, #116]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f023 0203 	bic.w	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	491a      	ldr	r1, [pc, #104]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025f0:	f7fe fc6a 	bl	8000ec8 <HAL_GetTick>
 80025f4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f6:	e00a      	b.n	800260e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025f8:	f7fe fc66 	bl	8000ec8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	f241 3288 	movw	r2, #5000	; 0x1388
 8002606:	4293      	cmp	r3, r2
 8002608:	d901      	bls.n	800260e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e061      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <HAL_RCC_ClockConfig+0x260>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 020c 	and.w	r2, r3, #12
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	429a      	cmp	r2, r3
 800261e:	d1eb      	bne.n	80025f8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002620:	4b0b      	ldr	r3, [pc, #44]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d214      	bcs.n	8002658 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b08      	ldr	r3, [pc, #32]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 0207 	bic.w	r2, r3, #7
 8002636:	4906      	ldr	r1, [pc, #24]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	4313      	orrs	r3, r2
 800263c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800263e:	4b04      	ldr	r3, [pc, #16]	; (8002650 <HAL_RCC_ClockConfig+0x25c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e040      	b.n	80026d2 <HAL_RCC_ClockConfig+0x2de>
 8002650:	40022000 	.word	0x40022000
 8002654:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0304 	and.w	r3, r3, #4
 8002660:	2b00      	cmp	r3, #0
 8002662:	d008      	beq.n	8002676 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <HAL_RCC_ClockConfig+0x2e8>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	491a      	ldr	r1, [pc, #104]	; (80026dc <HAL_RCC_ClockConfig+0x2e8>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0308 	and.w	r3, r3, #8
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002682:	4b16      	ldr	r3, [pc, #88]	; (80026dc <HAL_RCC_ClockConfig+0x2e8>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4912      	ldr	r1, [pc, #72]	; (80026dc <HAL_RCC_ClockConfig+0x2e8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002696:	f000 f829 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 800269a:	4601      	mov	r1, r0
 800269c:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <HAL_RCC_ClockConfig+0x2e8>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026a4:	22f0      	movs	r2, #240	; 0xf0
 80026a6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	fa92 f2a2 	rbit	r2, r2
 80026ae:	60fa      	str	r2, [r7, #12]
  return result;
 80026b0:	68fa      	ldr	r2, [r7, #12]
 80026b2:	fab2 f282 	clz	r2, r2
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	40d3      	lsrs	r3, r2
 80026ba:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <HAL_RCC_ClockConfig+0x2ec>)
 80026bc:	5cd3      	ldrb	r3, [r2, r3]
 80026be:	fa21 f303 	lsr.w	r3, r1, r3
 80026c2:	4a08      	ldr	r2, [pc, #32]	; (80026e4 <HAL_RCC_ClockConfig+0x2f0>)
 80026c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80026c6:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <HAL_RCC_ClockConfig+0x2f4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fbb8 	bl	8000e40 <HAL_InitTick>
  
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3778      	adds	r7, #120	; 0x78
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
 80026e0:	08004294 	.word	0x08004294
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20000004 	.word	0x20000004

080026ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b08b      	sub	sp, #44	; 0x2c
 80026f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61fb      	str	r3, [r7, #28]
 80026f6:	2300      	movs	r3, #0
 80026f8:	61bb      	str	r3, [r7, #24]
 80026fa:	2300      	movs	r3, #0
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002706:	4b2a      	ldr	r3, [pc, #168]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b04      	cmp	r3, #4
 8002714:	d002      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x30>
 8002716:	2b08      	cmp	r3, #8
 8002718:	d003      	beq.n	8002722 <HAL_RCC_GetSysClockFreq+0x36>
 800271a:	e03f      	b.n	800279c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800271c:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800271e:	623b      	str	r3, [r7, #32]
      break;
 8002720:	e03f      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002728:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800272c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	fa92 f2a2 	rbit	r2, r2
 8002734:	607a      	str	r2, [r7, #4]
  return result;
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	fab2 f282 	clz	r2, r2
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	40d3      	lsrs	r3, r2
 8002740:	4a1d      	ldr	r2, [pc, #116]	; (80027b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002742:	5cd3      	ldrb	r3, [r2, r3]
 8002744:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002746:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274a:	f003 030f 	and.w	r3, r3, #15
 800274e:	220f      	movs	r2, #15
 8002750:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	fa92 f2a2 	rbit	r2, r2
 8002758:	60fa      	str	r2, [r7, #12]
  return result;
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	fab2 f282 	clz	r2, r2
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	40d3      	lsrs	r3, r2
 8002764:	4a15      	ldr	r2, [pc, #84]	; (80027bc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002766:	5cd3      	ldrb	r3, [r2, r3]
 8002768:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002774:	4a0f      	ldr	r2, [pc, #60]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	fbb2 f2f3 	udiv	r2, r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fb02 f303 	mul.w	r3, r2, r3
 8002782:	627b      	str	r3, [r7, #36]	; 0x24
 8002784:	e007      	b.n	8002796 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002786:	4a0b      	ldr	r2, [pc, #44]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	fbb2 f2f3 	udiv	r2, r2, r3
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	fb02 f303 	mul.w	r3, r2, r3
 8002794:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	623b      	str	r3, [r7, #32]
      break;
 800279a:	e002      	b.n	80027a2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800279c:	4b05      	ldr	r3, [pc, #20]	; (80027b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 800279e:	623b      	str	r3, [r7, #32]
      break;
 80027a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027a2:	6a3b      	ldr	r3, [r7, #32]
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	372c      	adds	r7, #44	; 0x2c
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	40021000 	.word	0x40021000
 80027b4:	007a1200 	.word	0x007a1200
 80027b8:	080042ac 	.word	0x080042ac
 80027bc:	080042bc 	.word	0x080042bc

080027c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027c6:	681b      	ldr	r3, [r3, #0]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	20000000 	.word	0x20000000

080027d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80027de:	f7ff ffef 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 80027e2:	4601      	mov	r1, r0
 80027e4:	4b0b      	ldr	r3, [pc, #44]	; (8002814 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80027ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80027f0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	fa92 f2a2 	rbit	r2, r2
 80027f8:	603a      	str	r2, [r7, #0]
  return result;
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	fab2 f282 	clz	r2, r2
 8002800:	b2d2      	uxtb	r2, r2
 8002802:	40d3      	lsrs	r3, r2
 8002804:	4a04      	ldr	r2, [pc, #16]	; (8002818 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002806:	5cd3      	ldrb	r3, [r2, r3]
 8002808:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800280c:	4618      	mov	r0, r3
 800280e:	3708      	adds	r7, #8
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	40021000 	.word	0x40021000
 8002818:	080042a4 	.word	0x080042a4

0800281c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002822:	f7ff ffcd 	bl	80027c0 <HAL_RCC_GetHCLKFreq>
 8002826:	4601      	mov	r1, r0
 8002828:	4b0b      	ldr	r3, [pc, #44]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002830:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002834:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	fa92 f2a2 	rbit	r2, r2
 800283c:	603a      	str	r2, [r7, #0]
  return result;
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	fab2 f282 	clz	r2, r2
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	40d3      	lsrs	r3, r2
 8002848:	4a04      	ldr	r2, [pc, #16]	; (800285c <HAL_RCC_GetPCLK2Freq+0x40>)
 800284a:	5cd3      	ldrb	r3, [r2, r3]
 800284c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	080042a4 	.word	0x080042a4

08002860 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b092      	sub	sp, #72	; 0x48
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002870:	2300      	movs	r3, #0
 8002872:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80d4 	beq.w	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002884:	4b4e      	ldr	r3, [pc, #312]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002886:	69db      	ldr	r3, [r3, #28]
 8002888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10e      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002890:	4b4b      	ldr	r3, [pc, #300]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	4a4a      	ldr	r2, [pc, #296]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800289a:	61d3      	str	r3, [r2, #28]
 800289c:	4b48      	ldr	r3, [pc, #288]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289e:	69db      	ldr	r3, [r3, #28]
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028a8:	2301      	movs	r3, #1
 80028aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ae:	4b45      	ldr	r3, [pc, #276]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d118      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028ba:	4b42      	ldr	r3, [pc, #264]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a41      	ldr	r2, [pc, #260]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028c6:	f7fe faff 	bl	8000ec8 <HAL_GetTick>
 80028ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	e008      	b.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ce:	f7fe fafb 	bl	8000ec8 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	2b64      	cmp	r3, #100	; 0x64
 80028da:	d901      	bls.n	80028e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80028dc:	2303      	movs	r3, #3
 80028de:	e1d6      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e0:	4b38      	ldr	r3, [pc, #224]	; (80029c4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0f0      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80028ec:	4b34      	ldr	r3, [pc, #208]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80028f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 8084 	beq.w	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002906:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002908:	429a      	cmp	r2, r3
 800290a:	d07c      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800290c:	4b2c      	ldr	r3, [pc, #176]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002916:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800291a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002926:	fab3 f383 	clz	r3, r3
 800292a:	b2db      	uxtb	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002930:	4413      	add	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	461a      	mov	r2, r3
 8002936:	2301      	movs	r3, #1
 8002938:	6013      	str	r3, [r2, #0]
 800293a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800293e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800294a:	fab3 f383 	clz	r3, r3
 800294e:	b2db      	uxtb	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	461a      	mov	r2, r3
 800295a:	2300      	movs	r3, #0
 800295c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800295e:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002962:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d04b      	beq.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296e:	f7fe faab 	bl	8000ec8 <HAL_GetTick>
 8002972:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002974:	e00a      	b.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002976:	f7fe faa7 	bl	8000ec8 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f241 3288 	movw	r2, #5000	; 0x1388
 8002984:	4293      	cmp	r3, r2
 8002986:	d901      	bls.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e180      	b.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800298c:	2302      	movs	r3, #2
 800298e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
 8002998:	2302      	movs	r3, #2
 800299a:	623b      	str	r3, [r7, #32]
 800299c:	6a3b      	ldr	r3, [r7, #32]
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	61fb      	str	r3, [r7, #28]
  return result;
 80029a4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a6:	fab3 f383 	clz	r3, r3
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	095b      	lsrs	r3, r3, #5
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	f043 0302 	orr.w	r3, r3, #2
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d108      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80029ba:	4b01      	ldr	r3, [pc, #4]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	e00d      	b.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80029c0:	40021000 	.word	0x40021000
 80029c4:	40007000 	.word	0x40007000
 80029c8:	10908100 	.word	0x10908100
 80029cc:	2302      	movs	r3, #2
 80029ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	617b      	str	r3, [r7, #20]
 80029d8:	4ba0      	ldr	r3, [pc, #640]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	2202      	movs	r2, #2
 80029de:	613a      	str	r2, [r7, #16]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	fa92 f2a2 	rbit	r2, r2
 80029e6:	60fa      	str	r2, [r7, #12]
  return result;
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	fab2 f282 	clz	r2, r2
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	f002 021f 	and.w	r2, r2, #31
 80029fa:	2101      	movs	r1, #1
 80029fc:	fa01 f202 	lsl.w	r2, r1, r2
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0b7      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002a06:	4b95      	ldr	r3, [pc, #596]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	4992      	ldr	r1, [pc, #584]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d105      	bne.n	8002a2c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a20:	4b8e      	ldr	r3, [pc, #568]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	4a8d      	ldr	r2, [pc, #564]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a38:	4b88      	ldr	r3, [pc, #544]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3c:	f023 0203 	bic.w	r2, r3, #3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	4985      	ldr	r1, [pc, #532]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d008      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a56:	4b81      	ldr	r3, [pc, #516]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	497e      	ldr	r1, [pc, #504]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d008      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a74:	4b79      	ldr	r3, [pc, #484]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691b      	ldr	r3, [r3, #16]
 8002a80:	4976      	ldr	r1, [pc, #472]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0320 	and.w	r3, r3, #32
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d008      	beq.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a92:	4b72      	ldr	r3, [pc, #456]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a96:	f023 0210 	bic.w	r2, r3, #16
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	496f      	ldr	r1, [pc, #444]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d008      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ab0:	4b6a      	ldr	r3, [pc, #424]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	4967      	ldr	r1, [pc, #412]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d008      	beq.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ace:	4b63      	ldr	r3, [pc, #396]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad2:	f023 0220 	bic.w	r2, r3, #32
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	4960      	ldr	r1, [pc, #384]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d008      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002aec:	4b5b      	ldr	r3, [pc, #364]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	4958      	ldr	r1, [pc, #352]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0308 	and.w	r3, r3, #8
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d008      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b0a:	4b54      	ldr	r3, [pc, #336]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	695b      	ldr	r3, [r3, #20]
 8002b16:	4951      	ldr	r1, [pc, #324]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0310 	and.w	r3, r3, #16
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b28:	4b4c      	ldr	r3, [pc, #304]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	4949      	ldr	r1, [pc, #292]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d008      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b46:	4b45      	ldr	r3, [pc, #276]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b52:	4942      	ldr	r1, [pc, #264]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b64:	4b3d      	ldr	r3, [pc, #244]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b68:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	493a      	ldr	r1, [pc, #232]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d008      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002b82:	4b36      	ldr	r3, [pc, #216]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8e:	4933      	ldr	r1, [pc, #204]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ba0:	4b2e      	ldr	r3, [pc, #184]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bac:	492b      	ldr	r1, [pc, #172]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d008      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002bbe:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	4924      	ldr	r1, [pc, #144]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002bdc:	4b1f      	ldr	r3, [pc, #124]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be8:	491c      	ldr	r1, [pc, #112]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d008      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfe:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c06:	4915      	ldr	r1, [pc, #84]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002c18:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c24:	490d      	ldr	r1, [pc, #52]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d008      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002c36:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c42:	4906      	ldr	r1, [pc, #24]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00c      	beq.n	8002c6e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002c54:	4b01      	ldr	r3, [pc, #4]	; (8002c5c <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	e002      	b.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002c5a:	bf00      	nop
 8002c5c:	40021000 	.word	0x40021000
 8002c60:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c68:	490b      	ldr	r1, [pc, #44]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d008      	beq.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c7e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c86:	4904      	ldr	r1, [pc, #16]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3748      	adds	r7, #72	; 0x48
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40021000 	.word	0x40021000

08002c9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e040      	b.n	8002d30 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d106      	bne.n	8002cc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7fd ffc0 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2224      	movs	r2, #36	; 0x24
 8002cc8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f022 0201 	bic.w	r2, r2, #1
 8002cd8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fb6e 	bl	80033bc <UART_SetConfig>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d101      	bne.n	8002cea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e022      	b.n	8002d30 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 fd38 	bl	8003768 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	685a      	ldr	r2, [r3, #4]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f042 0201 	orr.w	r2, r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fdbf 	bl	80038ac <UART_CheckIdleState>
 8002d2e:	4603      	mov	r3, r0
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3708      	adds	r7, #8
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b08a      	sub	sp, #40	; 0x28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	4613      	mov	r3, r2
 8002d44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d4a:	2b20      	cmp	r3, #32
 8002d4c:	d13d      	bne.n	8002dca <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <HAL_UART_Receive_IT+0x22>
 8002d54:	88fb      	ldrh	r3, [r7, #6]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e036      	b.n	8002dcc <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_UART_Receive_IT+0x34>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e02f      	b.n	8002dcc <HAL_UART_Receive_IT+0x94>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d018      	beq.n	8002dba <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	e853 3f00 	ldrex	r3, [r3]
 8002d94:	613b      	str	r3, [r7, #16]
   return(result);
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	461a      	mov	r2, r3
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002daa:	69f9      	ldr	r1, [r7, #28]
 8002dac:	6a3a      	ldr	r2, [r7, #32]
 8002dae:	e841 2300 	strex	r3, r2, [r1]
 8002db2:	61bb      	str	r3, [r7, #24]
   return(result);
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1e6      	bne.n	8002d88 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68b9      	ldr	r1, [r7, #8]
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fe81 	bl	8003ac8 <UART_Start_Receive_IT>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	e000      	b.n	8002dcc <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002dca:	2302      	movs	r3, #2
  }
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3728      	adds	r7, #40	; 0x28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b0ba      	sub	sp, #232	; 0xe8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002dfa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002dfe:	f640 030f 	movw	r3, #2063	; 0x80f
 8002e02:	4013      	ands	r3, r2
 8002e04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002e08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d115      	bne.n	8002e3c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002e10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00f      	beq.n	8002e3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002e1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d009      	beq.n	8002e3c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 82a3 	beq.w	8003378 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	4798      	blx	r3
      }
      return;
 8002e3a:	e29d      	b.n	8003378 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	f000 8117 	beq.w	8003074 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002e46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002e52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002e56:	4b85      	ldr	r3, [pc, #532]	; (800306c <HAL_UART_IRQHandler+0x298>)
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f000 810a 	beq.w	8003074 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d011      	beq.n	8002e90 <HAL_UART_IRQHandler+0xbc>
 8002e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00b      	beq.n	8002e90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d011      	beq.n	8002ec0 <HAL_UART_IRQHandler+0xec>
 8002e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ea0:	f003 0301 	and.w	r3, r3, #1
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00b      	beq.n	8002ec0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2202      	movs	r2, #2
 8002eae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eb6:	f043 0204 	orr.w	r2, r3, #4
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d011      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x11c>
 8002ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ed0:	f003 0301 	and.w	r3, r3, #1
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00b      	beq.n	8002ef0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2204      	movs	r2, #4
 8002ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ee6:	f043 0202 	orr.w	r2, r3, #2
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d017      	beq.n	8002f2c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f00:	f003 0320 	and.w	r3, r3, #32
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d105      	bne.n	8002f14 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00b      	beq.n	8002f2c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2208      	movs	r2, #8
 8002f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f22:	f043 0208 	orr.w	r2, r3, #8
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d012      	beq.n	8002f5e <HAL_UART_IRQHandler+0x18a>
 8002f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00c      	beq.n	8002f5e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f54:	f043 0220 	orr.w	r2, r3, #32
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f000 8209 	beq.w	800337c <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f6e:	f003 0320 	and.w	r3, r3, #32
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00d      	beq.n	8002f92 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f7a:	f003 0320 	and.w	r3, r3, #32
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d007      	beq.n	8002f92 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa6:	2b40      	cmp	r3, #64	; 0x40
 8002fa8:	d005      	beq.n	8002fb6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d04f      	beq.n	8003056 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fe32 	bl	8003c20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc6:	2b40      	cmp	r3, #64	; 0x40
 8002fc8:	d141      	bne.n	800304e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3308      	adds	r3, #8
 8002fd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fd8:	e853 3f00 	ldrex	r3, [r3]
 8002fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002fe4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fe8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3308      	adds	r3, #8
 8002ff2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002ff6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002ffa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003002:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003006:	e841 2300 	strex	r3, r2, [r1]
 800300a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800300e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1d9      	bne.n	8002fca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301a:	2b00      	cmp	r3, #0
 800301c:	d013      	beq.n	8003046 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003022:	4a13      	ldr	r2, [pc, #76]	; (8003070 <HAL_UART_IRQHandler+0x29c>)
 8003024:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	4618      	mov	r0, r3
 800302c:	f7fe f8a2 	bl	8001174 <HAL_DMA_Abort_IT>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d017      	beq.n	8003066 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003040:	4610      	mov	r0, r2
 8003042:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003044:	e00f      	b.n	8003066 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f9a2 	bl	8003390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800304c:	e00b      	b.n	8003066 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 f99e 	bl	8003390 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003054:	e007      	b.n	8003066 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f99a 	bl	8003390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003064:	e18a      	b.n	800337c <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003066:	bf00      	nop
    return;
 8003068:	e188      	b.n	800337c <HAL_UART_IRQHandler+0x5a8>
 800306a:	bf00      	nop
 800306c:	04000120 	.word	0x04000120
 8003070:	08003ce7 	.word	0x08003ce7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003078:	2b01      	cmp	r3, #1
 800307a:	f040 8143 	bne.w	8003304 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800307e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 813c 	beq.w	8003304 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800308c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	2b00      	cmp	r3, #0
 8003096:	f000 8135 	beq.w	8003304 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2210      	movs	r2, #16
 80030a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ac:	2b40      	cmp	r3, #64	; 0x40
 80030ae:	f040 80b1 	bne.w	8003214 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f000 815c 	beq.w	8003380 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80030ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030d2:	429a      	cmp	r2, r3
 80030d4:	f080 8154 	bcs.w	8003380 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030e6:	699b      	ldr	r3, [r3, #24]
 80030e8:	2b20      	cmp	r3, #32
 80030ea:	f000 8085 	beq.w	80031f8 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030fa:	e853 3f00 	ldrex	r3, [r3]
 80030fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003102:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003106:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800310a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	461a      	mov	r2, r3
 8003114:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003118:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800311c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003120:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003124:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003128:	e841 2300 	strex	r3, r2, [r1]
 800312c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003130:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1da      	bne.n	80030ee <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	3308      	adds	r3, #8
 800313e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003142:	e853 3f00 	ldrex	r3, [r3]
 8003146:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003148:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800314a:	f023 0301 	bic.w	r3, r3, #1
 800314e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	3308      	adds	r3, #8
 8003158:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800315c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003160:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003164:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003168:	e841 2300 	strex	r3, r2, [r1]
 800316c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800316e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e1      	bne.n	8003138 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3308      	adds	r3, #8
 800317a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800317e:	e853 3f00 	ldrex	r3, [r3]
 8003182:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003184:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003186:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800318a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	3308      	adds	r3, #8
 8003194:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003198:	66fa      	str	r2, [r7, #108]	; 0x6c
 800319a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800319c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800319e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031a0:	e841 2300 	strex	r3, r2, [r1]
 80031a4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80031a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d1e3      	bne.n	8003174 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2220      	movs	r2, #32
 80031b0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c0:	e853 3f00 	ldrex	r3, [r3]
 80031c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031c8:	f023 0310 	bic.w	r3, r3, #16
 80031cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031da:	65bb      	str	r3, [r7, #88]	; 0x58
 80031dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031e2:	e841 2300 	strex	r3, r2, [r1]
 80031e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80031e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1e4      	bne.n	80031b8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd ff85 	bl	8001102 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003204:	b29b      	uxth	r3, r3
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	b29b      	uxth	r3, r3
 800320a:	4619      	mov	r1, r3
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f8c9 	bl	80033a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003212:	e0b5      	b.n	8003380 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003220:	b29b      	uxth	r3, r3
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800322e:	b29b      	uxth	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80a7 	beq.w	8003384 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003236:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 80a2 	beq.w	8003384 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003248:	e853 3f00 	ldrex	r3, [r3]
 800324c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800324e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003250:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003254:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	461a      	mov	r2, r3
 800325e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003262:	647b      	str	r3, [r7, #68]	; 0x44
 8003264:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003266:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003268:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800326a:	e841 2300 	strex	r3, r2, [r1]
 800326e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1e4      	bne.n	8003240 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	3308      	adds	r3, #8
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	e853 3f00 	ldrex	r3, [r3]
 8003284:	623b      	str	r3, [r7, #32]
   return(result);
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	f023 0301 	bic.w	r3, r3, #1
 800328c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3308      	adds	r3, #8
 8003296:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800329a:	633a      	str	r2, [r7, #48]	; 0x30
 800329c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1e3      	bne.n	8003276 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	e853 3f00 	ldrex	r3, [r3]
 80032cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	f023 0310 	bic.w	r3, r3, #16
 80032d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	461a      	mov	r2, r3
 80032de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032e2:	61fb      	str	r3, [r7, #28]
 80032e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e6:	69b9      	ldr	r1, [r7, #24]
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	e841 2300 	strex	r3, r2, [r1]
 80032ee:	617b      	str	r3, [r7, #20]
   return(result);
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1e4      	bne.n	80032c0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80032fa:	4619      	mov	r1, r3
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f000 f851 	bl	80033a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003302:	e03f      	b.n	8003384 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00e      	beq.n	800332e <HAL_UART_IRQHandler+0x55a>
 8003310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003324:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fe79 	bl	800401e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800332c:	e02d      	b.n	800338a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800332e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00e      	beq.n	8003358 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800333a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800333e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003342:	2b00      	cmp	r3, #0
 8003344:	d008      	beq.n	8003358 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800334a:	2b00      	cmp	r3, #0
 800334c:	d01c      	beq.n	8003388 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	4798      	blx	r3
    }
    return;
 8003356:	e017      	b.n	8003388 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003360:	2b00      	cmp	r3, #0
 8003362:	d012      	beq.n	800338a <HAL_UART_IRQHandler+0x5b6>
 8003364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00c      	beq.n	800338a <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 fcce 	bl	8003d12 <UART_EndTransmit_IT>
    return;
 8003376:	e008      	b.n	800338a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003378:	bf00      	nop
 800337a:	e006      	b.n	800338a <HAL_UART_IRQHandler+0x5b6>
    return;
 800337c:	bf00      	nop
 800337e:	e004      	b.n	800338a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003380:	bf00      	nop
 8003382:	e002      	b.n	800338a <HAL_UART_IRQHandler+0x5b6>
      return;
 8003384:	bf00      	nop
 8003386:	e000      	b.n	800338a <HAL_UART_IRQHandler+0x5b6>
    return;
 8003388:	bf00      	nop
  }

}
 800338a:	37e8      	adds	r7, #232	; 0xe8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003398:	bf00      	nop
 800339a:	370c      	adds	r7, #12
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b083      	sub	sp, #12
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	460b      	mov	r3, r1
 80033ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b088      	sub	sp, #32
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80033c4:	2300      	movs	r3, #0
 80033c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689a      	ldr	r2, [r3, #8]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	691b      	ldr	r3, [r3, #16]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	4bab      	ldr	r3, [pc, #684]	; (8003694 <UART_SetConfig+0x2d8>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	6979      	ldr	r1, [r7, #20]
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68da      	ldr	r2, [r3, #12]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699b      	ldr	r3, [r3, #24]
 800340e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	4313      	orrs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	430a      	orrs	r2, r1
 800342c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a99      	ldr	r2, [pc, #612]	; (8003698 <UART_SetConfig+0x2dc>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d120      	bne.n	800347a <UART_SetConfig+0xbe>
 8003438:	4b98      	ldr	r3, [pc, #608]	; (800369c <UART_SetConfig+0x2e0>)
 800343a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343c:	f003 0303 	and.w	r3, r3, #3
 8003440:	2b03      	cmp	r3, #3
 8003442:	d817      	bhi.n	8003474 <UART_SetConfig+0xb8>
 8003444:	a201      	add	r2, pc, #4	; (adr r2, 800344c <UART_SetConfig+0x90>)
 8003446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344a:	bf00      	nop
 800344c:	0800345d 	.word	0x0800345d
 8003450:	08003469 	.word	0x08003469
 8003454:	0800346f 	.word	0x0800346f
 8003458:	08003463 	.word	0x08003463
 800345c:	2301      	movs	r3, #1
 800345e:	77fb      	strb	r3, [r7, #31]
 8003460:	e0b5      	b.n	80035ce <UART_SetConfig+0x212>
 8003462:	2302      	movs	r3, #2
 8003464:	77fb      	strb	r3, [r7, #31]
 8003466:	e0b2      	b.n	80035ce <UART_SetConfig+0x212>
 8003468:	2304      	movs	r3, #4
 800346a:	77fb      	strb	r3, [r7, #31]
 800346c:	e0af      	b.n	80035ce <UART_SetConfig+0x212>
 800346e:	2308      	movs	r3, #8
 8003470:	77fb      	strb	r3, [r7, #31]
 8003472:	e0ac      	b.n	80035ce <UART_SetConfig+0x212>
 8003474:	2310      	movs	r3, #16
 8003476:	77fb      	strb	r3, [r7, #31]
 8003478:	e0a9      	b.n	80035ce <UART_SetConfig+0x212>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a88      	ldr	r2, [pc, #544]	; (80036a0 <UART_SetConfig+0x2e4>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d124      	bne.n	80034ce <UART_SetConfig+0x112>
 8003484:	4b85      	ldr	r3, [pc, #532]	; (800369c <UART_SetConfig+0x2e0>)
 8003486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003488:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800348c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003490:	d011      	beq.n	80034b6 <UART_SetConfig+0xfa>
 8003492:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003496:	d817      	bhi.n	80034c8 <UART_SetConfig+0x10c>
 8003498:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800349c:	d011      	beq.n	80034c2 <UART_SetConfig+0x106>
 800349e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80034a2:	d811      	bhi.n	80034c8 <UART_SetConfig+0x10c>
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <UART_SetConfig+0xf4>
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ac:	d006      	beq.n	80034bc <UART_SetConfig+0x100>
 80034ae:	e00b      	b.n	80034c8 <UART_SetConfig+0x10c>
 80034b0:	2300      	movs	r3, #0
 80034b2:	77fb      	strb	r3, [r7, #31]
 80034b4:	e08b      	b.n	80035ce <UART_SetConfig+0x212>
 80034b6:	2302      	movs	r3, #2
 80034b8:	77fb      	strb	r3, [r7, #31]
 80034ba:	e088      	b.n	80035ce <UART_SetConfig+0x212>
 80034bc:	2304      	movs	r3, #4
 80034be:	77fb      	strb	r3, [r7, #31]
 80034c0:	e085      	b.n	80035ce <UART_SetConfig+0x212>
 80034c2:	2308      	movs	r3, #8
 80034c4:	77fb      	strb	r3, [r7, #31]
 80034c6:	e082      	b.n	80035ce <UART_SetConfig+0x212>
 80034c8:	2310      	movs	r3, #16
 80034ca:	77fb      	strb	r3, [r7, #31]
 80034cc:	e07f      	b.n	80035ce <UART_SetConfig+0x212>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a74      	ldr	r2, [pc, #464]	; (80036a4 <UART_SetConfig+0x2e8>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d124      	bne.n	8003522 <UART_SetConfig+0x166>
 80034d8:	4b70      	ldr	r3, [pc, #448]	; (800369c <UART_SetConfig+0x2e0>)
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80034e0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034e4:	d011      	beq.n	800350a <UART_SetConfig+0x14e>
 80034e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80034ea:	d817      	bhi.n	800351c <UART_SetConfig+0x160>
 80034ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034f0:	d011      	beq.n	8003516 <UART_SetConfig+0x15a>
 80034f2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80034f6:	d811      	bhi.n	800351c <UART_SetConfig+0x160>
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d003      	beq.n	8003504 <UART_SetConfig+0x148>
 80034fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003500:	d006      	beq.n	8003510 <UART_SetConfig+0x154>
 8003502:	e00b      	b.n	800351c <UART_SetConfig+0x160>
 8003504:	2300      	movs	r3, #0
 8003506:	77fb      	strb	r3, [r7, #31]
 8003508:	e061      	b.n	80035ce <UART_SetConfig+0x212>
 800350a:	2302      	movs	r3, #2
 800350c:	77fb      	strb	r3, [r7, #31]
 800350e:	e05e      	b.n	80035ce <UART_SetConfig+0x212>
 8003510:	2304      	movs	r3, #4
 8003512:	77fb      	strb	r3, [r7, #31]
 8003514:	e05b      	b.n	80035ce <UART_SetConfig+0x212>
 8003516:	2308      	movs	r3, #8
 8003518:	77fb      	strb	r3, [r7, #31]
 800351a:	e058      	b.n	80035ce <UART_SetConfig+0x212>
 800351c:	2310      	movs	r3, #16
 800351e:	77fb      	strb	r3, [r7, #31]
 8003520:	e055      	b.n	80035ce <UART_SetConfig+0x212>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a60      	ldr	r2, [pc, #384]	; (80036a8 <UART_SetConfig+0x2ec>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d124      	bne.n	8003576 <UART_SetConfig+0x1ba>
 800352c:	4b5b      	ldr	r3, [pc, #364]	; (800369c <UART_SetConfig+0x2e0>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003534:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003538:	d011      	beq.n	800355e <UART_SetConfig+0x1a2>
 800353a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800353e:	d817      	bhi.n	8003570 <UART_SetConfig+0x1b4>
 8003540:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003544:	d011      	beq.n	800356a <UART_SetConfig+0x1ae>
 8003546:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800354a:	d811      	bhi.n	8003570 <UART_SetConfig+0x1b4>
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <UART_SetConfig+0x19c>
 8003550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003554:	d006      	beq.n	8003564 <UART_SetConfig+0x1a8>
 8003556:	e00b      	b.n	8003570 <UART_SetConfig+0x1b4>
 8003558:	2300      	movs	r3, #0
 800355a:	77fb      	strb	r3, [r7, #31]
 800355c:	e037      	b.n	80035ce <UART_SetConfig+0x212>
 800355e:	2302      	movs	r3, #2
 8003560:	77fb      	strb	r3, [r7, #31]
 8003562:	e034      	b.n	80035ce <UART_SetConfig+0x212>
 8003564:	2304      	movs	r3, #4
 8003566:	77fb      	strb	r3, [r7, #31]
 8003568:	e031      	b.n	80035ce <UART_SetConfig+0x212>
 800356a:	2308      	movs	r3, #8
 800356c:	77fb      	strb	r3, [r7, #31]
 800356e:	e02e      	b.n	80035ce <UART_SetConfig+0x212>
 8003570:	2310      	movs	r3, #16
 8003572:	77fb      	strb	r3, [r7, #31]
 8003574:	e02b      	b.n	80035ce <UART_SetConfig+0x212>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a4c      	ldr	r2, [pc, #304]	; (80036ac <UART_SetConfig+0x2f0>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d124      	bne.n	80035ca <UART_SetConfig+0x20e>
 8003580:	4b46      	ldr	r3, [pc, #280]	; (800369c <UART_SetConfig+0x2e0>)
 8003582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003584:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003588:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800358c:	d011      	beq.n	80035b2 <UART_SetConfig+0x1f6>
 800358e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003592:	d817      	bhi.n	80035c4 <UART_SetConfig+0x208>
 8003594:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003598:	d011      	beq.n	80035be <UART_SetConfig+0x202>
 800359a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800359e:	d811      	bhi.n	80035c4 <UART_SetConfig+0x208>
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <UART_SetConfig+0x1f0>
 80035a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035a8:	d006      	beq.n	80035b8 <UART_SetConfig+0x1fc>
 80035aa:	e00b      	b.n	80035c4 <UART_SetConfig+0x208>
 80035ac:	2300      	movs	r3, #0
 80035ae:	77fb      	strb	r3, [r7, #31]
 80035b0:	e00d      	b.n	80035ce <UART_SetConfig+0x212>
 80035b2:	2302      	movs	r3, #2
 80035b4:	77fb      	strb	r3, [r7, #31]
 80035b6:	e00a      	b.n	80035ce <UART_SetConfig+0x212>
 80035b8:	2304      	movs	r3, #4
 80035ba:	77fb      	strb	r3, [r7, #31]
 80035bc:	e007      	b.n	80035ce <UART_SetConfig+0x212>
 80035be:	2308      	movs	r3, #8
 80035c0:	77fb      	strb	r3, [r7, #31]
 80035c2:	e004      	b.n	80035ce <UART_SetConfig+0x212>
 80035c4:	2310      	movs	r3, #16
 80035c6:	77fb      	strb	r3, [r7, #31]
 80035c8:	e001      	b.n	80035ce <UART_SetConfig+0x212>
 80035ca:	2310      	movs	r3, #16
 80035cc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035d6:	d16d      	bne.n	80036b4 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 80035d8:	7ffb      	ldrb	r3, [r7, #31]
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d827      	bhi.n	800362e <UART_SetConfig+0x272>
 80035de:	a201      	add	r2, pc, #4	; (adr r2, 80035e4 <UART_SetConfig+0x228>)
 80035e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e4:	08003609 	.word	0x08003609
 80035e8:	08003611 	.word	0x08003611
 80035ec:	08003619 	.word	0x08003619
 80035f0:	0800362f 	.word	0x0800362f
 80035f4:	0800361f 	.word	0x0800361f
 80035f8:	0800362f 	.word	0x0800362f
 80035fc:	0800362f 	.word	0x0800362f
 8003600:	0800362f 	.word	0x0800362f
 8003604:	08003627 	.word	0x08003627
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003608:	f7ff f8e6 	bl	80027d8 <HAL_RCC_GetPCLK1Freq>
 800360c:	61b8      	str	r0, [r7, #24]
        break;
 800360e:	e013      	b.n	8003638 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003610:	f7ff f904 	bl	800281c <HAL_RCC_GetPCLK2Freq>
 8003614:	61b8      	str	r0, [r7, #24]
        break;
 8003616:	e00f      	b.n	8003638 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003618:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <UART_SetConfig+0x2f4>)
 800361a:	61bb      	str	r3, [r7, #24]
        break;
 800361c:	e00c      	b.n	8003638 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800361e:	f7ff f865 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 8003622:	61b8      	str	r0, [r7, #24]
        break;
 8003624:	e008      	b.n	8003638 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003626:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800362a:	61bb      	str	r3, [r7, #24]
        break;
 800362c:	e004      	b.n	8003638 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	77bb      	strb	r3, [r7, #30]
        break;
 8003636:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8086 	beq.w	800374c <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	005a      	lsls	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	085b      	lsrs	r3, r3, #1
 800364a:	441a      	add	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	b29b      	uxth	r3, r3
 8003656:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	2b0f      	cmp	r3, #15
 800365c:	d916      	bls.n	800368c <UART_SetConfig+0x2d0>
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003664:	d212      	bcs.n	800368c <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	b29b      	uxth	r3, r3
 800366a:	f023 030f 	bic.w	r3, r3, #15
 800366e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	085b      	lsrs	r3, r3, #1
 8003674:	b29b      	uxth	r3, r3
 8003676:	f003 0307 	and.w	r3, r3, #7
 800367a:	b29a      	uxth	r2, r3
 800367c:	89fb      	ldrh	r3, [r7, #14]
 800367e:	4313      	orrs	r3, r2
 8003680:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	89fa      	ldrh	r2, [r7, #14]
 8003688:	60da      	str	r2, [r3, #12]
 800368a:	e05f      	b.n	800374c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	77bb      	strb	r3, [r7, #30]
 8003690:	e05c      	b.n	800374c <UART_SetConfig+0x390>
 8003692:	bf00      	nop
 8003694:	efff69f3 	.word	0xefff69f3
 8003698:	40013800 	.word	0x40013800
 800369c:	40021000 	.word	0x40021000
 80036a0:	40004400 	.word	0x40004400
 80036a4:	40004800 	.word	0x40004800
 80036a8:	40004c00 	.word	0x40004c00
 80036ac:	40005000 	.word	0x40005000
 80036b0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80036b4:	7ffb      	ldrb	r3, [r7, #31]
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d827      	bhi.n	800370a <UART_SetConfig+0x34e>
 80036ba:	a201      	add	r2, pc, #4	; (adr r2, 80036c0 <UART_SetConfig+0x304>)
 80036bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c0:	080036e5 	.word	0x080036e5
 80036c4:	080036ed 	.word	0x080036ed
 80036c8:	080036f5 	.word	0x080036f5
 80036cc:	0800370b 	.word	0x0800370b
 80036d0:	080036fb 	.word	0x080036fb
 80036d4:	0800370b 	.word	0x0800370b
 80036d8:	0800370b 	.word	0x0800370b
 80036dc:	0800370b 	.word	0x0800370b
 80036e0:	08003703 	.word	0x08003703
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e4:	f7ff f878 	bl	80027d8 <HAL_RCC_GetPCLK1Freq>
 80036e8:	61b8      	str	r0, [r7, #24]
        break;
 80036ea:	e013      	b.n	8003714 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036ec:	f7ff f896 	bl	800281c <HAL_RCC_GetPCLK2Freq>
 80036f0:	61b8      	str	r0, [r7, #24]
        break;
 80036f2:	e00f      	b.n	8003714 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036f4:	4b1b      	ldr	r3, [pc, #108]	; (8003764 <UART_SetConfig+0x3a8>)
 80036f6:	61bb      	str	r3, [r7, #24]
        break;
 80036f8:	e00c      	b.n	8003714 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036fa:	f7fe fff7 	bl	80026ec <HAL_RCC_GetSysClockFreq>
 80036fe:	61b8      	str	r0, [r7, #24]
        break;
 8003700:	e008      	b.n	8003714 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003706:	61bb      	str	r3, [r7, #24]
        break;
 8003708:	e004      	b.n	8003714 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 800370a:	2300      	movs	r3, #0
 800370c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	77bb      	strb	r3, [r7, #30]
        break;
 8003712:	bf00      	nop
    }

    if (pclk != 0U)
 8003714:	69bb      	ldr	r3, [r7, #24]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d018      	beq.n	800374c <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	085a      	lsrs	r2, r3, #1
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	441a      	add	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	fbb2 f3f3 	udiv	r3, r2, r3
 800372c:	b29b      	uxth	r3, r3
 800372e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	2b0f      	cmp	r3, #15
 8003734:	d908      	bls.n	8003748 <UART_SetConfig+0x38c>
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800373c:	d204      	bcs.n	8003748 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	e001      	b.n	800374c <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003758:	7fbb      	ldrb	r3, [r7, #30]
}
 800375a:	4618      	mov	r0, r3
 800375c:	3720      	adds	r7, #32
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	007a1200 	.word	0x007a1200

08003768 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003774:	f003 0301 	and.w	r3, r3, #1
 8003778:	2b00      	cmp	r3, #0
 800377a:	d00a      	beq.n	8003792 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d00a      	beq.n	80037d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	f003 0308 	and.w	r3, r3, #8
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	f003 0310 	and.w	r3, r3, #16
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00a      	beq.n	800381a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	f003 0320 	and.w	r3, r3, #32
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00a      	beq.n	800383c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003844:	2b00      	cmp	r3, #0
 8003846:	d01a      	beq.n	800387e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003866:	d10a      	bne.n	800387e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003886:	2b00      	cmp	r3, #0
 8003888:	d00a      	beq.n	80038a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
  }
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af02      	add	r7, sp, #8
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038bc:	f7fd fb04 	bl	8000ec8 <HAL_GetTick>
 80038c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0308 	and.w	r3, r3, #8
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d10e      	bne.n	80038ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f82d 	bl	800393e <UART_WaitOnFlagUntilTimeout>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e023      	b.n	8003936 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b04      	cmp	r3, #4
 80038fa:	d10e      	bne.n	800391a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f817 	bl	800393e <UART_WaitOnFlagUntilTimeout>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e00d      	b.n	8003936 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2200      	movs	r2, #0
 800392a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b09c      	sub	sp, #112	; 0x70
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	603b      	str	r3, [r7, #0]
 800394a:	4613      	mov	r3, r2
 800394c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800394e:	e0a5      	b.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003950:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003956:	f000 80a1 	beq.w	8003a9c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395a:	f7fd fab5 	bl	8000ec8 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003966:	429a      	cmp	r2, r3
 8003968:	d302      	bcc.n	8003970 <UART_WaitOnFlagUntilTimeout+0x32>
 800396a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800396c:	2b00      	cmp	r3, #0
 800396e:	d13e      	bne.n	80039ee <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800397e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003980:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003984:	667b      	str	r3, [r7, #100]	; 0x64
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800398e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003990:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003994:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800399c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e6      	bne.n	8003970 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3308      	adds	r3, #8
 80039a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	663b      	str	r3, [r7, #96]	; 0x60
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3308      	adds	r3, #8
 80039c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80039c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80039c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80039d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e5      	bne.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2220      	movs	r2, #32
 80039da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2220      	movs	r2, #32
 80039e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e067      	b.n	8003abe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0304 	and.w	r3, r3, #4
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d04f      	beq.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a0a:	d147      	bne.n	8003a9c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a14:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	e853 3f00 	ldrex	r3, [r3]
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	461a      	mov	r2, r3
 8003a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a34:	637b      	str	r3, [r7, #52]	; 0x34
 8003a36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a3c:	e841 2300 	strex	r3, r2, [r1]
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e6      	bne.n	8003a16 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	3308      	adds	r3, #8
 8003a4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	e853 3f00 	ldrex	r3, [r3]
 8003a56:	613b      	str	r3, [r7, #16]
   return(result);
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f023 0301 	bic.w	r3, r3, #1
 8003a5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3308      	adds	r3, #8
 8003a66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003a68:	623a      	str	r2, [r7, #32]
 8003a6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6c:	69f9      	ldr	r1, [r7, #28]
 8003a6e:	6a3a      	ldr	r2, [r7, #32]
 8003a70:	e841 2300 	strex	r3, r2, [r1]
 8003a74:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1e5      	bne.n	8003a48 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	e010      	b.n	8003abe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	69da      	ldr	r2, [r3, #28]
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	bf0c      	ite	eq
 8003aac:	2301      	moveq	r3, #1
 8003aae:	2300      	movne	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	f43f af4a 	beq.w	8003950 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3770      	adds	r7, #112	; 0x70
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b091      	sub	sp, #68	; 0x44
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	88fa      	ldrh	r2, [r7, #6]
 8003ae8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003afa:	d10e      	bne.n	8003b1a <UART_Start_Receive_IT+0x52>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d105      	bne.n	8003b10 <UART_Start_Receive_IT+0x48>
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003b0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b0e:	e02d      	b.n	8003b6c <UART_Start_Receive_IT+0xa4>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	22ff      	movs	r2, #255	; 0xff
 8003b14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b18:	e028      	b.n	8003b6c <UART_Start_Receive_IT+0xa4>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10d      	bne.n	8003b3e <UART_Start_Receive_IT+0x76>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d104      	bne.n	8003b34 <UART_Start_Receive_IT+0x6c>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	22ff      	movs	r2, #255	; 0xff
 8003b2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b32:	e01b      	b.n	8003b6c <UART_Start_Receive_IT+0xa4>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	227f      	movs	r2, #127	; 0x7f
 8003b38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b3c:	e016      	b.n	8003b6c <UART_Start_Receive_IT+0xa4>
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b46:	d10d      	bne.n	8003b64 <UART_Start_Receive_IT+0x9c>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d104      	bne.n	8003b5a <UART_Start_Receive_IT+0x92>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	227f      	movs	r2, #127	; 0x7f
 8003b54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b58:	e008      	b.n	8003b6c <UART_Start_Receive_IT+0xa4>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	223f      	movs	r2, #63	; 0x3f
 8003b5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003b62:	e003      	b.n	8003b6c <UART_Start_Receive_IT+0xa4>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2222      	movs	r2, #34	; 0x22
 8003b78:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	3308      	adds	r3, #8
 8003b80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8c:	f043 0301 	orr.w	r3, r3, #1
 8003b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	3308      	adds	r3, #8
 8003b98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b9a:	637a      	str	r2, [r7, #52]	; 0x34
 8003b9c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ba2:	e841 2300 	strex	r3, r2, [r1]
 8003ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1e5      	bne.n	8003b7a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb6:	d107      	bne.n	8003bc8 <UART_Start_Receive_IT+0x100>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	691b      	ldr	r3, [r3, #16]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d103      	bne.n	8003bc8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	4a15      	ldr	r2, [pc, #84]	; (8003c18 <UART_Start_Receive_IT+0x150>)
 8003bc4:	665a      	str	r2, [r3, #100]	; 0x64
 8003bc6:	e002      	b.n	8003bce <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4a14      	ldr	r2, [pc, #80]	; (8003c1c <UART_Start_Receive_IT+0x154>)
 8003bcc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	e853 3f00 	ldrex	r3, [r3]
 8003be2:	613b      	str	r3, [r7, #16]
   return(result);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003bea:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	461a      	mov	r2, r3
 8003bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf4:	623b      	str	r3, [r7, #32]
 8003bf6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf8:	69f9      	ldr	r1, [r7, #28]
 8003bfa:	6a3a      	ldr	r2, [r7, #32]
 8003bfc:	e841 2300 	strex	r3, r2, [r1]
 8003c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1e6      	bne.n	8003bd6 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3744      	adds	r7, #68	; 0x44
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
 8003c16:	bf00      	nop
 8003c18:	08003ec3 	.word	0x08003ec3
 8003c1c:	08003d67 	.word	0x08003d67

08003c20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b095      	sub	sp, #84	; 0x54
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c30:	e853 3f00 	ldrex	r3, [r3]
 8003c34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c46:	643b      	str	r3, [r7, #64]	; 0x40
 8003c48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003c4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003c4e:	e841 2300 	strex	r3, r2, [r1]
 8003c52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d1e6      	bne.n	8003c28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	3308      	adds	r3, #8
 8003c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f023 0301 	bic.w	r3, r3, #1
 8003c70:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	3308      	adds	r3, #8
 8003c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e5      	bne.n	8003c5a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d118      	bne.n	8003cc8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f023 0310 	bic.w	r3, r3, #16
 8003caa:	647b      	str	r3, [r7, #68]	; 0x44
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	6979      	ldr	r1, [r7, #20]
 8003cba:	69ba      	ldr	r2, [r7, #24]
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e6      	bne.n	8003c96 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003cda:	bf00      	nop
 8003cdc:	3754      	adds	r7, #84	; 0x54
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	b084      	sub	sp, #16
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f7ff fb43 	bl	8003390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d0a:	bf00      	nop
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b088      	sub	sp, #32
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	e853 3f00 	ldrex	r3, [r3]
 8003d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d2e:	61fb      	str	r3, [r7, #28]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3c:	6979      	ldr	r1, [r7, #20]
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	e841 2300 	strex	r3, r2, [r1]
 8003d44:	613b      	str	r3, [r7, #16]
   return(result);
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d1e6      	bne.n	8003d1a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f7fc fbd3 	bl	8000504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d5e:	bf00      	nop
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b096      	sub	sp, #88	; 0x58
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d7c:	2b22      	cmp	r3, #34	; 0x22
 8003d7e:	f040 8094 	bne.w	8003eaa <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003d88:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003d8c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003d90:	b2d9      	uxtb	r1, r3
 8003d92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9c:	400a      	ands	r2, r1
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d177      	bne.n	8003eba <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd2:	e853 3f00 	ldrex	r3, [r3]
 8003dd6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003dd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003dde:	653b      	str	r3, [r7, #80]	; 0x50
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	461a      	mov	r2, r3
 8003de6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de8:	647b      	str	r3, [r7, #68]	; 0x44
 8003dea:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003dee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003df0:	e841 2300 	strex	r3, r2, [r1]
 8003df4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d1e6      	bne.n	8003dca <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3308      	adds	r3, #8
 8003e02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	623b      	str	r3, [r7, #32]
   return(result);
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	f023 0301 	bic.w	r3, r3, #1
 8003e12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	3308      	adds	r3, #8
 8003e1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e1c:	633a      	str	r2, [r7, #48]	; 0x30
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e5      	bne.n	8003dfc <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2220      	movs	r2, #32
 8003e34:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d12e      	bne.n	8003ea2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	e853 3f00 	ldrex	r3, [r3]
 8003e56:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f023 0310 	bic.w	r3, r3, #16
 8003e5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	461a      	mov	r2, r3
 8003e66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e68:	61fb      	str	r3, [r7, #28]
 8003e6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	69b9      	ldr	r1, [r7, #24]
 8003e6e:	69fa      	ldr	r2, [r7, #28]
 8003e70:	e841 2300 	strex	r3, r2, [r1]
 8003e74:	617b      	str	r3, [r7, #20]
   return(result);
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e6      	bne.n	8003e4a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b10      	cmp	r3, #16
 8003e88:	d103      	bne.n	8003e92 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2210      	movs	r2, #16
 8003e90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003e98:	4619      	mov	r1, r3
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fa82 	bl	80033a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ea0:	e00b      	b.n	8003eba <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fc fb3e 	bl	8000524 <HAL_UART_RxCpltCallback>
}
 8003ea8:	e007      	b.n	8003eba <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699a      	ldr	r2, [r3, #24]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0208 	orr.w	r2, r2, #8
 8003eb8:	619a      	str	r2, [r3, #24]
}
 8003eba:	bf00      	nop
 8003ebc:	3758      	adds	r7, #88	; 0x58
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b096      	sub	sp, #88	; 0x58
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ed0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ed8:	2b22      	cmp	r3, #34	; 0x22
 8003eda:	f040 8094 	bne.w	8004006 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ee4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003eee:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003ef2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003efc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f02:	1c9a      	adds	r2, r3, #2
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d177      	bne.n	8004016 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f2e:	e853 3f00 	ldrex	r3, [r3]
 8003f32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f44:	643b      	str	r3, [r7, #64]	; 0x40
 8003f46:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f4c:	e841 2300 	strex	r3, r2, [r1]
 8003f50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e6      	bne.n	8003f26 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f60:	6a3b      	ldr	r3, [r7, #32]
 8003f62:	e853 3f00 	ldrex	r3, [r3]
 8003f66:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	f023 0301 	bic.w	r3, r3, #1
 8003f6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	3308      	adds	r3, #8
 8003f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f80:	e841 2300 	strex	r3, r2, [r1]
 8003f84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d1e5      	bne.n	8003f58 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d12e      	bne.n	8003ffe <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f023 0310 	bic.w	r3, r3, #16
 8003fba:	647b      	str	r3, [r7, #68]	; 0x44
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6979      	ldr	r1, [r7, #20]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e6      	bne.n	8003fa6 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	f003 0310 	and.w	r3, r3, #16
 8003fe2:	2b10      	cmp	r3, #16
 8003fe4:	d103      	bne.n	8003fee <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2210      	movs	r2, #16
 8003fec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ff4:	4619      	mov	r1, r3
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7ff f9d4 	bl	80033a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ffc:	e00b      	b.n	8004016 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f7fc fa90 	bl	8000524 <HAL_UART_RxCpltCallback>
}
 8004004:	e007      	b.n	8004016 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699a      	ldr	r2, [r3, #24]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0208 	orr.w	r2, r2, #8
 8004014:	619a      	str	r2, [r3, #24]
}
 8004016:	bf00      	nop
 8004018:	3758      	adds	r7, #88	; 0x58
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}

0800401e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800401e:	b480      	push	{r7}
 8004020:	b083      	sub	sp, #12
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <_ZdlPvj>:
 8004032:	f000 b803 	b.w	800403c <_ZdlPv>

08004036 <__cxa_pure_virtual>:
 8004036:	b508      	push	{r3, lr}
 8004038:	f000 f80e 	bl	8004058 <_ZSt9terminatev>

0800403c <_ZdlPv>:
 800403c:	f000 b842 	b.w	80040c4 <free>

08004040 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004040:	b508      	push	{r3, lr}
 8004042:	4780      	blx	r0
 8004044:	f000 f80d 	bl	8004062 <abort>

08004048 <_ZSt13get_terminatev>:
 8004048:	4b02      	ldr	r3, [pc, #8]	; (8004054 <_ZSt13get_terminatev+0xc>)
 800404a:	6818      	ldr	r0, [r3, #0]
 800404c:	f3bf 8f5b 	dmb	ish
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	2000000c 	.word	0x2000000c

08004058 <_ZSt9terminatev>:
 8004058:	b508      	push	{r3, lr}
 800405a:	f7ff fff5 	bl	8004048 <_ZSt13get_terminatev>
 800405e:	f7ff ffef 	bl	8004040 <_ZN10__cxxabiv111__terminateEPFvvE>

08004062 <abort>:
 8004062:	b508      	push	{r3, lr}
 8004064:	2006      	movs	r0, #6
 8004066:	f000 f8b5 	bl	80041d4 <raise>
 800406a:	2001      	movs	r0, #1
 800406c:	f7fc fe8c 	bl	8000d88 <_exit>

08004070 <__errno>:
 8004070:	4b01      	ldr	r3, [pc, #4]	; (8004078 <__errno+0x8>)
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	4770      	bx	lr
 8004076:	bf00      	nop
 8004078:	20000010 	.word	0x20000010

0800407c <__libc_init_array>:
 800407c:	b570      	push	{r4, r5, r6, lr}
 800407e:	4d0d      	ldr	r5, [pc, #52]	; (80040b4 <__libc_init_array+0x38>)
 8004080:	4c0d      	ldr	r4, [pc, #52]	; (80040b8 <__libc_init_array+0x3c>)
 8004082:	1b64      	subs	r4, r4, r5
 8004084:	10a4      	asrs	r4, r4, #2
 8004086:	2600      	movs	r6, #0
 8004088:	42a6      	cmp	r6, r4
 800408a:	d109      	bne.n	80040a0 <__libc_init_array+0x24>
 800408c:	4d0b      	ldr	r5, [pc, #44]	; (80040bc <__libc_init_array+0x40>)
 800408e:	4c0c      	ldr	r4, [pc, #48]	; (80040c0 <__libc_init_array+0x44>)
 8004090:	f000 f8ca 	bl	8004228 <_init>
 8004094:	1b64      	subs	r4, r4, r5
 8004096:	10a4      	asrs	r4, r4, #2
 8004098:	2600      	movs	r6, #0
 800409a:	42a6      	cmp	r6, r4
 800409c:	d105      	bne.n	80040aa <__libc_init_array+0x2e>
 800409e:	bd70      	pop	{r4, r5, r6, pc}
 80040a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a4:	4798      	blx	r3
 80040a6:	3601      	adds	r6, #1
 80040a8:	e7ee      	b.n	8004088 <__libc_init_array+0xc>
 80040aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80040ae:	4798      	blx	r3
 80040b0:	3601      	adds	r6, #1
 80040b2:	e7f2      	b.n	800409a <__libc_init_array+0x1e>
 80040b4:	080042cc 	.word	0x080042cc
 80040b8:	080042cc 	.word	0x080042cc
 80040bc:	080042cc 	.word	0x080042cc
 80040c0:	080042d8 	.word	0x080042d8

080040c4 <free>:
 80040c4:	4b02      	ldr	r3, [pc, #8]	; (80040d0 <free+0xc>)
 80040c6:	4601      	mov	r1, r0
 80040c8:	6818      	ldr	r0, [r3, #0]
 80040ca:	f000 b80b 	b.w	80040e4 <_free_r>
 80040ce:	bf00      	nop
 80040d0:	20000010 	.word	0x20000010

080040d4 <memset>:
 80040d4:	4402      	add	r2, r0
 80040d6:	4603      	mov	r3, r0
 80040d8:	4293      	cmp	r3, r2
 80040da:	d100      	bne.n	80040de <memset+0xa>
 80040dc:	4770      	bx	lr
 80040de:	f803 1b01 	strb.w	r1, [r3], #1
 80040e2:	e7f9      	b.n	80040d8 <memset+0x4>

080040e4 <_free_r>:
 80040e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040e6:	2900      	cmp	r1, #0
 80040e8:	d048      	beq.n	800417c <_free_r+0x98>
 80040ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ee:	9001      	str	r0, [sp, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f1a1 0404 	sub.w	r4, r1, #4
 80040f6:	bfb8      	it	lt
 80040f8:	18e4      	addlt	r4, r4, r3
 80040fa:	f000 f887 	bl	800420c <__malloc_lock>
 80040fe:	4a20      	ldr	r2, [pc, #128]	; (8004180 <_free_r+0x9c>)
 8004100:	9801      	ldr	r0, [sp, #4]
 8004102:	6813      	ldr	r3, [r2, #0]
 8004104:	4615      	mov	r5, r2
 8004106:	b933      	cbnz	r3, 8004116 <_free_r+0x32>
 8004108:	6063      	str	r3, [r4, #4]
 800410a:	6014      	str	r4, [r2, #0]
 800410c:	b003      	add	sp, #12
 800410e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004112:	f000 b881 	b.w	8004218 <__malloc_unlock>
 8004116:	42a3      	cmp	r3, r4
 8004118:	d90b      	bls.n	8004132 <_free_r+0x4e>
 800411a:	6821      	ldr	r1, [r4, #0]
 800411c:	1862      	adds	r2, r4, r1
 800411e:	4293      	cmp	r3, r2
 8004120:	bf04      	itt	eq
 8004122:	681a      	ldreq	r2, [r3, #0]
 8004124:	685b      	ldreq	r3, [r3, #4]
 8004126:	6063      	str	r3, [r4, #4]
 8004128:	bf04      	itt	eq
 800412a:	1852      	addeq	r2, r2, r1
 800412c:	6022      	streq	r2, [r4, #0]
 800412e:	602c      	str	r4, [r5, #0]
 8004130:	e7ec      	b.n	800410c <_free_r+0x28>
 8004132:	461a      	mov	r2, r3
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	b10b      	cbz	r3, 800413c <_free_r+0x58>
 8004138:	42a3      	cmp	r3, r4
 800413a:	d9fa      	bls.n	8004132 <_free_r+0x4e>
 800413c:	6811      	ldr	r1, [r2, #0]
 800413e:	1855      	adds	r5, r2, r1
 8004140:	42a5      	cmp	r5, r4
 8004142:	d10b      	bne.n	800415c <_free_r+0x78>
 8004144:	6824      	ldr	r4, [r4, #0]
 8004146:	4421      	add	r1, r4
 8004148:	1854      	adds	r4, r2, r1
 800414a:	42a3      	cmp	r3, r4
 800414c:	6011      	str	r1, [r2, #0]
 800414e:	d1dd      	bne.n	800410c <_free_r+0x28>
 8004150:	681c      	ldr	r4, [r3, #0]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	6053      	str	r3, [r2, #4]
 8004156:	4421      	add	r1, r4
 8004158:	6011      	str	r1, [r2, #0]
 800415a:	e7d7      	b.n	800410c <_free_r+0x28>
 800415c:	d902      	bls.n	8004164 <_free_r+0x80>
 800415e:	230c      	movs	r3, #12
 8004160:	6003      	str	r3, [r0, #0]
 8004162:	e7d3      	b.n	800410c <_free_r+0x28>
 8004164:	6825      	ldr	r5, [r4, #0]
 8004166:	1961      	adds	r1, r4, r5
 8004168:	428b      	cmp	r3, r1
 800416a:	bf04      	itt	eq
 800416c:	6819      	ldreq	r1, [r3, #0]
 800416e:	685b      	ldreq	r3, [r3, #4]
 8004170:	6063      	str	r3, [r4, #4]
 8004172:	bf04      	itt	eq
 8004174:	1949      	addeq	r1, r1, r5
 8004176:	6021      	streq	r1, [r4, #0]
 8004178:	6054      	str	r4, [r2, #4]
 800417a:	e7c7      	b.n	800410c <_free_r+0x28>
 800417c:	b003      	add	sp, #12
 800417e:	bd30      	pop	{r4, r5, pc}
 8004180:	20000170 	.word	0x20000170

08004184 <_raise_r>:
 8004184:	291f      	cmp	r1, #31
 8004186:	b538      	push	{r3, r4, r5, lr}
 8004188:	4604      	mov	r4, r0
 800418a:	460d      	mov	r5, r1
 800418c:	d904      	bls.n	8004198 <_raise_r+0x14>
 800418e:	2316      	movs	r3, #22
 8004190:	6003      	str	r3, [r0, #0]
 8004192:	f04f 30ff 	mov.w	r0, #4294967295
 8004196:	bd38      	pop	{r3, r4, r5, pc}
 8004198:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800419a:	b112      	cbz	r2, 80041a2 <_raise_r+0x1e>
 800419c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80041a0:	b94b      	cbnz	r3, 80041b6 <_raise_r+0x32>
 80041a2:	4620      	mov	r0, r4
 80041a4:	f000 f830 	bl	8004208 <_getpid_r>
 80041a8:	462a      	mov	r2, r5
 80041aa:	4601      	mov	r1, r0
 80041ac:	4620      	mov	r0, r4
 80041ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80041b2:	f000 b817 	b.w	80041e4 <_kill_r>
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d00a      	beq.n	80041d0 <_raise_r+0x4c>
 80041ba:	1c59      	adds	r1, r3, #1
 80041bc:	d103      	bne.n	80041c6 <_raise_r+0x42>
 80041be:	2316      	movs	r3, #22
 80041c0:	6003      	str	r3, [r0, #0]
 80041c2:	2001      	movs	r0, #1
 80041c4:	e7e7      	b.n	8004196 <_raise_r+0x12>
 80041c6:	2400      	movs	r4, #0
 80041c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80041cc:	4628      	mov	r0, r5
 80041ce:	4798      	blx	r3
 80041d0:	2000      	movs	r0, #0
 80041d2:	e7e0      	b.n	8004196 <_raise_r+0x12>

080041d4 <raise>:
 80041d4:	4b02      	ldr	r3, [pc, #8]	; (80041e0 <raise+0xc>)
 80041d6:	4601      	mov	r1, r0
 80041d8:	6818      	ldr	r0, [r3, #0]
 80041da:	f7ff bfd3 	b.w	8004184 <_raise_r>
 80041de:	bf00      	nop
 80041e0:	20000010 	.word	0x20000010

080041e4 <_kill_r>:
 80041e4:	b538      	push	{r3, r4, r5, lr}
 80041e6:	4d07      	ldr	r5, [pc, #28]	; (8004204 <_kill_r+0x20>)
 80041e8:	2300      	movs	r3, #0
 80041ea:	4604      	mov	r4, r0
 80041ec:	4608      	mov	r0, r1
 80041ee:	4611      	mov	r1, r2
 80041f0:	602b      	str	r3, [r5, #0]
 80041f2:	f7fc fdb9 	bl	8000d68 <_kill>
 80041f6:	1c43      	adds	r3, r0, #1
 80041f8:	d102      	bne.n	8004200 <_kill_r+0x1c>
 80041fa:	682b      	ldr	r3, [r5, #0]
 80041fc:	b103      	cbz	r3, 8004200 <_kill_r+0x1c>
 80041fe:	6023      	str	r3, [r4, #0]
 8004200:	bd38      	pop	{r3, r4, r5, pc}
 8004202:	bf00      	nop
 8004204:	20000178 	.word	0x20000178

08004208 <_getpid_r>:
 8004208:	f7fc bda6 	b.w	8000d58 <_getpid>

0800420c <__malloc_lock>:
 800420c:	4801      	ldr	r0, [pc, #4]	; (8004214 <__malloc_lock+0x8>)
 800420e:	f000 b809 	b.w	8004224 <__retarget_lock_acquire_recursive>
 8004212:	bf00      	nop
 8004214:	20000180 	.word	0x20000180

08004218 <__malloc_unlock>:
 8004218:	4801      	ldr	r0, [pc, #4]	; (8004220 <__malloc_unlock+0x8>)
 800421a:	f000 b804 	b.w	8004226 <__retarget_lock_release_recursive>
 800421e:	bf00      	nop
 8004220:	20000180 	.word	0x20000180

08004224 <__retarget_lock_acquire_recursive>:
 8004224:	4770      	bx	lr

08004226 <__retarget_lock_release_recursive>:
 8004226:	4770      	bx	lr

08004228 <_init>:
 8004228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422a:	bf00      	nop
 800422c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422e:	bc08      	pop	{r3}
 8004230:	469e      	mov	lr, r3
 8004232:	4770      	bx	lr

08004234 <_fini>:
 8004234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004236:	bf00      	nop
 8004238:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800423a:	bc08      	pop	{r3}
 800423c:	469e      	mov	lr, r3
 800423e:	4770      	bx	lr
