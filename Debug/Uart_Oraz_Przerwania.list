
Uart_Oraz_Przerwania.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003248  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080033dc  080033dc  000133dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003468  08003468  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003468  08003468  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003468  08003468  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08003474  08003474  00013474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003480  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000074  080034f4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000180  080034f4  00020180  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fdc8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a65  00000000  00000000  0002fe6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  000328d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000858  00000000  00000000  00033218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023629  00000000  00000000  00033a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cefc  00000000  00000000  00057099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c2b9e  00000000  00000000  00063f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126b33  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027a8  00000000  00000000  00126b88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080033c4 	.word	0x080033c4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	080033c4 	.word	0x080033c4

080001d4 <_ZN5IGPIOC1Ev>:
 */

#ifndef INC_IGPIO_H_
#define INC_IGPIO_H_

class IGPIO {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <_ZN5IGPIOC1Ev+0x1c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4618      	mov	r0, r3
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	080033f8 	.word	0x080033f8

080001f4 <_ZN7CButtonC1Ev>:


#include <CButton.h>


CButton::CButton() {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4618      	mov	r0, r3
 8000200:	f7ff ffe8 	bl	80001d4 <_ZN5IGPIOC1Ev>
 8000204:	4a03      	ldr	r2, [pc, #12]	; (8000214 <_ZN7CButtonC1Ev+0x20>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4618      	mov	r0, r3
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	080033e4 	.word	0x080033e4

08000218 <_ZN7CButtonD1Ev>:

CButton::~CButton() {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	4a04      	ldr	r2, [pc, #16]	; (8000234 <_ZN7CButtonD1Ev+0x1c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4618      	mov	r0, r3
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	080033e4 	.word	0x080033e4

08000238 <_ZN7CButtonD0Ev>:
CButton::~CButton() {
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
}
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f7ff ffe9 	bl	8000218 <_ZN7CButtonD1Ev>
 8000246:	211c      	movs	r1, #28
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f002 ffc0 	bl	80031ce <_ZdlPvj>
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4618      	mov	r0, r3
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}

08000258 <_ZN7CButton4initEP12GPIO_TypeDeftm>:

void CButton::init(GPIO_TypeDef* GpioPort, uint16_t GpioPin, uint32_t timerDebounce)
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	603b      	str	r3, [r7, #0]
 8000264:	4613      	mov	r3, r2
 8000266:	80fb      	strh	r3, [r7, #6]
	this->GpioPort 	= GpioPort;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	605a      	str	r2, [r3, #4]
	this->GpioPin 	= GpioPin;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	88fa      	ldrh	r2, [r7, #6]
 8000272:	811a      	strh	r2, [r3, #8]
	m_timerDebounce = timerDebounce;
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	683a      	ldr	r2, [r7, #0]
 8000278:	611a      	str	r2, [r3, #16]
	state 			= idle;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	2200      	movs	r2, #0
 800027e:	751a      	strb	r2, [r3, #20]
}
 8000280:	bf00      	nop
 8000282:	3714      	adds	r7, #20
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr

0800028c <_ZN7CButton6updateEv>:

void CButton::update()
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	switch(state)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	7d1b      	ldrb	r3, [r3, #20]
 8000298:	2b02      	cmp	r3, #2
 800029a:	d04b      	beq.n	8000334 <_ZN7CButton6updateEv+0xa8>
 800029c:	2b02      	cmp	r3, #2
 800029e:	dc62      	bgt.n	8000366 <_ZN7CButton6updateEv+0xda>
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d002      	beq.n	80002aa <_ZN7CButton6updateEv+0x1e>
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d019      	beq.n	80002dc <_ZN7CButton6updateEv+0x50>
			{
				state = idle;
			}
			break;
	}
}
 80002a8:	e05d      	b.n	8000366 <_ZN7CButton6updateEv+0xda>
			if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	891b      	ldrh	r3, [r3, #8]
 80002b2:	4619      	mov	r1, r3
 80002b4:	4610      	mov	r0, r2
 80002b6:	f000 ffeb 	bl	8001290 <HAL_GPIO_ReadPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	bf0c      	ite	eq
 80002c0:	2301      	moveq	r3, #1
 80002c2:	2300      	movne	r3, #0
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d048      	beq.n	800035c <_ZN7CButton6updateEv+0xd0>
				state = debounce;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2201      	movs	r2, #1
 80002ce:	751a      	strb	r2, [r3, #20]
				m_lastTick = HAL_GetTick();
 80002d0:	f000 fd36 	bl	8000d40 <HAL_GetTick>
 80002d4:	4602      	mov	r2, r0
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	60da      	str	r2, [r3, #12]
			break;
 80002da:	e03f      	b.n	800035c <_ZN7CButton6updateEv+0xd0>
			if((HAL_GetTick() - m_lastTick) > m_timerDebounce)
 80002dc:	f000 fd30 	bl	8000d40 <HAL_GetTick>
 80002e0:	4602      	mov	r2, r0
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	1ad2      	subs	r2, r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	bf8c      	ite	hi
 80002f0:	2301      	movhi	r3, #1
 80002f2:	2300      	movls	r3, #0
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d032      	beq.n	8000360 <_ZN7CButton6updateEv+0xd4>
				if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	685a      	ldr	r2, [r3, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	891b      	ldrh	r3, [r3, #8]
 8000302:	4619      	mov	r1, r3
 8000304:	4610      	mov	r0, r2
 8000306:	f000 ffc3 	bl	8001290 <HAL_GPIO_ReadPin>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	bf0c      	ite	eq
 8000310:	2301      	moveq	r3, #1
 8000312:	2300      	movne	r3, #0
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d008      	beq.n	800032c <_ZN7CButton6updateEv+0xa0>
					state = pressed;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2202      	movs	r2, #2
 800031e:	751a      	strb	r2, [r3, #20]
					m_lastTick = HAL_GetTick();
 8000320:	f000 fd0e 	bl	8000d40 <HAL_GetTick>
 8000324:	4602      	mov	r2, r0
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	60da      	str	r2, [r3, #12]
			break;
 800032a:	e019      	b.n	8000360 <_ZN7CButton6updateEv+0xd4>
					state = idle;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2200      	movs	r2, #0
 8000330:	751a      	strb	r2, [r3, #20]
			break;
 8000332:	e015      	b.n	8000360 <_ZN7CButton6updateEv+0xd4>
			if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	685a      	ldr	r2, [r3, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	891b      	ldrh	r3, [r3, #8]
 800033c:	4619      	mov	r1, r3
 800033e:	4610      	mov	r0, r2
 8000340:	f000 ffa6 	bl	8001290 <HAL_GPIO_ReadPin>
 8000344:	4603      	mov	r3, r0
 8000346:	2b01      	cmp	r3, #1
 8000348:	bf0c      	ite	eq
 800034a:	2301      	moveq	r3, #1
 800034c:	2300      	movne	r3, #0
 800034e:	b2db      	uxtb	r3, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	d007      	beq.n	8000364 <_ZN7CButton6updateEv+0xd8>
				state = idle;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2200      	movs	r2, #0
 8000358:	751a      	strb	r2, [r3, #20]
			break;
 800035a:	e003      	b.n	8000364 <_ZN7CButton6updateEv+0xd8>
			break;
 800035c:	bf00      	nop
 800035e:	e002      	b.n	8000366 <_ZN7CButton6updateEv+0xda>
			break;
 8000360:	bf00      	nop
 8000362:	e000      	b.n	8000366 <_ZN7CButton6updateEv+0xda>
			break;
 8000364:	bf00      	nop
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <_ZN7CHelper7getUartEv>:

	//functions
	static void Error_Handler();

	static UART_HandleTypeDef huart2;
	static inline UART_HandleTypeDef* getUart() {return &huart2;}
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
 8000374:	4b02      	ldr	r3, [pc, #8]	; (8000380 <_ZN7CHelper7getUartEv+0x10>)
 8000376:	4618      	mov	r0, r3
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	200000e0 	.word	0x200000e0

08000384 <_ZN7CDriverC1Ev>:
CLed CDriver::m_greenLed;
CButton CDriver::m_blueButton;
CStateMachineLed CDriver::m_stateMachineLed;


CDriver::CDriver()
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
{
}
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4618      	mov	r0, r3
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr

0800039a <_ZN7CDriverD1Ev>:
CDriver::~CDriver()
 800039a:	b480      	push	{r7}
 800039c:	b083      	sub	sp, #12
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
{
}
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4618      	mov	r0, r3
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <_ZN7CDriver4initEv>:

void CDriver::init()
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	m_uartDriver.init(CHelper::getUart());
 80003b8:	f7ff ffda 	bl	8000370 <_ZN7CHelper7getUartEv>
 80003bc:	4603      	mov	r3, r0
 80003be:	4619      	mov	r1, r3
 80003c0:	480d      	ldr	r0, [pc, #52]	; (80003f8 <_ZN7CDriver4initEv+0x48>)
 80003c2:	f000 fb13 	bl	80009ec <_ZN11CUartDriver4initEP20__UART_HandleTypeDef>

	m_greenLed.init(LD2_GPIO_Port, LD2_Pin, CLed::LedStates::on);
 80003c6:	2300      	movs	r3, #0
 80003c8:	2220      	movs	r2, #32
 80003ca:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003ce:	480b      	ldr	r0, [pc, #44]	; (80003fc <_ZN7CDriver4initEv+0x4c>)
 80003d0:	f000 fa08 	bl	80007e4 <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>
	m_blueButton.init(B1_GPIO_Port, B1_Pin, 20);
 80003d4:	2314      	movs	r3, #20
 80003d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003da:	4909      	ldr	r1, [pc, #36]	; (8000400 <_ZN7CDriver4initEv+0x50>)
 80003dc:	4809      	ldr	r0, [pc, #36]	; (8000404 <_ZN7CDriver4initEv+0x54>)
 80003de:	f7ff ff3b 	bl	8000258 <_ZN7CButton4initEP12GPIO_TypeDeftm>
	m_stateMachineLed.init(&m_greenLed,&m_blueButton,&m_uartDriver);
 80003e2:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <_ZN7CDriver4initEv+0x48>)
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <_ZN7CDriver4initEv+0x54>)
 80003e6:	4905      	ldr	r1, [pc, #20]	; (80003fc <_ZN7CDriver4initEv+0x4c>)
 80003e8:	4807      	ldr	r0, [pc, #28]	; (8000408 <_ZN7CDriver4initEv+0x58>)
 80003ea:	f000 fab9 	bl	8000960 <_ZN16CStateMachineLed4initEP4CLedP7CButtonP11CUartDriver>
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000090 	.word	0x20000090
 80003fc:	2000009c 	.word	0x2000009c
 8000400:	48000800 	.word	0x48000800
 8000404:	200000b4 	.word	0x200000b4
 8000408:	200000d0 	.word	0x200000d0

0800040c <_Z41__static_initialization_and_destruction_0ii>:
	m_uartDriver.transmitIT((uint8_t*)message, strlen(message));
	m_greenLed.togglePin();
	HAL_Delay(100);


}
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	6039      	str	r1, [r7, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d110      	bne.n	800043e <_Z41__static_initialization_and_destruction_0ii+0x32>
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000422:	4293      	cmp	r3, r2
 8000424:	d10b      	bne.n	800043e <_Z41__static_initialization_and_destruction_0ii+0x32>
CUartDriver CDriver::m_uartDriver;
 8000426:	4812      	ldr	r0, [pc, #72]	; (8000470 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000428:	f000 fab0 	bl	800098c <_ZN11CUartDriverC1Ev>
CLed CDriver::m_greenLed;
 800042c:	4811      	ldr	r0, [pc, #68]	; (8000474 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800042e:	f000 f9a7 	bl	8000780 <_ZN4CLedC1Ev>
CButton CDriver::m_blueButton;
 8000432:	4811      	ldr	r0, [pc, #68]	; (8000478 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000434:	f7ff fede 	bl	80001f4 <_ZN7CButtonC1Ev>
CStateMachineLed CDriver::m_stateMachineLed;
 8000438:	4810      	ldr	r0, [pc, #64]	; (800047c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800043a:	f000 fa61 	bl	8000900 <_ZN16CStateMachineLedC1Ev>
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2b00      	cmp	r3, #0
 8000442:	d110      	bne.n	8000466 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8000444:	683b      	ldr	r3, [r7, #0]
 8000446:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800044a:	4293      	cmp	r3, r2
 800044c:	d10b      	bne.n	8000466 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 800044e:	480b      	ldr	r0, [pc, #44]	; (800047c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000450:	f000 fa66 	bl	8000920 <_ZN16CStateMachineLedD1Ev>
CButton CDriver::m_blueButton;
 8000454:	4808      	ldr	r0, [pc, #32]	; (8000478 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000456:	f7ff fedf 	bl	8000218 <_ZN7CButtonD1Ev>
CLed CDriver::m_greenLed;
 800045a:	4806      	ldr	r0, [pc, #24]	; (8000474 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800045c:	f000 f9a2 	bl	80007a4 <_ZN4CLedD1Ev>
CUartDriver CDriver::m_uartDriver;
 8000460:	4803      	ldr	r0, [pc, #12]	; (8000470 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000462:	f000 faa3 	bl	80009ac <_ZN11CUartDriverD1Ev>
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000090 	.word	0x20000090
 8000474:	2000009c 	.word	0x2000009c
 8000478:	200000b4 	.word	0x200000b4
 800047c:	200000d0 	.word	0x200000d0

08000480 <_GLOBAL__sub_I__ZN7CDriver12driverBufferE>:
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
 8000484:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000488:	2001      	movs	r0, #1
 800048a:	f7ff ffbf 	bl	800040c <_Z41__static_initialization_and_destruction_0ii>
 800048e:	bd80      	pop	{r7, pc}

08000490 <_GLOBAL__sub_D__ZN7CDriver12driverBufferE>:
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
 8000494:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000498:	2000      	movs	r0, #0
 800049a:	f7ff ffb7 	bl	800040c <_Z41__static_initialization_and_destruction_0ii>
 800049e:	bd80      	pop	{r7, pc}

080004a0 <_ZN7CHelper4initEv>:

UART_HandleTypeDef CHelper::huart2;


void CHelper::init()
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
	SystemClock_Config();
 80004a4:	f000 f8fa 	bl	800069c <_ZN7CHelper18SystemClock_ConfigEv>
	MX_GPIO_Init();
 80004a8:	f000 f822 	bl	80004f0 <_ZN7CHelper12MX_GPIO_InitEv>
	MX_USART2_UART_Init();
 80004ac:	f000 f8c2 	bl	8000634 <_ZN7CHelper19MX_USART2_UART_InitEv>
	MX_NVIC_Init();
 80004b0:	f000 f8ac 	bl	800060c <_ZN7CHelper12MX_NVIC_InitEv>
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Mybutton_Pin)
 80004c2:	88fb      	ldrh	r3, [r7, #6]
 80004c4:	2b01      	cmp	r3, #1
 80004c6:	d103      	bne.n	80004d0 <HAL_GPIO_EXTI_Callback+0x18>
	{
		HAL_GPIO_TogglePin(Reddiode_GPIO_Port, Reddiode_Pin);
 80004c8:	2102      	movs	r1, #2
 80004ca:	4808      	ldr	r0, [pc, #32]	; (80004ec <HAL_GPIO_EXTI_Callback+0x34>)
 80004cc:	f000 ff10 	bl	80012f0 <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == B1_Pin)
 80004d0:	88fb      	ldrh	r3, [r7, #6]
 80004d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004d6:	d104      	bne.n	80004e2 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004d8:	2120      	movs	r1, #32
 80004da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004de:	f000 ff07 	bl	80012f0 <HAL_GPIO_TogglePin>
	}
}
 80004e2:	bf00      	nop
 80004e4:	3708      	adds	r7, #8
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	48000800 	.word	0x48000800

080004f0 <_ZN7CHelper12MX_GPIO_InitEv>:

	}
}

void CHelper::MX_GPIO_Init()
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f6:	f107 0314 	add.w	r3, r7, #20
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
 80004fe:	605a      	str	r2, [r3, #4]
 8000500:	609a      	str	r2, [r3, #8]
 8000502:	60da      	str	r2, [r3, #12]
 8000504:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	4b3f      	ldr	r3, [pc, #252]	; (8000604 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a3e      	ldr	r2, [pc, #248]	; (8000604 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800050c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000510:	6153      	str	r3, [r2, #20]
 8000512:	4b3c      	ldr	r3, [pc, #240]	; (8000604 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800051e:	4b39      	ldr	r3, [pc, #228]	; (8000604 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000520:	695b      	ldr	r3, [r3, #20]
 8000522:	4a38      	ldr	r2, [pc, #224]	; (8000604 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000524:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000528:	6153      	str	r3, [r2, #20]
 800052a:	4b36      	ldr	r3, [pc, #216]	; (8000604 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800052c:	695b      	ldr	r3, [r3, #20]
 800052e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000532:	60fb      	str	r3, [r7, #12]
 8000534:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b33      	ldr	r3, [pc, #204]	; (8000604 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a32      	ldr	r2, [pc, #200]	; (8000604 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800053c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b30      	ldr	r3, [pc, #192]	; (8000604 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800054a:	60bb      	str	r3, [r7, #8]
 800054c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	4b2d      	ldr	r3, [pc, #180]	; (8000604 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a2c      	ldr	r2, [pc, #176]	; (8000604 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000554:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000562:	607b      	str	r3, [r7, #4]
 8000564:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Reddiode_GPIO_Port, Reddiode_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2102      	movs	r1, #2
 800056a:	4827      	ldr	r0, [pc, #156]	; (8000608 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 800056c:	f000 fea8 	bl	80012c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000570:	2200      	movs	r2, #0
 8000572:	2120      	movs	r1, #32
 8000574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000578:	f000 fea2 	bl	80012c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800057c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000580:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000582:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000586:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800058c:	f107 0314 	add.w	r3, r7, #20
 8000590:	4619      	mov	r1, r3
 8000592:	481d      	ldr	r0, [pc, #116]	; (8000608 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 8000594:	f000 fcf2 	bl	8000f7c <HAL_GPIO_Init>

	/*Configure GPIO pin : Mybutton_Pin */
	GPIO_InitStruct.Pin = Mybutton_Pin;
 8000598:	2301      	movs	r3, #1
 800059a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800059c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005a0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Mybutton_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	4619      	mov	r1, r3
 80005ac:	4816      	ldr	r0, [pc, #88]	; (8000608 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80005ae:	f000 fce5 	bl	8000f7c <HAL_GPIO_Init>

	/*Configure GPIO pin : Reddiode_Pin */
	GPIO_InitStruct.Pin = Reddiode_Pin;
 80005b2:	2302      	movs	r3, #2
 80005b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Reddiode_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	480f      	ldr	r0, [pc, #60]	; (8000608 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80005ca:	f000 fcd7 	bl	8000f7c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80005ce:	2320      	movs	r3, #32
 80005d0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005de:	f107 0314 	add.w	r3, r7, #20
 80005e2:	4619      	mov	r1, r3
 80005e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e8:	f000 fcc8 	bl	8000f7c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2100      	movs	r1, #0
 80005f0:	2006      	movs	r0, #6
 80005f2:	f000 fc8c 	bl	8000f0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005f6:	2006      	movs	r0, #6
 80005f8:	f000 fca5 	bl	8000f46 <HAL_NVIC_EnableIRQ>
}
 80005fc:	bf00      	nop
 80005fe:	3728      	adds	r7, #40	; 0x28
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40021000 	.word	0x40021000
 8000608:	48000800 	.word	0x48000800

0800060c <_ZN7CHelper12MX_NVIC_InitEv>:

void CHelper::MX_NVIC_Init()
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	2100      	movs	r1, #0
 8000614:	2028      	movs	r0, #40	; 0x28
 8000616:	f000 fc7a 	bl	8000f0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800061a:	2028      	movs	r0, #40	; 0x28
 800061c:	f000 fc93 	bl	8000f46 <HAL_NVIC_EnableIRQ>

	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2100      	movs	r1, #0
 8000624:	2026      	movs	r0, #38	; 0x26
 8000626:	f000 fc72 	bl	8000f0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800062a:	2026      	movs	r0, #38	; 0x26
 800062c:	f000 fc8b 	bl	8000f46 <HAL_NVIC_EnableIRQ>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <_ZN7CHelper19MX_USART2_UART_InitEv>:

void CHelper::MX_USART2_UART_Init()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 800063a:	4a17      	ldr	r2, [pc, #92]	; (8000698 <_ZN7CHelper19MX_USART2_UART_InitEv+0x64>)
 800063c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000640:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000644:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000678:	f002 f9d6 	bl	8002a28 <HAL_UART_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	bf14      	ite	ne
 8000682:	2301      	movne	r3, #1
 8000684:	2300      	moveq	r3, #0
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <_ZN7CHelper19MX_USART2_UART_InitEv+0x5c>
	{
		Error_Handler();
 800068c:	f000 f873 	bl	8000776 <_ZN7CHelper13Error_HandlerEv>
	}
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000e0 	.word	0x200000e0
 8000698:	40004400 	.word	0x40004400

0800069c <_ZN7CHelper18SystemClock_ConfigEv>:

void CHelper::SystemClock_Config()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0a6      	sub	sp, #152	; 0x98
 80006a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006a6:	2228      	movs	r2, #40	; 0x28
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 fde0 	bl	8003270 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2258      	movs	r2, #88	; 0x58
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fdd2 	bl	8003270 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2310      	movs	r3, #16
 80006d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fe2a 	bl	8001354 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	bf14      	ite	ne
 8000706:	2301      	movne	r3, #1
 8000708:	2300      	moveq	r3, #0
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <_ZN7CHelper18SystemClock_ConfigEv+0x78>
	{
	Error_Handler();
 8000710:	f000 f831 	bl	8000776 <_ZN7CHelper13Error_HandlerEv>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	65fb      	str	r3, [r7, #92]	; 0x5c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000724:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800072e:	2102      	movs	r1, #2
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fd25 	bl	8002180 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <_ZN7CHelper18SystemClock_ConfigEv+0xae>
	{
	Error_Handler();
 8000746:	f000 f816 	bl	8000776 <_ZN7CHelper13Error_HandlerEv>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800074a:	2302      	movs	r3, #2
 800074c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4618      	mov	r0, r3
 8000756:	f001 ff49 	bl	80025ec <HAL_RCCEx_PeriphCLKConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <_ZN7CHelper18SystemClock_ConfigEv+0xd2>
	{
	Error_Handler();
 800076a:	f000 f804 	bl	8000776 <_ZN7CHelper13Error_HandlerEv>
	}
}
 800076e:	bf00      	nop
 8000770:	3798      	adds	r7, #152	; 0x98
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <_ZN7CHelper13Error_HandlerEv>:

void CHelper::Error_Handler()
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077a:	b672      	cpsid	i
}
 800077c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800077e:	e7fe      	b.n	800077e <_ZN7CHelper13Error_HandlerEv+0x8>

08000780 <_ZN4CLedC1Ev>:
 *      Author: Konra
 */

#include <CLed.h>

CLed::CLed() {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fd22 	bl	80001d4 <_ZN5IGPIOC1Ev>
 8000790:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <_ZN4CLedC1Ev+0x20>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	08003404 	.word	0x08003404

080007a4 <_ZN4CLedD1Ev>:

CLed::~CLed() {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <_ZN4CLedD1Ev+0x1c>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	08003404 	.word	0x08003404

080007c4 <_ZN4CLedD0Ev>:
CLed::~CLed() {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
}
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ffe9 	bl	80007a4 <_ZN4CLedD1Ev>
 80007d2:	2118      	movs	r1, #24
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f002 fcfa 	bl	80031ce <_ZdlPvj>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>:

void CLed::init(GPIO_TypeDef* GpioPort, uint16_t GpioPin, LedStates state = off)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	4611      	mov	r1, r2
 80007f0:	461a      	mov	r2, r3
 80007f2:	460b      	mov	r3, r1
 80007f4:	80fb      	strh	r3, [r7, #6]
 80007f6:	4613      	mov	r3, r2
 80007f8:	717b      	strb	r3, [r7, #5]
	this->GpioPort 	= GpioPort;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	68ba      	ldr	r2, [r7, #8]
 80007fe:	605a      	str	r2, [r3, #4]
	this->GpioPin 	= GpioPin;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	811a      	strh	r2, [r3, #8]
	this->state 	= state;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	797a      	ldrb	r2, [r7, #5]
 800080a:	729a      	strb	r2, [r3, #10]
	m_timerToggle 	= 500;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000812:	60da      	str	r2, [r3, #12]
	m_enter 		= false;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2200      	movs	r2, #0
 8000818:	751a      	strb	r2, [r3, #20]
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <_ZN4CLed6updateEv>:
void CLed::update()
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
	switch(state)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7a9b      	ldrb	r3, [r3, #10]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d00e      	beq.n	8000854 <_ZN4CLed6updateEv+0x2e>
 8000836:	2b02      	cmp	r3, #2
 8000838:	dc2e      	bgt.n	8000898 <_ZN4CLed6updateEv+0x72>
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <_ZN4CLed6updateEv+0x1e>
 800083e:	2b01      	cmp	r3, #1
 8000840:	d004      	beq.n	800084c <_ZN4CLed6updateEv+0x26>
				m_enter = false;
			}

			break;
	}
}
 8000842:	e029      	b.n	8000898 <_ZN4CLed6updateEv+0x72>
			turnOnLed();
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 f83b 	bl	80008c0 <_ZN4CLed9turnOnLedEv>
			break;
 800084a:	e025      	b.n	8000898 <_ZN4CLed6updateEv+0x72>
			turnOffLed();
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 f847 	bl	80008e0 <_ZN4CLed10turnOffLedEv>
			break;
 8000852:	e021      	b.n	8000898 <_ZN4CLed6updateEv+0x72>
			if(m_enter == false)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7d1b      	ldrb	r3, [r3, #20]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d107      	bne.n	800086c <_ZN4CLed6updateEv+0x46>
				m_lastTick = HAL_GetTick();
 800085c:	f000 fa70 	bl	8000d40 <HAL_GetTick>
 8000860:	4602      	mov	r2, r0
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	611a      	str	r2, [r3, #16]
				m_enter = true;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2201      	movs	r2, #1
 800086a:	751a      	strb	r2, [r3, #20]
			if((HAL_GetTick() - m_lastTick) > m_timerToggle)
 800086c:	f000 fa68 	bl	8000d40 <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	691b      	ldr	r3, [r3, #16]
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	bf8c      	ite	hi
 8000880:	2301      	movhi	r3, #1
 8000882:	2300      	movls	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d005      	beq.n	8000896 <_ZN4CLed6updateEv+0x70>
				togglePin();
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 f808 	bl	80008a0 <_ZN4CLed9togglePinEv>
				m_enter = false;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	751a      	strb	r2, [r3, #20]
			break;
 8000896:	bf00      	nop
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <_ZN4CLed9togglePinEv>:
void CLed::togglePin()
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GpioPort, GpioPin);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	891b      	ldrh	r3, [r3, #8]
 80008b0:	4619      	mov	r1, r3
 80008b2:	4610      	mov	r0, r2
 80008b4:	f000 fd1c 	bl	80012f0 <HAL_GPIO_TogglePin>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_ZN4CLed9turnOnLedEv>:

void CLed::turnOnLed()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GpioPort, GpioPin, GPIO_PIN_SET);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6858      	ldr	r0, [r3, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	891b      	ldrh	r3, [r3, #8]
 80008d0:	2201      	movs	r2, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	f000 fcf4 	bl	80012c0 <HAL_GPIO_WritePin>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_ZN4CLed10turnOffLedEv>:

void CLed::turnOffLed()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GpioPort, GpioPin, GPIO_PIN_RESET);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6858      	ldr	r0, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	891b      	ldrh	r3, [r3, #8]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4619      	mov	r1, r3
 80008f4:	f000 fce4 	bl	80012c0 <HAL_GPIO_WritePin>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <_ZN16CStateMachineLedC1Ev>:
#include "stdio.h"


uint8_t CStateMachineLed::buffer[32];

CStateMachineLed::CStateMachineLed() {
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	4a04      	ldr	r2, [pc, #16]	; (800091c <_ZN16CStateMachineLedC1Ev+0x1c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr
 800091c:	08003418 	.word	0x08003418

08000920 <_ZN16CStateMachineLedD1Ev>:

CStateMachineLed::~CStateMachineLed() {
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	4a04      	ldr	r2, [pc, #16]	; (800093c <_ZN16CStateMachineLedD1Ev+0x1c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4618      	mov	r0, r3
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	08003418 	.word	0x08003418

08000940 <_ZN16CStateMachineLedD0Ev>:
CStateMachineLed::~CStateMachineLed() {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
}
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff ffe9 	bl	8000920 <_ZN16CStateMachineLedD1Ev>
 800094e:	2110      	movs	r1, #16
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f002 fc3c 	bl	80031ce <_ZdlPvj>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <_ZN16CStateMachineLed4initEP4CLedP7CButtonP11CUartDriver>:

void CStateMachineLed::init(CLed* led, CButton* button, CUartDriver* uart)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	60b9      	str	r1, [r7, #8]
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	603b      	str	r3, [r7, #0]
	this->led 		= led;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	605a      	str	r2, [r3, #4]
	this->button 	= button;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	609a      	str	r2, [r3, #8]
	this->uart 		= uart;
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	683a      	ldr	r2, [r7, #0]
 800097e:	60da      	str	r2, [r3, #12]
}
 8000980:	bf00      	nop
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr

0800098c <_ZN11CUartDriverC1Ev>:
 *      Author: Konra
 */

#include <CUartDriver.h>

CUartDriver::CUartDriver() {
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	4a04      	ldr	r2, [pc, #16]	; (80009a8 <_ZN11CUartDriverC1Ev+0x1c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	4618      	mov	r0, r3
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	08003428 	.word	0x08003428

080009ac <_ZN11CUartDriverD1Ev>:

CUartDriver::~CUartDriver() {
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <_ZN11CUartDriverD1Ev+0x1c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	08003428 	.word	0x08003428

080009cc <_ZN11CUartDriverD0Ev>:
CUartDriver::~CUartDriver() {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
}
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ffe9 	bl	80009ac <_ZN11CUartDriverD1Ev>
 80009da:	210c      	movs	r1, #12
 80009dc:	6878      	ldr	r0, [r7, #4]
 80009de:	f002 fbf6 	bl	80031ce <_ZdlPvj>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}

080009ec <_ZN11CUartDriver4initEP20__UART_HandleTypeDef>:

void CUartDriver::init(UART_HandleTypeDef* m_uartDriver)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	6039      	str	r1, [r7, #0]
	this->m_uartDriver = m_uartDriver;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	683a      	ldr	r2, [r7, #0]
 80009fa:	609a      	str	r2, [r3, #8]
}
 80009fc:	bf00      	nop
 80009fe:	370c      	adds	r7, #12
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0c:	f000 f93e 	bl	8000c8c <HAL_Init>

  /* USER CODE BEGIN Init */
  CHelper::init();
 8000a10:	f7ff fd46 	bl	80004a0 <_ZN7CHelper4initEv>
  m_driver.init();
 8000a14:	4801      	ldr	r0, [pc, #4]	; (8000a1c <main+0x14>)
 8000a16:	f7ff fccb 	bl	80003b0 <_ZN7CDriver4initEv>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <main+0x12>
 8000a1c:	20000164 	.word	0x20000164

08000a20 <_Z41__static_initialization_and_destruction_0ii>:
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d107      	bne.n	8000a40 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d102      	bne.n	8000a40 <_Z41__static_initialization_and_destruction_0ii+0x20>
CDriver m_driver;
 8000a3a:	4809      	ldr	r0, [pc, #36]	; (8000a60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000a3c:	f7ff fca2 	bl	8000384 <_ZN7CDriverC1Ev>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d107      	bne.n	8000a56 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d102      	bne.n	8000a56 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000a50:	4803      	ldr	r0, [pc, #12]	; (8000a60 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000a52:	f7ff fca2 	bl	800039a <_ZN7CDriverD1Ev>
}
 8000a56:	bf00      	nop
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000164 	.word	0x20000164

08000a64 <_GLOBAL__sub_I_m_driver>:
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
 8000a68:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	f7ff ffd7 	bl	8000a20 <_Z41__static_initialization_and_destruction_0ii>
 8000a72:	bd80      	pop	{r7, pc}

08000a74 <_GLOBAL__sub_D_m_driver>:
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f7ff ffcf 	bl	8000a20 <_Z41__static_initialization_and_destruction_0ii>
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a8c:	699b      	ldr	r3, [r3, #24]
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	6193      	str	r3, [r2, #24]
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_MspInit+0x44>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f003 0301 	and.w	r3, r3, #1
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_MspInit+0x44>)
 8000aa4:	69db      	ldr	r3, [r3, #28]
 8000aa6:	4a08      	ldr	r2, [pc, #32]	; (8000ac8 <HAL_MspInit+0x44>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aac:	61d3      	str	r3, [r2, #28]
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_MspInit+0x44>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aba:	2007      	movs	r0, #7
 8000abc:	f000 fa1c 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40021000 	.word	0x40021000

08000acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	; 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a17      	ldr	r2, [pc, #92]	; (8000b48 <HAL_UART_MspInit+0x7c>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d128      	bne.n	8000b40 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000af0:	69db      	ldr	r3, [r3, #28]
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af8:	61d3      	str	r3, [r2, #28]
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b02:	613b      	str	r3, [r7, #16]
 8000b04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	6153      	str	r3, [r2, #20]
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_UART_MspInit+0x80>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b1e:	230c      	movs	r3, #12
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3c:	f000 fa1e 	bl	8000f7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	; 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40004400 	.word	0x40004400
 8000b4c:	40021000 	.word	0x40021000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <NMI_Handler+0x4>

08000b56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <HardFault_Handler+0x4>

08000b5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <MemManage_Handler+0x4>

08000b62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <BusFault_Handler+0x4>

08000b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b6c:	e7fe      	b.n	8000b6c <UsageFault_Handler+0x4>

08000b6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b9c:	f000 f8bc 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f000 fbbb 	bl	8001324 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_IRQn 0 */
  //HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000bc4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bc8:	f000 fbac 	bl	8001324 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
	return 1;
 8000bd4:	2301      	movs	r3, #1
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr

08000be0 <_kill>:

int _kill(int pid, int sig)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000bea:	f002 fb0f 	bl	800320c <__errno>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2216      	movs	r2, #22
 8000bf2:	601a      	str	r2, [r3, #0]
	return -1;
 8000bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <_exit>:

void _exit (int status)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c08:	f04f 31ff 	mov.w	r1, #4294967295
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff ffe7 	bl	8000be0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c12:	e7fe      	b.n	8000c12 <_exit+0x12>

08000c14 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <SystemInit+0x20>)
 8000c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c1e:	4a05      	ldr	r2, [pc, #20]	; (8000c34 <SystemInit+0x20>)
 8000c20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c70 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c3e:	490e      	ldr	r1, [pc, #56]	; (8000c78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c40:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <LoopForever+0xe>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0b      	ldr	r2, [pc, #44]	; (8000c80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c54:	4c0b      	ldr	r4, [pc, #44]	; (8000c84 <LoopForever+0x16>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c62:	f7ff ffd7 	bl	8000c14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c66:	f002 fad7 	bl	8003218 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c6a:	f7ff fecd 	bl	8000a08 <main>

08000c6e <LoopForever>:

LoopForever:
    b LoopForever
 8000c6e:	e7fe      	b.n	8000c6e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c70:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c78:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c7c:	08003480 	.word	0x08003480
  ldr r2, =_sbss
 8000c80:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c84:	20000180 	.word	0x20000180

08000c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c88:	e7fe      	b.n	8000c88 <ADC1_2_IRQHandler>
	...

08000c8c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <HAL_Init+0x28>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	; (8000cb4 <HAL_Init+0x28>)
 8000c96:	f043 0310 	orr.w	r3, r3, #16
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 f92b 	bl	8000ef8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff feec 	bl	8000a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40022000 	.word	0x40022000

08000cb8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	; (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 f943 	bl	8000f62 <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f000 f90b 	bl	8000f0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	; (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000000 	.word	0x20000000
 8000d10:	20000008 	.word	0x20000008
 8000d14:	20000004 	.word	0x20000004

08000d18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	; (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	2000016c 	.word	0x2000016c

08000d40 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d44:	4b03      	ldr	r3, [pc, #12]	; (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	2000016c 	.word	0x2000016c

08000d58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b085      	sub	sp, #20
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f003 0307 	and.w	r3, r3, #7
 8000d66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d74:	4013      	ands	r3, r2
 8000d76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8a:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <__NVIC_SetPriorityGrouping+0x44>)
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	60d3      	str	r3, [r2, #12]
}
 8000d90:	bf00      	nop
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <__NVIC_GetPriorityGrouping+0x18>)
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	0a1b      	lsrs	r3, r3, #8
 8000daa:	f003 0307 	and.w	r3, r3, #7
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	db0b      	blt.n	8000de6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	f003 021f 	and.w	r2, r3, #31
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <__NVIC_EnableIRQ+0x38>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	095b      	lsrs	r3, r3, #5
 8000ddc:	2001      	movs	r0, #1
 8000dde:	fa00 f202 	lsl.w	r2, r0, r2
 8000de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000e100 	.word	0xe000e100

08000df8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	6039      	str	r1, [r7, #0]
 8000e02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	db0a      	blt.n	8000e22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	b2da      	uxtb	r2, r3
 8000e10:	490c      	ldr	r1, [pc, #48]	; (8000e44 <__NVIC_SetPriority+0x4c>)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	0112      	lsls	r2, r2, #4
 8000e18:	b2d2      	uxtb	r2, r2
 8000e1a:	440b      	add	r3, r1
 8000e1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e20:	e00a      	b.n	8000e38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	b2da      	uxtb	r2, r3
 8000e26:	4908      	ldr	r1, [pc, #32]	; (8000e48 <__NVIC_SetPriority+0x50>)
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	f003 030f 	and.w	r3, r3, #15
 8000e2e:	3b04      	subs	r3, #4
 8000e30:	0112      	lsls	r2, r2, #4
 8000e32:	b2d2      	uxtb	r2, r2
 8000e34:	440b      	add	r3, r1
 8000e36:	761a      	strb	r2, [r3, #24]
}
 8000e38:	bf00      	nop
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000e100 	.word	0xe000e100
 8000e48:	e000ed00 	.word	0xe000ed00

08000e4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b089      	sub	sp, #36	; 0x24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	f003 0307 	and.w	r3, r3, #7
 8000e5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f1c3 0307 	rsb	r3, r3, #7
 8000e66:	2b04      	cmp	r3, #4
 8000e68:	bf28      	it	cs
 8000e6a:	2304      	movcs	r3, #4
 8000e6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	3304      	adds	r3, #4
 8000e72:	2b06      	cmp	r3, #6
 8000e74:	d902      	bls.n	8000e7c <NVIC_EncodePriority+0x30>
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	3b03      	subs	r3, #3
 8000e7a:	e000      	b.n	8000e7e <NVIC_EncodePriority+0x32>
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	f04f 32ff 	mov.w	r2, #4294967295
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	401a      	ands	r2, r3
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e94:	f04f 31ff 	mov.w	r1, #4294967295
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9e:	43d9      	mvns	r1, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea4:	4313      	orrs	r3, r2
         );
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3724      	adds	r7, #36	; 0x24
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
	...

08000eb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ec4:	d301      	bcc.n	8000eca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e00f      	b.n	8000eea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <SysTick_Config+0x40>)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f7ff ff8e 	bl	8000df8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <SysTick_Config+0x40>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee2:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x40>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee8:	2300      	movs	r3, #0
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f7ff ff29 	bl	8000d58 <__NVIC_SetPriorityGrouping>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b086      	sub	sp, #24
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	60b9      	str	r1, [r7, #8]
 8000f18:	607a      	str	r2, [r7, #4]
 8000f1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f20:	f7ff ff3e 	bl	8000da0 <__NVIC_GetPriorityGrouping>
 8000f24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	68b9      	ldr	r1, [r7, #8]
 8000f2a:	6978      	ldr	r0, [r7, #20]
 8000f2c:	f7ff ff8e 	bl	8000e4c <NVIC_EncodePriority>
 8000f30:	4602      	mov	r2, r0
 8000f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f36:	4611      	mov	r1, r2
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff ff5d 	bl	8000df8 <__NVIC_SetPriority>
}
 8000f3e:	bf00      	nop
 8000f40:	3718      	adds	r7, #24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b082      	sub	sp, #8
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff31 	bl	8000dbc <__NVIC_EnableIRQ>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ffa2 	bl	8000eb4 <SysTick_Config>
 8000f70:	4603      	mov	r3, r0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
	...

08000f7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b087      	sub	sp, #28
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f8a:	e160      	b.n	800124e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	2101      	movs	r1, #1
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	fa01 f303 	lsl.w	r3, r1, r3
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	f000 8152 	beq.w	8001248 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d005      	beq.n	8000fbc <HAL_GPIO_Init+0x40>
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b02      	cmp	r3, #2
 8000fba:	d130      	bne.n	800101e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	005b      	lsls	r3, r3, #1
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	693a      	ldr	r2, [r7, #16]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	4013      	ands	r3, r2
 8001000:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	091b      	lsrs	r3, r3, #4
 8001008:	f003 0201 	and.w	r2, r3, #1
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	4313      	orrs	r3, r2
 8001016:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f003 0303 	and.w	r3, r3, #3
 8001026:	2b03      	cmp	r3, #3
 8001028:	d017      	beq.n	800105a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4013      	ands	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	005b      	lsls	r3, r3, #1
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	2b02      	cmp	r3, #2
 8001064:	d123      	bne.n	80010ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	08da      	lsrs	r2, r3, #3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3208      	adds	r2, #8
 800106e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001072:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	220f      	movs	r2, #15
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43db      	mvns	r3, r3
 8001084:	693a      	ldr	r2, [r7, #16]
 8001086:	4013      	ands	r3, r2
 8001088:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	691a      	ldr	r2, [r3, #16]
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	f003 0307 	and.w	r3, r3, #7
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	08da      	lsrs	r2, r3, #3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3208      	adds	r2, #8
 80010a8:	6939      	ldr	r1, [r7, #16]
 80010aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	2203      	movs	r2, #3
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43db      	mvns	r3, r3
 80010c0:	693a      	ldr	r2, [r7, #16]
 80010c2:	4013      	ands	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 0203 	and.w	r2, r3, #3
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	f000 80ac 	beq.w	8001248 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f0:	4b5e      	ldr	r3, [pc, #376]	; (800126c <HAL_GPIO_Init+0x2f0>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	4a5d      	ldr	r2, [pc, #372]	; (800126c <HAL_GPIO_Init+0x2f0>)
 80010f6:	f043 0301 	orr.w	r3, r3, #1
 80010fa:	6193      	str	r3, [r2, #24]
 80010fc:	4b5b      	ldr	r3, [pc, #364]	; (800126c <HAL_GPIO_Init+0x2f0>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001108:	4a59      	ldr	r2, [pc, #356]	; (8001270 <HAL_GPIO_Init+0x2f4>)
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	3302      	adds	r3, #2
 8001110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001114:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f003 0303 	and.w	r3, r3, #3
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	220f      	movs	r2, #15
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001132:	d025      	beq.n	8001180 <HAL_GPIO_Init+0x204>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a4f      	ldr	r2, [pc, #316]	; (8001274 <HAL_GPIO_Init+0x2f8>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d01f      	beq.n	800117c <HAL_GPIO_Init+0x200>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a4e      	ldr	r2, [pc, #312]	; (8001278 <HAL_GPIO_Init+0x2fc>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d019      	beq.n	8001178 <HAL_GPIO_Init+0x1fc>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a4d      	ldr	r2, [pc, #308]	; (800127c <HAL_GPIO_Init+0x300>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d013      	beq.n	8001174 <HAL_GPIO_Init+0x1f8>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4a4c      	ldr	r2, [pc, #304]	; (8001280 <HAL_GPIO_Init+0x304>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d00d      	beq.n	8001170 <HAL_GPIO_Init+0x1f4>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a4b      	ldr	r2, [pc, #300]	; (8001284 <HAL_GPIO_Init+0x308>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d007      	beq.n	800116c <HAL_GPIO_Init+0x1f0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a4a      	ldr	r2, [pc, #296]	; (8001288 <HAL_GPIO_Init+0x30c>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d101      	bne.n	8001168 <HAL_GPIO_Init+0x1ec>
 8001164:	2306      	movs	r3, #6
 8001166:	e00c      	b.n	8001182 <HAL_GPIO_Init+0x206>
 8001168:	2307      	movs	r3, #7
 800116a:	e00a      	b.n	8001182 <HAL_GPIO_Init+0x206>
 800116c:	2305      	movs	r3, #5
 800116e:	e008      	b.n	8001182 <HAL_GPIO_Init+0x206>
 8001170:	2304      	movs	r3, #4
 8001172:	e006      	b.n	8001182 <HAL_GPIO_Init+0x206>
 8001174:	2303      	movs	r3, #3
 8001176:	e004      	b.n	8001182 <HAL_GPIO_Init+0x206>
 8001178:	2302      	movs	r3, #2
 800117a:	e002      	b.n	8001182 <HAL_GPIO_Init+0x206>
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <HAL_GPIO_Init+0x206>
 8001180:	2300      	movs	r3, #0
 8001182:	697a      	ldr	r2, [r7, #20]
 8001184:	f002 0203 	and.w	r2, r2, #3
 8001188:	0092      	lsls	r2, r2, #2
 800118a:	4093      	lsls	r3, r2
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001192:	4937      	ldr	r1, [pc, #220]	; (8001270 <HAL_GPIO_Init+0x2f4>)
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	089b      	lsrs	r3, r3, #2
 8001198:	3302      	adds	r3, #2
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011a0:	4b3a      	ldr	r3, [pc, #232]	; (800128c <HAL_GPIO_Init+0x310>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	43db      	mvns	r3, r3
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	4013      	ands	r3, r2
 80011ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d003      	beq.n	80011c4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80011bc:	693a      	ldr	r2, [r7, #16]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011c4:	4a31      	ldr	r2, [pc, #196]	; (800128c <HAL_GPIO_Init+0x310>)
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80011ca:	4b30      	ldr	r3, [pc, #192]	; (800128c <HAL_GPIO_Init+0x310>)
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	43db      	mvns	r3, r3
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4013      	ands	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011ee:	4a27      	ldr	r2, [pc, #156]	; (800128c <HAL_GPIO_Init+0x310>)
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f4:	4b25      	ldr	r3, [pc, #148]	; (800128c <HAL_GPIO_Init+0x310>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800120c:	2b00      	cmp	r3, #0
 800120e:	d003      	beq.n	8001218 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001218:	4a1c      	ldr	r2, [pc, #112]	; (800128c <HAL_GPIO_Init+0x310>)
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800121e:	4b1b      	ldr	r3, [pc, #108]	; (800128c <HAL_GPIO_Init+0x310>)
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43db      	mvns	r3, r3
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	4013      	ands	r3, r2
 800122c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	4313      	orrs	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001242:	4a12      	ldr	r2, [pc, #72]	; (800128c <HAL_GPIO_Init+0x310>)
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3301      	adds	r3, #1
 800124c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681a      	ldr	r2, [r3, #0]
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	fa22 f303 	lsr.w	r3, r2, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	f47f ae97 	bne.w	8000f8c <HAL_GPIO_Init+0x10>
  }
}
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	371c      	adds	r7, #28
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	40021000 	.word	0x40021000
 8001270:	40010000 	.word	0x40010000
 8001274:	48000400 	.word	0x48000400
 8001278:	48000800 	.word	0x48000800
 800127c:	48000c00 	.word	0x48000c00
 8001280:	48001000 	.word	0x48001000
 8001284:	48001400 	.word	0x48001400
 8001288:	48001800 	.word	0x48001800
 800128c:	40010400 	.word	0x40010400

08001290 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e001      	b.n	80012b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
 80012cc:	4613      	mov	r3, r2
 80012ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012d0:	787b      	ldrb	r3, [r7, #1]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012dc:	e002      	b.n	80012e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr

080012f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4013      	ands	r3, r2
 8001308:	041a      	lsls	r2, r3, #16
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43d9      	mvns	r1, r3
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	400b      	ands	r3, r1
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	619a      	str	r2, [r3, #24]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	4013      	ands	r3, r2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d006      	beq.n	8001348 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f8b8 	bl	80004b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40010400 	.word	0x40010400

08001354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800135a:	af00      	add	r7, sp, #0
 800135c:	1d3b      	adds	r3, r7, #4
 800135e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d102      	bne.n	800136e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	f000 bf01 	b.w	8002170 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0301 	and.w	r3, r3, #1
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8160 	beq.w	800163e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800137e:	4bae      	ldr	r3, [pc, #696]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 030c 	and.w	r3, r3, #12
 8001386:	2b04      	cmp	r3, #4
 8001388:	d00c      	beq.n	80013a4 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800138a:	4bab      	ldr	r3, [pc, #684]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f003 030c 	and.w	r3, r3, #12
 8001392:	2b08      	cmp	r3, #8
 8001394:	d159      	bne.n	800144a <HAL_RCC_OscConfig+0xf6>
 8001396:	4ba8      	ldr	r3, [pc, #672]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800139e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013a2:	d152      	bne.n	800144a <HAL_RCC_OscConfig+0xf6>
 80013a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ac:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80013b0:	fa93 f3a3 	rbit	r3, r3
 80013b4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80013b8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013bc:	fab3 f383 	clz	r3, r3
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	095b      	lsrs	r3, r3, #5
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f043 0301 	orr.w	r3, r3, #1
 80013ca:	b2db      	uxtb	r3, r3
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d102      	bne.n	80013d6 <HAL_RCC_OscConfig+0x82>
 80013d0:	4b99      	ldr	r3, [pc, #612]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	e015      	b.n	8001402 <HAL_RCC_OscConfig+0xae>
 80013d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013da:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80013e2:	fa93 f3a3 	rbit	r3, r3
 80013e6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80013ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ee:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013f2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80013f6:	fa93 f3a3 	rbit	r3, r3
 80013fa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013fe:	4b8e      	ldr	r3, [pc, #568]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001406:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800140a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800140e:	fa92 f2a2 	rbit	r2, r2
 8001412:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001416:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800141a:	fab2 f282 	clz	r2, r2
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	f042 0220 	orr.w	r2, r2, #32
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	f002 021f 	and.w	r2, r2, #31
 800142a:	2101      	movs	r1, #1
 800142c:	fa01 f202 	lsl.w	r2, r1, r2
 8001430:	4013      	ands	r3, r2
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 8102 	beq.w	800163c <HAL_RCC_OscConfig+0x2e8>
 8001438:	1d3b      	adds	r3, r7, #4
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f040 80fc 	bne.w	800163c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	f000 be93 	b.w	8002170 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800144a:	1d3b      	adds	r3, r7, #4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001454:	d106      	bne.n	8001464 <HAL_RCC_OscConfig+0x110>
 8001456:	4b78      	ldr	r3, [pc, #480]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a77      	ldr	r2, [pc, #476]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 800145c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e030      	b.n	80014c6 <HAL_RCC_OscConfig+0x172>
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10c      	bne.n	8001488 <HAL_RCC_OscConfig+0x134>
 800146e:	4b72      	ldr	r3, [pc, #456]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a71      	ldr	r2, [pc, #452]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 8001474:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	4b6f      	ldr	r3, [pc, #444]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a6e      	ldr	r2, [pc, #440]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 8001480:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	e01e      	b.n	80014c6 <HAL_RCC_OscConfig+0x172>
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001492:	d10c      	bne.n	80014ae <HAL_RCC_OscConfig+0x15a>
 8001494:	4b68      	ldr	r3, [pc, #416]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a67      	ldr	r2, [pc, #412]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 800149a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800149e:	6013      	str	r3, [r2, #0]
 80014a0:	4b65      	ldr	r3, [pc, #404]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4a64      	ldr	r2, [pc, #400]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 80014a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	e00b      	b.n	80014c6 <HAL_RCC_OscConfig+0x172>
 80014ae:	4b62      	ldr	r3, [pc, #392]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a61      	ldr	r2, [pc, #388]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 80014b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014b8:	6013      	str	r3, [r2, #0]
 80014ba:	4b5f      	ldr	r3, [pc, #380]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a5e      	ldr	r2, [pc, #376]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 80014c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d059      	beq.n	8001584 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fc36 	bl	8000d40 <HAL_GetTick>
 80014d4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d8:	e00a      	b.n	80014f0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014da:	f7ff fc31 	bl	8000d40 <HAL_GetTick>
 80014de:	4602      	mov	r2, r0
 80014e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d902      	bls.n	80014f0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	f000 be40 	b.w	8002170 <HAL_RCC_OscConfig+0xe1c>
 80014f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014f4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80014fc:	fa93 f3a3 	rbit	r3, r3
 8001500:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001504:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001508:	fab3 f383 	clz	r3, r3
 800150c:	b2db      	uxtb	r3, r3
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	b2db      	uxtb	r3, r3
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	b2db      	uxtb	r3, r3
 8001518:	2b01      	cmp	r3, #1
 800151a:	d102      	bne.n	8001522 <HAL_RCC_OscConfig+0x1ce>
 800151c:	4b46      	ldr	r3, [pc, #280]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	e015      	b.n	800154e <HAL_RCC_OscConfig+0x1fa>
 8001522:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001526:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800152a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800152e:	fa93 f3a3 	rbit	r3, r3
 8001532:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001536:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800153a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800153e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001542:	fa93 f3a3 	rbit	r3, r3
 8001546:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800154a:	4b3b      	ldr	r3, [pc, #236]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 800154c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001552:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001556:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800155a:	fa92 f2a2 	rbit	r2, r2
 800155e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001562:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001566:	fab2 f282 	clz	r2, r2
 800156a:	b2d2      	uxtb	r2, r2
 800156c:	f042 0220 	orr.w	r2, r2, #32
 8001570:	b2d2      	uxtb	r2, r2
 8001572:	f002 021f 	and.w	r2, r2, #31
 8001576:	2101      	movs	r1, #1
 8001578:	fa01 f202 	lsl.w	r2, r1, r2
 800157c:	4013      	ands	r3, r2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0ab      	beq.n	80014da <HAL_RCC_OscConfig+0x186>
 8001582:	e05c      	b.n	800163e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001584:	f7ff fbdc 	bl	8000d40 <HAL_GetTick>
 8001588:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158c:	e00a      	b.n	80015a4 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800158e:	f7ff fbd7 	bl	8000d40 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b64      	cmp	r3, #100	; 0x64
 800159c:	d902      	bls.n	80015a4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	f000 bde6 	b.w	8002170 <HAL_RCC_OscConfig+0xe1c>
 80015a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015a8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015ac:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80015b0:	fa93 f3a3 	rbit	r3, r3
 80015b4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80015b8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015bc:	fab3 f383 	clz	r3, r3
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d102      	bne.n	80015d6 <HAL_RCC_OscConfig+0x282>
 80015d0:	4b19      	ldr	r3, [pc, #100]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	e015      	b.n	8001602 <HAL_RCC_OscConfig+0x2ae>
 80015d6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015da:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015de:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80015e2:	fa93 f3a3 	rbit	r3, r3
 80015e6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80015ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015ee:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80015f2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80015f6:	fa93 f3a3 	rbit	r3, r3
 80015fa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <HAL_RCC_OscConfig+0x2e4>)
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001606:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800160a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800160e:	fa92 f2a2 	rbit	r2, r2
 8001612:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001616:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800161a:	fab2 f282 	clz	r2, r2
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	f042 0220 	orr.w	r2, r2, #32
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	f002 021f 	and.w	r2, r2, #31
 800162a:	2101      	movs	r1, #1
 800162c:	fa01 f202 	lsl.w	r2, r1, r2
 8001630:	4013      	ands	r3, r2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1ab      	bne.n	800158e <HAL_RCC_OscConfig+0x23a>
 8001636:	e002      	b.n	800163e <HAL_RCC_OscConfig+0x2ea>
 8001638:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800163c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	f000 8170 	beq.w	800192e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800164e:	4bd0      	ldr	r3, [pc, #832]	; (8001990 <HAL_RCC_OscConfig+0x63c>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f003 030c 	and.w	r3, r3, #12
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00c      	beq.n	8001674 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800165a:	4bcd      	ldr	r3, [pc, #820]	; (8001990 <HAL_RCC_OscConfig+0x63c>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b08      	cmp	r3, #8
 8001664:	d16d      	bne.n	8001742 <HAL_RCC_OscConfig+0x3ee>
 8001666:	4bca      	ldr	r3, [pc, #808]	; (8001990 <HAL_RCC_OscConfig+0x63c>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800166e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001672:	d166      	bne.n	8001742 <HAL_RCC_OscConfig+0x3ee>
 8001674:	2302      	movs	r3, #2
 8001676:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800167a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800167e:	fa93 f3a3 	rbit	r3, r3
 8001682:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001686:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168a:	fab3 f383 	clz	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	095b      	lsrs	r3, r3, #5
 8001692:	b2db      	uxtb	r3, r3
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	b2db      	uxtb	r3, r3
 800169a:	2b01      	cmp	r3, #1
 800169c:	d102      	bne.n	80016a4 <HAL_RCC_OscConfig+0x350>
 800169e:	4bbc      	ldr	r3, [pc, #752]	; (8001990 <HAL_RCC_OscConfig+0x63c>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	e013      	b.n	80016cc <HAL_RCC_OscConfig+0x378>
 80016a4:	2302      	movs	r3, #2
 80016a6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016aa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80016ae:	fa93 f3a3 	rbit	r3, r3
 80016b2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80016b6:	2302      	movs	r3, #2
 80016b8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016bc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80016c0:	fa93 f3a3 	rbit	r3, r3
 80016c4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016c8:	4bb1      	ldr	r3, [pc, #708]	; (8001990 <HAL_RCC_OscConfig+0x63c>)
 80016ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016cc:	2202      	movs	r2, #2
 80016ce:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80016d2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80016d6:	fa92 f2a2 	rbit	r2, r2
 80016da:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80016de:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016e2:	fab2 f282 	clz	r2, r2
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	f042 0220 	orr.w	r2, r2, #32
 80016ec:	b2d2      	uxtb	r2, r2
 80016ee:	f002 021f 	and.w	r2, r2, #31
 80016f2:	2101      	movs	r1, #1
 80016f4:	fa01 f202 	lsl.w	r2, r1, r2
 80016f8:	4013      	ands	r3, r2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d007      	beq.n	800170e <HAL_RCC_OscConfig+0x3ba>
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	2b01      	cmp	r3, #1
 8001706:	d002      	beq.n	800170e <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	f000 bd31 	b.w	8002170 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800170e:	4ba0      	ldr	r3, [pc, #640]	; (8001990 <HAL_RCC_OscConfig+0x63c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	21f8      	movs	r1, #248	; 0xf8
 800171e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001722:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001726:	fa91 f1a1 	rbit	r1, r1
 800172a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800172e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001732:	fab1 f181 	clz	r1, r1
 8001736:	b2c9      	uxtb	r1, r1
 8001738:	408b      	lsls	r3, r1
 800173a:	4995      	ldr	r1, [pc, #596]	; (8001990 <HAL_RCC_OscConfig+0x63c>)
 800173c:	4313      	orrs	r3, r2
 800173e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001740:	e0f5      	b.n	800192e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001742:	1d3b      	adds	r3, r7, #4
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	f000 8085 	beq.w	8001858 <HAL_RCC_OscConfig+0x504>
 800174e:	2301      	movs	r3, #1
 8001750:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001754:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001758:	fa93 f3a3 	rbit	r3, r3
 800175c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001760:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001764:	fab3 f383 	clz	r3, r3
 8001768:	b2db      	uxtb	r3, r3
 800176a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800176e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	461a      	mov	r2, r3
 8001776:	2301      	movs	r3, #1
 8001778:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800177a:	f7ff fae1 	bl	8000d40 <HAL_GetTick>
 800177e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001782:	e00a      	b.n	800179a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001784:	f7ff fadc 	bl	8000d40 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d902      	bls.n	800179a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	f000 bceb 	b.w	8002170 <HAL_RCC_OscConfig+0xe1c>
 800179a:	2302      	movs	r3, #2
 800179c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80017a4:	fa93 f3a3 	rbit	r3, r3
 80017a8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80017ac:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b0:	fab3 f383 	clz	r3, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	095b      	lsrs	r3, r3, #5
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d102      	bne.n	80017ca <HAL_RCC_OscConfig+0x476>
 80017c4:	4b72      	ldr	r3, [pc, #456]	; (8001990 <HAL_RCC_OscConfig+0x63c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	e013      	b.n	80017f2 <HAL_RCC_OscConfig+0x49e>
 80017ca:	2302      	movs	r3, #2
 80017cc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80017dc:	2302      	movs	r3, #2
 80017de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80017e2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80017e6:	fa93 f3a3 	rbit	r3, r3
 80017ea:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017ee:	4b68      	ldr	r3, [pc, #416]	; (8001990 <HAL_RCC_OscConfig+0x63c>)
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	2202      	movs	r2, #2
 80017f4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80017f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80017fc:	fa92 f2a2 	rbit	r2, r2
 8001800:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001804:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001808:	fab2 f282 	clz	r2, r2
 800180c:	b2d2      	uxtb	r2, r2
 800180e:	f042 0220 	orr.w	r2, r2, #32
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	f002 021f 	and.w	r2, r2, #31
 8001818:	2101      	movs	r1, #1
 800181a:	fa01 f202 	lsl.w	r2, r1, r2
 800181e:	4013      	ands	r3, r2
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0af      	beq.n	8001784 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001824:	4b5a      	ldr	r3, [pc, #360]	; (8001990 <HAL_RCC_OscConfig+0x63c>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182c:	1d3b      	adds	r3, r7, #4
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	21f8      	movs	r1, #248	; 0xf8
 8001834:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001838:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800183c:	fa91 f1a1 	rbit	r1, r1
 8001840:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001844:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001848:	fab1 f181 	clz	r1, r1
 800184c:	b2c9      	uxtb	r1, r1
 800184e:	408b      	lsls	r3, r1
 8001850:	494f      	ldr	r1, [pc, #316]	; (8001990 <HAL_RCC_OscConfig+0x63c>)
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]
 8001856:	e06a      	b.n	800192e <HAL_RCC_OscConfig+0x5da>
 8001858:	2301      	movs	r3, #1
 800185a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800185e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001862:	fa93 f3a3 	rbit	r3, r3
 8001866:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800186a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800186e:	fab3 f383 	clz	r3, r3
 8001872:	b2db      	uxtb	r3, r3
 8001874:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001878:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	461a      	mov	r2, r3
 8001880:	2300      	movs	r3, #0
 8001882:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001884:	f7ff fa5c 	bl	8000d40 <HAL_GetTick>
 8001888:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800188c:	e00a      	b.n	80018a4 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800188e:	f7ff fa57 	bl	8000d40 <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d902      	bls.n	80018a4 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	f000 bc66 	b.w	8002170 <HAL_RCC_OscConfig+0xe1c>
 80018a4:	2302      	movs	r3, #2
 80018a6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018aa:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80018ae:	fa93 f3a3 	rbit	r3, r3
 80018b2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80018b6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ba:	fab3 f383 	clz	r3, r3
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	095b      	lsrs	r3, r3, #5
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d102      	bne.n	80018d4 <HAL_RCC_OscConfig+0x580>
 80018ce:	4b30      	ldr	r3, [pc, #192]	; (8001990 <HAL_RCC_OscConfig+0x63c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	e013      	b.n	80018fc <HAL_RCC_OscConfig+0x5a8>
 80018d4:	2302      	movs	r3, #2
 80018d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80018e6:	2302      	movs	r3, #2
 80018e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018f0:	fa93 f3a3 	rbit	r3, r3
 80018f4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_RCC_OscConfig+0x63c>)
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	2202      	movs	r2, #2
 80018fe:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001902:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001906:	fa92 f2a2 	rbit	r2, r2
 800190a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 800190e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001912:	fab2 f282 	clz	r2, r2
 8001916:	b2d2      	uxtb	r2, r2
 8001918:	f042 0220 	orr.w	r2, r2, #32
 800191c:	b2d2      	uxtb	r2, r2
 800191e:	f002 021f 	and.w	r2, r2, #31
 8001922:	2101      	movs	r1, #1
 8001924:	fa01 f202 	lsl.w	r2, r1, r2
 8001928:	4013      	ands	r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1af      	bne.n	800188e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192e:	1d3b      	adds	r3, r7, #4
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	f000 80da 	beq.w	8001af2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d069      	beq.n	8001a1c <HAL_RCC_OscConfig+0x6c8>
 8001948:	2301      	movs	r3, #1
 800194a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001952:	fa93 f3a3 	rbit	r3, r3
 8001956:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800195a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195e:	fab3 f383 	clz	r3, r3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	461a      	mov	r2, r3
 8001966:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_OscConfig+0x640>)
 8001968:	4413      	add	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	461a      	mov	r2, r3
 800196e:	2301      	movs	r3, #1
 8001970:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001972:	f7ff f9e5 	bl	8000d40 <HAL_GetTick>
 8001976:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800197a:	e00d      	b.n	8001998 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800197c:	f7ff f9e0 	bl	8000d40 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d905      	bls.n	8001998 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e3ef      	b.n	8002170 <HAL_RCC_OscConfig+0xe1c>
 8001990:	40021000 	.word	0x40021000
 8001994:	10908120 	.word	0x10908120
 8001998:	2302      	movs	r3, #2
 800199a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800199e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019a2:	fa93 f2a3 	rbit	r2, r3
 80019a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80019b0:	2202      	movs	r2, #2
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	fa93 f2a3 	rbit	r2, r3
 80019be:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019c8:	2202      	movs	r2, #2
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	fa93 f2a3 	rbit	r2, r3
 80019d6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019da:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019dc:	4ba4      	ldr	r3, [pc, #656]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 80019de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019e0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019e4:	2102      	movs	r1, #2
 80019e6:	6019      	str	r1, [r3, #0]
 80019e8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	fa93 f1a3 	rbit	r1, r3
 80019f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019f6:	6019      	str	r1, [r3, #0]
  return result;
 80019f8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	fab3 f383 	clz	r3, r3
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	2101      	movs	r1, #1
 8001a10:	fa01 f303 	lsl.w	r3, r1, r3
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0b0      	beq.n	800197c <HAL_RCC_OscConfig+0x628>
 8001a1a:	e06a      	b.n	8001af2 <HAL_RCC_OscConfig+0x79e>
 8001a1c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a20:	2201      	movs	r2, #1
 8001a22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	fa93 f2a3 	rbit	r2, r3
 8001a2e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a32:	601a      	str	r2, [r3, #0]
  return result;
 8001a34:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a38:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a3a:	fab3 f383 	clz	r3, r3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	461a      	mov	r2, r3
 8001a42:	4b8c      	ldr	r3, [pc, #560]	; (8001c74 <HAL_RCC_OscConfig+0x920>)
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a4e:	f7ff f977 	bl	8000d40 <HAL_GetTick>
 8001a52:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a56:	e009      	b.n	8001a6c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a58:	f7ff f972 	bl	8000d40 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e381      	b.n	8002170 <HAL_RCC_OscConfig+0xe1c>
 8001a6c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a70:	2202      	movs	r2, #2
 8001a72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	fa93 f2a3 	rbit	r2, r3
 8001a7e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a88:	2202      	movs	r2, #2
 8001a8a:	601a      	str	r2, [r3, #0]
 8001a8c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	fa93 f2a3 	rbit	r2, r3
 8001a96:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	fa93 f2a3 	rbit	r2, r3
 8001aae:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001ab2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ab4:	4b6e      	ldr	r3, [pc, #440]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ab8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001abc:	2102      	movs	r1, #2
 8001abe:	6019      	str	r1, [r3, #0]
 8001ac0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	fa93 f1a3 	rbit	r1, r3
 8001aca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ace:	6019      	str	r1, [r3, #0]
  return result;
 8001ad0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	fab3 f383 	clz	r3, r3
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	f003 031f 	and.w	r3, r3, #31
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aec:	4013      	ands	r3, r2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1b2      	bne.n	8001a58 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0304 	and.w	r3, r3, #4
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 8157 	beq.w	8001db0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b02:	2300      	movs	r3, #0
 8001b04:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b08:	4b59      	ldr	r3, [pc, #356]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d112      	bne.n	8001b3a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b14:	4b56      	ldr	r3, [pc, #344]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001b16:	69db      	ldr	r3, [r3, #28]
 8001b18:	4a55      	ldr	r2, [pc, #340]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b1e:	61d3      	str	r3, [r2, #28]
 8001b20:	4b53      	ldr	r3, [pc, #332]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b28:	f107 030c 	add.w	r3, r7, #12
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b34:	2301      	movs	r3, #1
 8001b36:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3a:	4b4f      	ldr	r3, [pc, #316]	; (8001c78 <HAL_RCC_OscConfig+0x924>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d11a      	bne.n	8001b7c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b46:	4b4c      	ldr	r3, [pc, #304]	; (8001c78 <HAL_RCC_OscConfig+0x924>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a4b      	ldr	r2, [pc, #300]	; (8001c78 <HAL_RCC_OscConfig+0x924>)
 8001b4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b50:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b52:	f7ff f8f5 	bl	8000d40 <HAL_GetTick>
 8001b56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5a:	e009      	b.n	8001b70 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5c:	f7ff f8f0 	bl	8000d40 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b64      	cmp	r3, #100	; 0x64
 8001b6a:	d901      	bls.n	8001b70 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	e2ff      	b.n	8002170 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b70:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <HAL_RCC_OscConfig+0x924>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d0ef      	beq.n	8001b5c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d106      	bne.n	8001b94 <HAL_RCC_OscConfig+0x840>
 8001b86:	4b3a      	ldr	r3, [pc, #232]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001b88:	6a1b      	ldr	r3, [r3, #32]
 8001b8a:	4a39      	ldr	r2, [pc, #228]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6213      	str	r3, [r2, #32]
 8001b92:	e02f      	b.n	8001bf4 <HAL_RCC_OscConfig+0x8a0>
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x864>
 8001b9e:	4b34      	ldr	r3, [pc, #208]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001ba0:	6a1b      	ldr	r3, [r3, #32]
 8001ba2:	4a33      	ldr	r2, [pc, #204]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001ba4:	f023 0301 	bic.w	r3, r3, #1
 8001ba8:	6213      	str	r3, [r2, #32]
 8001baa:	4b31      	ldr	r3, [pc, #196]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	4a30      	ldr	r2, [pc, #192]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001bb0:	f023 0304 	bic.w	r3, r3, #4
 8001bb4:	6213      	str	r3, [r2, #32]
 8001bb6:	e01d      	b.n	8001bf4 <HAL_RCC_OscConfig+0x8a0>
 8001bb8:	1d3b      	adds	r3, r7, #4
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b05      	cmp	r3, #5
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x888>
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001bc4:	6a1b      	ldr	r3, [r3, #32]
 8001bc6:	4a2a      	ldr	r2, [pc, #168]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001bc8:	f043 0304 	orr.w	r3, r3, #4
 8001bcc:	6213      	str	r3, [r2, #32]
 8001bce:	4b28      	ldr	r3, [pc, #160]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001bd0:	6a1b      	ldr	r3, [r3, #32]
 8001bd2:	4a27      	ldr	r2, [pc, #156]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	6213      	str	r3, [r2, #32]
 8001bda:	e00b      	b.n	8001bf4 <HAL_RCC_OscConfig+0x8a0>
 8001bdc:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	4a23      	ldr	r2, [pc, #140]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001be2:	f023 0301 	bic.w	r3, r3, #1
 8001be6:	6213      	str	r3, [r2, #32]
 8001be8:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001bea:	6a1b      	ldr	r3, [r3, #32]
 8001bec:	4a20      	ldr	r2, [pc, #128]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001bee:	f023 0304 	bic.w	r3, r3, #4
 8001bf2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d06a      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfe:	f7ff f89f 	bl	8000d40 <HAL_GetTick>
 8001c02:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c08:	f7ff f89a 	bl	8000d40 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e2a7      	b.n	8002170 <HAL_RCC_OscConfig+0xe1c>
 8001c20:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c24:	2202      	movs	r2, #2
 8001c26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	fa93 f2a3 	rbit	r2, r3
 8001c32:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	fa93 f2a3 	rbit	r2, r3
 8001c4a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c4e:	601a      	str	r2, [r3, #0]
  return result;
 8001c50:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c54:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c56:	fab3 f383 	clz	r3, r3
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	095b      	lsrs	r3, r3, #5
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	f043 0302 	orr.w	r3, r3, #2
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d108      	bne.n	8001c7c <HAL_RCC_OscConfig+0x928>
 8001c6a:	4b01      	ldr	r3, [pc, #4]	; (8001c70 <HAL_RCC_OscConfig+0x91c>)
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	e013      	b.n	8001c98 <HAL_RCC_OscConfig+0x944>
 8001c70:	40021000 	.word	0x40021000
 8001c74:	10908120 	.word	0x10908120
 8001c78:	40007000 	.word	0x40007000
 8001c7c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c80:	2202      	movs	r2, #2
 8001c82:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c84:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	fa93 f2a3 	rbit	r2, r3
 8001c8e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	4bc0      	ldr	r3, [pc, #768]	; (8001f98 <HAL_RCC_OscConfig+0xc44>)
 8001c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c98:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001c9c:	2102      	movs	r1, #2
 8001c9e:	6011      	str	r1, [r2, #0]
 8001ca0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	fa92 f1a2 	rbit	r1, r2
 8001caa:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cae:	6011      	str	r1, [r2, #0]
  return result;
 8001cb0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001cb4:	6812      	ldr	r2, [r2, #0]
 8001cb6:	fab2 f282 	clz	r2, r2
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	f002 021f 	and.w	r2, r2, #31
 8001cc6:	2101      	movs	r1, #1
 8001cc8:	fa01 f202 	lsl.w	r2, r1, r2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d09a      	beq.n	8001c08 <HAL_RCC_OscConfig+0x8b4>
 8001cd2:	e063      	b.n	8001d9c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd4:	f7ff f834 	bl	8000d40 <HAL_GetTick>
 8001cd8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cdc:	e00b      	b.n	8001cf6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cde:	f7ff f82f 	bl	8000d40 <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e23c      	b.n	8002170 <HAL_RCC_OscConfig+0xe1c>
 8001cf6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cfa:	2202      	movs	r2, #2
 8001cfc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cfe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	fa93 f2a3 	rbit	r2, r3
 8001d08:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d12:	2202      	movs	r2, #2
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	fa93 f2a3 	rbit	r2, r3
 8001d20:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d24:	601a      	str	r2, [r3, #0]
  return result;
 8001d26:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d2a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2c:	fab3 f383 	clz	r3, r3
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	f043 0302 	orr.w	r3, r3, #2
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d102      	bne.n	8001d46 <HAL_RCC_OscConfig+0x9f2>
 8001d40:	4b95      	ldr	r3, [pc, #596]	; (8001f98 <HAL_RCC_OscConfig+0xc44>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	e00d      	b.n	8001d62 <HAL_RCC_OscConfig+0xa0e>
 8001d46:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d4a:	2202      	movs	r2, #2
 8001d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d4e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	fa93 f2a3 	rbit	r2, r3
 8001d58:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	4b8e      	ldr	r3, [pc, #568]	; (8001f98 <HAL_RCC_OscConfig+0xc44>)
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d66:	2102      	movs	r1, #2
 8001d68:	6011      	str	r1, [r2, #0]
 8001d6a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	fa92 f1a2 	rbit	r1, r2
 8001d74:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d78:	6011      	str	r1, [r2, #0]
  return result;
 8001d7a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d7e:	6812      	ldr	r2, [r2, #0]
 8001d80:	fab2 f282 	clz	r2, r2
 8001d84:	b2d2      	uxtb	r2, r2
 8001d86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d8a:	b2d2      	uxtb	r2, r2
 8001d8c:	f002 021f 	and.w	r2, r2, #31
 8001d90:	2101      	movs	r1, #1
 8001d92:	fa01 f202 	lsl.w	r2, r1, r2
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1a0      	bne.n	8001cde <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d9c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da4:	4b7c      	ldr	r3, [pc, #496]	; (8001f98 <HAL_RCC_OscConfig+0xc44>)
 8001da6:	69db      	ldr	r3, [r3, #28]
 8001da8:	4a7b      	ldr	r2, [pc, #492]	; (8001f98 <HAL_RCC_OscConfig+0xc44>)
 8001daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db0:	1d3b      	adds	r3, r7, #4
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 81d9 	beq.w	800216e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dbc:	4b76      	ldr	r3, [pc, #472]	; (8001f98 <HAL_RCC_OscConfig+0xc44>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 030c 	and.w	r3, r3, #12
 8001dc4:	2b08      	cmp	r3, #8
 8001dc6:	f000 81a6 	beq.w	8002116 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	f040 811e 	bne.w	8002012 <HAL_RCC_OscConfig+0xcbe>
 8001dd6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001dda:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dde:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	fa93 f2a3 	rbit	r2, r3
 8001dea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001dee:	601a      	str	r2, [r3, #0]
  return result;
 8001df0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001df4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001e00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	461a      	mov	r2, r3
 8001e08:	2300      	movs	r3, #0
 8001e0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7fe ff98 	bl	8000d40 <HAL_GetTick>
 8001e10:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e14:	e009      	b.n	8001e2a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e16:	f7fe ff93 	bl	8000d40 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e1a2      	b.n	8002170 <HAL_RCC_OscConfig+0xe1c>
 8001e2a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e34:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	fa93 f2a3 	rbit	r2, r3
 8001e3e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e42:	601a      	str	r2, [r3, #0]
  return result;
 8001e44:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e48:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e4a:	fab3 f383 	clz	r3, r3
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	095b      	lsrs	r3, r3, #5
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d102      	bne.n	8001e64 <HAL_RCC_OscConfig+0xb10>
 8001e5e:	4b4e      	ldr	r3, [pc, #312]	; (8001f98 <HAL_RCC_OscConfig+0xc44>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	e01b      	b.n	8001e9c <HAL_RCC_OscConfig+0xb48>
 8001e64:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e6e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	fa93 f2a3 	rbit	r2, r3
 8001e78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	fa93 f2a3 	rbit	r2, r3
 8001e92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	4b3f      	ldr	r3, [pc, #252]	; (8001f98 <HAL_RCC_OscConfig+0xc44>)
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001ea0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ea4:	6011      	str	r1, [r2, #0]
 8001ea6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	fa92 f1a2 	rbit	r1, r2
 8001eb0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001eb4:	6011      	str	r1, [r2, #0]
  return result;
 8001eb6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	fab2 f282 	clz	r2, r2
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f042 0220 	orr.w	r2, r2, #32
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	f002 021f 	and.w	r2, r2, #31
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d19e      	bne.n	8001e16 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed8:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <HAL_RCC_OscConfig+0xc44>)
 8001eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001edc:	f023 020f 	bic.w	r2, r3, #15
 8001ee0:	1d3b      	adds	r3, r7, #4
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee6:	492c      	ldr	r1, [pc, #176]	; (8001f98 <HAL_RCC_OscConfig+0xc44>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001eec:	4b2a      	ldr	r3, [pc, #168]	; (8001f98 <HAL_RCC_OscConfig+0xc44>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001ef4:	1d3b      	adds	r3, r7, #4
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6a19      	ldr	r1, [r3, #32]
 8001efa:	1d3b      	adds	r3, r7, #4
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	430b      	orrs	r3, r1
 8001f02:	4925      	ldr	r1, [pc, #148]	; (8001f98 <HAL_RCC_OscConfig+0xc44>)
 8001f04:	4313      	orrs	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]
 8001f08:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	fa93 f2a3 	rbit	r2, r3
 8001f1c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f20:	601a      	str	r2, [r3, #0]
  return result;
 8001f22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f26:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f32:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3e:	f7fe feff 	bl	8000d40 <HAL_GetTick>
 8001f42:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f46:	e009      	b.n	8001f5c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f48:	f7fe fefa 	bl	8000d40 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d901      	bls.n	8001f5c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8001f58:	2303      	movs	r3, #3
 8001f5a:	e109      	b.n	8002170 <HAL_RCC_OscConfig+0xe1c>
 8001f5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	fa93 f2a3 	rbit	r2, r3
 8001f70:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f74:	601a      	str	r2, [r3, #0]
  return result;
 8001f76:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f7a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f7c:	fab3 f383 	clz	r3, r3
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	095b      	lsrs	r3, r3, #5
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	f043 0301 	orr.w	r3, r3, #1
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_RCC_OscConfig+0xc48>
 8001f90:	4b01      	ldr	r3, [pc, #4]	; (8001f98 <HAL_RCC_OscConfig+0xc44>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	e01e      	b.n	8001fd4 <HAL_RCC_OscConfig+0xc80>
 8001f96:	bf00      	nop
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fa0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	fa93 f2a3 	rbit	r2, r3
 8001fb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001fb4:	601a      	str	r2, [r3, #0]
 8001fb6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	fa93 f2a3 	rbit	r2, r3
 8001fca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_RCC_OscConfig+0xe28>)
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001fd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fdc:	6011      	str	r1, [r2, #0]
 8001fde:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	fa92 f1a2 	rbit	r1, r2
 8001fe8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fec:	6011      	str	r1, [r2, #0]
  return result;
 8001fee:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ff2:	6812      	ldr	r2, [r2, #0]
 8001ff4:	fab2 f282 	clz	r2, r2
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	f042 0220 	orr.w	r2, r2, #32
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	f002 021f 	and.w	r2, r2, #31
 8002004:	2101      	movs	r1, #1
 8002006:	fa01 f202 	lsl.w	r2, r1, r2
 800200a:	4013      	ands	r3, r2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d09b      	beq.n	8001f48 <HAL_RCC_OscConfig+0xbf4>
 8002010:	e0ad      	b.n	800216e <HAL_RCC_OscConfig+0xe1a>
 8002012:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002016:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800201a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	fa93 f2a3 	rbit	r2, r3
 8002026:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800202a:	601a      	str	r2, [r3, #0]
  return result;
 800202c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002030:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002032:	fab3 f383 	clz	r3, r3
 8002036:	b2db      	uxtb	r3, r3
 8002038:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800203c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	461a      	mov	r2, r3
 8002044:	2300      	movs	r3, #0
 8002046:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002048:	f7fe fe7a 	bl	8000d40 <HAL_GetTick>
 800204c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002050:	e009      	b.n	8002066 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002052:	f7fe fe75 	bl	8000d40 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e084      	b.n	8002170 <HAL_RCC_OscConfig+0xe1c>
 8002066:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800206a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800206e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002070:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	fa93 f2a3 	rbit	r2, r3
 800207a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800207e:	601a      	str	r2, [r3, #0]
  return result;
 8002080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002084:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002086:	fab3 f383 	clz	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	095b      	lsrs	r3, r3, #5
 800208e:	b2db      	uxtb	r3, r3
 8002090:	f043 0301 	orr.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b01      	cmp	r3, #1
 8002098:	d102      	bne.n	80020a0 <HAL_RCC_OscConfig+0xd4c>
 800209a:	4b38      	ldr	r3, [pc, #224]	; (800217c <HAL_RCC_OscConfig+0xe28>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	e01b      	b.n	80020d8 <HAL_RCC_OscConfig+0xd84>
 80020a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	fa93 f2a3 	rbit	r2, r3
 80020b4:	f107 0320 	add.w	r3, r7, #32
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	f107 031c 	add.w	r3, r7, #28
 80020be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	f107 031c 	add.w	r3, r7, #28
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	fa93 f2a3 	rbit	r2, r3
 80020ce:	f107 0318 	add.w	r3, r7, #24
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	4b29      	ldr	r3, [pc, #164]	; (800217c <HAL_RCC_OscConfig+0xe28>)
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	f107 0214 	add.w	r2, r7, #20
 80020dc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020e0:	6011      	str	r1, [r2, #0]
 80020e2:	f107 0214 	add.w	r2, r7, #20
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	fa92 f1a2 	rbit	r1, r2
 80020ec:	f107 0210 	add.w	r2, r7, #16
 80020f0:	6011      	str	r1, [r2, #0]
  return result;
 80020f2:	f107 0210 	add.w	r2, r7, #16
 80020f6:	6812      	ldr	r2, [r2, #0]
 80020f8:	fab2 f282 	clz	r2, r2
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	f042 0220 	orr.w	r2, r2, #32
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	f002 021f 	and.w	r2, r2, #31
 8002108:	2101      	movs	r1, #1
 800210a:	fa01 f202 	lsl.w	r2, r1, r2
 800210e:	4013      	ands	r3, r2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d19e      	bne.n	8002052 <HAL_RCC_OscConfig+0xcfe>
 8002114:	e02b      	b.n	800216e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e025      	b.n	8002170 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <HAL_RCC_OscConfig+0xe28>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_RCC_OscConfig+0xe28>)
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002134:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002138:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800213c:	1d3b      	adds	r3, r7, #4
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	429a      	cmp	r2, r3
 8002144:	d111      	bne.n	800216a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002146:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800214a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800214e:	1d3b      	adds	r3, r7, #4
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002154:	429a      	cmp	r2, r3
 8002156:	d108      	bne.n	800216a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002158:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800215c:	f003 020f 	and.w	r2, r3, #15
 8002160:	1d3b      	adds	r3, r7, #4
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800216e:	2300      	movs	r3, #0
}
 8002170:	4618      	mov	r0, r3
 8002172:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000

08002180 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b09e      	sub	sp, #120	; 0x78
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800218a:	2300      	movs	r3, #0
 800218c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d101      	bne.n	8002198 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e162      	b.n	800245e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002198:	4b90      	ldr	r3, [pc, #576]	; (80023dc <HAL_RCC_ClockConfig+0x25c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0307 	and.w	r3, r3, #7
 80021a0:	683a      	ldr	r2, [r7, #0]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d910      	bls.n	80021c8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021a6:	4b8d      	ldr	r3, [pc, #564]	; (80023dc <HAL_RCC_ClockConfig+0x25c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f023 0207 	bic.w	r2, r3, #7
 80021ae:	498b      	ldr	r1, [pc, #556]	; (80023dc <HAL_RCC_ClockConfig+0x25c>)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b6:	4b89      	ldr	r3, [pc, #548]	; (80023dc <HAL_RCC_ClockConfig+0x25c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d001      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e14a      	b.n	800245e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021d4:	4b82      	ldr	r3, [pc, #520]	; (80023e0 <HAL_RCC_ClockConfig+0x260>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	497f      	ldr	r1, [pc, #508]	; (80023e0 <HAL_RCC_ClockConfig+0x260>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 80dc 	beq.w	80023ac <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d13c      	bne.n	8002276 <HAL_RCC_ClockConfig+0xf6>
 80021fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002200:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800220a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220c:	fab3 f383 	clz	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b01      	cmp	r3, #1
 800221e:	d102      	bne.n	8002226 <HAL_RCC_ClockConfig+0xa6>
 8002220:	4b6f      	ldr	r3, [pc, #444]	; (80023e0 <HAL_RCC_ClockConfig+0x260>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	e00f      	b.n	8002246 <HAL_RCC_ClockConfig+0xc6>
 8002226:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800222a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	667b      	str	r3, [r7, #100]	; 0x64
 8002234:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002238:	663b      	str	r3, [r7, #96]	; 0x60
 800223a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002242:	4b67      	ldr	r3, [pc, #412]	; (80023e0 <HAL_RCC_ClockConfig+0x260>)
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800224a:	65ba      	str	r2, [r7, #88]	; 0x58
 800224c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800224e:	fa92 f2a2 	rbit	r2, r2
 8002252:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002254:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002256:	fab2 f282 	clz	r2, r2
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	f042 0220 	orr.w	r2, r2, #32
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	f002 021f 	and.w	r2, r2, #31
 8002266:	2101      	movs	r1, #1
 8002268:	fa01 f202 	lsl.w	r2, r1, r2
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d17b      	bne.n	800236a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e0f3      	b.n	800245e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b02      	cmp	r3, #2
 800227c:	d13c      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x178>
 800227e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002282:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002284:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800228c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f043 0301 	orr.w	r3, r3, #1
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d102      	bne.n	80022a8 <HAL_RCC_ClockConfig+0x128>
 80022a2:	4b4f      	ldr	r3, [pc, #316]	; (80023e0 <HAL_RCC_ClockConfig+0x260>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	e00f      	b.n	80022c8 <HAL_RCC_ClockConfig+0x148>
 80022a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ac:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80022b0:	fa93 f3a3 	rbit	r3, r3
 80022b4:	647b      	str	r3, [r7, #68]	; 0x44
 80022b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022ba:	643b      	str	r3, [r7, #64]	; 0x40
 80022bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022be:	fa93 f3a3 	rbit	r3, r3
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022c4:	4b46      	ldr	r3, [pc, #280]	; (80023e0 <HAL_RCC_ClockConfig+0x260>)
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022cc:	63ba      	str	r2, [r7, #56]	; 0x38
 80022ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80022d0:	fa92 f2a2 	rbit	r2, r2
 80022d4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80022d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80022d8:	fab2 f282 	clz	r2, r2
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	f042 0220 	orr.w	r2, r2, #32
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	f002 021f 	and.w	r2, r2, #31
 80022e8:	2101      	movs	r1, #1
 80022ea:	fa01 f202 	lsl.w	r2, r1, r2
 80022ee:	4013      	ands	r3, r2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d13a      	bne.n	800236a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0b2      	b.n	800245e <HAL_RCC_ClockConfig+0x2de>
 80022f8:	2302      	movs	r3, #2
 80022fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022fe:	fa93 f3a3 	rbit	r3, r3
 8002302:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	b2db      	uxtb	r3, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	b2db      	uxtb	r3, r3
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d102      	bne.n	8002320 <HAL_RCC_ClockConfig+0x1a0>
 800231a:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <HAL_RCC_ClockConfig+0x260>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	e00d      	b.n	800233c <HAL_RCC_ClockConfig+0x1bc>
 8002320:	2302      	movs	r3, #2
 8002322:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	fa93 f3a3 	rbit	r3, r3
 800232a:	627b      	str	r3, [r7, #36]	; 0x24
 800232c:	2302      	movs	r3, #2
 800232e:	623b      	str	r3, [r7, #32]
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	fa93 f3a3 	rbit	r3, r3
 8002336:	61fb      	str	r3, [r7, #28]
 8002338:	4b29      	ldr	r3, [pc, #164]	; (80023e0 <HAL_RCC_ClockConfig+0x260>)
 800233a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233c:	2202      	movs	r2, #2
 800233e:	61ba      	str	r2, [r7, #24]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	fa92 f2a2 	rbit	r2, r2
 8002346:	617a      	str	r2, [r7, #20]
  return result;
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	fab2 f282 	clz	r2, r2
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	f042 0220 	orr.w	r2, r2, #32
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f002 021f 	and.w	r2, r2, #31
 800235a:	2101      	movs	r1, #1
 800235c:	fa01 f202 	lsl.w	r2, r1, r2
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e079      	b.n	800245e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800236a:	4b1d      	ldr	r3, [pc, #116]	; (80023e0 <HAL_RCC_ClockConfig+0x260>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f023 0203 	bic.w	r2, r3, #3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	491a      	ldr	r1, [pc, #104]	; (80023e0 <HAL_RCC_ClockConfig+0x260>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800237c:	f7fe fce0 	bl	8000d40 <HAL_GetTick>
 8002380:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002382:	e00a      	b.n	800239a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002384:	f7fe fcdc 	bl	8000d40 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002392:	4293      	cmp	r3, r2
 8002394:	d901      	bls.n	800239a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e061      	b.n	800245e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_RCC_ClockConfig+0x260>)
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 020c 	and.w	r2, r3, #12
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d1eb      	bne.n	8002384 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <HAL_RCC_ClockConfig+0x25c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d214      	bcs.n	80023e4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <HAL_RCC_ClockConfig+0x25c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 0207 	bic.w	r2, r3, #7
 80023c2:	4906      	ldr	r1, [pc, #24]	; (80023dc <HAL_RCC_ClockConfig+0x25c>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b04      	ldr	r3, [pc, #16]	; (80023dc <HAL_RCC_ClockConfig+0x25c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e040      	b.n	800245e <HAL_RCC_ClockConfig+0x2de>
 80023dc:	40022000 	.word	0x40022000
 80023e0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023f0:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_RCC_ClockConfig+0x2e8>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	491a      	ldr	r1, [pc, #104]	; (8002468 <HAL_RCC_ClockConfig+0x2e8>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0308 	and.w	r3, r3, #8
 800240a:	2b00      	cmp	r3, #0
 800240c:	d009      	beq.n	8002422 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800240e:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_RCC_ClockConfig+0x2e8>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691b      	ldr	r3, [r3, #16]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4912      	ldr	r1, [pc, #72]	; (8002468 <HAL_RCC_ClockConfig+0x2e8>)
 800241e:	4313      	orrs	r3, r2
 8002420:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002422:	f000 f829 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002426:	4601      	mov	r1, r0
 8002428:	4b0f      	ldr	r3, [pc, #60]	; (8002468 <HAL_RCC_ClockConfig+0x2e8>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002430:	22f0      	movs	r2, #240	; 0xf0
 8002432:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	fa92 f2a2 	rbit	r2, r2
 800243a:	60fa      	str	r2, [r7, #12]
  return result;
 800243c:	68fa      	ldr	r2, [r7, #12]
 800243e:	fab2 f282 	clz	r2, r2
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	40d3      	lsrs	r3, r2
 8002446:	4a09      	ldr	r2, [pc, #36]	; (800246c <HAL_RCC_ClockConfig+0x2ec>)
 8002448:	5cd3      	ldrb	r3, [r2, r3]
 800244a:	fa21 f303 	lsr.w	r3, r1, r3
 800244e:	4a08      	ldr	r2, [pc, #32]	; (8002470 <HAL_RCC_ClockConfig+0x2f0>)
 8002450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002452:	4b08      	ldr	r3, [pc, #32]	; (8002474 <HAL_RCC_ClockConfig+0x2f4>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fc2e 	bl	8000cb8 <HAL_InitTick>
  
  return HAL_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3778      	adds	r7, #120	; 0x78
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
 800246c:	08003430 	.word	0x08003430
 8002470:	20000000 	.word	0x20000000
 8002474:	20000004 	.word	0x20000004

08002478 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002478:	b480      	push	{r7}
 800247a:	b08b      	sub	sp, #44	; 0x2c
 800247c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800247e:	2300      	movs	r3, #0
 8002480:	61fb      	str	r3, [r7, #28]
 8002482:	2300      	movs	r3, #0
 8002484:	61bb      	str	r3, [r7, #24]
 8002486:	2300      	movs	r3, #0
 8002488:	627b      	str	r3, [r7, #36]	; 0x24
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002492:	4b2a      	ldr	r3, [pc, #168]	; (800253c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b04      	cmp	r3, #4
 80024a0:	d002      	beq.n	80024a8 <HAL_RCC_GetSysClockFreq+0x30>
 80024a2:	2b08      	cmp	r3, #8
 80024a4:	d003      	beq.n	80024ae <HAL_RCC_GetSysClockFreq+0x36>
 80024a6:	e03f      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <HAL_RCC_GetSysClockFreq+0xc8>)
 80024aa:	623b      	str	r3, [r7, #32]
      break;
 80024ac:	e03f      	b.n	800252e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80024b4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80024b8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	fa92 f2a2 	rbit	r2, r2
 80024c0:	607a      	str	r2, [r7, #4]
  return result;
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	fab2 f282 	clz	r2, r2
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	40d3      	lsrs	r3, r2
 80024cc:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <HAL_RCC_GetSysClockFreq+0xcc>)
 80024ce:	5cd3      	ldrb	r3, [r2, r3]
 80024d0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80024d2:	4b1a      	ldr	r3, [pc, #104]	; (800253c <HAL_RCC_GetSysClockFreq+0xc4>)
 80024d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d6:	f003 030f 	and.w	r3, r3, #15
 80024da:	220f      	movs	r2, #15
 80024dc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	fa92 f2a2 	rbit	r2, r2
 80024e4:	60fa      	str	r2, [r7, #12]
  return result;
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	fab2 f282 	clz	r2, r2
 80024ec:	b2d2      	uxtb	r2, r2
 80024ee:	40d3      	lsrs	r3, r2
 80024f0:	4a15      	ldr	r2, [pc, #84]	; (8002548 <HAL_RCC_GetSysClockFreq+0xd0>)
 80024f2:	5cd3      	ldrb	r3, [r2, r3]
 80024f4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002500:	4a0f      	ldr	r2, [pc, #60]	; (8002540 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	fbb2 f2f3 	udiv	r2, r2, r3
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	fb02 f303 	mul.w	r3, r2, r3
 800250e:	627b      	str	r3, [r7, #36]	; 0x24
 8002510:	e007      	b.n	8002522 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002512:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	fbb2 f2f3 	udiv	r2, r2, r3
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	fb02 f303 	mul.w	r3, r2, r3
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	623b      	str	r3, [r7, #32]
      break;
 8002526:	e002      	b.n	800252e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002528:	4b05      	ldr	r3, [pc, #20]	; (8002540 <HAL_RCC_GetSysClockFreq+0xc8>)
 800252a:	623b      	str	r3, [r7, #32]
      break;
 800252c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800252e:	6a3b      	ldr	r3, [r7, #32]
}
 8002530:	4618      	mov	r0, r3
 8002532:	372c      	adds	r7, #44	; 0x2c
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	40021000 	.word	0x40021000
 8002540:	007a1200 	.word	0x007a1200
 8002544:	08003448 	.word	0x08003448
 8002548:	08003458 	.word	0x08003458

0800254c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002550:	4b03      	ldr	r3, [pc, #12]	; (8002560 <HAL_RCC_GetHCLKFreq+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	20000000 	.word	0x20000000

08002564 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800256a:	f7ff ffef 	bl	800254c <HAL_RCC_GetHCLKFreq>
 800256e:	4601      	mov	r1, r0
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002578:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800257c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	fa92 f2a2 	rbit	r2, r2
 8002584:	603a      	str	r2, [r7, #0]
  return result;
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	fab2 f282 	clz	r2, r2
 800258c:	b2d2      	uxtb	r2, r2
 800258e:	40d3      	lsrs	r3, r2
 8002590:	4a04      	ldr	r2, [pc, #16]	; (80025a4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002592:	5cd3      	ldrb	r3, [r2, r3]
 8002594:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002598:	4618      	mov	r0, r3
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000
 80025a4:	08003440 	.word	0x08003440

080025a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80025ae:	f7ff ffcd 	bl	800254c <HAL_RCC_GetHCLKFreq>
 80025b2:	4601      	mov	r1, r0
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80025bc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80025c0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c2:	687a      	ldr	r2, [r7, #4]
 80025c4:	fa92 f2a2 	rbit	r2, r2
 80025c8:	603a      	str	r2, [r7, #0]
  return result;
 80025ca:	683a      	ldr	r2, [r7, #0]
 80025cc:	fab2 f282 	clz	r2, r2
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	40d3      	lsrs	r3, r2
 80025d4:	4a04      	ldr	r2, [pc, #16]	; (80025e8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000
 80025e8:	08003440 	.word	0x08003440

080025ec <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b092      	sub	sp, #72	; 0x48
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80025fc:	2300      	movs	r3, #0
 80025fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260a:	2b00      	cmp	r3, #0
 800260c:	f000 80d4 	beq.w	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002610:	4b4e      	ldr	r3, [pc, #312]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10e      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261c:	4b4b      	ldr	r3, [pc, #300]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800261e:	69db      	ldr	r3, [r3, #28]
 8002620:	4a4a      	ldr	r2, [pc, #296]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002622:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002626:	61d3      	str	r3, [r2, #28]
 8002628:	4b48      	ldr	r3, [pc, #288]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800262a:	69db      	ldr	r3, [r3, #28]
 800262c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002634:	2301      	movs	r3, #1
 8002636:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263a:	4b45      	ldr	r3, [pc, #276]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d118      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002646:	4b42      	ldr	r3, [pc, #264]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a41      	ldr	r2, [pc, #260]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800264c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002650:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002652:	f7fe fb75 	bl	8000d40 <HAL_GetTick>
 8002656:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002658:	e008      	b.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265a:	f7fe fb71 	bl	8000d40 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b64      	cmp	r3, #100	; 0x64
 8002666:	d901      	bls.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e1d6      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266c:	4b38      	ldr	r3, [pc, #224]	; (8002750 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002678:	4b34      	ldr	r3, [pc, #208]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002680:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002682:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8084 	beq.w	8002792 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002694:	429a      	cmp	r2, r3
 8002696:	d07c      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002698:	4b2c      	ldr	r3, [pc, #176]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026aa:	fa93 f3a3 	rbit	r3, r3
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b26      	ldr	r3, [pc, #152]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	461a      	mov	r2, r3
 80026c2:	2301      	movs	r3, #1
 80026c4:	6013      	str	r3, [r2, #0]
 80026c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ce:	fa93 f3a3 	rbit	r3, r3
 80026d2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80026d6:	fab3 f383 	clz	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	4b1d      	ldr	r3, [pc, #116]	; (8002754 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	461a      	mov	r2, r3
 80026e6:	2300      	movs	r3, #0
 80026e8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80026ea:	4a18      	ldr	r2, [pc, #96]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ee:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80026f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d04b      	beq.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7fe fb21 	bl	8000d40 <HAL_GetTick>
 80026fe:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002700:	e00a      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002702:	f7fe fb1d 	bl	8000d40 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002710:	4293      	cmp	r3, r2
 8002712:	d901      	bls.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002714:	2303      	movs	r3, #3
 8002716:	e180      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002718:	2302      	movs	r3, #2
 800271a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	fa93 f3a3 	rbit	r3, r3
 8002722:	627b      	str	r3, [r7, #36]	; 0x24
 8002724:	2302      	movs	r3, #2
 8002726:	623b      	str	r3, [r7, #32]
 8002728:	6a3b      	ldr	r3, [r7, #32]
 800272a:	fa93 f3a3 	rbit	r3, r3
 800272e:	61fb      	str	r3, [r7, #28]
  return result;
 8002730:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002732:	fab3 f383 	clz	r3, r3
 8002736:	b2db      	uxtb	r3, r3
 8002738:	095b      	lsrs	r3, r3, #5
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d108      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002746:	4b01      	ldr	r3, [pc, #4]	; (800274c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	e00d      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800274c:	40021000 	.word	0x40021000
 8002750:	40007000 	.word	0x40007000
 8002754:	10908100 	.word	0x10908100
 8002758:	2302      	movs	r3, #2
 800275a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	4ba0      	ldr	r3, [pc, #640]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	2202      	movs	r2, #2
 800276a:	613a      	str	r2, [r7, #16]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	fa92 f2a2 	rbit	r2, r2
 8002772:	60fa      	str	r2, [r7, #12]
  return result;
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	fab2 f282 	clz	r2, r2
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	f002 021f 	and.w	r2, r2, #31
 8002786:	2101      	movs	r1, #1
 8002788:	fa01 f202 	lsl.w	r2, r1, r2
 800278c:	4013      	ands	r3, r2
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0b7      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002792:	4b95      	ldr	r3, [pc, #596]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002794:	6a1b      	ldr	r3, [r3, #32]
 8002796:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4992      	ldr	r1, [pc, #584]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d105      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ac:	4b8e      	ldr	r3, [pc, #568]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	4a8d      	ldr	r2, [pc, #564]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d008      	beq.n	80027d6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027c4:	4b88      	ldr	r3, [pc, #544]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c8:	f023 0203 	bic.w	r2, r3, #3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	4985      	ldr	r1, [pc, #532]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d008      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027e2:	4b81      	ldr	r3, [pc, #516]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	497e      	ldr	r1, [pc, #504]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002800:	4b79      	ldr	r3, [pc, #484]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	691b      	ldr	r3, [r3, #16]
 800280c:	4976      	ldr	r1, [pc, #472]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0320 	and.w	r3, r3, #32
 800281a:	2b00      	cmp	r3, #0
 800281c:	d008      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800281e:	4b72      	ldr	r3, [pc, #456]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	f023 0210 	bic.w	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	69db      	ldr	r3, [r3, #28]
 800282a:	496f      	ldr	r1, [pc, #444]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800282c:	4313      	orrs	r3, r2
 800282e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d008      	beq.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800283c:	4b6a      	ldr	r3, [pc, #424]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002848:	4967      	ldr	r1, [pc, #412]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002856:	2b00      	cmp	r3, #0
 8002858:	d008      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800285a:	4b63      	ldr	r3, [pc, #396]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285e:	f023 0220 	bic.w	r2, r3, #32
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a1b      	ldr	r3, [r3, #32]
 8002866:	4960      	ldr	r1, [pc, #384]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002868:	4313      	orrs	r3, r2
 800286a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d008      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002878:	4b5b      	ldr	r3, [pc, #364]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800287a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002884:	4958      	ldr	r1, [pc, #352]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002886:	4313      	orrs	r3, r2
 8002888:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0308 	and.w	r3, r3, #8
 8002892:	2b00      	cmp	r3, #0
 8002894:	d008      	beq.n	80028a8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002896:	4b54      	ldr	r3, [pc, #336]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	695b      	ldr	r3, [r3, #20]
 80028a2:	4951      	ldr	r1, [pc, #324]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028b4:	4b4c      	ldr	r3, [pc, #304]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	4949      	ldr	r1, [pc, #292]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028d2:	4b45      	ldr	r3, [pc, #276]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	4942      	ldr	r1, [pc, #264]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80028f0:	4b3d      	ldr	r3, [pc, #244]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fc:	493a      	ldr	r1, [pc, #232]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d008      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800290e:	4b36      	ldr	r3, [pc, #216]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002912:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800291a:	4933      	ldr	r1, [pc, #204]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800291c:	4313      	orrs	r3, r2
 800291e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800292c:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002938:	492b      	ldr	r1, [pc, #172]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800294a:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4924      	ldr	r1, [pc, #144]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002958:	4313      	orrs	r3, r2
 800295a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002968:	4b1f      	ldr	r3, [pc, #124]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800296a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	491c      	ldr	r1, [pc, #112]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002986:	4b18      	ldr	r3, [pc, #96]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	4915      	ldr	r1, [pc, #84]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002994:	4313      	orrs	r3, r2
 8002996:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80029a4:	4b10      	ldr	r3, [pc, #64]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	490d      	ldr	r1, [pc, #52]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80029c2:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029ce:	4906      	ldr	r1, [pc, #24]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00c      	beq.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80029e0:	4b01      	ldr	r3, [pc, #4]	; (80029e8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	e002      	b.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x400>
 80029e6:	bf00      	nop
 80029e8:	40021000 	.word	0x40021000
 80029ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029f4:	490b      	ldr	r1, [pc, #44]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002a06:	4b07      	ldr	r3, [pc, #28]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a12:	4904      	ldr	r1, [pc, #16]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3748      	adds	r7, #72	; 0x48
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000

08002a28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e040      	b.n	8002abc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fe f83e 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2224      	movs	r2, #36	; 0x24
 8002a54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f022 0201 	bic.w	r2, r2, #1
 8002a64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f82c 	bl	8002ac4 <UART_SetConfig>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d101      	bne.n	8002a76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e022      	b.n	8002abc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d002      	beq.n	8002a84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f9f6 	bl	8002e70 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f042 0201 	orr.w	r2, r2, #1
 8002ab2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 fa7d 	bl	8002fb4 <UART_CheckIdleState>
 8002aba:	4603      	mov	r3, r0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b088      	sub	sp, #32
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	431a      	orrs	r2, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	69db      	ldr	r3, [r3, #28]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	4bab      	ldr	r3, [pc, #684]	; (8002d9c <UART_SetConfig+0x2d8>)
 8002af0:	4013      	ands	r3, r2
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6812      	ldr	r2, [r2, #0]
 8002af6:	6979      	ldr	r1, [r7, #20]
 8002af8:	430b      	orrs	r3, r1
 8002afa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	430a      	orrs	r2, r1
 8002b10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	430a      	orrs	r2, r1
 8002b34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a99      	ldr	r2, [pc, #612]	; (8002da0 <UART_SetConfig+0x2dc>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d120      	bne.n	8002b82 <UART_SetConfig+0xbe>
 8002b40:	4b98      	ldr	r3, [pc, #608]	; (8002da4 <UART_SetConfig+0x2e0>)
 8002b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b44:	f003 0303 	and.w	r3, r3, #3
 8002b48:	2b03      	cmp	r3, #3
 8002b4a:	d817      	bhi.n	8002b7c <UART_SetConfig+0xb8>
 8002b4c:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <UART_SetConfig+0x90>)
 8002b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b52:	bf00      	nop
 8002b54:	08002b65 	.word	0x08002b65
 8002b58:	08002b71 	.word	0x08002b71
 8002b5c:	08002b77 	.word	0x08002b77
 8002b60:	08002b6b 	.word	0x08002b6b
 8002b64:	2301      	movs	r3, #1
 8002b66:	77fb      	strb	r3, [r7, #31]
 8002b68:	e0b5      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002b6a:	2302      	movs	r3, #2
 8002b6c:	77fb      	strb	r3, [r7, #31]
 8002b6e:	e0b2      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002b70:	2304      	movs	r3, #4
 8002b72:	77fb      	strb	r3, [r7, #31]
 8002b74:	e0af      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002b76:	2308      	movs	r3, #8
 8002b78:	77fb      	strb	r3, [r7, #31]
 8002b7a:	e0ac      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002b7c:	2310      	movs	r3, #16
 8002b7e:	77fb      	strb	r3, [r7, #31]
 8002b80:	e0a9      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a88      	ldr	r2, [pc, #544]	; (8002da8 <UART_SetConfig+0x2e4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d124      	bne.n	8002bd6 <UART_SetConfig+0x112>
 8002b8c:	4b85      	ldr	r3, [pc, #532]	; (8002da4 <UART_SetConfig+0x2e0>)
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b98:	d011      	beq.n	8002bbe <UART_SetConfig+0xfa>
 8002b9a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002b9e:	d817      	bhi.n	8002bd0 <UART_SetConfig+0x10c>
 8002ba0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ba4:	d011      	beq.n	8002bca <UART_SetConfig+0x106>
 8002ba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002baa:	d811      	bhi.n	8002bd0 <UART_SetConfig+0x10c>
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <UART_SetConfig+0xf4>
 8002bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb4:	d006      	beq.n	8002bc4 <UART_SetConfig+0x100>
 8002bb6:	e00b      	b.n	8002bd0 <UART_SetConfig+0x10c>
 8002bb8:	2300      	movs	r3, #0
 8002bba:	77fb      	strb	r3, [r7, #31]
 8002bbc:	e08b      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	77fb      	strb	r3, [r7, #31]
 8002bc2:	e088      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	77fb      	strb	r3, [r7, #31]
 8002bc8:	e085      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002bca:	2308      	movs	r3, #8
 8002bcc:	77fb      	strb	r3, [r7, #31]
 8002bce:	e082      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002bd0:	2310      	movs	r3, #16
 8002bd2:	77fb      	strb	r3, [r7, #31]
 8002bd4:	e07f      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a74      	ldr	r2, [pc, #464]	; (8002dac <UART_SetConfig+0x2e8>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d124      	bne.n	8002c2a <UART_SetConfig+0x166>
 8002be0:	4b70      	ldr	r3, [pc, #448]	; (8002da4 <UART_SetConfig+0x2e0>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002be8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bec:	d011      	beq.n	8002c12 <UART_SetConfig+0x14e>
 8002bee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002bf2:	d817      	bhi.n	8002c24 <UART_SetConfig+0x160>
 8002bf4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bf8:	d011      	beq.n	8002c1e <UART_SetConfig+0x15a>
 8002bfa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bfe:	d811      	bhi.n	8002c24 <UART_SetConfig+0x160>
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <UART_SetConfig+0x148>
 8002c04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c08:	d006      	beq.n	8002c18 <UART_SetConfig+0x154>
 8002c0a:	e00b      	b.n	8002c24 <UART_SetConfig+0x160>
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	e061      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002c12:	2302      	movs	r3, #2
 8002c14:	77fb      	strb	r3, [r7, #31]
 8002c16:	e05e      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002c18:	2304      	movs	r3, #4
 8002c1a:	77fb      	strb	r3, [r7, #31]
 8002c1c:	e05b      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002c1e:	2308      	movs	r3, #8
 8002c20:	77fb      	strb	r3, [r7, #31]
 8002c22:	e058      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002c24:	2310      	movs	r3, #16
 8002c26:	77fb      	strb	r3, [r7, #31]
 8002c28:	e055      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a60      	ldr	r2, [pc, #384]	; (8002db0 <UART_SetConfig+0x2ec>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d124      	bne.n	8002c7e <UART_SetConfig+0x1ba>
 8002c34:	4b5b      	ldr	r3, [pc, #364]	; (8002da4 <UART_SetConfig+0x2e0>)
 8002c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c38:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c40:	d011      	beq.n	8002c66 <UART_SetConfig+0x1a2>
 8002c42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002c46:	d817      	bhi.n	8002c78 <UART_SetConfig+0x1b4>
 8002c48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c4c:	d011      	beq.n	8002c72 <UART_SetConfig+0x1ae>
 8002c4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002c52:	d811      	bhi.n	8002c78 <UART_SetConfig+0x1b4>
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <UART_SetConfig+0x19c>
 8002c58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c5c:	d006      	beq.n	8002c6c <UART_SetConfig+0x1a8>
 8002c5e:	e00b      	b.n	8002c78 <UART_SetConfig+0x1b4>
 8002c60:	2300      	movs	r3, #0
 8002c62:	77fb      	strb	r3, [r7, #31]
 8002c64:	e037      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002c66:	2302      	movs	r3, #2
 8002c68:	77fb      	strb	r3, [r7, #31]
 8002c6a:	e034      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002c6c:	2304      	movs	r3, #4
 8002c6e:	77fb      	strb	r3, [r7, #31]
 8002c70:	e031      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002c72:	2308      	movs	r3, #8
 8002c74:	77fb      	strb	r3, [r7, #31]
 8002c76:	e02e      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002c78:	2310      	movs	r3, #16
 8002c7a:	77fb      	strb	r3, [r7, #31]
 8002c7c:	e02b      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a4c      	ldr	r2, [pc, #304]	; (8002db4 <UART_SetConfig+0x2f0>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d124      	bne.n	8002cd2 <UART_SetConfig+0x20e>
 8002c88:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <UART_SetConfig+0x2e0>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002c90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c94:	d011      	beq.n	8002cba <UART_SetConfig+0x1f6>
 8002c96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002c9a:	d817      	bhi.n	8002ccc <UART_SetConfig+0x208>
 8002c9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ca0:	d011      	beq.n	8002cc6 <UART_SetConfig+0x202>
 8002ca2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ca6:	d811      	bhi.n	8002ccc <UART_SetConfig+0x208>
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d003      	beq.n	8002cb4 <UART_SetConfig+0x1f0>
 8002cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cb0:	d006      	beq.n	8002cc0 <UART_SetConfig+0x1fc>
 8002cb2:	e00b      	b.n	8002ccc <UART_SetConfig+0x208>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	77fb      	strb	r3, [r7, #31]
 8002cb8:	e00d      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	77fb      	strb	r3, [r7, #31]
 8002cbe:	e00a      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002cc0:	2304      	movs	r3, #4
 8002cc2:	77fb      	strb	r3, [r7, #31]
 8002cc4:	e007      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002cc6:	2308      	movs	r3, #8
 8002cc8:	77fb      	strb	r3, [r7, #31]
 8002cca:	e004      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002ccc:	2310      	movs	r3, #16
 8002cce:	77fb      	strb	r3, [r7, #31]
 8002cd0:	e001      	b.n	8002cd6 <UART_SetConfig+0x212>
 8002cd2:	2310      	movs	r3, #16
 8002cd4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	69db      	ldr	r3, [r3, #28]
 8002cda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cde:	d16d      	bne.n	8002dbc <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 8002ce0:	7ffb      	ldrb	r3, [r7, #31]
 8002ce2:	2b08      	cmp	r3, #8
 8002ce4:	d827      	bhi.n	8002d36 <UART_SetConfig+0x272>
 8002ce6:	a201      	add	r2, pc, #4	; (adr r2, 8002cec <UART_SetConfig+0x228>)
 8002ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cec:	08002d11 	.word	0x08002d11
 8002cf0:	08002d19 	.word	0x08002d19
 8002cf4:	08002d21 	.word	0x08002d21
 8002cf8:	08002d37 	.word	0x08002d37
 8002cfc:	08002d27 	.word	0x08002d27
 8002d00:	08002d37 	.word	0x08002d37
 8002d04:	08002d37 	.word	0x08002d37
 8002d08:	08002d37 	.word	0x08002d37
 8002d0c:	08002d2f 	.word	0x08002d2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d10:	f7ff fc28 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8002d14:	61b8      	str	r0, [r7, #24]
        break;
 8002d16:	e013      	b.n	8002d40 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d18:	f7ff fc46 	bl	80025a8 <HAL_RCC_GetPCLK2Freq>
 8002d1c:	61b8      	str	r0, [r7, #24]
        break;
 8002d1e:	e00f      	b.n	8002d40 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d20:	4b25      	ldr	r3, [pc, #148]	; (8002db8 <UART_SetConfig+0x2f4>)
 8002d22:	61bb      	str	r3, [r7, #24]
        break;
 8002d24:	e00c      	b.n	8002d40 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d26:	f7ff fba7 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002d2a:	61b8      	str	r0, [r7, #24]
        break;
 8002d2c:	e008      	b.n	8002d40 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d32:	61bb      	str	r3, [r7, #24]
        break;
 8002d34:	e004      	b.n	8002d40 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	77bb      	strb	r3, [r7, #30]
        break;
 8002d3e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	f000 8086 	beq.w	8002e54 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	005a      	lsls	r2, r3, #1
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	085b      	lsrs	r3, r3, #1
 8002d52:	441a      	add	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	2b0f      	cmp	r3, #15
 8002d64:	d916      	bls.n	8002d94 <UART_SetConfig+0x2d0>
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d6c:	d212      	bcs.n	8002d94 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	f023 030f 	bic.w	r3, r3, #15
 8002d76:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	085b      	lsrs	r3, r3, #1
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	89fb      	ldrh	r3, [r7, #14]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	89fa      	ldrh	r2, [r7, #14]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	e05f      	b.n	8002e54 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	77bb      	strb	r3, [r7, #30]
 8002d98:	e05c      	b.n	8002e54 <UART_SetConfig+0x390>
 8002d9a:	bf00      	nop
 8002d9c:	efff69f3 	.word	0xefff69f3
 8002da0:	40013800 	.word	0x40013800
 8002da4:	40021000 	.word	0x40021000
 8002da8:	40004400 	.word	0x40004400
 8002dac:	40004800 	.word	0x40004800
 8002db0:	40004c00 	.word	0x40004c00
 8002db4:	40005000 	.word	0x40005000
 8002db8:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dbc:	7ffb      	ldrb	r3, [r7, #31]
 8002dbe:	2b08      	cmp	r3, #8
 8002dc0:	d827      	bhi.n	8002e12 <UART_SetConfig+0x34e>
 8002dc2:	a201      	add	r2, pc, #4	; (adr r2, 8002dc8 <UART_SetConfig+0x304>)
 8002dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dc8:	08002ded 	.word	0x08002ded
 8002dcc:	08002df5 	.word	0x08002df5
 8002dd0:	08002dfd 	.word	0x08002dfd
 8002dd4:	08002e13 	.word	0x08002e13
 8002dd8:	08002e03 	.word	0x08002e03
 8002ddc:	08002e13 	.word	0x08002e13
 8002de0:	08002e13 	.word	0x08002e13
 8002de4:	08002e13 	.word	0x08002e13
 8002de8:	08002e0b 	.word	0x08002e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dec:	f7ff fbba 	bl	8002564 <HAL_RCC_GetPCLK1Freq>
 8002df0:	61b8      	str	r0, [r7, #24]
        break;
 8002df2:	e013      	b.n	8002e1c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002df4:	f7ff fbd8 	bl	80025a8 <HAL_RCC_GetPCLK2Freq>
 8002df8:	61b8      	str	r0, [r7, #24]
        break;
 8002dfa:	e00f      	b.n	8002e1c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dfc:	4b1b      	ldr	r3, [pc, #108]	; (8002e6c <UART_SetConfig+0x3a8>)
 8002dfe:	61bb      	str	r3, [r7, #24]
        break;
 8002e00:	e00c      	b.n	8002e1c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e02:	f7ff fb39 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002e06:	61b8      	str	r0, [r7, #24]
        break;
 8002e08:	e008      	b.n	8002e1c <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e0e:	61bb      	str	r3, [r7, #24]
        break;
 8002e10:	e004      	b.n	8002e1c <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	77bb      	strb	r3, [r7, #30]
        break;
 8002e1a:	bf00      	nop
    }

    if (pclk != 0U)
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d018      	beq.n	8002e54 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	085a      	lsrs	r2, r3, #1
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	441a      	add	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	d908      	bls.n	8002e50 <UART_SetConfig+0x38c>
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e44:	d204      	bcs.n	8002e50 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	60da      	str	r2, [r3, #12]
 8002e4e:	e001      	b.n	8002e54 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e60:	7fbb      	ldrb	r3, [r7, #30]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3720      	adds	r7, #32
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	007a1200 	.word	0x007a1200

08002e70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00a      	beq.n	8002e9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00a      	beq.n	8002ebc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	430a      	orrs	r2, r1
 8002eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	f003 0304 	and.w	r3, r3, #4
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00a      	beq.n	8002ede <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee2:	f003 0308 	and.w	r3, r3, #8
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d01a      	beq.n	8002f86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f6e:	d10a      	bne.n	8002f86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	605a      	str	r2, [r3, #4]
  }
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af02      	add	r7, sp, #8
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002fc4:	f7fd febc 	bl	8000d40 <HAL_GetTick>
 8002fc8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0308 	and.w	r3, r3, #8
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d10e      	bne.n	8002ff6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002fd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002fdc:	9300      	str	r3, [sp, #0]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f82d 	bl	8003046 <UART_WaitOnFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e023      	b.n	800303e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	2b04      	cmp	r3, #4
 8003002:	d10e      	bne.n	8003022 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003004:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f817 	bl	8003046 <UART_WaitOnFlagUntilTimeout>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	d001      	beq.n	8003022 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e00d      	b.n	800303e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2220      	movs	r2, #32
 8003026:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2200      	movs	r2, #0
 8003038:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b09c      	sub	sp, #112	; 0x70
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	603b      	str	r3, [r7, #0]
 8003052:	4613      	mov	r3, r2
 8003054:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003056:	e0a5      	b.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305e:	f000 80a1 	beq.w	80031a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003062:	f7fd fe6d 	bl	8000d40 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800306e:	429a      	cmp	r2, r3
 8003070:	d302      	bcc.n	8003078 <UART_WaitOnFlagUntilTimeout+0x32>
 8003072:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003074:	2b00      	cmp	r3, #0
 8003076:	d13e      	bne.n	80030f6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003080:	e853 3f00 	ldrex	r3, [r3]
 8003084:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003088:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800308c:	667b      	str	r3, [r7, #100]	; 0x64
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003098:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800309a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800309c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80030a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e6      	bne.n	8003078 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3308      	adds	r3, #8
 80030b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80030b4:	e853 3f00 	ldrex	r3, [r3]
 80030b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030bc:	f023 0301 	bic.w	r3, r3, #1
 80030c0:	663b      	str	r3, [r7, #96]	; 0x60
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3308      	adds	r3, #8
 80030c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80030ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80030cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80030d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030d2:	e841 2300 	strex	r3, r2, [r1]
 80030d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80030d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1e5      	bne.n	80030aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2220      	movs	r2, #32
 80030e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e067      	b.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d04f      	beq.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800310e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003112:	d147      	bne.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800311c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003126:	e853 3f00 	ldrex	r3, [r3]
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003132:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800313c:	637b      	str	r3, [r7, #52]	; 0x34
 800313e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003140:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003144:	e841 2300 	strex	r3, r2, [r1]
 8003148:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800314a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1e6      	bne.n	800311e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	3308      	adds	r3, #8
 8003156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	e853 3f00 	ldrex	r3, [r3]
 800315e:	613b      	str	r3, [r7, #16]
   return(result);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f023 0301 	bic.w	r3, r3, #1
 8003166:	66bb      	str	r3, [r7, #104]	; 0x68
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3308      	adds	r3, #8
 800316e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003170:	623a      	str	r2, [r7, #32]
 8003172:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003174:	69f9      	ldr	r1, [r7, #28]
 8003176:	6a3a      	ldr	r2, [r7, #32]
 8003178:	e841 2300 	strex	r3, r2, [r1]
 800317c:	61bb      	str	r3, [r7, #24]
   return(result);
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1e5      	bne.n	8003150 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2220      	movs	r2, #32
 800318e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2220      	movs	r2, #32
 8003194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e010      	b.n	80031c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69da      	ldr	r2, [r3, #28]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	4013      	ands	r3, r2
 80031ae:	68ba      	ldr	r2, [r7, #8]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	bf0c      	ite	eq
 80031b4:	2301      	moveq	r3, #1
 80031b6:	2300      	movne	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	461a      	mov	r2, r3
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	429a      	cmp	r2, r3
 80031c0:	f43f af4a 	beq.w	8003058 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3770      	adds	r7, #112	; 0x70
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <_ZdlPvj>:
 80031ce:	f000 b803 	b.w	80031d8 <_ZdlPv>

080031d2 <__cxa_pure_virtual>:
 80031d2:	b508      	push	{r3, lr}
 80031d4:	f000 f80e 	bl	80031f4 <_ZSt9terminatev>

080031d8 <_ZdlPv>:
 80031d8:	f000 b842 	b.w	8003260 <free>

080031dc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80031dc:	b508      	push	{r3, lr}
 80031de:	4780      	blx	r0
 80031e0:	f000 f80d 	bl	80031fe <abort>

080031e4 <_ZSt13get_terminatev>:
 80031e4:	4b02      	ldr	r3, [pc, #8]	; (80031f0 <_ZSt13get_terminatev+0xc>)
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	f3bf 8f5b 	dmb	ish
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	2000000c 	.word	0x2000000c

080031f4 <_ZSt9terminatev>:
 80031f4:	b508      	push	{r3, lr}
 80031f6:	f7ff fff5 	bl	80031e4 <_ZSt13get_terminatev>
 80031fa:	f7ff ffef 	bl	80031dc <_ZN10__cxxabiv111__terminateEPFvvE>

080031fe <abort>:
 80031fe:	b508      	push	{r3, lr}
 8003200:	2006      	movs	r0, #6
 8003202:	f000 f8b5 	bl	8003370 <raise>
 8003206:	2001      	movs	r0, #1
 8003208:	f7fd fcfa 	bl	8000c00 <_exit>

0800320c <__errno>:
 800320c:	4b01      	ldr	r3, [pc, #4]	; (8003214 <__errno+0x8>)
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	20000010 	.word	0x20000010

08003218 <__libc_init_array>:
 8003218:	b570      	push	{r4, r5, r6, lr}
 800321a:	4d0d      	ldr	r5, [pc, #52]	; (8003250 <__libc_init_array+0x38>)
 800321c:	4c0d      	ldr	r4, [pc, #52]	; (8003254 <__libc_init_array+0x3c>)
 800321e:	1b64      	subs	r4, r4, r5
 8003220:	10a4      	asrs	r4, r4, #2
 8003222:	2600      	movs	r6, #0
 8003224:	42a6      	cmp	r6, r4
 8003226:	d109      	bne.n	800323c <__libc_init_array+0x24>
 8003228:	4d0b      	ldr	r5, [pc, #44]	; (8003258 <__libc_init_array+0x40>)
 800322a:	4c0c      	ldr	r4, [pc, #48]	; (800325c <__libc_init_array+0x44>)
 800322c:	f000 f8ca 	bl	80033c4 <_init>
 8003230:	1b64      	subs	r4, r4, r5
 8003232:	10a4      	asrs	r4, r4, #2
 8003234:	2600      	movs	r6, #0
 8003236:	42a6      	cmp	r6, r4
 8003238:	d105      	bne.n	8003246 <__libc_init_array+0x2e>
 800323a:	bd70      	pop	{r4, r5, r6, pc}
 800323c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003240:	4798      	blx	r3
 8003242:	3601      	adds	r6, #1
 8003244:	e7ee      	b.n	8003224 <__libc_init_array+0xc>
 8003246:	f855 3b04 	ldr.w	r3, [r5], #4
 800324a:	4798      	blx	r3
 800324c:	3601      	adds	r6, #1
 800324e:	e7f2      	b.n	8003236 <__libc_init_array+0x1e>
 8003250:	08003468 	.word	0x08003468
 8003254:	08003468 	.word	0x08003468
 8003258:	08003468 	.word	0x08003468
 800325c:	08003474 	.word	0x08003474

08003260 <free>:
 8003260:	4b02      	ldr	r3, [pc, #8]	; (800326c <free+0xc>)
 8003262:	4601      	mov	r1, r0
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	f000 b80b 	b.w	8003280 <_free_r>
 800326a:	bf00      	nop
 800326c:	20000010 	.word	0x20000010

08003270 <memset>:
 8003270:	4402      	add	r2, r0
 8003272:	4603      	mov	r3, r0
 8003274:	4293      	cmp	r3, r2
 8003276:	d100      	bne.n	800327a <memset+0xa>
 8003278:	4770      	bx	lr
 800327a:	f803 1b01 	strb.w	r1, [r3], #1
 800327e:	e7f9      	b.n	8003274 <memset+0x4>

08003280 <_free_r>:
 8003280:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003282:	2900      	cmp	r1, #0
 8003284:	d048      	beq.n	8003318 <_free_r+0x98>
 8003286:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800328a:	9001      	str	r0, [sp, #4]
 800328c:	2b00      	cmp	r3, #0
 800328e:	f1a1 0404 	sub.w	r4, r1, #4
 8003292:	bfb8      	it	lt
 8003294:	18e4      	addlt	r4, r4, r3
 8003296:	f000 f887 	bl	80033a8 <__malloc_lock>
 800329a:	4a20      	ldr	r2, [pc, #128]	; (800331c <_free_r+0x9c>)
 800329c:	9801      	ldr	r0, [sp, #4]
 800329e:	6813      	ldr	r3, [r2, #0]
 80032a0:	4615      	mov	r5, r2
 80032a2:	b933      	cbnz	r3, 80032b2 <_free_r+0x32>
 80032a4:	6063      	str	r3, [r4, #4]
 80032a6:	6014      	str	r4, [r2, #0]
 80032a8:	b003      	add	sp, #12
 80032aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80032ae:	f000 b881 	b.w	80033b4 <__malloc_unlock>
 80032b2:	42a3      	cmp	r3, r4
 80032b4:	d90b      	bls.n	80032ce <_free_r+0x4e>
 80032b6:	6821      	ldr	r1, [r4, #0]
 80032b8:	1862      	adds	r2, r4, r1
 80032ba:	4293      	cmp	r3, r2
 80032bc:	bf04      	itt	eq
 80032be:	681a      	ldreq	r2, [r3, #0]
 80032c0:	685b      	ldreq	r3, [r3, #4]
 80032c2:	6063      	str	r3, [r4, #4]
 80032c4:	bf04      	itt	eq
 80032c6:	1852      	addeq	r2, r2, r1
 80032c8:	6022      	streq	r2, [r4, #0]
 80032ca:	602c      	str	r4, [r5, #0]
 80032cc:	e7ec      	b.n	80032a8 <_free_r+0x28>
 80032ce:	461a      	mov	r2, r3
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	b10b      	cbz	r3, 80032d8 <_free_r+0x58>
 80032d4:	42a3      	cmp	r3, r4
 80032d6:	d9fa      	bls.n	80032ce <_free_r+0x4e>
 80032d8:	6811      	ldr	r1, [r2, #0]
 80032da:	1855      	adds	r5, r2, r1
 80032dc:	42a5      	cmp	r5, r4
 80032de:	d10b      	bne.n	80032f8 <_free_r+0x78>
 80032e0:	6824      	ldr	r4, [r4, #0]
 80032e2:	4421      	add	r1, r4
 80032e4:	1854      	adds	r4, r2, r1
 80032e6:	42a3      	cmp	r3, r4
 80032e8:	6011      	str	r1, [r2, #0]
 80032ea:	d1dd      	bne.n	80032a8 <_free_r+0x28>
 80032ec:	681c      	ldr	r4, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	6053      	str	r3, [r2, #4]
 80032f2:	4421      	add	r1, r4
 80032f4:	6011      	str	r1, [r2, #0]
 80032f6:	e7d7      	b.n	80032a8 <_free_r+0x28>
 80032f8:	d902      	bls.n	8003300 <_free_r+0x80>
 80032fa:	230c      	movs	r3, #12
 80032fc:	6003      	str	r3, [r0, #0]
 80032fe:	e7d3      	b.n	80032a8 <_free_r+0x28>
 8003300:	6825      	ldr	r5, [r4, #0]
 8003302:	1961      	adds	r1, r4, r5
 8003304:	428b      	cmp	r3, r1
 8003306:	bf04      	itt	eq
 8003308:	6819      	ldreq	r1, [r3, #0]
 800330a:	685b      	ldreq	r3, [r3, #4]
 800330c:	6063      	str	r3, [r4, #4]
 800330e:	bf04      	itt	eq
 8003310:	1949      	addeq	r1, r1, r5
 8003312:	6021      	streq	r1, [r4, #0]
 8003314:	6054      	str	r4, [r2, #4]
 8003316:	e7c7      	b.n	80032a8 <_free_r+0x28>
 8003318:	b003      	add	sp, #12
 800331a:	bd30      	pop	{r4, r5, pc}
 800331c:	20000168 	.word	0x20000168

08003320 <_raise_r>:
 8003320:	291f      	cmp	r1, #31
 8003322:	b538      	push	{r3, r4, r5, lr}
 8003324:	4604      	mov	r4, r0
 8003326:	460d      	mov	r5, r1
 8003328:	d904      	bls.n	8003334 <_raise_r+0x14>
 800332a:	2316      	movs	r3, #22
 800332c:	6003      	str	r3, [r0, #0]
 800332e:	f04f 30ff 	mov.w	r0, #4294967295
 8003332:	bd38      	pop	{r3, r4, r5, pc}
 8003334:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003336:	b112      	cbz	r2, 800333e <_raise_r+0x1e>
 8003338:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800333c:	b94b      	cbnz	r3, 8003352 <_raise_r+0x32>
 800333e:	4620      	mov	r0, r4
 8003340:	f000 f830 	bl	80033a4 <_getpid_r>
 8003344:	462a      	mov	r2, r5
 8003346:	4601      	mov	r1, r0
 8003348:	4620      	mov	r0, r4
 800334a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800334e:	f000 b817 	b.w	8003380 <_kill_r>
 8003352:	2b01      	cmp	r3, #1
 8003354:	d00a      	beq.n	800336c <_raise_r+0x4c>
 8003356:	1c59      	adds	r1, r3, #1
 8003358:	d103      	bne.n	8003362 <_raise_r+0x42>
 800335a:	2316      	movs	r3, #22
 800335c:	6003      	str	r3, [r0, #0]
 800335e:	2001      	movs	r0, #1
 8003360:	e7e7      	b.n	8003332 <_raise_r+0x12>
 8003362:	2400      	movs	r4, #0
 8003364:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003368:	4628      	mov	r0, r5
 800336a:	4798      	blx	r3
 800336c:	2000      	movs	r0, #0
 800336e:	e7e0      	b.n	8003332 <_raise_r+0x12>

08003370 <raise>:
 8003370:	4b02      	ldr	r3, [pc, #8]	; (800337c <raise+0xc>)
 8003372:	4601      	mov	r1, r0
 8003374:	6818      	ldr	r0, [r3, #0]
 8003376:	f7ff bfd3 	b.w	8003320 <_raise_r>
 800337a:	bf00      	nop
 800337c:	20000010 	.word	0x20000010

08003380 <_kill_r>:
 8003380:	b538      	push	{r3, r4, r5, lr}
 8003382:	4d07      	ldr	r5, [pc, #28]	; (80033a0 <_kill_r+0x20>)
 8003384:	2300      	movs	r3, #0
 8003386:	4604      	mov	r4, r0
 8003388:	4608      	mov	r0, r1
 800338a:	4611      	mov	r1, r2
 800338c:	602b      	str	r3, [r5, #0]
 800338e:	f7fd fc27 	bl	8000be0 <_kill>
 8003392:	1c43      	adds	r3, r0, #1
 8003394:	d102      	bne.n	800339c <_kill_r+0x1c>
 8003396:	682b      	ldr	r3, [r5, #0]
 8003398:	b103      	cbz	r3, 800339c <_kill_r+0x1c>
 800339a:	6023      	str	r3, [r4, #0]
 800339c:	bd38      	pop	{r3, r4, r5, pc}
 800339e:	bf00      	nop
 80033a0:	20000170 	.word	0x20000170

080033a4 <_getpid_r>:
 80033a4:	f7fd bc14 	b.w	8000bd0 <_getpid>

080033a8 <__malloc_lock>:
 80033a8:	4801      	ldr	r0, [pc, #4]	; (80033b0 <__malloc_lock+0x8>)
 80033aa:	f000 b809 	b.w	80033c0 <__retarget_lock_acquire_recursive>
 80033ae:	bf00      	nop
 80033b0:	20000178 	.word	0x20000178

080033b4 <__malloc_unlock>:
 80033b4:	4801      	ldr	r0, [pc, #4]	; (80033bc <__malloc_unlock+0x8>)
 80033b6:	f000 b804 	b.w	80033c2 <__retarget_lock_release_recursive>
 80033ba:	bf00      	nop
 80033bc:	20000178 	.word	0x20000178

080033c0 <__retarget_lock_acquire_recursive>:
 80033c0:	4770      	bx	lr

080033c2 <__retarget_lock_release_recursive>:
 80033c2:	4770      	bx	lr

080033c4 <_init>:
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	bf00      	nop
 80033c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033ca:	bc08      	pop	{r3}
 80033cc:	469e      	mov	lr, r3
 80033ce:	4770      	bx	lr

080033d0 <_fini>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	bf00      	nop
 80033d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d6:	bc08      	pop	{r3}
 80033d8:	469e      	mov	lr, r3
 80033da:	4770      	bx	lr
