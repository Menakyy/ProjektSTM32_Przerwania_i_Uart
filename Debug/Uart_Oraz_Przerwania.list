
Uart_Oraz_Przerwania.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000083c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080009d0  080009d0  000109d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a00  08000a00  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08000a00  08000a00  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a00  08000a00  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08000a00  08000a00  00010a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08000a0c  08000a0c  00010a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08000a18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  20000070  08000a88  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  08000a88  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000056b7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017bf  00000000  00000000  00025757  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004c0  00000000  00000000  00026f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000408  00000000  00000000  000273d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021970  00000000  00000000  000277e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005f1c  00000000  00000000  00049150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bff4c  00000000  00000000  0004f06c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0010efb8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000121c  00000000  00000000  0010f00c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080009b8 	.word	0x080009b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	080009b8 	.word	0x080009b8

080001d4 <_ZN7CButton4initEP12GPIO_TypeDeftm>:

#include <CButton.h>


void CButton::init(GPIO_TypeDef* GpioPort, uint16_t GpioPin, uint32_t timerDebounce)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	603b      	str	r3, [r7, #0]
 80001e0:	4613      	mov	r3, r2
 80001e2:	80fb      	strh	r3, [r7, #6]
	this->GpioPort 	= GpioPort;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	601a      	str	r2, [r3, #0]
	this->GpioPin 	= GpioPin;
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	88fa      	ldrh	r2, [r7, #6]
 80001ee:	809a      	strh	r2, [r3, #4]
	m_timerDebounce = timerDebounce;
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	683a      	ldr	r2, [r7, #0]
 80001f4:	60da      	str	r2, [r3, #12]
	state 			= idle;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	2200      	movs	r2, #0
 80001fa:	741a      	strb	r2, [r3, #16]
}
 80001fc:	bf00      	nop
 80001fe:	3714      	adds	r7, #20
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr

08000208 <_ZN7CDriverC1Ev>:

CButton CDriver::m_blueButton;
CStateMachineLed CDriver::m_stateMachineLed;


CDriver::CDriver()
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
{
}
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr

0800021e <_ZN7CDriverD1Ev>:
CDriver::~CDriver()
 800021e:	b480      	push	{r7}
 8000220:	b083      	sub	sp, #12
 8000222:	af00      	add	r7, sp, #0
 8000224:	6078      	str	r0, [r7, #4]
{
}
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4618      	mov	r0, r3
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr

08000234 <_ZN7CDriver4initEv>:

void CDriver::init()
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	m_greenLed.init(LD2_GPIO_Port, LD2_Pin, CLed::LedStates::toggle);
 800023c:	2302      	movs	r3, #2
 800023e:	2220      	movs	r2, #32
 8000240:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000244:	4809      	ldr	r0, [pc, #36]	; (800026c <_ZN7CDriver4initEv+0x38>)
 8000246:	f000 f883 	bl	8000350 <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>

	m_blueButton.init(B1_GPIO_Port, B1_Pin, 20);
 800024a:	2314      	movs	r3, #20
 800024c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000250:	4907      	ldr	r1, [pc, #28]	; (8000270 <_ZN7CDriver4initEv+0x3c>)
 8000252:	4808      	ldr	r0, [pc, #32]	; (8000274 <_ZN7CDriver4initEv+0x40>)
 8000254:	f7ff ffbe 	bl	80001d4 <_ZN7CButton4initEP12GPIO_TypeDeftm>

	m_stateMachineLed.init(&m_greenLed,&m_blueButton);
 8000258:	4a06      	ldr	r2, [pc, #24]	; (8000274 <_ZN7CDriver4initEv+0x40>)
 800025a:	4904      	ldr	r1, [pc, #16]	; (800026c <_ZN7CDriver4initEv+0x38>)
 800025c:	4806      	ldr	r0, [pc, #24]	; (8000278 <_ZN7CDriver4initEv+0x44>)
 800025e:	f000 f8c9 	bl	80003f4 <_ZN16CStateMachineLed4initEP4CLedP7CButton>
}
 8000262:	bf00      	nop
 8000264:	3708      	adds	r7, #8
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	2000008c 	.word	0x2000008c
 8000270:	48000800 	.word	0x48000800
 8000274:	200000a4 	.word	0x200000a4
 8000278:	200000bc 	.word	0x200000bc

0800027c <_Z41__static_initialization_and_destruction_0ii>:
{
	m_blueButton.update();
	m_greenLed.update();

	m_stateMachineLed.update();
}
 800027c:	b580      	push	{r7, lr}
 800027e:	b082      	sub	sp, #8
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
 8000284:	6039      	str	r1, [r7, #0]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	2b01      	cmp	r3, #1
 800028a:	d10a      	bne.n	80002a2 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800028c:	683b      	ldr	r3, [r7, #0]
 800028e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000292:	4293      	cmp	r3, r2
 8000294:	d105      	bne.n	80002a2 <_Z41__static_initialization_and_destruction_0ii+0x26>
CLed CDriver::m_greenLed;
 8000296:	480c      	ldr	r0, [pc, #48]	; (80002c8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8000298:	f000 f82a 	bl	80002f0 <_ZN4CLedC1Ev>
CStateMachineLed CDriver::m_stateMachineLed;
 800029c:	480b      	ldr	r0, [pc, #44]	; (80002cc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800029e:	f000 f879 	bl	8000394 <_ZN16CStateMachineLedC1Ev>
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d10a      	bne.n	80002be <_Z41__static_initialization_and_destruction_0ii+0x42>
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d105      	bne.n	80002be <_Z41__static_initialization_and_destruction_0ii+0x42>
 80002b2:	4806      	ldr	r0, [pc, #24]	; (80002cc <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80002b4:	f000 f87e 	bl	80003b4 <_ZN16CStateMachineLedD1Ev>
CLed CDriver::m_greenLed;
 80002b8:	4803      	ldr	r0, [pc, #12]	; (80002c8 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80002ba:	f000 f829 	bl	8000310 <_ZN4CLedD1Ev>
}
 80002be:	bf00      	nop
 80002c0:	3708      	adds	r7, #8
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	2000008c 	.word	0x2000008c
 80002cc:	200000bc 	.word	0x200000bc

080002d0 <_GLOBAL__sub_I__ZN7CDriver10m_greenLedE>:
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80002d8:	2001      	movs	r0, #1
 80002da:	f7ff ffcf 	bl	800027c <_Z41__static_initialization_and_destruction_0ii>
 80002de:	bd80      	pop	{r7, pc}

080002e0 <_GLOBAL__sub_D__ZN7CDriver10m_greenLedE>:
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80002e8:	2000      	movs	r0, #0
 80002ea:	f7ff ffc7 	bl	800027c <_Z41__static_initialization_and_destruction_0ii>
 80002ee:	bd80      	pop	{r7, pc}

080002f0 <_ZN4CLedC1Ev>:
 *      Author: Konra
 */

#include <CLed.h>

CLed::CLed() {
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	4a04      	ldr	r2, [pc, #16]	; (800030c <_ZN4CLedC1Ev+0x1c>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4618      	mov	r0, r3
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	080009e8 	.word	0x080009e8

08000310 <_ZN4CLedD1Ev>:

CLed::~CLed() {
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <_ZN4CLedD1Ev+0x1c>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	4618      	mov	r0, r3
 8000322:	370c      	adds	r7, #12
 8000324:	46bd      	mov	sp, r7
 8000326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032a:	4770      	bx	lr
 800032c:	080009e8 	.word	0x080009e8

08000330 <_ZN4CLedD0Ev>:
CLed::~CLed() {
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
}
 8000338:	6878      	ldr	r0, [r7, #4]
 800033a:	f7ff ffe9 	bl	8000310 <_ZN4CLedD1Ev>
 800033e:	2118      	movs	r1, #24
 8000340:	6878      	ldr	r0, [r7, #4]
 8000342:	f000 faaa 	bl	800089a <_ZdlPvj>
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4618      	mov	r0, r3
 800034a:	3708      	adds	r7, #8
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}

08000350 <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>:

void CLed::init(GPIO_TypeDef* GpioPort, uint16_t GpioPin, LedStates state = off)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
 8000356:	60f8      	str	r0, [r7, #12]
 8000358:	60b9      	str	r1, [r7, #8]
 800035a:	4611      	mov	r1, r2
 800035c:	461a      	mov	r2, r3
 800035e:	460b      	mov	r3, r1
 8000360:	80fb      	strh	r3, [r7, #6]
 8000362:	4613      	mov	r3, r2
 8000364:	717b      	strb	r3, [r7, #5]
	this->GpioPort 	= GpioPort;
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	68ba      	ldr	r2, [r7, #8]
 800036a:	605a      	str	r2, [r3, #4]
	this->GpioPin 	= GpioPin;
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	88fa      	ldrh	r2, [r7, #6]
 8000370:	811a      	strh	r2, [r3, #8]
	this->state 	= state;
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	797a      	ldrb	r2, [r7, #5]
 8000376:	729a      	strb	r2, [r3, #10]
	m_timerToggle 	= 500;
 8000378:	68fb      	ldr	r3, [r7, #12]
 800037a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800037e:	60da      	str	r2, [r3, #12]
	m_enter 		= false;
 8000380:	68fb      	ldr	r3, [r7, #12]
 8000382:	2200      	movs	r2, #0
 8000384:	751a      	strb	r2, [r3, #20]
}
 8000386:	bf00      	nop
 8000388:	3714      	adds	r7, #20
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
	...

08000394 <_ZN16CStateMachineLedC1Ev>:
 *      Author: Konra
 */

#include <CStateMachineLed.h>

CStateMachineLed::CStateMachineLed() {
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	4a04      	ldr	r2, [pc, #16]	; (80003b0 <_ZN16CStateMachineLedC1Ev+0x1c>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4618      	mov	r0, r3
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	080009f8 	.word	0x080009f8

080003b4 <_ZN16CStateMachineLedD1Ev>:

CStateMachineLed::~CStateMachineLed() {
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
 80003bc:	4a04      	ldr	r2, [pc, #16]	; (80003d0 <_ZN16CStateMachineLedD1Ev+0x1c>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	080009f8 	.word	0x080009f8

080003d4 <_ZN16CStateMachineLedD0Ev>:
CStateMachineLed::~CStateMachineLed() {
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
}
 80003dc:	6878      	ldr	r0, [r7, #4]
 80003de:	f7ff ffe9 	bl	80003b4 <_ZN16CStateMachineLedD1Ev>
 80003e2:	210c      	movs	r1, #12
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f000 fa58 	bl	800089a <_ZdlPvj>
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4618      	mov	r0, r3
 80003ee:	3708      	adds	r7, #8
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}

080003f4 <_ZN16CStateMachineLed4initEP4CLedP7CButton>:

void CStateMachineLed::init(CLed* led, CButton* button)
{
 80003f4:	b480      	push	{r7}
 80003f6:	b085      	sub	sp, #20
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	60f8      	str	r0, [r7, #12]
 80003fc:	60b9      	str	r1, [r7, #8]
 80003fe:	607a      	str	r2, [r7, #4]
	this->led = led;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	68ba      	ldr	r2, [r7, #8]
 8000404:	605a      	str	r2, [r3, #4]
	this->button = button;
 8000406:	68fb      	ldr	r3, [r7, #12]
 8000408:	687a      	ldr	r2, [r7, #4]
 800040a:	609a      	str	r2, [r3, #8]
}
 800040c:	bf00      	nop
 800040e:	3714      	adds	r7, #20
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b590      	push	{r4, r7, lr}
 800041a:	b085      	sub	sp, #20
 800041c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	m_driver.init();
 800041e:	4805      	ldr	r0, [pc, #20]	; (8000434 <main+0x1c>)
 8000420:	f7ff ff08 	bl	8000234 <_ZN7CDriver4initEv>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000424:	f000 f8d6 	bl	80005d4 <HAL_Init>

  /* Initialize interrupts */

  /* USER CODE BEGIN 2 */

  const char message[] = "Hello world!\n";
 8000428:	4b03      	ldr	r3, [pc, #12]	; (8000438 <main+0x20>)
 800042a:	463c      	mov	r4, r7
 800042c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800042e:	c407      	stmia	r4!, {r0, r1, r2}
 8000430:	8023      	strh	r3, [r4, #0]



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000432:	e7fe      	b.n	8000432 <main+0x1a>
 8000434:	200000c8 	.word	0x200000c8
 8000438:	080009d0 	.word	0x080009d0

0800043c <_Z41__static_initialization_and_destruction_0ii>:
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
 8000444:	6039      	str	r1, [r7, #0]
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d107      	bne.n	800045c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000452:	4293      	cmp	r3, r2
 8000454:	d102      	bne.n	800045c <_Z41__static_initialization_and_destruction_0ii+0x20>
CDriver m_driver;
 8000456:	4809      	ldr	r0, [pc, #36]	; (800047c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000458:	f7ff fed6 	bl	8000208 <_ZN7CDriverC1Ev>
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d107      	bne.n	8000472 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000468:	4293      	cmp	r3, r2
 800046a:	d102      	bne.n	8000472 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800046c:	4803      	ldr	r0, [pc, #12]	; (800047c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800046e:	f7ff fed6 	bl	800021e <_ZN7CDriverD1Ev>
}
 8000472:	bf00      	nop
 8000474:	3708      	adds	r7, #8
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	200000c8 	.word	0x200000c8

08000480 <_GLOBAL__sub_I_m_driver>:
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
 8000484:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000488:	2001      	movs	r0, #1
 800048a:	f7ff ffd7 	bl	800043c <_Z41__static_initialization_and_destruction_0ii>
 800048e:	bd80      	pop	{r7, pc}

08000490 <_GLOBAL__sub_D_m_driver>:
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
 8000494:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000498:	2000      	movs	r0, #0
 800049a:	f7ff ffcf 	bl	800043c <_Z41__static_initialization_and_destruction_0ii>
 800049e:	bd80      	pop	{r7, pc}

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a6:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <HAL_MspInit+0x44>)
 80004a8:	699b      	ldr	r3, [r3, #24]
 80004aa:	4a0e      	ldr	r2, [pc, #56]	; (80004e4 <HAL_MspInit+0x44>)
 80004ac:	f043 0301 	orr.w	r3, r3, #1
 80004b0:	6193      	str	r3, [r2, #24]
 80004b2:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <HAL_MspInit+0x44>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004be:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <HAL_MspInit+0x44>)
 80004c0:	69db      	ldr	r3, [r3, #28]
 80004c2:	4a08      	ldr	r2, [pc, #32]	; (80004e4 <HAL_MspInit+0x44>)
 80004c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c8:	61d3      	str	r3, [r2, #28]
 80004ca:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <HAL_MspInit+0x44>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004d6:	2007      	movs	r0, #7
 80004d8:	f000 f988 	bl	80007ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004dc:	bf00      	nop
 80004de:	3708      	adds	r7, #8
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bd80      	pop	{r7, pc}
 80004e4:	40021000 	.word	0x40021000

080004e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004ec:	e7fe      	b.n	80004ec <NMI_Handler+0x4>

080004ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ee:	b480      	push	{r7}
 80004f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004f2:	e7fe      	b.n	80004f2 <HardFault_Handler+0x4>

080004f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004f8:	e7fe      	b.n	80004f8 <MemManage_Handler+0x4>

080004fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004fe:	e7fe      	b.n	80004fe <BusFault_Handler+0x4>

08000500 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000504:	e7fe      	b.n	8000504 <UsageFault_Handler+0x4>

08000506 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000506:	b480      	push	{r7}
 8000508:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800050a:	bf00      	nop
 800050c:	46bd      	mov	sp, r7
 800050e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000512:	4770      	bx	lr

08000514 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000522:	b480      	push	{r7}
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000526:	bf00      	nop
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000534:	f000 f894 	bl	8000660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}

0800053c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000540:	2001      	movs	r0, #1
 8000542:	f000 f987 	bl	8000854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000546:	bf00      	nop
 8000548:	bd80      	pop	{r7, pc}

0800054a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800054a:	b580      	push	{r7, lr}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800054e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000552:	f000 f97f 	bl	8000854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000556:	bf00      	nop
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <SystemInit+0x20>)
 8000562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000566:	4a05      	ldr	r2, [pc, #20]	; (800057c <SystemInit+0x20>)
 8000568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800056c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000570:	bf00      	nop
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	e000ed00 	.word	0xe000ed00

08000580 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000580:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000584:	480d      	ldr	r0, [pc, #52]	; (80005bc <LoopForever+0x6>)
  ldr r1, =_edata
 8000586:	490e      	ldr	r1, [pc, #56]	; (80005c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000588:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <LoopForever+0xe>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800058c:	e002      	b.n	8000594 <LoopCopyDataInit>

0800058e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800058e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000590:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000592:	3304      	adds	r3, #4

08000594 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000594:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000596:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000598:	d3f9      	bcc.n	800058e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059a:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800059c:	4c0b      	ldr	r4, [pc, #44]	; (80005cc <LoopForever+0x16>)
  movs r3, #0
 800059e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a0:	e001      	b.n	80005a6 <LoopFillZerobss>

080005a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a4:	3204      	adds	r2, #4

080005a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005a8:	d3fb      	bcc.n	80005a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005aa:	f7ff ffd7 	bl	800055c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005ae:	f000 f979 	bl	80008a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80005b2:	f7ff ff31 	bl	8000418 <main>

080005b6 <LoopForever>:

LoopForever:
    b LoopForever
 80005b6:	e7fe      	b.n	80005b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80005c4:	08000a18 	.word	0x08000a18
  ldr r2, =_sbss
 80005c8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80005cc:	200000e0 	.word	0x200000e0

080005d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC1_2_IRQHandler>
	...

080005d4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <HAL_Init+0x28>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a07      	ldr	r2, [pc, #28]	; (80005fc <HAL_Init+0x28>)
 80005de:	f043 0310 	orr.w	r3, r3, #16
 80005e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f901 	bl	80007ec <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 f808 	bl	8000600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f0:	f7ff ff56 	bl	80004a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40022000 	.word	0x40022000

08000600 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <HAL_InitTick+0x54>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <HAL_InitTick+0x58>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4619      	mov	r1, r3
 8000612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000616:	fbb3 f3f1 	udiv	r3, r3, r1
 800061a:	fbb2 f3f3 	udiv	r3, r2, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f000 f90b 	bl	800083a <HAL_SYSTICK_Config>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e00e      	b.n	800064c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	d80a      	bhi.n	800064a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000634:	2200      	movs	r2, #0
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	f04f 30ff 	mov.w	r0, #4294967295
 800063c:	f000 f8e1 	bl	8000802 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000640:	4a06      	ldr	r2, [pc, #24]	; (800065c <HAL_InitTick+0x5c>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000646:	2300      	movs	r3, #0
 8000648:	e000      	b.n	800064c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000000 	.word	0x20000000
 8000658:	20000008 	.word	0x20000008
 800065c:	20000004 	.word	0x20000004

08000660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_IncTick+0x20>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x24>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4413      	add	r3, r2
 8000670:	4a04      	ldr	r2, [pc, #16]	; (8000684 <HAL_IncTick+0x24>)
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	20000008 	.word	0x20000008
 8000684:	200000d0 	.word	0x200000d0

08000688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <__NVIC_SetPriorityGrouping+0x44>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a4:	4013      	ands	r3, r2
 80006a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ba:	4a04      	ldr	r2, [pc, #16]	; (80006cc <__NVIC_SetPriorityGrouping+0x44>)
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	60d3      	str	r3, [r2, #12]
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <__NVIC_GetPriorityGrouping+0x18>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	f003 0307 	and.w	r3, r3, #7
}
 80006de:	4618      	mov	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	6039      	str	r1, [r7, #0]
 80006f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	db0a      	blt.n	8000716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	b2da      	uxtb	r2, r3
 8000704:	490c      	ldr	r1, [pc, #48]	; (8000738 <__NVIC_SetPriority+0x4c>)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	0112      	lsls	r2, r2, #4
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	440b      	add	r3, r1
 8000710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000714:	e00a      	b.n	800072c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4908      	ldr	r1, [pc, #32]	; (800073c <__NVIC_SetPriority+0x50>)
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	f003 030f 	and.w	r3, r3, #15
 8000722:	3b04      	subs	r3, #4
 8000724:	0112      	lsls	r2, r2, #4
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	440b      	add	r3, r1
 800072a:	761a      	strb	r2, [r3, #24]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000e100 	.word	0xe000e100
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000740:	b480      	push	{r7}
 8000742:	b089      	sub	sp, #36	; 0x24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	f1c3 0307 	rsb	r3, r3, #7
 800075a:	2b04      	cmp	r3, #4
 800075c:	bf28      	it	cs
 800075e:	2304      	movcs	r3, #4
 8000760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	3304      	adds	r3, #4
 8000766:	2b06      	cmp	r3, #6
 8000768:	d902      	bls.n	8000770 <NVIC_EncodePriority+0x30>
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	3b03      	subs	r3, #3
 800076e:	e000      	b.n	8000772 <NVIC_EncodePriority+0x32>
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	f04f 32ff 	mov.w	r2, #4294967295
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	fa02 f303 	lsl.w	r3, r2, r3
 800077e:	43da      	mvns	r2, r3
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	401a      	ands	r2, r3
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000788:	f04f 31ff 	mov.w	r1, #4294967295
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	fa01 f303 	lsl.w	r3, r1, r3
 8000792:	43d9      	mvns	r1, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	4313      	orrs	r3, r2
         );
}
 800079a:	4618      	mov	r0, r3
 800079c:	3724      	adds	r7, #36	; 0x24
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b8:	d301      	bcc.n	80007be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00f      	b.n	80007de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <SysTick_Config+0x40>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c6:	210f      	movs	r1, #15
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f7ff ff8e 	bl	80006ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <SysTick_Config+0x40>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <SysTick_Config+0x40>)
 80007d8:	2207      	movs	r2, #7
 80007da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	e000e010 	.word	0xe000e010

080007ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff47 	bl	8000688 <__NVIC_SetPriorityGrouping>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000814:	f7ff ff5c 	bl	80006d0 <__NVIC_GetPriorityGrouping>
 8000818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	6978      	ldr	r0, [r7, #20]
 8000820:	f7ff ff8e 	bl	8000740 <NVIC_EncodePriority>
 8000824:	4602      	mov	r2, r0
 8000826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff5d 	bl	80006ec <__NVIC_SetPriority>
}
 8000832:	bf00      	nop
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffb0 	bl	80007a8 <SysTick_Config>
 8000848:	4603      	mov	r3, r0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
	...

08000854 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	4013      	ands	r3, r2
 8000866:	2b00      	cmp	r3, #0
 8000868:	d006      	beq.n	8000878 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800086a:	4a05      	ldr	r2, [pc, #20]	; (8000880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800086c:	88fb      	ldrh	r3, [r7, #6]
 800086e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000870:	88fb      	ldrh	r3, [r7, #6]
 8000872:	4618      	mov	r0, r3
 8000874:	f000 f806 	bl	8000884 <HAL_GPIO_EXTI_Callback>
  }
}
 8000878:	bf00      	nop
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40010400 	.word	0x40010400

08000884 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <_ZdlPvj>:
 800089a:	f000 b800 	b.w	800089e <_ZdlPv>

0800089e <_ZdlPv>:
 800089e:	f000 b825 	b.w	80008ec <free>
	...

080008a4 <__libc_init_array>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	4d0d      	ldr	r5, [pc, #52]	; (80008dc <__libc_init_array+0x38>)
 80008a8:	4c0d      	ldr	r4, [pc, #52]	; (80008e0 <__libc_init_array+0x3c>)
 80008aa:	1b64      	subs	r4, r4, r5
 80008ac:	10a4      	asrs	r4, r4, #2
 80008ae:	2600      	movs	r6, #0
 80008b0:	42a6      	cmp	r6, r4
 80008b2:	d109      	bne.n	80008c8 <__libc_init_array+0x24>
 80008b4:	4d0b      	ldr	r5, [pc, #44]	; (80008e4 <__libc_init_array+0x40>)
 80008b6:	4c0c      	ldr	r4, [pc, #48]	; (80008e8 <__libc_init_array+0x44>)
 80008b8:	f000 f87e 	bl	80009b8 <_init>
 80008bc:	1b64      	subs	r4, r4, r5
 80008be:	10a4      	asrs	r4, r4, #2
 80008c0:	2600      	movs	r6, #0
 80008c2:	42a6      	cmp	r6, r4
 80008c4:	d105      	bne.n	80008d2 <__libc_init_array+0x2e>
 80008c6:	bd70      	pop	{r4, r5, r6, pc}
 80008c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80008cc:	4798      	blx	r3
 80008ce:	3601      	adds	r6, #1
 80008d0:	e7ee      	b.n	80008b0 <__libc_init_array+0xc>
 80008d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80008d6:	4798      	blx	r3
 80008d8:	3601      	adds	r6, #1
 80008da:	e7f2      	b.n	80008c2 <__libc_init_array+0x1e>
 80008dc:	08000a00 	.word	0x08000a00
 80008e0:	08000a00 	.word	0x08000a00
 80008e4:	08000a00 	.word	0x08000a00
 80008e8:	08000a0c 	.word	0x08000a0c

080008ec <free>:
 80008ec:	4b02      	ldr	r3, [pc, #8]	; (80008f8 <free+0xc>)
 80008ee:	4601      	mov	r1, r0
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	f000 b803 	b.w	80008fc <_free_r>
 80008f6:	bf00      	nop
 80008f8:	2000000c 	.word	0x2000000c

080008fc <_free_r>:
 80008fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80008fe:	2900      	cmp	r1, #0
 8000900:	d048      	beq.n	8000994 <_free_r+0x98>
 8000902:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000906:	9001      	str	r0, [sp, #4]
 8000908:	2b00      	cmp	r3, #0
 800090a:	f1a1 0404 	sub.w	r4, r1, #4
 800090e:	bfb8      	it	lt
 8000910:	18e4      	addlt	r4, r4, r3
 8000912:	f000 f843 	bl	800099c <__malloc_lock>
 8000916:	4a20      	ldr	r2, [pc, #128]	; (8000998 <_free_r+0x9c>)
 8000918:	9801      	ldr	r0, [sp, #4]
 800091a:	6813      	ldr	r3, [r2, #0]
 800091c:	4615      	mov	r5, r2
 800091e:	b933      	cbnz	r3, 800092e <_free_r+0x32>
 8000920:	6063      	str	r3, [r4, #4]
 8000922:	6014      	str	r4, [r2, #0]
 8000924:	b003      	add	sp, #12
 8000926:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800092a:	f000 b83d 	b.w	80009a8 <__malloc_unlock>
 800092e:	42a3      	cmp	r3, r4
 8000930:	d90b      	bls.n	800094a <_free_r+0x4e>
 8000932:	6821      	ldr	r1, [r4, #0]
 8000934:	1862      	adds	r2, r4, r1
 8000936:	4293      	cmp	r3, r2
 8000938:	bf04      	itt	eq
 800093a:	681a      	ldreq	r2, [r3, #0]
 800093c:	685b      	ldreq	r3, [r3, #4]
 800093e:	6063      	str	r3, [r4, #4]
 8000940:	bf04      	itt	eq
 8000942:	1852      	addeq	r2, r2, r1
 8000944:	6022      	streq	r2, [r4, #0]
 8000946:	602c      	str	r4, [r5, #0]
 8000948:	e7ec      	b.n	8000924 <_free_r+0x28>
 800094a:	461a      	mov	r2, r3
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	b10b      	cbz	r3, 8000954 <_free_r+0x58>
 8000950:	42a3      	cmp	r3, r4
 8000952:	d9fa      	bls.n	800094a <_free_r+0x4e>
 8000954:	6811      	ldr	r1, [r2, #0]
 8000956:	1855      	adds	r5, r2, r1
 8000958:	42a5      	cmp	r5, r4
 800095a:	d10b      	bne.n	8000974 <_free_r+0x78>
 800095c:	6824      	ldr	r4, [r4, #0]
 800095e:	4421      	add	r1, r4
 8000960:	1854      	adds	r4, r2, r1
 8000962:	42a3      	cmp	r3, r4
 8000964:	6011      	str	r1, [r2, #0]
 8000966:	d1dd      	bne.n	8000924 <_free_r+0x28>
 8000968:	681c      	ldr	r4, [r3, #0]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	6053      	str	r3, [r2, #4]
 800096e:	4421      	add	r1, r4
 8000970:	6011      	str	r1, [r2, #0]
 8000972:	e7d7      	b.n	8000924 <_free_r+0x28>
 8000974:	d902      	bls.n	800097c <_free_r+0x80>
 8000976:	230c      	movs	r3, #12
 8000978:	6003      	str	r3, [r0, #0]
 800097a:	e7d3      	b.n	8000924 <_free_r+0x28>
 800097c:	6825      	ldr	r5, [r4, #0]
 800097e:	1961      	adds	r1, r4, r5
 8000980:	428b      	cmp	r3, r1
 8000982:	bf04      	itt	eq
 8000984:	6819      	ldreq	r1, [r3, #0]
 8000986:	685b      	ldreq	r3, [r3, #4]
 8000988:	6063      	str	r3, [r4, #4]
 800098a:	bf04      	itt	eq
 800098c:	1949      	addeq	r1, r1, r5
 800098e:	6021      	streq	r1, [r4, #0]
 8000990:	6054      	str	r4, [r2, #4]
 8000992:	e7c7      	b.n	8000924 <_free_r+0x28>
 8000994:	b003      	add	sp, #12
 8000996:	bd30      	pop	{r4, r5, pc}
 8000998:	200000cc 	.word	0x200000cc

0800099c <__malloc_lock>:
 800099c:	4801      	ldr	r0, [pc, #4]	; (80009a4 <__malloc_lock+0x8>)
 800099e:	f000 b809 	b.w	80009b4 <__retarget_lock_acquire_recursive>
 80009a2:	bf00      	nop
 80009a4:	200000d8 	.word	0x200000d8

080009a8 <__malloc_unlock>:
 80009a8:	4801      	ldr	r0, [pc, #4]	; (80009b0 <__malloc_unlock+0x8>)
 80009aa:	f000 b804 	b.w	80009b6 <__retarget_lock_release_recursive>
 80009ae:	bf00      	nop
 80009b0:	200000d8 	.word	0x200000d8

080009b4 <__retarget_lock_acquire_recursive>:
 80009b4:	4770      	bx	lr

080009b6 <__retarget_lock_release_recursive>:
 80009b6:	4770      	bx	lr

080009b8 <_init>:
 80009b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ba:	bf00      	nop
 80009bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009be:	bc08      	pop	{r3}
 80009c0:	469e      	mov	lr, r3
 80009c2:	4770      	bx	lr

080009c4 <_fini>:
 80009c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009c6:	bf00      	nop
 80009c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009ca:	bc08      	pop	{r3}
 80009cc:	469e      	mov	lr, r3
 80009ce:	4770      	bx	lr
