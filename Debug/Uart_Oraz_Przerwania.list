
Uart_Oraz_Przerwania.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ab8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003c4c  08003c4c  00013c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cd8  08003cd8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08003cd8  08003cd8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cd8  08003cd8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08003cd8  08003cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08003ce4  08003ce4  00013ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08003cf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000074  08003d64  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08003d64  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011545  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003036  00000000  00000000  000315e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  00034620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000968  00000000  00000000  00035090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a14  00000000  00000000  000359f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e835  00000000  00000000  0005940c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c30b7  00000000  00000000  00067c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012acf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c7c  00000000  00000000  0012ad4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003c34 	.word	0x08003c34

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	08003c34 	.word	0x08003c34

080001d4 <_ZN5IGPIOC1Ev>:
 */

#ifndef INC_IGPIO_H_
#define INC_IGPIO_H_

class IGPIO {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <_ZN5IGPIOC1Ev+0x1c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4618      	mov	r0, r3
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	08003c68 	.word	0x08003c68

080001f4 <_ZN7CButtonC1Ev>:


#include <CButton.h>


CButton::CButton() {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4618      	mov	r0, r3
 8000200:	f7ff ffe8 	bl	80001d4 <_ZN5IGPIOC1Ev>
 8000204:	4a03      	ldr	r2, [pc, #12]	; (8000214 <_ZN7CButtonC1Ev+0x20>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4618      	mov	r0, r3
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	08003c54 	.word	0x08003c54

08000218 <_ZN7CButtonD1Ev>:

CButton::~CButton() {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	4a04      	ldr	r2, [pc, #16]	; (8000234 <_ZN7CButtonD1Ev+0x1c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4618      	mov	r0, r3
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	08003c54 	.word	0x08003c54

08000238 <_ZN7CButtonD0Ev>:
CButton::~CButton() {
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
}
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f7ff ffe9 	bl	8000218 <_ZN7CButtonD1Ev>
 8000246:	211c      	movs	r1, #28
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f003 fbf7 	bl	8003a3c <_ZdlPvj>
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4618      	mov	r0, r3
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}

08000258 <_ZN7CButton4initEP12GPIO_TypeDeftm>:

void CButton::init(GPIO_TypeDef* GpioPort, uint16_t GpioPin, uint32_t timerDebounce)
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	603b      	str	r3, [r7, #0]
 8000264:	4613      	mov	r3, r2
 8000266:	80fb      	strh	r3, [r7, #6]
	this->GpioPort 	= GpioPort;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	605a      	str	r2, [r3, #4]
	this->GpioPin 	= GpioPin;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	88fa      	ldrh	r2, [r7, #6]
 8000272:	811a      	strh	r2, [r3, #8]
	m_timerDebounce = timerDebounce;
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	683a      	ldr	r2, [r7, #0]
 8000278:	611a      	str	r2, [r3, #16]
	state 			= idle;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	2200      	movs	r2, #0
 800027e:	751a      	strb	r2, [r3, #20]
}
 8000280:	bf00      	nop
 8000282:	3714      	adds	r7, #20
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr

0800028c <_ZN7CButton6updateEv>:

void CButton::update()
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	switch(state)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	7d1b      	ldrb	r3, [r3, #20]
 8000298:	2b02      	cmp	r3, #2
 800029a:	d04b      	beq.n	8000334 <_ZN7CButton6updateEv+0xa8>
 800029c:	2b02      	cmp	r3, #2
 800029e:	dc62      	bgt.n	8000366 <_ZN7CButton6updateEv+0xda>
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d002      	beq.n	80002aa <_ZN7CButton6updateEv+0x1e>
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d019      	beq.n	80002dc <_ZN7CButton6updateEv+0x50>
			{
				state = idle;
			}
			break;
	}
}
 80002a8:	e05d      	b.n	8000366 <_ZN7CButton6updateEv+0xda>
			if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	891b      	ldrh	r3, [r3, #8]
 80002b2:	4619      	mov	r1, r3
 80002b4:	4610      	mov	r0, r2
 80002b6:	f001 f881 	bl	80013bc <HAL_GPIO_ReadPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	bf0c      	ite	eq
 80002c0:	2301      	moveq	r3, #1
 80002c2:	2300      	movne	r3, #0
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d048      	beq.n	800035c <_ZN7CButton6updateEv+0xd0>
				state = debounce;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2201      	movs	r2, #1
 80002ce:	751a      	strb	r2, [r3, #20]
				m_lastTick = HAL_GetTick();
 80002d0:	f000 fd56 	bl	8000d80 <HAL_GetTick>
 80002d4:	4602      	mov	r2, r0
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	60da      	str	r2, [r3, #12]
			break;
 80002da:	e03f      	b.n	800035c <_ZN7CButton6updateEv+0xd0>
			if((HAL_GetTick() - m_lastTick) > m_timerDebounce)
 80002dc:	f000 fd50 	bl	8000d80 <HAL_GetTick>
 80002e0:	4602      	mov	r2, r0
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	1ad2      	subs	r2, r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	bf8c      	ite	hi
 80002f0:	2301      	movhi	r3, #1
 80002f2:	2300      	movls	r3, #0
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d032      	beq.n	8000360 <_ZN7CButton6updateEv+0xd4>
				if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	685a      	ldr	r2, [r3, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	891b      	ldrh	r3, [r3, #8]
 8000302:	4619      	mov	r1, r3
 8000304:	4610      	mov	r0, r2
 8000306:	f001 f859 	bl	80013bc <HAL_GPIO_ReadPin>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	bf0c      	ite	eq
 8000310:	2301      	moveq	r3, #1
 8000312:	2300      	movne	r3, #0
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d008      	beq.n	800032c <_ZN7CButton6updateEv+0xa0>
					state = pressed;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2202      	movs	r2, #2
 800031e:	751a      	strb	r2, [r3, #20]
					m_lastTick = HAL_GetTick();
 8000320:	f000 fd2e 	bl	8000d80 <HAL_GetTick>
 8000324:	4602      	mov	r2, r0
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	60da      	str	r2, [r3, #12]
			break;
 800032a:	e019      	b.n	8000360 <_ZN7CButton6updateEv+0xd4>
					state = idle;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2200      	movs	r2, #0
 8000330:	751a      	strb	r2, [r3, #20]
			break;
 8000332:	e015      	b.n	8000360 <_ZN7CButton6updateEv+0xd4>
			if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	685a      	ldr	r2, [r3, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	891b      	ldrh	r3, [r3, #8]
 800033c:	4619      	mov	r1, r3
 800033e:	4610      	mov	r0, r2
 8000340:	f001 f83c 	bl	80013bc <HAL_GPIO_ReadPin>
 8000344:	4603      	mov	r3, r0
 8000346:	2b01      	cmp	r3, #1
 8000348:	bf0c      	ite	eq
 800034a:	2301      	moveq	r3, #1
 800034c:	2300      	movne	r3, #0
 800034e:	b2db      	uxtb	r3, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	d007      	beq.n	8000364 <_ZN7CButton6updateEv+0xd8>
				state = idle;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2200      	movs	r2, #0
 8000358:	751a      	strb	r2, [r3, #20]
			break;
 800035a:	e003      	b.n	8000364 <_ZN7CButton6updateEv+0xd8>
			break;
 800035c:	bf00      	nop
 800035e:	e002      	b.n	8000366 <_ZN7CButton6updateEv+0xda>
			break;
 8000360:	bf00      	nop
 8000362:	e000      	b.n	8000366 <_ZN7CButton6updateEv+0xda>
			break;
 8000364:	bf00      	nop
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
	...

08000370 <_ZN7CHelper7getUartEv>:
	static void MX_NVIC_Init(void);

	//functions
	static void Error_Handler();

	static inline UART_HandleTypeDef* getUart() {return &huart2;}
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
 8000374:	4b02      	ldr	r3, [pc, #8]	; (8000380 <_ZN7CHelper7getUartEv+0x10>)
 8000376:	4618      	mov	r0, r3
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	200000f0 	.word	0x200000f0

08000384 <_ZN7CDriverC1Ev>:
CButton CDriver::m_blueButton;
CStateMachineLed CDriver::m_stateMachineLed;

const char message[] = "test\r\n";

CDriver::CDriver()
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
{
}
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4618      	mov	r0, r3
 8000390:	370c      	adds	r7, #12
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr

0800039a <_ZN7CDriverD1Ev>:
CDriver::~CDriver()
 800039a:	b480      	push	{r7}
 800039c:	b083      	sub	sp, #12
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
{
}
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4618      	mov	r0, r3
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <_ZN7CDriver4initEv>:

void CDriver::init()
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b082      	sub	sp, #8
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
	m_uartDriver.init(CHelper::getUart());
 80003b8:	f7ff ffda 	bl	8000370 <_ZN7CHelper7getUartEv>
 80003bc:	4603      	mov	r3, r0
 80003be:	4619      	mov	r1, r3
 80003c0:	480d      	ldr	r0, [pc, #52]	; (80003f8 <_ZN7CDriver4initEv+0x48>)
 80003c2:	f000 fb2b 	bl	8000a1c <_ZN11CUartDriver4initEP20__UART_HandleTypeDef>

	m_greenLed.init(LD2_GPIO_Port, LD2_Pin, CLed::LedStates::toggle);
 80003c6:	2302      	movs	r3, #2
 80003c8:	2220      	movs	r2, #32
 80003ca:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003ce:	480b      	ldr	r0, [pc, #44]	; (80003fc <_ZN7CDriver4initEv+0x4c>)
 80003d0:	f000 fa20 	bl	8000814 <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>
	m_blueButton.init(B1_GPIO_Port, B1_Pin, 20);
 80003d4:	2314      	movs	r3, #20
 80003d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003da:	4909      	ldr	r1, [pc, #36]	; (8000400 <_ZN7CDriver4initEv+0x50>)
 80003dc:	4809      	ldr	r0, [pc, #36]	; (8000404 <_ZN7CDriver4initEv+0x54>)
 80003de:	f7ff ff3b 	bl	8000258 <_ZN7CButton4initEP12GPIO_TypeDeftm>
	m_stateMachineLed.init(&m_greenLed,&m_blueButton,&m_uartDriver);
 80003e2:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <_ZN7CDriver4initEv+0x48>)
 80003e4:	4a07      	ldr	r2, [pc, #28]	; (8000404 <_ZN7CDriver4initEv+0x54>)
 80003e6:	4905      	ldr	r1, [pc, #20]	; (80003fc <_ZN7CDriver4initEv+0x4c>)
 80003e8:	4807      	ldr	r0, [pc, #28]	; (8000408 <_ZN7CDriver4initEv+0x58>)
 80003ea:	f000 fad1 	bl	8000990 <_ZN16CStateMachineLed4initEP4CLedP7CButtonP11CUartDriver>
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	bf00      	nop
 80003f8:	20000090 	.word	0x20000090
 80003fc:	200000ac 	.word	0x200000ac
 8000400:	48000800 	.word	0x48000800
 8000404:	200000c4 	.word	0x200000c4
 8000408:	200000e0 	.word	0x200000e0

0800040c <_ZN7CDriver6updateEv>:


void CDriver::update()
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]



	//m_uartDriver.transmit((uint8_t*)message, strlen(message),500);

}
 8000414:	bf00      	nop
 8000416:	370c      	adds	r7, #12
 8000418:	46bd      	mov	sp, r7
 800041a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041e:	4770      	bx	lr

08000420 <_Z41__static_initialization_and_destruction_0ii>:
 8000420:	b580      	push	{r7, lr}
 8000422:	b082      	sub	sp, #8
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	2b01      	cmp	r3, #1
 800042e:	d110      	bne.n	8000452 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000436:	4293      	cmp	r3, r2
 8000438:	d10b      	bne.n	8000452 <_Z41__static_initialization_and_destruction_0ii+0x32>
CUartDriver CDriver::m_uartDriver;
 800043a:	4812      	ldr	r0, [pc, #72]	; (8000484 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800043c:	f000 fabe 	bl	80009bc <_ZN11CUartDriverC1Ev>
CLed CDriver::m_greenLed;
 8000440:	4811      	ldr	r0, [pc, #68]	; (8000488 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000442:	f000 f9b5 	bl	80007b0 <_ZN4CLedC1Ev>
CButton CDriver::m_blueButton;
 8000446:	4811      	ldr	r0, [pc, #68]	; (800048c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8000448:	f7ff fed4 	bl	80001f4 <_ZN7CButtonC1Ev>
CStateMachineLed CDriver::m_stateMachineLed;
 800044c:	4810      	ldr	r0, [pc, #64]	; (8000490 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800044e:	f000 fa6f 	bl	8000930 <_ZN16CStateMachineLedC1Ev>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d110      	bne.n	800047a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800045e:	4293      	cmp	r3, r2
 8000460:	d10b      	bne.n	800047a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8000462:	480b      	ldr	r0, [pc, #44]	; (8000490 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000464:	f000 fa74 	bl	8000950 <_ZN16CStateMachineLedD1Ev>
CButton CDriver::m_blueButton;
 8000468:	4808      	ldr	r0, [pc, #32]	; (800048c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800046a:	f7ff fed5 	bl	8000218 <_ZN7CButtonD1Ev>
CLed CDriver::m_greenLed;
 800046e:	4806      	ldr	r0, [pc, #24]	; (8000488 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000470:	f000 f9b0 	bl	80007d4 <_ZN4CLedD1Ev>
CUartDriver CDriver::m_uartDriver;
 8000474:	4803      	ldr	r0, [pc, #12]	; (8000484 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000476:	f000 fab1 	bl	80009dc <_ZN11CUartDriverD1Ev>
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000090 	.word	0x20000090
 8000488:	200000ac 	.word	0x200000ac
 800048c:	200000c4 	.word	0x200000c4
 8000490:	200000e0 	.word	0x200000e0

08000494 <_GLOBAL__sub_I__ZN7CDriver12driverBufferE>:
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
 8000498:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff ffbf 	bl	8000420 <_Z41__static_initialization_and_destruction_0ii>
 80004a2:	bd80      	pop	{r7, pc}

080004a4 <_GLOBAL__sub_D__ZN7CDriver12driverBufferE>:
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004ac:	2000      	movs	r0, #0
 80004ae:	f7ff ffb7 	bl	8000420 <_Z41__static_initialization_and_destruction_0ii>
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <_ZN7CHelper4initEv>:

UART_HandleTypeDef CHelper::huart2;


void CHelper::init()
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	SystemClock_Config();
 80004b8:	f000 f908 	bl	80006cc <_ZN7CHelper18SystemClock_ConfigEv>
	MX_GPIO_Init();
 80004bc:	f000 f830 	bl	8000520 <_ZN7CHelper12MX_GPIO_InitEv>
	MX_USART2_UART_Init();
 80004c0:	f000 f8d0 	bl	8000664 <_ZN7CHelper19MX_USART2_UART_InitEv>
	MX_NVIC_Init();
 80004c4:	f000 f8ba 	bl	800063c <_ZN7CHelper12MX_NVIC_InitEv>
}
 80004c8:	bf00      	nop
 80004ca:	bd80      	pop	{r7, pc}

080004cc <HAL_GPIO_EXTI_Callback>:

extern "C" void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	4603      	mov	r3, r0
 80004d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == Mybutton_Pin)
 80004d6:	88fb      	ldrh	r3, [r7, #6]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d103      	bne.n	80004e4 <HAL_GPIO_EXTI_Callback+0x18>
	{
		HAL_GPIO_TogglePin(Reddiode_GPIO_Port, Reddiode_Pin);
 80004dc:	2102      	movs	r1, #2
 80004de:	4808      	ldr	r0, [pc, #32]	; (8000500 <HAL_GPIO_EXTI_Callback+0x34>)
 80004e0:	f000 ff9c 	bl	800141c <HAL_GPIO_TogglePin>
	}

	if(GPIO_Pin == B1_Pin)
 80004e4:	88fb      	ldrh	r3, [r7, #6]
 80004e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80004ea:	d104      	bne.n	80004f6 <HAL_GPIO_EXTI_Callback+0x2a>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80004ec:	2120      	movs	r1, #32
 80004ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004f2:	f000 ff93 	bl	800141c <HAL_GPIO_TogglePin>
	}
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	48000800 	.word	0x48000800

08000504 <HAL_UART_TxCpltCallback>:

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	if(huart == CHelper::getUart()) //huart->Instance == USART2
 800050c:	f7ff ff30 	bl	8000370 <_ZN7CHelper7getUartEv>
 8000510:	4602      	mov	r2, r0
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4293      	cmp	r3, r2
	{

	}
}
 8000516:	bf00      	nop
 8000518:	3708      	adds	r7, #8
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <_ZN7CHelper12MX_GPIO_InitEv>:
		CDriver::m_uartDriver.irqRxComplete();
	}
}

void CHelper::MX_GPIO_Init()
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b08a      	sub	sp, #40	; 0x28
 8000524:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000526:	f107 0314 	add.w	r3, r7, #20
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000536:	4b3f      	ldr	r3, [pc, #252]	; (8000634 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	4a3e      	ldr	r2, [pc, #248]	; (8000634 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800053c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000540:	6153      	str	r3, [r2, #20]
 8000542:	4b3c      	ldr	r3, [pc, #240]	; (8000634 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000544:	695b      	ldr	r3, [r3, #20]
 8000546:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800054a:	613b      	str	r3, [r7, #16]
 800054c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800054e:	4b39      	ldr	r3, [pc, #228]	; (8000634 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a38      	ldr	r2, [pc, #224]	; (8000634 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000554:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b36      	ldr	r3, [pc, #216]	; (8000634 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	4b33      	ldr	r3, [pc, #204]	; (8000634 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000568:	695b      	ldr	r3, [r3, #20]
 800056a:	4a32      	ldr	r2, [pc, #200]	; (8000634 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800056c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000570:	6153      	str	r3, [r2, #20]
 8000572:	4b30      	ldr	r3, [pc, #192]	; (8000634 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000574:	695b      	ldr	r3, [r3, #20]
 8000576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	4b2d      	ldr	r3, [pc, #180]	; (8000634 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000580:	695b      	ldr	r3, [r3, #20]
 8000582:	4a2c      	ldr	r2, [pc, #176]	; (8000634 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000588:	6153      	str	r3, [r2, #20]
 800058a:	4b2a      	ldr	r3, [pc, #168]	; (8000634 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800058c:	695b      	ldr	r3, [r3, #20]
 800058e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Reddiode_GPIO_Port, Reddiode_Pin, GPIO_PIN_RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2102      	movs	r1, #2
 800059a:	4827      	ldr	r0, [pc, #156]	; (8000638 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 800059c:	f000 ff26 	bl	80013ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2120      	movs	r1, #32
 80005a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a8:	f000 ff20 	bl	80013ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80005ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005b0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005b6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	4619      	mov	r1, r3
 80005c2:	481d      	ldr	r0, [pc, #116]	; (8000638 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80005c4:	f000 fd70 	bl	80010a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Mybutton_Pin */
	GPIO_InitStruct.Pin = Mybutton_Pin;
 80005c8:	2301      	movs	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005cc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005d0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005d2:	2301      	movs	r3, #1
 80005d4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Mybutton_GPIO_Port, &GPIO_InitStruct);
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	4619      	mov	r1, r3
 80005dc:	4816      	ldr	r0, [pc, #88]	; (8000638 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80005de:	f000 fd63 	bl	80010a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : Reddiode_Pin */
	GPIO_InitStruct.Pin = Reddiode_Pin;
 80005e2:	2302      	movs	r3, #2
 80005e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e6:	2301      	movs	r3, #1
 80005e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Reddiode_GPIO_Port, &GPIO_InitStruct);
 80005f2:	f107 0314 	add.w	r3, r7, #20
 80005f6:	4619      	mov	r1, r3
 80005f8:	480f      	ldr	r0, [pc, #60]	; (8000638 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80005fa:	f000 fd55 	bl	80010a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80005fe:	2320      	movs	r3, #32
 8000600:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000602:	2301      	movs	r3, #1
 8000604:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	4619      	mov	r1, r3
 8000614:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000618:	f000 fd46 	bl	80010a8 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800061c:	2200      	movs	r2, #0
 800061e:	2100      	movs	r1, #0
 8000620:	2006      	movs	r0, #6
 8000622:	f000 fc94 	bl	8000f4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000626:	2006      	movs	r0, #6
 8000628:	f000 fcad 	bl	8000f86 <HAL_NVIC_EnableIRQ>
}
 800062c:	bf00      	nop
 800062e:	3728      	adds	r7, #40	; 0x28
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	48000800 	.word	0x48000800

0800063c <_ZN7CHelper12MX_NVIC_InitEv>:

void CHelper::MX_NVIC_Init()
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000640:	2200      	movs	r2, #0
 8000642:	2100      	movs	r1, #0
 8000644:	2028      	movs	r0, #40	; 0x28
 8000646:	f000 fc82 	bl	8000f4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800064a:	2028      	movs	r0, #40	; 0x28
 800064c:	f000 fc9b 	bl	8000f86 <HAL_NVIC_EnableIRQ>

	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000650:	2200      	movs	r2, #0
 8000652:	2100      	movs	r1, #0
 8000654:	2026      	movs	r0, #38	; 0x26
 8000656:	f000 fc7a 	bl	8000f4e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800065a:	2026      	movs	r0, #38	; 0x26
 800065c:	f000 fc93 	bl	8000f86 <HAL_NVIC_EnableIRQ>
}
 8000660:	bf00      	nop
 8000662:	bd80      	pop	{r7, pc}

08000664 <_ZN7CHelper19MX_USART2_UART_InitEv>:

void CHelper::MX_USART2_UART_Init()
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000668:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 800066a:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <_ZN7CHelper19MX_USART2_UART_InitEv+0x64>)
 800066c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000670:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000674:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000682:	4b10      	ldr	r3, [pc, #64]	; (80006c4 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800069a:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80006a6:	4807      	ldr	r0, [pc, #28]	; (80006c4 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 80006a8:	f002 fa54 	bl	8002b54 <HAL_UART_Init>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	bf14      	ite	ne
 80006b2:	2301      	movne	r3, #1
 80006b4:	2300      	moveq	r3, #0
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <_ZN7CHelper19MX_USART2_UART_InitEv+0x5c>
	{
		Error_Handler();
 80006bc:	f000 f873 	bl	80007a6 <_ZN7CHelper13Error_HandlerEv>
	}
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	200000f0 	.word	0x200000f0
 80006c8:	40004400 	.word	0x40004400

080006cc <_ZN7CHelper18SystemClock_ConfigEv>:

void CHelper::SystemClock_Config()
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b0a6      	sub	sp, #152	; 0x98
 80006d0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006d6:	2228      	movs	r2, #40	; 0x28
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 fa00 	bl	8003ae0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2258      	movs	r2, #88	; 0x58
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f003 f9f2 	bl	8003ae0 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	2301      	movs	r3, #1
 8000702:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000704:	2310      	movs	r3, #16
 8000706:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000714:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000718:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800071c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800072a:	4618      	mov	r0, r3
 800072c:	f000 fea8 	bl	8001480 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	bf14      	ite	ne
 8000736:	2301      	movne	r3, #1
 8000738:	2300      	moveq	r3, #0
 800073a:	b2db      	uxtb	r3, r3
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <_ZN7CHelper18SystemClock_ConfigEv+0x78>
	{
	Error_Handler();
 8000740:	f000 f831 	bl	80007a6 <_ZN7CHelper13Error_HandlerEv>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	65fb      	str	r3, [r7, #92]	; 0x5c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2302      	movs	r3, #2
 800074a:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000754:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800075a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800075e:	2102      	movs	r1, #2
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fda3 	bl	80022ac <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf14      	ite	ne
 800076c:	2301      	movne	r3, #1
 800076e:	2300      	moveq	r3, #0
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <_ZN7CHelper18SystemClock_ConfigEv+0xae>
	{
	Error_Handler();
 8000776:	f000 f816 	bl	80007a6 <_ZN7CHelper13Error_HandlerEv>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800077a:	2302      	movs	r3, #2
 800077c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800077e:	2300      	movs	r3, #0
 8000780:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000782:	1d3b      	adds	r3, r7, #4
 8000784:	4618      	mov	r0, r3
 8000786:	f001 ffc7 	bl	8002718 <HAL_RCCEx_PeriphCLKConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	bf14      	ite	ne
 8000790:	2301      	movne	r3, #1
 8000792:	2300      	moveq	r3, #0
 8000794:	b2db      	uxtb	r3, r3
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <_ZN7CHelper18SystemClock_ConfigEv+0xd2>
	{
	Error_Handler();
 800079a:	f000 f804 	bl	80007a6 <_ZN7CHelper13Error_HandlerEv>
	}
}
 800079e:	bf00      	nop
 80007a0:	3798      	adds	r7, #152	; 0x98
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <_ZN7CHelper13Error_HandlerEv>:

void CHelper::Error_Handler()
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007aa:	b672      	cpsid	i
}
 80007ac:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80007ae:	e7fe      	b.n	80007ae <_ZN7CHelper13Error_HandlerEv+0x8>

080007b0 <_ZN4CLedC1Ev>:
 *      Author: Konra
 */

#include <CLed.h>

CLed::CLed() {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4618      	mov	r0, r3
 80007bc:	f7ff fd0a 	bl	80001d4 <_ZN5IGPIOC1Ev>
 80007c0:	4a03      	ldr	r2, [pc, #12]	; (80007d0 <_ZN4CLedC1Ev+0x20>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	4618      	mov	r0, r3
 80007ca:	3708      	adds	r7, #8
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	08003c74 	.word	0x08003c74

080007d4 <_ZN4CLedD1Ev>:

CLed::~CLed() {
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <_ZN4CLedD1Ev+0x1c>)
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4618      	mov	r0, r3
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	08003c74 	.word	0x08003c74

080007f4 <_ZN4CLedD0Ev>:
CLed::~CLed() {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
}
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff ffe9 	bl	80007d4 <_ZN4CLedD1Ev>
 8000802:	2118      	movs	r1, #24
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f003 f919 	bl	8003a3c <_ZdlPvj>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4618      	mov	r0, r3
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>:

void CLed::init(GPIO_TypeDef* GpioPort, uint16_t GpioPin, LedStates state = off)
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	60f8      	str	r0, [r7, #12]
 800081c:	60b9      	str	r1, [r7, #8]
 800081e:	4611      	mov	r1, r2
 8000820:	461a      	mov	r2, r3
 8000822:	460b      	mov	r3, r1
 8000824:	80fb      	strh	r3, [r7, #6]
 8000826:	4613      	mov	r3, r2
 8000828:	717b      	strb	r3, [r7, #5]
	this->GpioPort 	= GpioPort;
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	68ba      	ldr	r2, [r7, #8]
 800082e:	605a      	str	r2, [r3, #4]
	this->GpioPin 	= GpioPin;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	88fa      	ldrh	r2, [r7, #6]
 8000834:	811a      	strh	r2, [r3, #8]
	this->state 	= state;
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	797a      	ldrb	r2, [r7, #5]
 800083a:	729a      	strb	r2, [r3, #10]
	m_timerToggle 	= 500;
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000842:	60da      	str	r2, [r3, #12]
	m_enter 		= false;
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	2200      	movs	r2, #0
 8000848:	751a      	strb	r2, [r3, #20]
}
 800084a:	bf00      	nop
 800084c:	3714      	adds	r7, #20
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <_ZN4CLed6updateEv>:
void CLed::update()
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
	switch(state)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	7a9b      	ldrb	r3, [r3, #10]
 8000862:	2b02      	cmp	r3, #2
 8000864:	d00e      	beq.n	8000884 <_ZN4CLed6updateEv+0x2e>
 8000866:	2b02      	cmp	r3, #2
 8000868:	dc2e      	bgt.n	80008c8 <_ZN4CLed6updateEv+0x72>
 800086a:	2b00      	cmp	r3, #0
 800086c:	d002      	beq.n	8000874 <_ZN4CLed6updateEv+0x1e>
 800086e:	2b01      	cmp	r3, #1
 8000870:	d004      	beq.n	800087c <_ZN4CLed6updateEv+0x26>
				m_enter = false;
			}

			break;
	}
}
 8000872:	e029      	b.n	80008c8 <_ZN4CLed6updateEv+0x72>
			turnOnLed();
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f000 f83b 	bl	80008f0 <_ZN4CLed9turnOnLedEv>
			break;
 800087a:	e025      	b.n	80008c8 <_ZN4CLed6updateEv+0x72>
			turnOffLed();
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f000 f847 	bl	8000910 <_ZN4CLed10turnOffLedEv>
			break;
 8000882:	e021      	b.n	80008c8 <_ZN4CLed6updateEv+0x72>
			if(m_enter == false)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	7d1b      	ldrb	r3, [r3, #20]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d107      	bne.n	800089c <_ZN4CLed6updateEv+0x46>
				m_lastTick = HAL_GetTick();
 800088c:	f000 fa78 	bl	8000d80 <HAL_GetTick>
 8000890:	4602      	mov	r2, r0
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	611a      	str	r2, [r3, #16]
				m_enter = true;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2201      	movs	r2, #1
 800089a:	751a      	strb	r2, [r3, #20]
			if((HAL_GetTick() - m_lastTick) > m_timerToggle)
 800089c:	f000 fa70 	bl	8000d80 <HAL_GetTick>
 80008a0:	4602      	mov	r2, r0
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	691b      	ldr	r3, [r3, #16]
 80008a6:	1ad2      	subs	r2, r2, r3
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	68db      	ldr	r3, [r3, #12]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	bf8c      	ite	hi
 80008b0:	2301      	movhi	r3, #1
 80008b2:	2300      	movls	r3, #0
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d005      	beq.n	80008c6 <_ZN4CLed6updateEv+0x70>
				togglePin();
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f000 f808 	bl	80008d0 <_ZN4CLed9togglePinEv>
				m_enter = false;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2200      	movs	r2, #0
 80008c4:	751a      	strb	r2, [r3, #20]
			break;
 80008c6:	bf00      	nop
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}

080008d0 <_ZN4CLed9togglePinEv>:
void CLed::togglePin()
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GpioPort, GpioPin);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685a      	ldr	r2, [r3, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	891b      	ldrh	r3, [r3, #8]
 80008e0:	4619      	mov	r1, r3
 80008e2:	4610      	mov	r0, r2
 80008e4:	f000 fd9a 	bl	800141c <HAL_GPIO_TogglePin>
}
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <_ZN4CLed9turnOnLedEv>:

void CLed::turnOnLed()
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GpioPort, GpioPin, GPIO_PIN_SET);
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6858      	ldr	r0, [r3, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	891b      	ldrh	r3, [r3, #8]
 8000900:	2201      	movs	r2, #1
 8000902:	4619      	mov	r1, r3
 8000904:	f000 fd72 	bl	80013ec <HAL_GPIO_WritePin>
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <_ZN4CLed10turnOffLedEv>:

void CLed::turnOffLed()
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GpioPort, GpioPin, GPIO_PIN_RESET);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6858      	ldr	r0, [r3, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	891b      	ldrh	r3, [r3, #8]
 8000920:	2200      	movs	r2, #0
 8000922:	4619      	mov	r1, r3
 8000924:	f000 fd62 	bl	80013ec <HAL_GPIO_WritePin>
}
 8000928:	bf00      	nop
 800092a:	3708      	adds	r7, #8
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <_ZN16CStateMachineLedC1Ev>:
#include "stdio.h"


uint8_t CStateMachineLed::buffer[32];

CStateMachineLed::CStateMachineLed() {
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <_ZN16CStateMachineLedC1Ev+0x1c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4618      	mov	r0, r3
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	08003c88 	.word	0x08003c88

08000950 <_ZN16CStateMachineLedD1Ev>:

CStateMachineLed::~CStateMachineLed() {
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <_ZN16CStateMachineLedD1Ev+0x1c>)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	08003c88 	.word	0x08003c88

08000970 <_ZN16CStateMachineLedD0Ev>:
CStateMachineLed::~CStateMachineLed() {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
}
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ffe9 	bl	8000950 <_ZN16CStateMachineLedD1Ev>
 800097e:	2110      	movs	r1, #16
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f003 f85b 	bl	8003a3c <_ZdlPvj>
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}

08000990 <_ZN16CStateMachineLed4initEP4CLedP7CButtonP11CUartDriver>:

void CStateMachineLed::init(CLed* led, CButton* button, CUartDriver* uart)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
 800099c:	603b      	str	r3, [r7, #0]
	this->led 		= led;
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	68ba      	ldr	r2, [r7, #8]
 80009a2:	605a      	str	r2, [r3, #4]
	this->button 	= button;
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	609a      	str	r2, [r3, #8]
	this->uart 		= uart;
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	683a      	ldr	r2, [r7, #0]
 80009ae:	60da      	str	r2, [r3, #12]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <_ZN11CUartDriverC1Ev>:
 *      Author: Konra
 */

#include <CUartDriver.h>

CUartDriver::CUartDriver() {
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	4a04      	ldr	r2, [pc, #16]	; (80009d8 <_ZN11CUartDriverC1Ev+0x1c>)
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	08003c98 	.word	0x08003c98

080009dc <_ZN11CUartDriverD1Ev>:

CUartDriver::~CUartDriver() {
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <_ZN11CUartDriverD1Ev+0x1c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	4618      	mov	r0, r3
 80009ee:	370c      	adds	r7, #12
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	08003c98 	.word	0x08003c98

080009fc <_ZN11CUartDriverD0Ev>:
CUartDriver::~CUartDriver() {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
}
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ffe9 	bl	80009dc <_ZN11CUartDriverD1Ev>
 8000a0a:	211c      	movs	r1, #28
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f003 f815 	bl	8003a3c <_ZdlPvj>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}

08000a1c <_ZN11CUartDriver4initEP20__UART_HandleTypeDef>:

void CUartDriver::init(UART_HandleTypeDef* m_uartDriver)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
	this->m_uartDriver = m_uartDriver;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	611a      	str	r2, [r3, #16]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f000 f946 	bl	8000ccc <HAL_Init>

  /* USER CODE BEGIN Init */
  CHelper::init();
 8000a40:	f7ff fd38 	bl	80004b4 <_ZN7CHelper4initEv>
  m_driver.init();
 8000a44:	4803      	ldr	r0, [pc, #12]	; (8000a54 <main+0x1c>)
 8000a46:	f7ff fcb3 	bl	80003b0 <_ZN7CDriver4initEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  m_driver.update();
 8000a4a:	4802      	ldr	r0, [pc, #8]	; (8000a54 <main+0x1c>)
 8000a4c:	f7ff fcde 	bl	800040c <_ZN7CDriver6updateEv>
 8000a50:	e7fb      	b.n	8000a4a <main+0x12>
 8000a52:	bf00      	nop
 8000a54:	20000174 	.word	0x20000174

08000a58 <_Z41__static_initialization_and_destruction_0ii>:
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	d107      	bne.n	8000a78 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d102      	bne.n	8000a78 <_Z41__static_initialization_and_destruction_0ii+0x20>
CDriver m_driver;
 8000a72:	4809      	ldr	r0, [pc, #36]	; (8000a98 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000a74:	f7ff fc86 	bl	8000384 <_ZN7CDriverC1Ev>
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d107      	bne.n	8000a8e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000a7e:	683b      	ldr	r3, [r7, #0]
 8000a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d102      	bne.n	8000a8e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000a8a:	f7ff fc86 	bl	800039a <_ZN7CDriverD1Ev>
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000174 	.word	0x20000174

08000a9c <_GLOBAL__sub_I_m_driver>:
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f7ff ffd7 	bl	8000a58 <_Z41__static_initialization_and_destruction_0ii>
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <_GLOBAL__sub_D_m_driver>:
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000ab4:	2000      	movs	r0, #0
 8000ab6:	f7ff ffcf 	bl	8000a58 <_Z41__static_initialization_and_destruction_0ii>
 8000aba:	bd80      	pop	{r7, pc}

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6193      	str	r3, [r2, #24]
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_MspInit+0x44>)
 8000ad0:	699b      	ldr	r3, [r3, #24]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x44>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	61d3      	str	r3, [r2, #28]
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae8:	69db      	ldr	r3, [r3, #28]
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000af2:	2007      	movs	r0, #7
 8000af4:	f000 fa20 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af8:	bf00      	nop
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a17      	ldr	r2, [pc, #92]	; (8000b80 <HAL_UART_MspInit+0x7c>)
 8000b22:	4293      	cmp	r3, r2
 8000b24:	d128      	bne.n	8000b78 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b26:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b40:	695b      	ldr	r3, [r3, #20]
 8000b42:	4a10      	ldr	r2, [pc, #64]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b48:	6153      	str	r3, [r2, #20]
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <HAL_UART_MspInit+0x80>)
 8000b4c:	695b      	ldr	r3, [r3, #20]
 8000b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b56:	230c      	movs	r3, #12
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b62:	2300      	movs	r3, #0
 8000b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b66:	2307      	movs	r3, #7
 8000b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6a:	f107 0314 	add.w	r3, r7, #20
 8000b6e:	4619      	mov	r1, r3
 8000b70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b74:	f000 fa98 	bl	80010a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b78:	bf00      	nop
 8000b7a:	3728      	adds	r7, #40	; 0x28
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40004400 	.word	0x40004400
 8000b84:	40021000 	.word	0x40021000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	e7fe      	b.n	8000b8c <NMI_Handler+0x4>

08000b8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b8e:	b480      	push	{r7}
 8000b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b92:	e7fe      	b.n	8000b92 <HardFault_Handler+0x4>

08000b94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <MemManage_Handler+0x4>

08000b9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <BusFault_Handler+0x4>

08000ba0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <UsageFault_Handler+0x4>

08000ba6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000baa:	bf00      	nop
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bd4:	f000 f8c0 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}

08000bdc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000be0:	2001      	movs	r0, #1
 8000be2:	f000 fc35 	bl	8001450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}

08000bea <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(CHelper::getUart());
 8000bee:	f7ff fbbf 	bl	8000370 <_ZN7CHelper7getUartEv>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 fffb 	bl	8002bf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c02:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c06:	f000 fc23 	bl	8001450 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0
	return 1;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr

08000c1e <_kill>:

int _kill(int pid, int sig)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	b082      	sub	sp, #8
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c28:	f002 ff28 	bl	8003a7c <__errno>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2216      	movs	r2, #22
 8000c30:	601a      	str	r2, [r3, #0]
	return -1;
 8000c32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <_exit>:

void _exit (int status)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c46:	f04f 31ff 	mov.w	r1, #4294967295
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffe7 	bl	8000c1e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c50:	e7fe      	b.n	8000c50 <_exit+0x12>
	...

08000c54 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <SystemInit+0x20>)
 8000c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5e:	4a05      	ldr	r2, [pc, #20]	; (8000c74 <SystemInit+0x20>)
 8000c60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cb0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	480d      	ldr	r0, [pc, #52]	; (8000cb4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7e:	490e      	ldr	r1, [pc, #56]	; (8000cb8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c80:	4a0e      	ldr	r2, [pc, #56]	; (8000cbc <LoopForever+0xe>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0b      	ldr	r2, [pc, #44]	; (8000cc0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c94:	4c0b      	ldr	r4, [pc, #44]	; (8000cc4 <LoopForever+0x16>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ca2:	f7ff ffd7 	bl	8000c54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ca6:	f002 feef 	bl	8003a88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000caa:	f7ff fec5 	bl	8000a38 <main>

08000cae <LoopForever>:

LoopForever:
    b LoopForever
 8000cae:	e7fe      	b.n	8000cae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cb0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000cbc:	08003cf0 	.word	0x08003cf0
  ldr r2, =_sbss
 8000cc0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000cc4:	20000190 	.word	0x20000190

08000cc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc8:	e7fe      	b.n	8000cc8 <ADC1_2_IRQHandler>
	...

08000ccc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_Init+0x28>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <HAL_Init+0x28>)
 8000cd6:	f043 0310 	orr.w	r3, r3, #16
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 f92b 	bl	8000f38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f000 f808 	bl	8000cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce8:	f7ff fee8 	bl	8000abc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40022000 	.word	0x40022000

08000cf8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x54>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x58>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f943 	bl	8000fa2 <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00e      	b.n	8000d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d80a      	bhi.n	8000d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f000 f90b 	bl	8000f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d38:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <HAL_InitTick+0x5c>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	2000017c 	.word	0x2000017c

08000d80 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	2000017c 	.word	0x2000017c

08000d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dae:	68ba      	ldr	r2, [r7, #8]
 8000db0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000db4:	4013      	ands	r3, r2
 8000db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dca:	4a04      	ldr	r2, [pc, #16]	; (8000ddc <__NVIC_SetPriorityGrouping+0x44>)
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	60d3      	str	r3, [r2, #12]
}
 8000dd0:	bf00      	nop
 8000dd2:	3714      	adds	r7, #20
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <__NVIC_GetPriorityGrouping+0x18>)
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	0a1b      	lsrs	r3, r3, #8
 8000dea:	f003 0307 	and.w	r3, r3, #7
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	db0b      	blt.n	8000e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	f003 021f 	and.w	r2, r3, #31
 8000e14:	4907      	ldr	r1, [pc, #28]	; (8000e34 <__NVIC_EnableIRQ+0x38>)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	095b      	lsrs	r3, r3, #5
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000e100 	.word	0xe000e100

08000e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	6039      	str	r1, [r7, #0]
 8000e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	db0a      	blt.n	8000e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	490c      	ldr	r1, [pc, #48]	; (8000e84 <__NVIC_SetPriority+0x4c>)
 8000e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e56:	0112      	lsls	r2, r2, #4
 8000e58:	b2d2      	uxtb	r2, r2
 8000e5a:	440b      	add	r3, r1
 8000e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e60:	e00a      	b.n	8000e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	4908      	ldr	r1, [pc, #32]	; (8000e88 <__NVIC_SetPriority+0x50>)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f003 030f 	and.w	r3, r3, #15
 8000e6e:	3b04      	subs	r3, #4
 8000e70:	0112      	lsls	r2, r2, #4
 8000e72:	b2d2      	uxtb	r2, r2
 8000e74:	440b      	add	r3, r1
 8000e76:	761a      	strb	r2, [r3, #24]
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000e100 	.word	0xe000e100
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b089      	sub	sp, #36	; 0x24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	60f8      	str	r0, [r7, #12]
 8000e94:	60b9      	str	r1, [r7, #8]
 8000e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f003 0307 	and.w	r3, r3, #7
 8000e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f1c3 0307 	rsb	r3, r3, #7
 8000ea6:	2b04      	cmp	r3, #4
 8000ea8:	bf28      	it	cs
 8000eaa:	2304      	movcs	r3, #4
 8000eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	3304      	adds	r3, #4
 8000eb2:	2b06      	cmp	r3, #6
 8000eb4:	d902      	bls.n	8000ebc <NVIC_EncodePriority+0x30>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3b03      	subs	r3, #3
 8000eba:	e000      	b.n	8000ebe <NVIC_EncodePriority+0x32>
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43da      	mvns	r2, r3
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	401a      	ands	r2, r3
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	fa01 f303 	lsl.w	r3, r1, r3
 8000ede:	43d9      	mvns	r1, r3
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	4313      	orrs	r3, r2
         );
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	3724      	adds	r7, #36	; 0x24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
	...

08000ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	3b01      	subs	r3, #1
 8000f00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f04:	d301      	bcc.n	8000f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00f      	b.n	8000f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <SysTick_Config+0x40>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f12:	210f      	movs	r1, #15
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f7ff ff8e 	bl	8000e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <SysTick_Config+0x40>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	; (8000f34 <SysTick_Config+0x40>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f7ff ff29 	bl	8000d98 <__NVIC_SetPriorityGrouping>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b086      	sub	sp, #24
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	4603      	mov	r3, r0
 8000f56:	60b9      	str	r1, [r7, #8]
 8000f58:	607a      	str	r2, [r7, #4]
 8000f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f60:	f7ff ff3e 	bl	8000de0 <__NVIC_GetPriorityGrouping>
 8000f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	68b9      	ldr	r1, [r7, #8]
 8000f6a:	6978      	ldr	r0, [r7, #20]
 8000f6c:	f7ff ff8e 	bl	8000e8c <NVIC_EncodePriority>
 8000f70:	4602      	mov	r2, r0
 8000f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f76:	4611      	mov	r1, r2
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff5d 	bl	8000e38 <__NVIC_SetPriority>
}
 8000f7e:	bf00      	nop
 8000f80:	3718      	adds	r7, #24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff ff31 	bl	8000dfc <__NVIC_EnableIRQ>
}
 8000f9a:	bf00      	nop
 8000f9c:	3708      	adds	r7, #8
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b082      	sub	sp, #8
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ffa2 	bl	8000ef4 <SysTick_Config>
 8000fb0:	4603      	mov	r3, r0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fba:	b480      	push	{r7}
 8000fbc:	b083      	sub	sp, #12
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d008      	beq.n	8000fde <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2204      	movs	r2, #4
 8000fd0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e020      	b.n	8001020 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 020e 	bic.w	r2, r2, #14
 8000fec:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0201 	bic.w	r2, r2, #1
 8000ffc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001006:	2101      	movs	r1, #1
 8001008:	fa01 f202 	lsl.w	r2, r1, r2
 800100c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2201      	movs	r2, #1
 8001012:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800103e:	2b02      	cmp	r3, #2
 8001040:	d005      	beq.n	800104e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2204      	movs	r2, #4
 8001046:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	e027      	b.n	800109e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f022 020e 	bic.w	r2, r2, #14
 800105c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0201 	bic.w	r2, r2, #1
 800106c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001076:	2101      	movs	r1, #1
 8001078:	fa01 f202 	lsl.w	r2, r1, r2
 800107c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2201      	movs	r2, #1
 8001082:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001092:	2b00      	cmp	r3, #0
 8001094:	d003      	beq.n	800109e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	4798      	blx	r3
    } 
  }
  return status;
 800109e:	7bfb      	ldrb	r3, [r7, #15]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010b6:	e160      	b.n	800137a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	2101      	movs	r1, #1
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	fa01 f303 	lsl.w	r3, r1, r3
 80010c4:	4013      	ands	r3, r2
 80010c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	f000 8152 	beq.w	8001374 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d005      	beq.n	80010e8 <HAL_GPIO_Init+0x40>
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d130      	bne.n	800114a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	689b      	ldr	r3, [r3, #8]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	2203      	movs	r2, #3
 80010f4:	fa02 f303 	lsl.w	r3, r2, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800111e:	2201      	movs	r2, #1
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	43db      	mvns	r3, r3
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	4013      	ands	r3, r2
 800112c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	f003 0201 	and.w	r2, r3, #1
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b03      	cmp	r3, #3
 8001154:	d017      	beq.n	8001186 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	2203      	movs	r2, #3
 8001162:	fa02 f303 	lsl.w	r3, r2, r3
 8001166:	43db      	mvns	r3, r3
 8001168:	693a      	ldr	r2, [r7, #16]
 800116a:	4013      	ands	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	2b02      	cmp	r3, #2
 8001190:	d123      	bne.n	80011da <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	08da      	lsrs	r2, r3, #3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	3208      	adds	r2, #8
 800119a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	220f      	movs	r2, #15
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	693a      	ldr	r2, [r7, #16]
 80011b2:	4013      	ands	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f003 0307 	and.w	r3, r3, #7
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	08da      	lsrs	r2, r3, #3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	3208      	adds	r2, #8
 80011d4:	6939      	ldr	r1, [r7, #16]
 80011d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	2203      	movs	r2, #3
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f003 0203 	and.w	r2, r3, #3
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001216:	2b00      	cmp	r3, #0
 8001218:	f000 80ac 	beq.w	8001374 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800121c:	4b5e      	ldr	r3, [pc, #376]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a5d      	ldr	r2, [pc, #372]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b5b      	ldr	r3, [pc, #364]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0301 	and.w	r3, r3, #1
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001234:	4a59      	ldr	r2, [pc, #356]	; (800139c <HAL_GPIO_Init+0x2f4>)
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	089b      	lsrs	r3, r3, #2
 800123a:	3302      	adds	r3, #2
 800123c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	f003 0303 	and.w	r3, r3, #3
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	220f      	movs	r2, #15
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	693a      	ldr	r2, [r7, #16]
 8001254:	4013      	ands	r3, r2
 8001256:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800125e:	d025      	beq.n	80012ac <HAL_GPIO_Init+0x204>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a4f      	ldr	r2, [pc, #316]	; (80013a0 <HAL_GPIO_Init+0x2f8>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d01f      	beq.n	80012a8 <HAL_GPIO_Init+0x200>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a4e      	ldr	r2, [pc, #312]	; (80013a4 <HAL_GPIO_Init+0x2fc>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d019      	beq.n	80012a4 <HAL_GPIO_Init+0x1fc>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a4d      	ldr	r2, [pc, #308]	; (80013a8 <HAL_GPIO_Init+0x300>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d013      	beq.n	80012a0 <HAL_GPIO_Init+0x1f8>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a4c      	ldr	r2, [pc, #304]	; (80013ac <HAL_GPIO_Init+0x304>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d00d      	beq.n	800129c <HAL_GPIO_Init+0x1f4>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4a4b      	ldr	r2, [pc, #300]	; (80013b0 <HAL_GPIO_Init+0x308>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d007      	beq.n	8001298 <HAL_GPIO_Init+0x1f0>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a4a      	ldr	r2, [pc, #296]	; (80013b4 <HAL_GPIO_Init+0x30c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d101      	bne.n	8001294 <HAL_GPIO_Init+0x1ec>
 8001290:	2306      	movs	r3, #6
 8001292:	e00c      	b.n	80012ae <HAL_GPIO_Init+0x206>
 8001294:	2307      	movs	r3, #7
 8001296:	e00a      	b.n	80012ae <HAL_GPIO_Init+0x206>
 8001298:	2305      	movs	r3, #5
 800129a:	e008      	b.n	80012ae <HAL_GPIO_Init+0x206>
 800129c:	2304      	movs	r3, #4
 800129e:	e006      	b.n	80012ae <HAL_GPIO_Init+0x206>
 80012a0:	2303      	movs	r3, #3
 80012a2:	e004      	b.n	80012ae <HAL_GPIO_Init+0x206>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e002      	b.n	80012ae <HAL_GPIO_Init+0x206>
 80012a8:	2301      	movs	r3, #1
 80012aa:	e000      	b.n	80012ae <HAL_GPIO_Init+0x206>
 80012ac:	2300      	movs	r3, #0
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	f002 0203 	and.w	r2, r2, #3
 80012b4:	0092      	lsls	r2, r2, #2
 80012b6:	4093      	lsls	r3, r2
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012be:	4937      	ldr	r1, [pc, #220]	; (800139c <HAL_GPIO_Init+0x2f4>)
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	089b      	lsrs	r3, r3, #2
 80012c4:	3302      	adds	r3, #2
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012cc:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <HAL_GPIO_Init+0x310>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	43db      	mvns	r3, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4013      	ands	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d003      	beq.n	80012f0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012f0:	4a31      	ldr	r2, [pc, #196]	; (80013b8 <HAL_GPIO_Init+0x310>)
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012f6:	4b30      	ldr	r3, [pc, #192]	; (80013b8 <HAL_GPIO_Init+0x310>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	43db      	mvns	r3, r3
 8001300:	693a      	ldr	r2, [r7, #16]
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d003      	beq.n	800131a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	4313      	orrs	r3, r2
 8001318:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800131a:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <HAL_GPIO_Init+0x310>)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <HAL_GPIO_Init+0x310>)
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	43db      	mvns	r3, r3
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4013      	ands	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001344:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <HAL_GPIO_Init+0x310>)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800134a:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_GPIO_Init+0x310>)
 800134c:	68db      	ldr	r3, [r3, #12]
 800134e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <HAL_GPIO_Init+0x310>)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	3301      	adds	r3, #1
 8001378:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa22 f303 	lsr.w	r3, r2, r3
 8001384:	2b00      	cmp	r3, #0
 8001386:	f47f ae97 	bne.w	80010b8 <HAL_GPIO_Init+0x10>
  }
}
 800138a:	bf00      	nop
 800138c:	bf00      	nop
 800138e:	371c      	adds	r7, #28
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	40021000 	.word	0x40021000
 800139c:	40010000 	.word	0x40010000
 80013a0:	48000400 	.word	0x48000400
 80013a4:	48000800 	.word	0x48000800
 80013a8:	48000c00 	.word	0x48000c00
 80013ac:	48001000 	.word	0x48001000
 80013b0:	48001400 	.word	0x48001400
 80013b4:	48001800 	.word	0x48001800
 80013b8:	40010400 	.word	0x40010400

080013bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691a      	ldr	r2, [r3, #16]
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013d4:	2301      	movs	r3, #1
 80013d6:	73fb      	strb	r3, [r7, #15]
 80013d8:	e001      	b.n	80013de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013da:	2300      	movs	r3, #0
 80013dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013de:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	807b      	strh	r3, [r7, #2]
 80013f8:	4613      	mov	r3, r2
 80013fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013fc:	787b      	ldrb	r3, [r7, #1]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001402:	887a      	ldrh	r2, [r7, #2]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001408:	e002      	b.n	8001410 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800140a:	887a      	ldrh	r2, [r7, #2]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
 8001424:	460b      	mov	r3, r1
 8001426:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4013      	ands	r3, r2
 8001434:	041a      	lsls	r2, r3, #16
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	43d9      	mvns	r1, r3
 800143a:	887b      	ldrh	r3, [r7, #2]
 800143c:	400b      	ands	r3, r1
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	619a      	str	r2, [r3, #24]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800145c:	695a      	ldr	r2, [r3, #20]
 800145e:	88fb      	ldrh	r3, [r7, #6]
 8001460:	4013      	ands	r3, r2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d006      	beq.n	8001474 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001466:	4a05      	ldr	r2, [pc, #20]	; (800147c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff f82c 	bl	80004cc <HAL_GPIO_EXTI_Callback>
  }
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40010400 	.word	0x40010400

08001480 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001486:	af00      	add	r7, sp, #0
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d102      	bne.n	800149a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	f000 bf01 	b.w	800229c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 8160 	beq.w	800176a <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80014aa:	4bae      	ldr	r3, [pc, #696]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	d00c      	beq.n	80014d0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80014b6:	4bab      	ldr	r3, [pc, #684]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d159      	bne.n	8001576 <HAL_RCC_OscConfig+0xf6>
 80014c2:	4ba8      	ldr	r3, [pc, #672]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80014ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ce:	d152      	bne.n	8001576 <HAL_RCC_OscConfig+0xf6>
 80014d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014d8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80014dc:	fa93 f3a3 	rbit	r3, r3
 80014e0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014e4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014e8:	fab3 f383 	clz	r3, r3
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	095b      	lsrs	r3, r3, #5
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d102      	bne.n	8001502 <HAL_RCC_OscConfig+0x82>
 80014fc:	4b99      	ldr	r3, [pc, #612]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	e015      	b.n	800152e <HAL_RCC_OscConfig+0xae>
 8001502:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001506:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001516:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800151a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800151e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001522:	fa93 f3a3 	rbit	r3, r3
 8001526:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800152a:	4b8e      	ldr	r3, [pc, #568]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001532:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001536:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800153a:	fa92 f2a2 	rbit	r2, r2
 800153e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001542:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001546:	fab2 f282 	clz	r2, r2
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	f042 0220 	orr.w	r2, r2, #32
 8001550:	b2d2      	uxtb	r2, r2
 8001552:	f002 021f 	and.w	r2, r2, #31
 8001556:	2101      	movs	r1, #1
 8001558:	fa01 f202 	lsl.w	r2, r1, r2
 800155c:	4013      	ands	r3, r2
 800155e:	2b00      	cmp	r3, #0
 8001560:	f000 8102 	beq.w	8001768 <HAL_RCC_OscConfig+0x2e8>
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	f040 80fc 	bne.w	8001768 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	f000 be93 	b.w	800229c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001580:	d106      	bne.n	8001590 <HAL_RCC_OscConfig+0x110>
 8001582:	4b78      	ldr	r3, [pc, #480]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a77      	ldr	r2, [pc, #476]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 8001588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800158c:	6013      	str	r3, [r2, #0]
 800158e:	e030      	b.n	80015f2 <HAL_RCC_OscConfig+0x172>
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x134>
 800159a:	4b72      	ldr	r3, [pc, #456]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a71      	ldr	r2, [pc, #452]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 80015a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015a4:	6013      	str	r3, [r2, #0]
 80015a6:	4b6f      	ldr	r3, [pc, #444]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a6e      	ldr	r2, [pc, #440]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 80015ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e01e      	b.n	80015f2 <HAL_RCC_OscConfig+0x172>
 80015b4:	1d3b      	adds	r3, r7, #4
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015be:	d10c      	bne.n	80015da <HAL_RCC_OscConfig+0x15a>
 80015c0:	4b68      	ldr	r3, [pc, #416]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a67      	ldr	r2, [pc, #412]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 80015c6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ca:	6013      	str	r3, [r2, #0]
 80015cc:	4b65      	ldr	r3, [pc, #404]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a64      	ldr	r2, [pc, #400]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 80015d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	e00b      	b.n	80015f2 <HAL_RCC_OscConfig+0x172>
 80015da:	4b62      	ldr	r3, [pc, #392]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a61      	ldr	r2, [pc, #388]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 80015e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	4b5f      	ldr	r3, [pc, #380]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a5e      	ldr	r2, [pc, #376]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 80015ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015f0:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d059      	beq.n	80016b0 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fbc0 	bl	8000d80 <HAL_GetTick>
 8001600:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001604:	e00a      	b.n	800161c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001606:	f7ff fbbb 	bl	8000d80 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b64      	cmp	r3, #100	; 0x64
 8001614:	d902      	bls.n	800161c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	f000 be40 	b.w	800229c <HAL_RCC_OscConfig+0xe1c>
 800161c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001620:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001624:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001628:	fa93 f3a3 	rbit	r3, r3
 800162c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001630:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001634:	fab3 f383 	clz	r3, r3
 8001638:	b2db      	uxtb	r3, r3
 800163a:	095b      	lsrs	r3, r3, #5
 800163c:	b2db      	uxtb	r3, r3
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	b2db      	uxtb	r3, r3
 8001644:	2b01      	cmp	r3, #1
 8001646:	d102      	bne.n	800164e <HAL_RCC_OscConfig+0x1ce>
 8001648:	4b46      	ldr	r3, [pc, #280]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	e015      	b.n	800167a <HAL_RCC_OscConfig+0x1fa>
 800164e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001652:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001656:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800165a:	fa93 f3a3 	rbit	r3, r3
 800165e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001662:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001666:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800166a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800166e:	fa93 f3a3 	rbit	r3, r3
 8001672:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001676:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 8001678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800167a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800167e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001682:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001686:	fa92 f2a2 	rbit	r2, r2
 800168a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800168e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001692:	fab2 f282 	clz	r2, r2
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	f042 0220 	orr.w	r2, r2, #32
 800169c:	b2d2      	uxtb	r2, r2
 800169e:	f002 021f 	and.w	r2, r2, #31
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f202 	lsl.w	r2, r1, r2
 80016a8:	4013      	ands	r3, r2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0ab      	beq.n	8001606 <HAL_RCC_OscConfig+0x186>
 80016ae:	e05c      	b.n	800176a <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fb66 	bl	8000d80 <HAL_GetTick>
 80016b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016b8:	e00a      	b.n	80016d0 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016ba:	f7ff fb61 	bl	8000d80 <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b64      	cmp	r3, #100	; 0x64
 80016c8:	d902      	bls.n	80016d0 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	f000 bde6 	b.w	800229c <HAL_RCC_OscConfig+0xe1c>
 80016d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016d4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80016dc:	fa93 f3a3 	rbit	r3, r3
 80016e0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80016e4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e8:	fab3 f383 	clz	r3, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	095b      	lsrs	r3, r3, #5
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d102      	bne.n	8001702 <HAL_RCC_OscConfig+0x282>
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	e015      	b.n	800172e <HAL_RCC_OscConfig+0x2ae>
 8001702:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001706:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001716:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800171a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800171e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001722:	fa93 f3a3 	rbit	r3, r3
 8001726:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800172a:	4b0e      	ldr	r3, [pc, #56]	; (8001764 <HAL_RCC_OscConfig+0x2e4>)
 800172c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001732:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001736:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800173a:	fa92 f2a2 	rbit	r2, r2
 800173e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001742:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001746:	fab2 f282 	clz	r2, r2
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	f042 0220 	orr.w	r2, r2, #32
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	f002 021f 	and.w	r2, r2, #31
 8001756:	2101      	movs	r1, #1
 8001758:	fa01 f202 	lsl.w	r2, r1, r2
 800175c:	4013      	ands	r3, r2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1ab      	bne.n	80016ba <HAL_RCC_OscConfig+0x23a>
 8001762:	e002      	b.n	800176a <HAL_RCC_OscConfig+0x2ea>
 8001764:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001768:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 8170 	beq.w	8001a5a <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800177a:	4bd0      	ldr	r3, [pc, #832]	; (8001abc <HAL_RCC_OscConfig+0x63c>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f003 030c 	and.w	r3, r3, #12
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00c      	beq.n	80017a0 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001786:	4bcd      	ldr	r3, [pc, #820]	; (8001abc <HAL_RCC_OscConfig+0x63c>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 030c 	and.w	r3, r3, #12
 800178e:	2b08      	cmp	r3, #8
 8001790:	d16d      	bne.n	800186e <HAL_RCC_OscConfig+0x3ee>
 8001792:	4bca      	ldr	r3, [pc, #808]	; (8001abc <HAL_RCC_OscConfig+0x63c>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800179a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800179e:	d166      	bne.n	800186e <HAL_RCC_OscConfig+0x3ee>
 80017a0:	2302      	movs	r3, #2
 80017a2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80017aa:	fa93 f3a3 	rbit	r3, r3
 80017ae:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80017b2:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b6:	fab3 f383 	clz	r3, r3
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	095b      	lsrs	r3, r3, #5
 80017be:	b2db      	uxtb	r3, r3
 80017c0:	f043 0301 	orr.w	r3, r3, #1
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d102      	bne.n	80017d0 <HAL_RCC_OscConfig+0x350>
 80017ca:	4bbc      	ldr	r3, [pc, #752]	; (8001abc <HAL_RCC_OscConfig+0x63c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	e013      	b.n	80017f8 <HAL_RCC_OscConfig+0x378>
 80017d0:	2302      	movs	r3, #2
 80017d2:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80017da:	fa93 f3a3 	rbit	r3, r3
 80017de:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80017e2:	2302      	movs	r3, #2
 80017e4:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017e8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80017ec:	fa93 f3a3 	rbit	r3, r3
 80017f0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017f4:	4bb1      	ldr	r3, [pc, #708]	; (8001abc <HAL_RCC_OscConfig+0x63c>)
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	2202      	movs	r2, #2
 80017fa:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80017fe:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001802:	fa92 f2a2 	rbit	r2, r2
 8001806:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 800180a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800180e:	fab2 f282 	clz	r2, r2
 8001812:	b2d2      	uxtb	r2, r2
 8001814:	f042 0220 	orr.w	r2, r2, #32
 8001818:	b2d2      	uxtb	r2, r2
 800181a:	f002 021f 	and.w	r2, r2, #31
 800181e:	2101      	movs	r1, #1
 8001820:	fa01 f202 	lsl.w	r2, r1, r2
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d007      	beq.n	800183a <HAL_RCC_OscConfig+0x3ba>
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d002      	beq.n	800183a <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	f000 bd31 	b.w	800229c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800183a:	4ba0      	ldr	r3, [pc, #640]	; (8001abc <HAL_RCC_OscConfig+0x63c>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001842:	1d3b      	adds	r3, r7, #4
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	21f8      	movs	r1, #248	; 0xf8
 800184a:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800184e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001852:	fa91 f1a1 	rbit	r1, r1
 8001856:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800185a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800185e:	fab1 f181 	clz	r1, r1
 8001862:	b2c9      	uxtb	r1, r1
 8001864:	408b      	lsls	r3, r1
 8001866:	4995      	ldr	r1, [pc, #596]	; (8001abc <HAL_RCC_OscConfig+0x63c>)
 8001868:	4313      	orrs	r3, r2
 800186a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800186c:	e0f5      	b.n	8001a5a <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800186e:	1d3b      	adds	r3, r7, #4
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 8085 	beq.w	8001984 <HAL_RCC_OscConfig+0x504>
 800187a:	2301      	movs	r3, #1
 800187c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001880:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001884:	fa93 f3a3 	rbit	r3, r3
 8001888:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 800188c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001890:	fab3 f383 	clz	r3, r3
 8001894:	b2db      	uxtb	r3, r3
 8001896:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800189a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	461a      	mov	r2, r3
 80018a2:	2301      	movs	r3, #1
 80018a4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7ff fa6b 	bl	8000d80 <HAL_GetTick>
 80018aa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018b0:	f7ff fa66 	bl	8000d80 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d902      	bls.n	80018c6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	f000 bceb 	b.w	800229c <HAL_RCC_OscConfig+0xe1c>
 80018c6:	2302      	movs	r3, #2
 80018c8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80018d0:	fa93 f3a3 	rbit	r3, r3
 80018d4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80018d8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	fab3 f383 	clz	r3, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d102      	bne.n	80018f6 <HAL_RCC_OscConfig+0x476>
 80018f0:	4b72      	ldr	r3, [pc, #456]	; (8001abc <HAL_RCC_OscConfig+0x63c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	e013      	b.n	800191e <HAL_RCC_OscConfig+0x49e>
 80018f6:	2302      	movs	r3, #2
 80018f8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001900:	fa93 f3a3 	rbit	r3, r3
 8001904:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001908:	2302      	movs	r3, #2
 800190a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800190e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001912:	fa93 f3a3 	rbit	r3, r3
 8001916:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800191a:	4b68      	ldr	r3, [pc, #416]	; (8001abc <HAL_RCC_OscConfig+0x63c>)
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	2202      	movs	r2, #2
 8001920:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001924:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001928:	fa92 f2a2 	rbit	r2, r2
 800192c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001930:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001934:	fab2 f282 	clz	r2, r2
 8001938:	b2d2      	uxtb	r2, r2
 800193a:	f042 0220 	orr.w	r2, r2, #32
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	f002 021f 	and.w	r2, r2, #31
 8001944:	2101      	movs	r1, #1
 8001946:	fa01 f202 	lsl.w	r2, r1, r2
 800194a:	4013      	ands	r3, r2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d0af      	beq.n	80018b0 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001950:	4b5a      	ldr	r3, [pc, #360]	; (8001abc <HAL_RCC_OscConfig+0x63c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	21f8      	movs	r1, #248	; 0xf8
 8001960:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001964:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001968:	fa91 f1a1 	rbit	r1, r1
 800196c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001970:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001974:	fab1 f181 	clz	r1, r1
 8001978:	b2c9      	uxtb	r1, r1
 800197a:	408b      	lsls	r3, r1
 800197c:	494f      	ldr	r1, [pc, #316]	; (8001abc <HAL_RCC_OscConfig+0x63c>)
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
 8001982:	e06a      	b.n	8001a5a <HAL_RCC_OscConfig+0x5da>
 8001984:	2301      	movs	r3, #1
 8001986:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800198e:	fa93 f3a3 	rbit	r3, r3
 8001992:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001996:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800199a:	fab3 f383 	clz	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	461a      	mov	r2, r3
 80019ac:	2300      	movs	r3, #0
 80019ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff f9e6 	bl	8000d80 <HAL_GetTick>
 80019b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b8:	e00a      	b.n	80019d0 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019ba:	f7ff f9e1 	bl	8000d80 <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d902      	bls.n	80019d0 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	f000 bc66 	b.w	800229c <HAL_RCC_OscConfig+0xe1c>
 80019d0:	2302      	movs	r3, #2
 80019d2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019da:	fa93 f3a3 	rbit	r3, r3
 80019de:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80019e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e6:	fab3 f383 	clz	r3, r3
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	095b      	lsrs	r3, r3, #5
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d102      	bne.n	8001a00 <HAL_RCC_OscConfig+0x580>
 80019fa:	4b30      	ldr	r3, [pc, #192]	; (8001abc <HAL_RCC_OscConfig+0x63c>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	e013      	b.n	8001a28 <HAL_RCC_OscConfig+0x5a8>
 8001a00:	2302      	movs	r3, #2
 8001a02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a12:	2302      	movs	r3, #2
 8001a14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a24:	4b25      	ldr	r3, [pc, #148]	; (8001abc <HAL_RCC_OscConfig+0x63c>)
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	2202      	movs	r2, #2
 8001a2a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001a2e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001a32:	fa92 f2a2 	rbit	r2, r2
 8001a36:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001a3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a3e:	fab2 f282 	clz	r2, r2
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f042 0220 	orr.w	r2, r2, #32
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	f002 021f 	and.w	r2, r2, #31
 8001a4e:	2101      	movs	r1, #1
 8001a50:	fa01 f202 	lsl.w	r2, r1, r2
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1af      	bne.n	80019ba <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0308 	and.w	r3, r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 80da 	beq.w	8001c1e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a6a:	1d3b      	adds	r3, r7, #4
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	695b      	ldr	r3, [r3, #20]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d069      	beq.n	8001b48 <HAL_RCC_OscConfig+0x6c8>
 8001a74:	2301      	movs	r3, #1
 8001a76:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a7e:	fa93 f3a3 	rbit	r3, r3
 8001a82:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001a86:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8a:	fab3 f383 	clz	r3, r3
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <HAL_RCC_OscConfig+0x640>)
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	461a      	mov	r2, r3
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9e:	f7ff f96f 	bl	8000d80 <HAL_GetTick>
 8001aa2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aa6:	e00d      	b.n	8001ac4 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa8:	f7ff f96a 	bl	8000d80 <HAL_GetTick>
 8001aac:	4602      	mov	r2, r0
 8001aae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d905      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e3ef      	b.n	800229c <HAL_RCC_OscConfig+0xe1c>
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	10908120 	.word	0x10908120
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ace:	fa93 f2a3 	rbit	r2, r3
 8001ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001adc:	2202      	movs	r2, #2
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	fa93 f2a3 	rbit	r2, r3
 8001aea:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001af4:	2202      	movs	r2, #2
 8001af6:	601a      	str	r2, [r3, #0]
 8001af8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	fa93 f2a3 	rbit	r2, r3
 8001b02:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001b06:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b08:	4ba4      	ldr	r3, [pc, #656]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001b0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b0c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b10:	2102      	movs	r1, #2
 8001b12:	6019      	str	r1, [r3, #0]
 8001b14:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	fa93 f1a3 	rbit	r1, r3
 8001b1e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b22:	6019      	str	r1, [r3, #0]
  return result;
 8001b24:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	fab3 f383 	clz	r3, r3
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0b0      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x628>
 8001b46:	e06a      	b.n	8001c1e <HAL_RCC_OscConfig+0x79e>
 8001b48:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	fa93 f2a3 	rbit	r2, r3
 8001b5a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b5e:	601a      	str	r2, [r3, #0]
  return result;
 8001b60:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001b64:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b66:	fab3 f383 	clz	r3, r3
 8001b6a:	b2db      	uxtb	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b8c      	ldr	r3, [pc, #560]	; (8001da0 <HAL_RCC_OscConfig+0x920>)
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	461a      	mov	r2, r3
 8001b76:	2300      	movs	r3, #0
 8001b78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff f901 	bl	8000d80 <HAL_GetTick>
 8001b7e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b82:	e009      	b.n	8001b98 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b84:	f7ff f8fc 	bl	8000d80 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e381      	b.n	800229c <HAL_RCC_OscConfig+0xe1c>
 8001b98:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	fa93 f2a3 	rbit	r2, r3
 8001baa:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	fa93 f2a3 	rbit	r2, r3
 8001bc2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bcc:	2202      	movs	r2, #2
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	fa93 f2a3 	rbit	r2, r3
 8001bda:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001bde:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be0:	4b6e      	ldr	r3, [pc, #440]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001be4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001be8:	2102      	movs	r1, #2
 8001bea:	6019      	str	r1, [r3, #0]
 8001bec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	fa93 f1a3 	rbit	r1, r3
 8001bf6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001bfa:	6019      	str	r1, [r3, #0]
  return result;
 8001bfc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	fab3 f383 	clz	r3, r3
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	f003 031f 	and.w	r3, r3, #31
 8001c12:	2101      	movs	r1, #1
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d1b2      	bne.n	8001b84 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f000 8157 	beq.w	8001edc <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c34:	4b59      	ldr	r3, [pc, #356]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001c36:	69db      	ldr	r3, [r3, #28]
 8001c38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d112      	bne.n	8001c66 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c40:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	4a55      	ldr	r2, [pc, #340]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	61d3      	str	r3, [r2, #28]
 8001c4c:	4b53      	ldr	r3, [pc, #332]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001c4e:	69db      	ldr	r3, [r3, #28]
 8001c50:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001c54:	f107 030c 	add.w	r3, r7, #12
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	f107 030c 	add.w	r3, r7, #12
 8001c5e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001c60:	2301      	movs	r3, #1
 8001c62:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c66:	4b4f      	ldr	r3, [pc, #316]	; (8001da4 <HAL_RCC_OscConfig+0x924>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d11a      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c72:	4b4c      	ldr	r3, [pc, #304]	; (8001da4 <HAL_RCC_OscConfig+0x924>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a4b      	ldr	r2, [pc, #300]	; (8001da4 <HAL_RCC_OscConfig+0x924>)
 8001c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c7e:	f7ff f87f 	bl	8000d80 <HAL_GetTick>
 8001c82:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c86:	e009      	b.n	8001c9c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c88:	f7ff f87a 	bl	8000d80 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b64      	cmp	r3, #100	; 0x64
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e2ff      	b.n	800229c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	4b41      	ldr	r3, [pc, #260]	; (8001da4 <HAL_RCC_OscConfig+0x924>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0ef      	beq.n	8001c88 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d106      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x840>
 8001cb2:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001cb4:	6a1b      	ldr	r3, [r3, #32]
 8001cb6:	4a39      	ldr	r2, [pc, #228]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6213      	str	r3, [r2, #32]
 8001cbe:	e02f      	b.n	8001d20 <HAL_RCC_OscConfig+0x8a0>
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10c      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x864>
 8001cca:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	4a33      	ldr	r2, [pc, #204]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	6213      	str	r3, [r2, #32]
 8001cd6:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4a30      	ldr	r2, [pc, #192]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001cdc:	f023 0304 	bic.w	r3, r3, #4
 8001ce0:	6213      	str	r3, [r2, #32]
 8001ce2:	e01d      	b.n	8001d20 <HAL_RCC_OscConfig+0x8a0>
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	2b05      	cmp	r3, #5
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x888>
 8001cee:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4a2a      	ldr	r2, [pc, #168]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001cf4:	f043 0304 	orr.w	r3, r3, #4
 8001cf8:	6213      	str	r3, [r2, #32]
 8001cfa:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a27      	ldr	r2, [pc, #156]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6213      	str	r3, [r2, #32]
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0x8a0>
 8001d08:	4b24      	ldr	r3, [pc, #144]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001d0e:	f023 0301 	bic.w	r3, r3, #1
 8001d12:	6213      	str	r3, [r2, #32]
 8001d14:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4a20      	ldr	r2, [pc, #128]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001d1a:	f023 0304 	bic.w	r3, r3, #4
 8001d1e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d20:	1d3b      	adds	r3, r7, #4
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d06a      	beq.n	8001e00 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2a:	f7ff f829 	bl	8000d80 <HAL_GetTick>
 8001d2e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d32:	e00b      	b.n	8001d4c <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d34:	f7ff f824 	bl	8000d80 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d3e:	1ad3      	subs	r3, r2, r3
 8001d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e2a7      	b.n	800229c <HAL_RCC_OscConfig+0xe1c>
 8001d4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d50:	2202      	movs	r2, #2
 8001d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	fa93 f2a3 	rbit	r2, r3
 8001d5e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d68:	2202      	movs	r2, #2
 8001d6a:	601a      	str	r2, [r3, #0]
 8001d6c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	fa93 f2a3 	rbit	r2, r3
 8001d76:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d7a:	601a      	str	r2, [r3, #0]
  return result;
 8001d7c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001d80:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d82:	fab3 f383 	clz	r3, r3
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	095b      	lsrs	r3, r3, #5
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	f043 0302 	orr.w	r3, r3, #2
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d108      	bne.n	8001da8 <HAL_RCC_OscConfig+0x928>
 8001d96:	4b01      	ldr	r3, [pc, #4]	; (8001d9c <HAL_RCC_OscConfig+0x91c>)
 8001d98:	6a1b      	ldr	r3, [r3, #32]
 8001d9a:	e013      	b.n	8001dc4 <HAL_RCC_OscConfig+0x944>
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	10908120 	.word	0x10908120
 8001da4:	40007000 	.word	0x40007000
 8001da8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001dac:	2202      	movs	r2, #2
 8001dae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	fa93 f2a3 	rbit	r2, r3
 8001dba:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	4bc0      	ldr	r3, [pc, #768]	; (80020c4 <HAL_RCC_OscConfig+0xc44>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001dc8:	2102      	movs	r1, #2
 8001dca:	6011      	str	r1, [r2, #0]
 8001dcc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001dd0:	6812      	ldr	r2, [r2, #0]
 8001dd2:	fa92 f1a2 	rbit	r1, r2
 8001dd6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001dda:	6011      	str	r1, [r2, #0]
  return result;
 8001ddc:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	fab2 f282 	clz	r2, r2
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dec:	b2d2      	uxtb	r2, r2
 8001dee:	f002 021f 	and.w	r2, r2, #31
 8001df2:	2101      	movs	r1, #1
 8001df4:	fa01 f202 	lsl.w	r2, r1, r2
 8001df8:	4013      	ands	r3, r2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d09a      	beq.n	8001d34 <HAL_RCC_OscConfig+0x8b4>
 8001dfe:	e063      	b.n	8001ec8 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e00:	f7fe ffbe 	bl	8000d80 <HAL_GetTick>
 8001e04:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e08:	e00b      	b.n	8001e22 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e0a:	f7fe ffb9 	bl	8000d80 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e23c      	b.n	800229c <HAL_RCC_OscConfig+0xe1c>
 8001e22:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e26:	2202      	movs	r2, #2
 8001e28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	fa93 f2a3 	rbit	r2, r3
 8001e34:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e3e:	2202      	movs	r2, #2
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	fa93 f2a3 	rbit	r2, r3
 8001e4c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e50:	601a      	str	r2, [r3, #0]
  return result;
 8001e52:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001e56:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f043 0302 	orr.w	r3, r3, #2
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d102      	bne.n	8001e72 <HAL_RCC_OscConfig+0x9f2>
 8001e6c:	4b95      	ldr	r3, [pc, #596]	; (80020c4 <HAL_RCC_OscConfig+0xc44>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	e00d      	b.n	8001e8e <HAL_RCC_OscConfig+0xa0e>
 8001e72:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e76:	2202      	movs	r2, #2
 8001e78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	fa93 f2a3 	rbit	r2, r3
 8001e84:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	4b8e      	ldr	r3, [pc, #568]	; (80020c4 <HAL_RCC_OscConfig+0xc44>)
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001e92:	2102      	movs	r1, #2
 8001e94:	6011      	str	r1, [r2, #0]
 8001e96:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001e9a:	6812      	ldr	r2, [r2, #0]
 8001e9c:	fa92 f1a2 	rbit	r1, r2
 8001ea0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001ea4:	6011      	str	r1, [r2, #0]
  return result;
 8001ea6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	fab2 f282 	clz	r2, r2
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	f002 021f 	and.w	r2, r2, #31
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1a0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001ec8:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed0:	4b7c      	ldr	r3, [pc, #496]	; (80020c4 <HAL_RCC_OscConfig+0xc44>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	4a7b      	ldr	r2, [pc, #492]	; (80020c4 <HAL_RCC_OscConfig+0xc44>)
 8001ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eda:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001edc:	1d3b      	adds	r3, r7, #4
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699b      	ldr	r3, [r3, #24]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	f000 81d9 	beq.w	800229a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee8:	4b76      	ldr	r3, [pc, #472]	; (80020c4 <HAL_RCC_OscConfig+0xc44>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f003 030c 	and.w	r3, r3, #12
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	f000 81a6 	beq.w	8002242 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	f040 811e 	bne.w	800213e <HAL_RCC_OscConfig+0xcbe>
 8001f02:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	fa93 f2a3 	rbit	r2, r3
 8001f16:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f1a:	601a      	str	r2, [r3, #0]
  return result;
 8001f1c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001f20:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	fab3 f383 	clz	r3, r3
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	461a      	mov	r2, r3
 8001f34:	2300      	movs	r3, #0
 8001f36:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7fe ff22 	bl	8000d80 <HAL_GetTick>
 8001f3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f40:	e009      	b.n	8001f56 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f42:	f7fe ff1d 	bl	8000d80 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e1a2      	b.n	800229c <HAL_RCC_OscConfig+0xe1c>
 8001f56:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	fa93 f2a3 	rbit	r2, r3
 8001f6a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f6e:	601a      	str	r2, [r3, #0]
  return result;
 8001f70:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001f74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	095b      	lsrs	r3, r3, #5
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d102      	bne.n	8001f90 <HAL_RCC_OscConfig+0xb10>
 8001f8a:	4b4e      	ldr	r3, [pc, #312]	; (80020c4 <HAL_RCC_OscConfig+0xc44>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	e01b      	b.n	8001fc8 <HAL_RCC_OscConfig+0xb48>
 8001f90:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	fa93 f2a3 	rbit	r2, r3
 8001fa4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	fa93 f2a3 	rbit	r2, r3
 8001fbe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	4b3f      	ldr	r3, [pc, #252]	; (80020c4 <HAL_RCC_OscConfig+0xc44>)
 8001fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001fcc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fd0:	6011      	str	r1, [r2, #0]
 8001fd2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	fa92 f1a2 	rbit	r1, r2
 8001fdc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fe0:	6011      	str	r1, [r2, #0]
  return result;
 8001fe2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001fe6:	6812      	ldr	r2, [r2, #0]
 8001fe8:	fab2 f282 	clz	r2, r2
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	f042 0220 	orr.w	r2, r2, #32
 8001ff2:	b2d2      	uxtb	r2, r2
 8001ff4:	f002 021f 	and.w	r2, r2, #31
 8001ff8:	2101      	movs	r1, #1
 8001ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d19e      	bne.n	8001f42 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002004:	4b2f      	ldr	r3, [pc, #188]	; (80020c4 <HAL_RCC_OscConfig+0xc44>)
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	f023 020f 	bic.w	r2, r3, #15
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	492c      	ldr	r1, [pc, #176]	; (80020c4 <HAL_RCC_OscConfig+0xc44>)
 8002014:	4313      	orrs	r3, r2
 8002016:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002018:	4b2a      	ldr	r3, [pc, #168]	; (80020c4 <HAL_RCC_OscConfig+0xc44>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6a19      	ldr	r1, [r3, #32]
 8002026:	1d3b      	adds	r3, r7, #4
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	430b      	orrs	r3, r1
 800202e:	4925      	ldr	r1, [pc, #148]	; (80020c4 <HAL_RCC_OscConfig+0xc44>)
 8002030:	4313      	orrs	r3, r2
 8002032:	604b      	str	r3, [r1, #4]
 8002034:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002038:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800203c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	fa93 f2a3 	rbit	r2, r3
 8002048:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800204c:	601a      	str	r2, [r3, #0]
  return result;
 800204e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002052:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002054:	fab3 f383 	clz	r3, r3
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800205e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	461a      	mov	r2, r3
 8002066:	2301      	movs	r3, #1
 8002068:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7fe fe89 	bl	8000d80 <HAL_GetTick>
 800206e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002072:	e009      	b.n	8002088 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002074:	f7fe fe84 	bl	8000d80 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800207e:	1ad3      	subs	r3, r2, r3
 8002080:	2b02      	cmp	r3, #2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e109      	b.n	800229c <HAL_RCC_OscConfig+0xe1c>
 8002088:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800208c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002090:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	fa93 f2a3 	rbit	r2, r3
 800209c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020a0:	601a      	str	r2, [r3, #0]
  return result;
 80020a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	095b      	lsrs	r3, r3, #5
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d105      	bne.n	80020c8 <HAL_RCC_OscConfig+0xc48>
 80020bc:	4b01      	ldr	r3, [pc, #4]	; (80020c4 <HAL_RCC_OscConfig+0xc44>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	e01e      	b.n	8002100 <HAL_RCC_OscConfig+0xc80>
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	fa93 f2a3 	rbit	r2, r3
 80020dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	fa93 f2a3 	rbit	r2, r3
 80020f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	4b6a      	ldr	r3, [pc, #424]	; (80022a8 <HAL_RCC_OscConfig+0xe28>)
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002104:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002108:	6011      	str	r1, [r2, #0]
 800210a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800210e:	6812      	ldr	r2, [r2, #0]
 8002110:	fa92 f1a2 	rbit	r1, r2
 8002114:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002118:	6011      	str	r1, [r2, #0]
  return result;
 800211a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	fab2 f282 	clz	r2, r2
 8002124:	b2d2      	uxtb	r2, r2
 8002126:	f042 0220 	orr.w	r2, r2, #32
 800212a:	b2d2      	uxtb	r2, r2
 800212c:	f002 021f 	and.w	r2, r2, #31
 8002130:	2101      	movs	r1, #1
 8002132:	fa01 f202 	lsl.w	r2, r1, r2
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d09b      	beq.n	8002074 <HAL_RCC_OscConfig+0xbf4>
 800213c:	e0ad      	b.n	800229a <HAL_RCC_OscConfig+0xe1a>
 800213e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002142:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002146:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002148:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	fa93 f2a3 	rbit	r2, r3
 8002152:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002156:	601a      	str	r2, [r3, #0]
  return result;
 8002158:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800215c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002168:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	461a      	mov	r2, r3
 8002170:	2300      	movs	r3, #0
 8002172:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7fe fe04 	bl	8000d80 <HAL_GetTick>
 8002178:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800217c:	e009      	b.n	8002192 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800217e:	f7fe fdff 	bl	8000d80 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e084      	b.n	800229c <HAL_RCC_OscConfig+0xe1c>
 8002192:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002196:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800219a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	fa93 f2a3 	rbit	r2, r3
 80021a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021aa:	601a      	str	r2, [r3, #0]
  return result;
 80021ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	095b      	lsrs	r3, r3, #5
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d102      	bne.n	80021cc <HAL_RCC_OscConfig+0xd4c>
 80021c6:	4b38      	ldr	r3, [pc, #224]	; (80022a8 <HAL_RCC_OscConfig+0xe28>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	e01b      	b.n	8002204 <HAL_RCC_OscConfig+0xd84>
 80021cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	fa93 f2a3 	rbit	r2, r3
 80021e0:	f107 0320 	add.w	r3, r7, #32
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	f107 031c 	add.w	r3, r7, #28
 80021ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	f107 031c 	add.w	r3, r7, #28
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	fa93 f2a3 	rbit	r2, r3
 80021fa:	f107 0318 	add.w	r3, r7, #24
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	4b29      	ldr	r3, [pc, #164]	; (80022a8 <HAL_RCC_OscConfig+0xe28>)
 8002202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002204:	f107 0214 	add.w	r2, r7, #20
 8002208:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800220c:	6011      	str	r1, [r2, #0]
 800220e:	f107 0214 	add.w	r2, r7, #20
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	fa92 f1a2 	rbit	r1, r2
 8002218:	f107 0210 	add.w	r2, r7, #16
 800221c:	6011      	str	r1, [r2, #0]
  return result;
 800221e:	f107 0210 	add.w	r2, r7, #16
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	fab2 f282 	clz	r2, r2
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	f042 0220 	orr.w	r2, r2, #32
 800222e:	b2d2      	uxtb	r2, r2
 8002230:	f002 021f 	and.w	r2, r2, #31
 8002234:	2101      	movs	r1, #1
 8002236:	fa01 f202 	lsl.w	r2, r1, r2
 800223a:	4013      	ands	r3, r2
 800223c:	2b00      	cmp	r3, #0
 800223e:	d19e      	bne.n	800217e <HAL_RCC_OscConfig+0xcfe>
 8002240:	e02b      	b.n	800229a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e025      	b.n	800229c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002250:	4b15      	ldr	r3, [pc, #84]	; (80022a8 <HAL_RCC_OscConfig+0xe28>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <HAL_RCC_OscConfig+0xe28>)
 800225a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002260:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002264:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	429a      	cmp	r2, r3
 8002270:	d111      	bne.n	8002296 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002272:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002276:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800227a:	1d3b      	adds	r3, r7, #4
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002280:	429a      	cmp	r2, r3
 8002282:	d108      	bne.n	8002296 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002284:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002288:	f003 020f 	and.w	r2, r3, #15
 800228c:	1d3b      	adds	r3, r7, #4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002292:	429a      	cmp	r2, r3
 8002294:	d001      	beq.n	800229a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40021000 	.word	0x40021000

080022ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b09e      	sub	sp, #120	; 0x78
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80022b6:	2300      	movs	r3, #0
 80022b8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e162      	b.n	800258a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022c4:	4b90      	ldr	r3, [pc, #576]	; (8002508 <HAL_RCC_ClockConfig+0x25c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d910      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d2:	4b8d      	ldr	r3, [pc, #564]	; (8002508 <HAL_RCC_ClockConfig+0x25c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f023 0207 	bic.w	r2, r3, #7
 80022da:	498b      	ldr	r1, [pc, #556]	; (8002508 <HAL_RCC_ClockConfig+0x25c>)
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	4313      	orrs	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b89      	ldr	r3, [pc, #548]	; (8002508 <HAL_RCC_ClockConfig+0x25c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0307 	and.w	r3, r3, #7
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e14a      	b.n	800258a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d008      	beq.n	8002312 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002300:	4b82      	ldr	r3, [pc, #520]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	497f      	ldr	r1, [pc, #508]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 800230e:	4313      	orrs	r3, r2
 8002310:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80dc 	beq.w	80024d8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b01      	cmp	r3, #1
 8002326:	d13c      	bne.n	80023a2 <HAL_RCC_ClockConfig+0xf6>
 8002328:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800232c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002338:	fab3 f383 	clz	r3, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	b2db      	uxtb	r3, r3
 8002342:	f043 0301 	orr.w	r3, r3, #1
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b01      	cmp	r3, #1
 800234a:	d102      	bne.n	8002352 <HAL_RCC_ClockConfig+0xa6>
 800234c:	4b6f      	ldr	r3, [pc, #444]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	e00f      	b.n	8002372 <HAL_RCC_ClockConfig+0xc6>
 8002352:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002356:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	667b      	str	r3, [r7, #100]	; 0x64
 8002360:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002364:	663b      	str	r3, [r7, #96]	; 0x60
 8002366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002368:	fa93 f3a3 	rbit	r3, r3
 800236c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800236e:	4b67      	ldr	r3, [pc, #412]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 8002370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002372:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002376:	65ba      	str	r2, [r7, #88]	; 0x58
 8002378:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800237a:	fa92 f2a2 	rbit	r2, r2
 800237e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002380:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002382:	fab2 f282 	clz	r2, r2
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	f042 0220 	orr.w	r2, r2, #32
 800238c:	b2d2      	uxtb	r2, r2
 800238e:	f002 021f 	and.w	r2, r2, #31
 8002392:	2101      	movs	r1, #1
 8002394:	fa01 f202 	lsl.w	r2, r1, r2
 8002398:	4013      	ands	r3, r2
 800239a:	2b00      	cmp	r3, #0
 800239c:	d17b      	bne.n	8002496 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e0f3      	b.n	800258a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d13c      	bne.n	8002424 <HAL_RCC_ClockConfig+0x178>
 80023aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80023b2:	fa93 f3a3 	rbit	r3, r3
 80023b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80023b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ba:	fab3 f383 	clz	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	095b      	lsrs	r3, r3, #5
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	f043 0301 	orr.w	r3, r3, #1
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d102      	bne.n	80023d4 <HAL_RCC_ClockConfig+0x128>
 80023ce:	4b4f      	ldr	r3, [pc, #316]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	e00f      	b.n	80023f4 <HAL_RCC_ClockConfig+0x148>
 80023d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023d8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023dc:	fa93 f3a3 	rbit	r3, r3
 80023e0:	647b      	str	r3, [r7, #68]	; 0x44
 80023e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023e6:	643b      	str	r3, [r7, #64]	; 0x40
 80023e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f0:	4b46      	ldr	r3, [pc, #280]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 80023f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023f8:	63ba      	str	r2, [r7, #56]	; 0x38
 80023fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80023fc:	fa92 f2a2 	rbit	r2, r2
 8002400:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002404:	fab2 f282 	clz	r2, r2
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	f042 0220 	orr.w	r2, r2, #32
 800240e:	b2d2      	uxtb	r2, r2
 8002410:	f002 021f 	and.w	r2, r2, #31
 8002414:	2101      	movs	r1, #1
 8002416:	fa01 f202 	lsl.w	r2, r1, r2
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	d13a      	bne.n	8002496 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e0b2      	b.n	800258a <HAL_RCC_ClockConfig+0x2de>
 8002424:	2302      	movs	r3, #2
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800242a:	fa93 f3a3 	rbit	r3, r3
 800242e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	b2db      	uxtb	r3, r3
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b01      	cmp	r3, #1
 8002444:	d102      	bne.n	800244c <HAL_RCC_ClockConfig+0x1a0>
 8002446:	4b31      	ldr	r3, [pc, #196]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	e00d      	b.n	8002468 <HAL_RCC_ClockConfig+0x1bc>
 800244c:	2302      	movs	r3, #2
 800244e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	627b      	str	r3, [r7, #36]	; 0x24
 8002458:	2302      	movs	r3, #2
 800245a:	623b      	str	r3, [r7, #32]
 800245c:	6a3b      	ldr	r3, [r7, #32]
 800245e:	fa93 f3a3 	rbit	r3, r3
 8002462:	61fb      	str	r3, [r7, #28]
 8002464:	4b29      	ldr	r3, [pc, #164]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 8002466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002468:	2202      	movs	r2, #2
 800246a:	61ba      	str	r2, [r7, #24]
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	fa92 f2a2 	rbit	r2, r2
 8002472:	617a      	str	r2, [r7, #20]
  return result;
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	fab2 f282 	clz	r2, r2
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	f042 0220 	orr.w	r2, r2, #32
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	f002 021f 	and.w	r2, r2, #31
 8002486:	2101      	movs	r1, #1
 8002488:	fa01 f202 	lsl.w	r2, r1, r2
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e079      	b.n	800258a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f023 0203 	bic.w	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	491a      	ldr	r1, [pc, #104]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a8:	f7fe fc6a 	bl	8000d80 <HAL_GetTick>
 80024ac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ae:	e00a      	b.n	80024c6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024b0:	f7fe fc66 	bl	8000d80 <HAL_GetTick>
 80024b4:	4602      	mov	r2, r0
 80024b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024b8:	1ad3      	subs	r3, r2, r3
 80024ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80024be:	4293      	cmp	r3, r2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e061      	b.n	800258a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c6:	4b11      	ldr	r3, [pc, #68]	; (800250c <HAL_RCC_ClockConfig+0x260>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 020c 	and.w	r2, r3, #12
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d1eb      	bne.n	80024b0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <HAL_RCC_ClockConfig+0x25c>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d214      	bcs.n	8002510 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_RCC_ClockConfig+0x25c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 0207 	bic.w	r2, r3, #7
 80024ee:	4906      	ldr	r1, [pc, #24]	; (8002508 <HAL_RCC_ClockConfig+0x25c>)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <HAL_RCC_ClockConfig+0x25c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d005      	beq.n	8002510 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e040      	b.n	800258a <HAL_RCC_ClockConfig+0x2de>
 8002508:	40022000 	.word	0x40022000
 800250c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	d008      	beq.n	800252e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800251c:	4b1d      	ldr	r3, [pc, #116]	; (8002594 <HAL_RCC_ClockConfig+0x2e8>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	491a      	ldr	r1, [pc, #104]	; (8002594 <HAL_RCC_ClockConfig+0x2e8>)
 800252a:	4313      	orrs	r3, r2
 800252c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d009      	beq.n	800254e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800253a:	4b16      	ldr	r3, [pc, #88]	; (8002594 <HAL_RCC_ClockConfig+0x2e8>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	00db      	lsls	r3, r3, #3
 8002548:	4912      	ldr	r1, [pc, #72]	; (8002594 <HAL_RCC_ClockConfig+0x2e8>)
 800254a:	4313      	orrs	r3, r2
 800254c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800254e:	f000 f829 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8002552:	4601      	mov	r1, r0
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_RCC_ClockConfig+0x2e8>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800255c:	22f0      	movs	r2, #240	; 0xf0
 800255e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	fa92 f2a2 	rbit	r2, r2
 8002566:	60fa      	str	r2, [r7, #12]
  return result;
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	fab2 f282 	clz	r2, r2
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	40d3      	lsrs	r3, r2
 8002572:	4a09      	ldr	r2, [pc, #36]	; (8002598 <HAL_RCC_ClockConfig+0x2ec>)
 8002574:	5cd3      	ldrb	r3, [r2, r3]
 8002576:	fa21 f303 	lsr.w	r3, r1, r3
 800257a:	4a08      	ldr	r2, [pc, #32]	; (800259c <HAL_RCC_ClockConfig+0x2f0>)
 800257c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800257e:	4b08      	ldr	r3, [pc, #32]	; (80025a0 <HAL_RCC_ClockConfig+0x2f4>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fbb8 	bl	8000cf8 <HAL_InitTick>
  
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3778      	adds	r7, #120	; 0x78
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40021000 	.word	0x40021000
 8002598:	08003ca0 	.word	0x08003ca0
 800259c:	20000000 	.word	0x20000000
 80025a0:	20000004 	.word	0x20000004

080025a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b08b      	sub	sp, #44	; 0x2c
 80025a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	2300      	movs	r3, #0
 80025b0:	61bb      	str	r3, [r7, #24]
 80025b2:	2300      	movs	r3, #0
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
 80025b6:	2300      	movs	r3, #0
 80025b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80025be:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <HAL_RCC_GetSysClockFreq+0xc4>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	2b04      	cmp	r3, #4
 80025cc:	d002      	beq.n	80025d4 <HAL_RCC_GetSysClockFreq+0x30>
 80025ce:	2b08      	cmp	r3, #8
 80025d0:	d003      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0x36>
 80025d2:	e03f      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025d4:	4b25      	ldr	r3, [pc, #148]	; (800266c <HAL_RCC_GetSysClockFreq+0xc8>)
 80025d6:	623b      	str	r3, [r7, #32]
      break;
 80025d8:	e03f      	b.n	800265a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80025e0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80025e4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	fa92 f2a2 	rbit	r2, r2
 80025ec:	607a      	str	r2, [r7, #4]
  return result;
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	fab2 f282 	clz	r2, r2
 80025f4:	b2d2      	uxtb	r2, r2
 80025f6:	40d3      	lsrs	r3, r2
 80025f8:	4a1d      	ldr	r2, [pc, #116]	; (8002670 <HAL_RCC_GetSysClockFreq+0xcc>)
 80025fa:	5cd3      	ldrb	r3, [r2, r3]
 80025fc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80025fe:	4b1a      	ldr	r3, [pc, #104]	; (8002668 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	220f      	movs	r2, #15
 8002608:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	fa92 f2a2 	rbit	r2, r2
 8002610:	60fa      	str	r2, [r7, #12]
  return result;
 8002612:	68fa      	ldr	r2, [r7, #12]
 8002614:	fab2 f282 	clz	r2, r2
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	40d3      	lsrs	r3, r2
 800261c:	4a15      	ldr	r2, [pc, #84]	; (8002674 <HAL_RCC_GetSysClockFreq+0xd0>)
 800261e:	5cd3      	ldrb	r3, [r2, r3]
 8002620:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800262c:	4a0f      	ldr	r2, [pc, #60]	; (800266c <HAL_RCC_GetSysClockFreq+0xc8>)
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	fbb2 f2f3 	udiv	r2, r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
 800263c:	e007      	b.n	800264e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800263e:	4a0b      	ldr	r2, [pc, #44]	; (800266c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	fbb2 f2f3 	udiv	r2, r2, r3
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	fb02 f303 	mul.w	r3, r2, r3
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	623b      	str	r3, [r7, #32]
      break;
 8002652:	e002      	b.n	800265a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4b05      	ldr	r3, [pc, #20]	; (800266c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002656:	623b      	str	r3, [r7, #32]
      break;
 8002658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800265a:	6a3b      	ldr	r3, [r7, #32]
}
 800265c:	4618      	mov	r0, r3
 800265e:	372c      	adds	r7, #44	; 0x2c
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	40021000 	.word	0x40021000
 800266c:	007a1200 	.word	0x007a1200
 8002670:	08003cb8 	.word	0x08003cb8
 8002674:	08003cc8 	.word	0x08003cc8

08002678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_RCC_GetHCLKFreq+0x14>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	20000000 	.word	0x20000000

08002690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002696:	f7ff ffef 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 800269a:	4601      	mov	r1, r0
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026a4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80026a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	fa92 f2a2 	rbit	r2, r2
 80026b0:	603a      	str	r2, [r7, #0]
  return result;
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	fab2 f282 	clz	r2, r2
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	40d3      	lsrs	r3, r2
 80026bc:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80026be:	5cd3      	ldrb	r3, [r2, r3]
 80026c0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80026c4:	4618      	mov	r0, r3
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	40021000 	.word	0x40021000
 80026d0:	08003cb0 	.word	0x08003cb0

080026d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80026da:	f7ff ffcd 	bl	8002678 <HAL_RCC_GetHCLKFreq>
 80026de:	4601      	mov	r1, r0
 80026e0:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80026e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80026ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	fa92 f2a2 	rbit	r2, r2
 80026f4:	603a      	str	r2, [r7, #0]
  return result;
 80026f6:	683a      	ldr	r2, [r7, #0]
 80026f8:	fab2 f282 	clz	r2, r2
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	40d3      	lsrs	r3, r2
 8002700:	4a04      	ldr	r2, [pc, #16]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002708:	4618      	mov	r0, r3
 800270a:	3708      	adds	r7, #8
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000
 8002714:	08003cb0 	.word	0x08003cb0

08002718 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b092      	sub	sp, #72	; 0x48
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002720:	2300      	movs	r3, #0
 8002722:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002724:	2300      	movs	r3, #0
 8002726:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002728:	2300      	movs	r3, #0
 800272a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80d4 	beq.w	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800273c:	4b4e      	ldr	r3, [pc, #312]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800273e:	69db      	ldr	r3, [r3, #28]
 8002740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10e      	bne.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002748:	4b4b      	ldr	r3, [pc, #300]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274a:	69db      	ldr	r3, [r3, #28]
 800274c:	4a4a      	ldr	r2, [pc, #296]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800274e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002752:	61d3      	str	r3, [r2, #28]
 8002754:	4b48      	ldr	r3, [pc, #288]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275c:	60bb      	str	r3, [r7, #8]
 800275e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002760:	2301      	movs	r3, #1
 8002762:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002766:	4b45      	ldr	r3, [pc, #276]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d118      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002772:	4b42      	ldr	r3, [pc, #264]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a41      	ldr	r2, [pc, #260]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002778:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800277c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800277e:	f7fe faff 	bl	8000d80 <HAL_GetTick>
 8002782:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	e008      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002786:	f7fe fafb 	bl	8000d80 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b64      	cmp	r3, #100	; 0x64
 8002792:	d901      	bls.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e1d6      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002798:	4b38      	ldr	r3, [pc, #224]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0f0      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027a4:	4b34      	ldr	r3, [pc, #208]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	f000 8084 	beq.w	80028be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d07c      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027c4:	4b2c      	ldr	r3, [pc, #176]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80027dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027de:	fab3 f383 	clz	r3, r3
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	461a      	mov	r2, r3
 80027e6:	4b26      	ldr	r3, [pc, #152]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027e8:	4413      	add	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	461a      	mov	r2, r3
 80027ee:	2301      	movs	r3, #1
 80027f0:	6013      	str	r3, [r2, #0]
 80027f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002802:	fab3 f383 	clz	r3, r3
 8002806:	b2db      	uxtb	r3, r3
 8002808:	461a      	mov	r2, r3
 800280a:	4b1d      	ldr	r3, [pc, #116]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	461a      	mov	r2, r3
 8002812:	2300      	movs	r3, #0
 8002814:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002816:	4a18      	ldr	r2, [pc, #96]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800281c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800281e:	f003 0301 	and.w	r3, r3, #1
 8002822:	2b00      	cmp	r3, #0
 8002824:	d04b      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002826:	f7fe faab 	bl	8000d80 <HAL_GetTick>
 800282a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800282c:	e00a      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800282e:	f7fe faa7 	bl	8000d80 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	f241 3288 	movw	r2, #5000	; 0x1388
 800283c:	4293      	cmp	r3, r2
 800283e:	d901      	bls.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002840:	2303      	movs	r3, #3
 8002842:	e180      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002844:	2302      	movs	r3, #2
 8002846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284a:	fa93 f3a3 	rbit	r3, r3
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
 8002850:	2302      	movs	r3, #2
 8002852:	623b      	str	r3, [r7, #32]
 8002854:	6a3b      	ldr	r3, [r7, #32]
 8002856:	fa93 f3a3 	rbit	r3, r3
 800285a:	61fb      	str	r3, [r7, #28]
  return result;
 800285c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800285e:	fab3 f383 	clz	r3, r3
 8002862:	b2db      	uxtb	r3, r3
 8002864:	095b      	lsrs	r3, r3, #5
 8002866:	b2db      	uxtb	r3, r3
 8002868:	f043 0302 	orr.w	r3, r3, #2
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b02      	cmp	r3, #2
 8002870:	d108      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002872:	4b01      	ldr	r3, [pc, #4]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	e00d      	b.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002878:	40021000 	.word	0x40021000
 800287c:	40007000 	.word	0x40007000
 8002880:	10908100 	.word	0x10908100
 8002884:	2302      	movs	r3, #2
 8002886:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	617b      	str	r3, [r7, #20]
 8002890:	4ba0      	ldr	r3, [pc, #640]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	2202      	movs	r2, #2
 8002896:	613a      	str	r2, [r7, #16]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	fa92 f2a2 	rbit	r2, r2
 800289e:	60fa      	str	r2, [r7, #12]
  return result;
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	fab2 f282 	clz	r2, r2
 80028a6:	b2d2      	uxtb	r2, r2
 80028a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f002 021f 	and.w	r2, r2, #31
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0b7      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80028be:	4b95      	ldr	r3, [pc, #596]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4992      	ldr	r1, [pc, #584]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d105      	bne.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028d8:	4b8e      	ldr	r3, [pc, #568]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	4a8d      	ldr	r2, [pc, #564]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028f0:	4b88      	ldr	r3, [pc, #544]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f4:	f023 0203 	bic.w	r2, r3, #3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4985      	ldr	r1, [pc, #532]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d008      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800290e:	4b81      	ldr	r3, [pc, #516]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	497e      	ldr	r1, [pc, #504]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800291c:	4313      	orrs	r3, r2
 800291e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b00      	cmp	r3, #0
 800292a:	d008      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800292c:	4b79      	ldr	r3, [pc, #484]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	4976      	ldr	r1, [pc, #472]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	2b00      	cmp	r3, #0
 8002948:	d008      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800294a:	4b72      	ldr	r3, [pc, #456]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	f023 0210 	bic.w	r2, r3, #16
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	496f      	ldr	r1, [pc, #444]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002958:	4313      	orrs	r3, r2
 800295a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002968:	4b6a      	ldr	r3, [pc, #424]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002974:	4967      	ldr	r1, [pc, #412]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002976:	4313      	orrs	r3, r2
 8002978:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002982:	2b00      	cmp	r3, #0
 8002984:	d008      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002986:	4b63      	ldr	r3, [pc, #396]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f023 0220 	bic.w	r2, r3, #32
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	4960      	ldr	r1, [pc, #384]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002994:	4313      	orrs	r3, r2
 8002996:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029a4:	4b5b      	ldr	r3, [pc, #364]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	4958      	ldr	r1, [pc, #352]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d008      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029c2:	4b54      	ldr	r3, [pc, #336]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	695b      	ldr	r3, [r3, #20]
 80029ce:	4951      	ldr	r1, [pc, #324]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029e0:	4b4c      	ldr	r3, [pc, #304]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4949      	ldr	r1, [pc, #292]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d008      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80029fe:	4b45      	ldr	r3, [pc, #276]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4942      	ldr	r1, [pc, #264]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a1c:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a28:	493a      	ldr	r1, [pc, #232]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d008      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a3a:	4b36      	ldr	r3, [pc, #216]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	4933      	ldr	r1, [pc, #204]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d008      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a58:	4b2e      	ldr	r3, [pc, #184]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a64:	492b      	ldr	r1, [pc, #172]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d008      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a76:	4b27      	ldr	r3, [pc, #156]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	4924      	ldr	r1, [pc, #144]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002a94:	4b1f      	ldr	r3, [pc, #124]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a98:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	491c      	ldr	r1, [pc, #112]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d008      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002ab2:	4b18      	ldr	r3, [pc, #96]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002abe:	4915      	ldr	r1, [pc, #84]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002ad0:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002adc:	490d      	ldr	r1, [pc, #52]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d008      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afa:	4906      	ldr	r1, [pc, #24]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00c      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002b0c:	4b01      	ldr	r3, [pc, #4]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b10:	e002      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8002b12:	bf00      	nop
 8002b14:	40021000 	.word	0x40021000
 8002b18:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b20:	490b      	ldr	r1, [pc, #44]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d008      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002b32:	4b07      	ldr	r3, [pc, #28]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3e:	4904      	ldr	r1, [pc, #16]	; (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3748      	adds	r7, #72	; 0x48
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000

08002b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e040      	b.n	8002be8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fd ffc4 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2224      	movs	r2, #36	; 0x24
 8002b80:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 0201 	bic.w	r2, r2, #1
 8002b90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fb20 	bl	80031d8 <UART_SetConfig>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e022      	b.n	8002be8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fcea 	bl	8003584 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689a      	ldr	r2, [r3, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f042 0201 	orr.w	r2, r2, #1
 8002bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f000 fd71 	bl	80036c8 <UART_CheckIdleState>
 8002be6:	4603      	mov	r3, r0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b0ba      	sub	sp, #232	; 0xe8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002c16:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002c1a:	f640 030f 	movw	r3, #2063	; 0x80f
 8002c1e:	4013      	ands	r3, r2
 8002c20:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002c24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d115      	bne.n	8002c58 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00f      	beq.n	8002c58 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c3c:	f003 0320 	and.w	r3, r3, #32
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d009      	beq.n	8002c58 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	f000 82a3 	beq.w	8003194 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	4798      	blx	r3
      }
      return;
 8002c56:	e29d      	b.n	8003194 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	f000 8117 	beq.w	8002e90 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002c62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d106      	bne.n	8002c7c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002c6e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002c72:	4b85      	ldr	r3, [pc, #532]	; (8002e88 <HAL_UART_IRQHandler+0x298>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 810a 	beq.w	8002e90 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d011      	beq.n	8002cac <HAL_UART_IRQHandler+0xbc>
 8002c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00b      	beq.n	8002cac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ca2:	f043 0201 	orr.w	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d011      	beq.n	8002cdc <HAL_UART_IRQHandler+0xec>
 8002cb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00b      	beq.n	8002cdc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cd2:	f043 0204 	orr.w	r2, r3, #4
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ce0:	f003 0304 	and.w	r3, r3, #4
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d011      	beq.n	8002d0c <HAL_UART_IRQHandler+0x11c>
 8002ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d00b      	beq.n	8002d0c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d02:	f043 0202 	orr.w	r2, r3, #2
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d017      	beq.n	8002d48 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d105      	bne.n	8002d30 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002d28:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00b      	beq.n	8002d48 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2208      	movs	r2, #8
 8002d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d3e:	f043 0208 	orr.w	r2, r3, #8
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d012      	beq.n	8002d7a <HAL_UART_IRQHandler+0x18a>
 8002d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d58:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00c      	beq.n	8002d7a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d70:	f043 0220 	orr.w	r2, r3, #32
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f000 8209 	beq.w	8003198 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002d92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d96:	f003 0320 	and.w	r3, r3, #32
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d007      	beq.n	8002dae <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002db4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc2:	2b40      	cmp	r3, #64	; 0x40
 8002dc4:	d005      	beq.n	8002dd2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002dca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d04f      	beq.n	8002e72 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 fd85 	bl	80038e2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	d141      	bne.n	8002e6a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3308      	adds	r3, #8
 8002dec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002df4:	e853 3f00 	ldrex	r3, [r3]
 8002df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	3308      	adds	r3, #8
 8002e0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002e16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002e1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002e22:	e841 2300 	strex	r3, r2, [r1]
 8002e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002e2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1d9      	bne.n	8002de6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d013      	beq.n	8002e62 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	4a13      	ldr	r2, [pc, #76]	; (8002e8c <HAL_UART_IRQHandler+0x29c>)
 8002e40:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe f8f0 	bl	800102c <HAL_DMA_Abort_IT>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d017      	beq.n	8002e82 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e60:	e00f      	b.n	8002e82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f9a2 	bl	80031ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e68:	e00b      	b.n	8002e82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f99e 	bl	80031ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e70:	e007      	b.n	8002e82 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f99a 	bl	80031ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002e80:	e18a      	b.n	8003198 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e82:	bf00      	nop
    return;
 8002e84:	e188      	b.n	8003198 <HAL_UART_IRQHandler+0x5a8>
 8002e86:	bf00      	nop
 8002e88:	04000120 	.word	0x04000120
 8002e8c:	080039a9 	.word	0x080039a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	f040 8143 	bne.w	8003120 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 813c 	beq.w	8003120 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 8135 	beq.w	8003120 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2210      	movs	r2, #16
 8002ebc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec8:	2b40      	cmp	r3, #64	; 0x40
 8002eca:	f040 80b1 	bne.w	8003030 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002eda:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 815c 	beq.w	800319c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002eea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	f080 8154 	bcs.w	800319c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002efa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f02:	699b      	ldr	r3, [r3, #24]
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	f000 8085 	beq.w	8003014 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f16:	e853 3f00 	ldrex	r3, [r3]
 8002f1a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002f1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002f34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f38:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002f40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002f44:	e841 2300 	strex	r3, r2, [r1]
 8002f48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002f4c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1da      	bne.n	8002f0a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3308      	adds	r3, #8
 8002f5a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f5e:	e853 3f00 	ldrex	r3, [r3]
 8002f62:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002f64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f66:	f023 0301 	bic.w	r3, r3, #1
 8002f6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	3308      	adds	r3, #8
 8002f74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f78:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002f7c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f80:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f84:	e841 2300 	strex	r3, r2, [r1]
 8002f88:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002f8a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e1      	bne.n	8002f54 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3308      	adds	r3, #8
 8002f96:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fa2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fa6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3308      	adds	r3, #8
 8002fb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002fb4:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002fb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002fba:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002fbc:	e841 2300 	strex	r3, r2, [r1]
 8002fc0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002fc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1e3      	bne.n	8002f90 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fdc:	e853 3f00 	ldrex	r3, [r3]
 8002fe0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002fe2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe4:	f023 0310 	bic.w	r3, r3, #16
 8002fe8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ff6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002ff8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ffa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002ffc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ffe:	e841 2300 	strex	r3, r2, [r1]
 8003002:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1e4      	bne.n	8002fd4 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd ffd3 	bl	8000fba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003020:	b29b      	uxth	r3, r3
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	b29b      	uxth	r3, r3
 8003026:	4619      	mov	r1, r3
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f8c9 	bl	80031c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800302e:	e0b5      	b.n	800319c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800303c:	b29b      	uxth	r3, r3
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800304a:	b29b      	uxth	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80a7 	beq.w	80031a0 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003052:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 80a2 	beq.w	80031a0 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003064:	e853 3f00 	ldrex	r3, [r3]
 8003068:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800306a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800306c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003070:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	461a      	mov	r2, r3
 800307a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800307e:	647b      	str	r3, [r7, #68]	; 0x44
 8003080:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003082:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003084:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003086:	e841 2300 	strex	r3, r2, [r1]
 800308a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800308c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1e4      	bne.n	800305c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	3308      	adds	r3, #8
 8003098:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	e853 3f00 	ldrex	r3, [r3]
 80030a0:	623b      	str	r3, [r7, #32]
   return(result);
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	3308      	adds	r3, #8
 80030b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80030b6:	633a      	str	r2, [r7, #48]	; 0x30
 80030b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030be:	e841 2300 	strex	r3, r2, [r1]
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1e3      	bne.n	8003092 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	e853 3f00 	ldrex	r3, [r3]
 80030e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f023 0310 	bic.w	r3, r3, #16
 80030f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003102:	69b9      	ldr	r1, [r7, #24]
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	e841 2300 	strex	r3, r2, [r1]
 800310a:	617b      	str	r3, [r7, #20]
   return(result);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1e4      	bne.n	80030dc <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003112:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003116:	4619      	mov	r1, r3
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f851 	bl	80031c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800311e:	e03f      	b.n	80031a0 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00e      	beq.n	800314a <HAL_UART_IRQHandler+0x55a>
 800312c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003140:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fc70 	bl	8003a28 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003148:	e02d      	b.n	80031a6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00e      	beq.n	8003174 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	d008      	beq.n	8003174 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003166:	2b00      	cmp	r3, #0
 8003168:	d01c      	beq.n	80031a4 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	4798      	blx	r3
    }
    return;
 8003172:	e017      	b.n	80031a4 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317c:	2b00      	cmp	r3, #0
 800317e:	d012      	beq.n	80031a6 <HAL_UART_IRQHandler+0x5b6>
 8003180:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00c      	beq.n	80031a6 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 fc21 	bl	80039d4 <UART_EndTransmit_IT>
    return;
 8003192:	e008      	b.n	80031a6 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003194:	bf00      	nop
 8003196:	e006      	b.n	80031a6 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003198:	bf00      	nop
 800319a:	e004      	b.n	80031a6 <HAL_UART_IRQHandler+0x5b6>
      return;
 800319c:	bf00      	nop
 800319e:	e002      	b.n	80031a6 <HAL_UART_IRQHandler+0x5b6>
      return;
 80031a0:	bf00      	nop
 80031a2:	e000      	b.n	80031a6 <HAL_UART_IRQHandler+0x5b6>
    return;
 80031a4:	bf00      	nop
  }

}
 80031a6:	37e8      	adds	r7, #232	; 0xe8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}

080031ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031e0:	2300      	movs	r3, #0
 80031e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	689a      	ldr	r2, [r3, #8]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4bab      	ldr	r3, [pc, #684]	; (80034b0 <UART_SetConfig+0x2d8>)
 8003204:	4013      	ands	r3, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6812      	ldr	r2, [r2, #0]
 800320a:	6979      	ldr	r1, [r7, #20]
 800320c:	430b      	orrs	r3, r1
 800320e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	430a      	orrs	r2, r1
 8003248:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a99      	ldr	r2, [pc, #612]	; (80034b4 <UART_SetConfig+0x2dc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d120      	bne.n	8003296 <UART_SetConfig+0xbe>
 8003254:	4b98      	ldr	r3, [pc, #608]	; (80034b8 <UART_SetConfig+0x2e0>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b03      	cmp	r3, #3
 800325e:	d817      	bhi.n	8003290 <UART_SetConfig+0xb8>
 8003260:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <UART_SetConfig+0x90>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	08003279 	.word	0x08003279
 800326c:	08003285 	.word	0x08003285
 8003270:	0800328b 	.word	0x0800328b
 8003274:	0800327f 	.word	0x0800327f
 8003278:	2301      	movs	r3, #1
 800327a:	77fb      	strb	r3, [r7, #31]
 800327c:	e0b5      	b.n	80033ea <UART_SetConfig+0x212>
 800327e:	2302      	movs	r3, #2
 8003280:	77fb      	strb	r3, [r7, #31]
 8003282:	e0b2      	b.n	80033ea <UART_SetConfig+0x212>
 8003284:	2304      	movs	r3, #4
 8003286:	77fb      	strb	r3, [r7, #31]
 8003288:	e0af      	b.n	80033ea <UART_SetConfig+0x212>
 800328a:	2308      	movs	r3, #8
 800328c:	77fb      	strb	r3, [r7, #31]
 800328e:	e0ac      	b.n	80033ea <UART_SetConfig+0x212>
 8003290:	2310      	movs	r3, #16
 8003292:	77fb      	strb	r3, [r7, #31]
 8003294:	e0a9      	b.n	80033ea <UART_SetConfig+0x212>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a88      	ldr	r2, [pc, #544]	; (80034bc <UART_SetConfig+0x2e4>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d124      	bne.n	80032ea <UART_SetConfig+0x112>
 80032a0:	4b85      	ldr	r3, [pc, #532]	; (80034b8 <UART_SetConfig+0x2e0>)
 80032a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032ac:	d011      	beq.n	80032d2 <UART_SetConfig+0xfa>
 80032ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80032b2:	d817      	bhi.n	80032e4 <UART_SetConfig+0x10c>
 80032b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032b8:	d011      	beq.n	80032de <UART_SetConfig+0x106>
 80032ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032be:	d811      	bhi.n	80032e4 <UART_SetConfig+0x10c>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <UART_SetConfig+0xf4>
 80032c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c8:	d006      	beq.n	80032d8 <UART_SetConfig+0x100>
 80032ca:	e00b      	b.n	80032e4 <UART_SetConfig+0x10c>
 80032cc:	2300      	movs	r3, #0
 80032ce:	77fb      	strb	r3, [r7, #31]
 80032d0:	e08b      	b.n	80033ea <UART_SetConfig+0x212>
 80032d2:	2302      	movs	r3, #2
 80032d4:	77fb      	strb	r3, [r7, #31]
 80032d6:	e088      	b.n	80033ea <UART_SetConfig+0x212>
 80032d8:	2304      	movs	r3, #4
 80032da:	77fb      	strb	r3, [r7, #31]
 80032dc:	e085      	b.n	80033ea <UART_SetConfig+0x212>
 80032de:	2308      	movs	r3, #8
 80032e0:	77fb      	strb	r3, [r7, #31]
 80032e2:	e082      	b.n	80033ea <UART_SetConfig+0x212>
 80032e4:	2310      	movs	r3, #16
 80032e6:	77fb      	strb	r3, [r7, #31]
 80032e8:	e07f      	b.n	80033ea <UART_SetConfig+0x212>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a74      	ldr	r2, [pc, #464]	; (80034c0 <UART_SetConfig+0x2e8>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d124      	bne.n	800333e <UART_SetConfig+0x166>
 80032f4:	4b70      	ldr	r3, [pc, #448]	; (80034b8 <UART_SetConfig+0x2e0>)
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80032fc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003300:	d011      	beq.n	8003326 <UART_SetConfig+0x14e>
 8003302:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003306:	d817      	bhi.n	8003338 <UART_SetConfig+0x160>
 8003308:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800330c:	d011      	beq.n	8003332 <UART_SetConfig+0x15a>
 800330e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003312:	d811      	bhi.n	8003338 <UART_SetConfig+0x160>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <UART_SetConfig+0x148>
 8003318:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800331c:	d006      	beq.n	800332c <UART_SetConfig+0x154>
 800331e:	e00b      	b.n	8003338 <UART_SetConfig+0x160>
 8003320:	2300      	movs	r3, #0
 8003322:	77fb      	strb	r3, [r7, #31]
 8003324:	e061      	b.n	80033ea <UART_SetConfig+0x212>
 8003326:	2302      	movs	r3, #2
 8003328:	77fb      	strb	r3, [r7, #31]
 800332a:	e05e      	b.n	80033ea <UART_SetConfig+0x212>
 800332c:	2304      	movs	r3, #4
 800332e:	77fb      	strb	r3, [r7, #31]
 8003330:	e05b      	b.n	80033ea <UART_SetConfig+0x212>
 8003332:	2308      	movs	r3, #8
 8003334:	77fb      	strb	r3, [r7, #31]
 8003336:	e058      	b.n	80033ea <UART_SetConfig+0x212>
 8003338:	2310      	movs	r3, #16
 800333a:	77fb      	strb	r3, [r7, #31]
 800333c:	e055      	b.n	80033ea <UART_SetConfig+0x212>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a60      	ldr	r2, [pc, #384]	; (80034c4 <UART_SetConfig+0x2ec>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d124      	bne.n	8003392 <UART_SetConfig+0x1ba>
 8003348:	4b5b      	ldr	r3, [pc, #364]	; (80034b8 <UART_SetConfig+0x2e0>)
 800334a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003350:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003354:	d011      	beq.n	800337a <UART_SetConfig+0x1a2>
 8003356:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800335a:	d817      	bhi.n	800338c <UART_SetConfig+0x1b4>
 800335c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003360:	d011      	beq.n	8003386 <UART_SetConfig+0x1ae>
 8003362:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003366:	d811      	bhi.n	800338c <UART_SetConfig+0x1b4>
 8003368:	2b00      	cmp	r3, #0
 800336a:	d003      	beq.n	8003374 <UART_SetConfig+0x19c>
 800336c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003370:	d006      	beq.n	8003380 <UART_SetConfig+0x1a8>
 8003372:	e00b      	b.n	800338c <UART_SetConfig+0x1b4>
 8003374:	2300      	movs	r3, #0
 8003376:	77fb      	strb	r3, [r7, #31]
 8003378:	e037      	b.n	80033ea <UART_SetConfig+0x212>
 800337a:	2302      	movs	r3, #2
 800337c:	77fb      	strb	r3, [r7, #31]
 800337e:	e034      	b.n	80033ea <UART_SetConfig+0x212>
 8003380:	2304      	movs	r3, #4
 8003382:	77fb      	strb	r3, [r7, #31]
 8003384:	e031      	b.n	80033ea <UART_SetConfig+0x212>
 8003386:	2308      	movs	r3, #8
 8003388:	77fb      	strb	r3, [r7, #31]
 800338a:	e02e      	b.n	80033ea <UART_SetConfig+0x212>
 800338c:	2310      	movs	r3, #16
 800338e:	77fb      	strb	r3, [r7, #31]
 8003390:	e02b      	b.n	80033ea <UART_SetConfig+0x212>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a4c      	ldr	r2, [pc, #304]	; (80034c8 <UART_SetConfig+0x2f0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d124      	bne.n	80033e6 <UART_SetConfig+0x20e>
 800339c:	4b46      	ldr	r3, [pc, #280]	; (80034b8 <UART_SetConfig+0x2e0>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80033a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033a8:	d011      	beq.n	80033ce <UART_SetConfig+0x1f6>
 80033aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80033ae:	d817      	bhi.n	80033e0 <UART_SetConfig+0x208>
 80033b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033b4:	d011      	beq.n	80033da <UART_SetConfig+0x202>
 80033b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80033ba:	d811      	bhi.n	80033e0 <UART_SetConfig+0x208>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d003      	beq.n	80033c8 <UART_SetConfig+0x1f0>
 80033c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033c4:	d006      	beq.n	80033d4 <UART_SetConfig+0x1fc>
 80033c6:	e00b      	b.n	80033e0 <UART_SetConfig+0x208>
 80033c8:	2300      	movs	r3, #0
 80033ca:	77fb      	strb	r3, [r7, #31]
 80033cc:	e00d      	b.n	80033ea <UART_SetConfig+0x212>
 80033ce:	2302      	movs	r3, #2
 80033d0:	77fb      	strb	r3, [r7, #31]
 80033d2:	e00a      	b.n	80033ea <UART_SetConfig+0x212>
 80033d4:	2304      	movs	r3, #4
 80033d6:	77fb      	strb	r3, [r7, #31]
 80033d8:	e007      	b.n	80033ea <UART_SetConfig+0x212>
 80033da:	2308      	movs	r3, #8
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	e004      	b.n	80033ea <UART_SetConfig+0x212>
 80033e0:	2310      	movs	r3, #16
 80033e2:	77fb      	strb	r3, [r7, #31]
 80033e4:	e001      	b.n	80033ea <UART_SetConfig+0x212>
 80033e6:	2310      	movs	r3, #16
 80033e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033f2:	d16d      	bne.n	80034d0 <UART_SetConfig+0x2f8>
  {
    switch (clocksource)
 80033f4:	7ffb      	ldrb	r3, [r7, #31]
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d827      	bhi.n	800344a <UART_SetConfig+0x272>
 80033fa:	a201      	add	r2, pc, #4	; (adr r2, 8003400 <UART_SetConfig+0x228>)
 80033fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003400:	08003425 	.word	0x08003425
 8003404:	0800342d 	.word	0x0800342d
 8003408:	08003435 	.word	0x08003435
 800340c:	0800344b 	.word	0x0800344b
 8003410:	0800343b 	.word	0x0800343b
 8003414:	0800344b 	.word	0x0800344b
 8003418:	0800344b 	.word	0x0800344b
 800341c:	0800344b 	.word	0x0800344b
 8003420:	08003443 	.word	0x08003443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003424:	f7ff f934 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 8003428:	61b8      	str	r0, [r7, #24]
        break;
 800342a:	e013      	b.n	8003454 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800342c:	f7ff f952 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 8003430:	61b8      	str	r0, [r7, #24]
        break;
 8003432:	e00f      	b.n	8003454 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003434:	4b25      	ldr	r3, [pc, #148]	; (80034cc <UART_SetConfig+0x2f4>)
 8003436:	61bb      	str	r3, [r7, #24]
        break;
 8003438:	e00c      	b.n	8003454 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800343a:	f7ff f8b3 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 800343e:	61b8      	str	r0, [r7, #24]
        break;
 8003440:	e008      	b.n	8003454 <UART_SetConfig+0x27c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003446:	61bb      	str	r3, [r7, #24]
        break;
 8003448:	e004      	b.n	8003454 <UART_SetConfig+0x27c>
      default:
        pclk = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	77bb      	strb	r3, [r7, #30]
        break;
 8003452:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003454:	69bb      	ldr	r3, [r7, #24]
 8003456:	2b00      	cmp	r3, #0
 8003458:	f000 8086 	beq.w	8003568 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	005a      	lsls	r2, r3, #1
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	085b      	lsrs	r3, r3, #1
 8003466:	441a      	add	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003470:	b29b      	uxth	r3, r3
 8003472:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	2b0f      	cmp	r3, #15
 8003478:	d916      	bls.n	80034a8 <UART_SetConfig+0x2d0>
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003480:	d212      	bcs.n	80034a8 <UART_SetConfig+0x2d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	b29b      	uxth	r3, r3
 8003486:	f023 030f 	bic.w	r3, r3, #15
 800348a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	085b      	lsrs	r3, r3, #1
 8003490:	b29b      	uxth	r3, r3
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	b29a      	uxth	r2, r3
 8003498:	89fb      	ldrh	r3, [r7, #14]
 800349a:	4313      	orrs	r3, r2
 800349c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	89fa      	ldrh	r2, [r7, #14]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	e05f      	b.n	8003568 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	77bb      	strb	r3, [r7, #30]
 80034ac:	e05c      	b.n	8003568 <UART_SetConfig+0x390>
 80034ae:	bf00      	nop
 80034b0:	efff69f3 	.word	0xefff69f3
 80034b4:	40013800 	.word	0x40013800
 80034b8:	40021000 	.word	0x40021000
 80034bc:	40004400 	.word	0x40004400
 80034c0:	40004800 	.word	0x40004800
 80034c4:	40004c00 	.word	0x40004c00
 80034c8:	40005000 	.word	0x40005000
 80034cc:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80034d0:	7ffb      	ldrb	r3, [r7, #31]
 80034d2:	2b08      	cmp	r3, #8
 80034d4:	d827      	bhi.n	8003526 <UART_SetConfig+0x34e>
 80034d6:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <UART_SetConfig+0x304>)
 80034d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034dc:	08003501 	.word	0x08003501
 80034e0:	08003509 	.word	0x08003509
 80034e4:	08003511 	.word	0x08003511
 80034e8:	08003527 	.word	0x08003527
 80034ec:	08003517 	.word	0x08003517
 80034f0:	08003527 	.word	0x08003527
 80034f4:	08003527 	.word	0x08003527
 80034f8:	08003527 	.word	0x08003527
 80034fc:	0800351f 	.word	0x0800351f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003500:	f7ff f8c6 	bl	8002690 <HAL_RCC_GetPCLK1Freq>
 8003504:	61b8      	str	r0, [r7, #24]
        break;
 8003506:	e013      	b.n	8003530 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003508:	f7ff f8e4 	bl	80026d4 <HAL_RCC_GetPCLK2Freq>
 800350c:	61b8      	str	r0, [r7, #24]
        break;
 800350e:	e00f      	b.n	8003530 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <UART_SetConfig+0x3a8>)
 8003512:	61bb      	str	r3, [r7, #24]
        break;
 8003514:	e00c      	b.n	8003530 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003516:	f7ff f845 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 800351a:	61b8      	str	r0, [r7, #24]
        break;
 800351c:	e008      	b.n	8003530 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800351e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003522:	61bb      	str	r3, [r7, #24]
        break;
 8003524:	e004      	b.n	8003530 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003526:	2300      	movs	r3, #0
 8003528:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	77bb      	strb	r3, [r7, #30]
        break;
 800352e:	bf00      	nop
    }

    if (pclk != 0U)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d018      	beq.n	8003568 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	085a      	lsrs	r2, r3, #1
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	441a      	add	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	fbb2 f3f3 	udiv	r3, r2, r3
 8003548:	b29b      	uxth	r3, r3
 800354a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	2b0f      	cmp	r3, #15
 8003550:	d908      	bls.n	8003564 <UART_SetConfig+0x38c>
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003558:	d204      	bcs.n	8003564 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	60da      	str	r2, [r3, #12]
 8003562:	e001      	b.n	8003568 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003564:	2301      	movs	r3, #1
 8003566:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2200      	movs	r2, #0
 8003572:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003574:	7fbb      	ldrb	r3, [r7, #30]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3720      	adds	r7, #32
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	007a1200 	.word	0x007a1200

08003584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	f003 0301 	and.w	r3, r3, #1
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d4:	f003 0304 	and.w	r3, r3, #4
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00a      	beq.n	80035f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00a      	beq.n	8003636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00a      	beq.n	8003658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800365c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003660:	2b00      	cmp	r3, #0
 8003662:	d01a      	beq.n	800369a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003682:	d10a      	bne.n	800369a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	430a      	orrs	r2, r1
 8003698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	605a      	str	r2, [r3, #4]
  }
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036d8:	f7fd fb52 	bl	8000d80 <HAL_GetTick>
 80036dc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0308 	and.w	r3, r3, #8
 80036e8:	2b08      	cmp	r3, #8
 80036ea:	d10e      	bne.n	800370a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 f82d 	bl	800375a <UART_WaitOnFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e023      	b.n	8003752 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b04      	cmp	r3, #4
 8003716:	d10e      	bne.n	8003736 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003718:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800371c:	9300      	str	r3, [sp, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f000 f817 	bl	800375a <UART_WaitOnFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e00d      	b.n	8003752 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b09c      	sub	sp, #112	; 0x70
 800375e:	af00      	add	r7, sp, #0
 8003760:	60f8      	str	r0, [r7, #12]
 8003762:	60b9      	str	r1, [r7, #8]
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	4613      	mov	r3, r2
 8003768:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800376a:	e0a5      	b.n	80038b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800376c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800376e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003772:	f000 80a1 	beq.w	80038b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003776:	f7fd fb03 	bl	8000d80 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003782:	429a      	cmp	r2, r3
 8003784:	d302      	bcc.n	800378c <UART_WaitOnFlagUntilTimeout+0x32>
 8003786:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003788:	2b00      	cmp	r3, #0
 800378a:	d13e      	bne.n	800380a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003794:	e853 3f00 	ldrex	r3, [r3]
 8003798:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800379a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037a0:	667b      	str	r3, [r7, #100]	; 0x64
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80037ac:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80037b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80037b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e6      	bne.n	800378c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3308      	adds	r3, #8
 80037c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037c8:	e853 3f00 	ldrex	r3, [r3]
 80037cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80037ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	663b      	str	r3, [r7, #96]	; 0x60
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	3308      	adds	r3, #8
 80037dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80037de:	64ba      	str	r2, [r7, #72]	; 0x48
 80037e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80037e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037e6:	e841 2300 	strex	r3, r2, [r1]
 80037ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80037ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1e5      	bne.n	80037be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2220      	movs	r2, #32
 80037f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e067      	b.n	80038da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d04f      	beq.n	80038b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69db      	ldr	r3, [r3, #28]
 800381e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003826:	d147      	bne.n	80038b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003830:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800383a:	e853 3f00 	ldrex	r3, [r3]
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003842:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003846:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	461a      	mov	r2, r3
 800384e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003850:	637b      	str	r3, [r7, #52]	; 0x34
 8003852:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003854:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003856:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003858:	e841 2300 	strex	r3, r2, [r1]
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800385e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003860:	2b00      	cmp	r3, #0
 8003862:	d1e6      	bne.n	8003832 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	3308      	adds	r3, #8
 800386a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	613b      	str	r3, [r7, #16]
   return(result);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	f023 0301 	bic.w	r3, r3, #1
 800387a:	66bb      	str	r3, [r7, #104]	; 0x68
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3308      	adds	r3, #8
 8003882:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003884:	623a      	str	r2, [r7, #32]
 8003886:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	69f9      	ldr	r1, [r7, #28]
 800388a:	6a3a      	ldr	r2, [r7, #32]
 800388c:	e841 2300 	strex	r3, r2, [r1]
 8003890:	61bb      	str	r3, [r7, #24]
   return(result);
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e5      	bne.n	8003864 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2220      	movs	r2, #32
 800389c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2220      	movs	r2, #32
 80038a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e010      	b.n	80038da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	69da      	ldr	r2, [r3, #28]
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4013      	ands	r3, r2
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	461a      	mov	r2, r3
 80038d0:	79fb      	ldrb	r3, [r7, #7]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	f43f af4a 	beq.w	800376c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3770      	adds	r7, #112	; 0x70
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b095      	sub	sp, #84	; 0x54
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f2:	e853 3f00 	ldrex	r3, [r3]
 80038f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	461a      	mov	r2, r3
 8003906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003908:	643b      	str	r3, [r7, #64]	; 0x40
 800390a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800390e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003910:	e841 2300 	strex	r3, r2, [r1]
 8003914:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003918:	2b00      	cmp	r3, #0
 800391a:	d1e6      	bne.n	80038ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3308      	adds	r3, #8
 8003922:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	61fb      	str	r3, [r7, #28]
   return(result);
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	f023 0301 	bic.w	r3, r3, #1
 8003932:	64bb      	str	r3, [r7, #72]	; 0x48
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	3308      	adds	r3, #8
 800393a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800393c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800393e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003944:	e841 2300 	strex	r3, r2, [r1]
 8003948:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e5      	bne.n	800391c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003954:	2b01      	cmp	r3, #1
 8003956:	d118      	bne.n	800398a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	e853 3f00 	ldrex	r3, [r3]
 8003964:	60bb      	str	r3, [r7, #8]
   return(result);
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f023 0310 	bic.w	r3, r3, #16
 800396c:	647b      	str	r3, [r7, #68]	; 0x44
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	461a      	mov	r2, r3
 8003974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003976:	61bb      	str	r3, [r7, #24]
 8003978:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	6979      	ldr	r1, [r7, #20]
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	613b      	str	r3, [r7, #16]
   return(result);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e6      	bne.n	8003958 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800399c:	bf00      	nop
 800399e:	3754      	adds	r7, #84	; 0x54
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f7ff fbf0 	bl	80031ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039cc:	bf00      	nop
 80039ce:	3710      	adds	r7, #16
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	e853 3f00 	ldrex	r3, [r3]
 80039e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80039f0:	61fb      	str	r3, [r7, #28]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	61bb      	str	r3, [r7, #24]
 80039fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fe:	6979      	ldr	r1, [r7, #20]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	e841 2300 	strex	r3, r2, [r1]
 8003a06:	613b      	str	r3, [r7, #16]
   return(result);
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1e6      	bne.n	80039dc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2220      	movs	r2, #32
 8003a12:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fc fd72 	bl	8000504 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a20:	bf00      	nop
 8003a22:	3720      	adds	r7, #32
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <_ZdlPvj>:
 8003a3c:	f000 b803 	b.w	8003a46 <_ZdlPv>

08003a40 <__cxa_pure_virtual>:
 8003a40:	b508      	push	{r3, lr}
 8003a42:	f000 f80f 	bl	8003a64 <_ZSt9terminatev>

08003a46 <_ZdlPv>:
 8003a46:	f000 b843 	b.w	8003ad0 <free>

08003a4a <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003a4a:	b508      	push	{r3, lr}
 8003a4c:	4780      	blx	r0
 8003a4e:	f000 f80e 	bl	8003a6e <abort>
	...

08003a54 <_ZSt13get_terminatev>:
 8003a54:	4b02      	ldr	r3, [pc, #8]	; (8003a60 <_ZSt13get_terminatev+0xc>)
 8003a56:	6818      	ldr	r0, [r3, #0]
 8003a58:	f3bf 8f5b 	dmb	ish
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	2000000c 	.word	0x2000000c

08003a64 <_ZSt9terminatev>:
 8003a64:	b508      	push	{r3, lr}
 8003a66:	f7ff fff5 	bl	8003a54 <_ZSt13get_terminatev>
 8003a6a:	f7ff ffee 	bl	8003a4a <_ZN10__cxxabiv111__terminateEPFvvE>

08003a6e <abort>:
 8003a6e:	b508      	push	{r3, lr}
 8003a70:	2006      	movs	r0, #6
 8003a72:	f000 f8b5 	bl	8003be0 <raise>
 8003a76:	2001      	movs	r0, #1
 8003a78:	f7fd f8e1 	bl	8000c3e <_exit>

08003a7c <__errno>:
 8003a7c:	4b01      	ldr	r3, [pc, #4]	; (8003a84 <__errno+0x8>)
 8003a7e:	6818      	ldr	r0, [r3, #0]
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	20000010 	.word	0x20000010

08003a88 <__libc_init_array>:
 8003a88:	b570      	push	{r4, r5, r6, lr}
 8003a8a:	4d0d      	ldr	r5, [pc, #52]	; (8003ac0 <__libc_init_array+0x38>)
 8003a8c:	4c0d      	ldr	r4, [pc, #52]	; (8003ac4 <__libc_init_array+0x3c>)
 8003a8e:	1b64      	subs	r4, r4, r5
 8003a90:	10a4      	asrs	r4, r4, #2
 8003a92:	2600      	movs	r6, #0
 8003a94:	42a6      	cmp	r6, r4
 8003a96:	d109      	bne.n	8003aac <__libc_init_array+0x24>
 8003a98:	4d0b      	ldr	r5, [pc, #44]	; (8003ac8 <__libc_init_array+0x40>)
 8003a9a:	4c0c      	ldr	r4, [pc, #48]	; (8003acc <__libc_init_array+0x44>)
 8003a9c:	f000 f8ca 	bl	8003c34 <_init>
 8003aa0:	1b64      	subs	r4, r4, r5
 8003aa2:	10a4      	asrs	r4, r4, #2
 8003aa4:	2600      	movs	r6, #0
 8003aa6:	42a6      	cmp	r6, r4
 8003aa8:	d105      	bne.n	8003ab6 <__libc_init_array+0x2e>
 8003aaa:	bd70      	pop	{r4, r5, r6, pc}
 8003aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab0:	4798      	blx	r3
 8003ab2:	3601      	adds	r6, #1
 8003ab4:	e7ee      	b.n	8003a94 <__libc_init_array+0xc>
 8003ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aba:	4798      	blx	r3
 8003abc:	3601      	adds	r6, #1
 8003abe:	e7f2      	b.n	8003aa6 <__libc_init_array+0x1e>
 8003ac0:	08003cd8 	.word	0x08003cd8
 8003ac4:	08003cd8 	.word	0x08003cd8
 8003ac8:	08003cd8 	.word	0x08003cd8
 8003acc:	08003ce4 	.word	0x08003ce4

08003ad0 <free>:
 8003ad0:	4b02      	ldr	r3, [pc, #8]	; (8003adc <free+0xc>)
 8003ad2:	4601      	mov	r1, r0
 8003ad4:	6818      	ldr	r0, [r3, #0]
 8003ad6:	f000 b80b 	b.w	8003af0 <_free_r>
 8003ada:	bf00      	nop
 8003adc:	20000010 	.word	0x20000010

08003ae0 <memset>:
 8003ae0:	4402      	add	r2, r0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d100      	bne.n	8003aea <memset+0xa>
 8003ae8:	4770      	bx	lr
 8003aea:	f803 1b01 	strb.w	r1, [r3], #1
 8003aee:	e7f9      	b.n	8003ae4 <memset+0x4>

08003af0 <_free_r>:
 8003af0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003af2:	2900      	cmp	r1, #0
 8003af4:	d048      	beq.n	8003b88 <_free_r+0x98>
 8003af6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003afa:	9001      	str	r0, [sp, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f1a1 0404 	sub.w	r4, r1, #4
 8003b02:	bfb8      	it	lt
 8003b04:	18e4      	addlt	r4, r4, r3
 8003b06:	f000 f887 	bl	8003c18 <__malloc_lock>
 8003b0a:	4a20      	ldr	r2, [pc, #128]	; (8003b8c <_free_r+0x9c>)
 8003b0c:	9801      	ldr	r0, [sp, #4]
 8003b0e:	6813      	ldr	r3, [r2, #0]
 8003b10:	4615      	mov	r5, r2
 8003b12:	b933      	cbnz	r3, 8003b22 <_free_r+0x32>
 8003b14:	6063      	str	r3, [r4, #4]
 8003b16:	6014      	str	r4, [r2, #0]
 8003b18:	b003      	add	sp, #12
 8003b1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003b1e:	f000 b881 	b.w	8003c24 <__malloc_unlock>
 8003b22:	42a3      	cmp	r3, r4
 8003b24:	d90b      	bls.n	8003b3e <_free_r+0x4e>
 8003b26:	6821      	ldr	r1, [r4, #0]
 8003b28:	1862      	adds	r2, r4, r1
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	bf04      	itt	eq
 8003b2e:	681a      	ldreq	r2, [r3, #0]
 8003b30:	685b      	ldreq	r3, [r3, #4]
 8003b32:	6063      	str	r3, [r4, #4]
 8003b34:	bf04      	itt	eq
 8003b36:	1852      	addeq	r2, r2, r1
 8003b38:	6022      	streq	r2, [r4, #0]
 8003b3a:	602c      	str	r4, [r5, #0]
 8003b3c:	e7ec      	b.n	8003b18 <_free_r+0x28>
 8003b3e:	461a      	mov	r2, r3
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	b10b      	cbz	r3, 8003b48 <_free_r+0x58>
 8003b44:	42a3      	cmp	r3, r4
 8003b46:	d9fa      	bls.n	8003b3e <_free_r+0x4e>
 8003b48:	6811      	ldr	r1, [r2, #0]
 8003b4a:	1855      	adds	r5, r2, r1
 8003b4c:	42a5      	cmp	r5, r4
 8003b4e:	d10b      	bne.n	8003b68 <_free_r+0x78>
 8003b50:	6824      	ldr	r4, [r4, #0]
 8003b52:	4421      	add	r1, r4
 8003b54:	1854      	adds	r4, r2, r1
 8003b56:	42a3      	cmp	r3, r4
 8003b58:	6011      	str	r1, [r2, #0]
 8003b5a:	d1dd      	bne.n	8003b18 <_free_r+0x28>
 8003b5c:	681c      	ldr	r4, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	6053      	str	r3, [r2, #4]
 8003b62:	4421      	add	r1, r4
 8003b64:	6011      	str	r1, [r2, #0]
 8003b66:	e7d7      	b.n	8003b18 <_free_r+0x28>
 8003b68:	d902      	bls.n	8003b70 <_free_r+0x80>
 8003b6a:	230c      	movs	r3, #12
 8003b6c:	6003      	str	r3, [r0, #0]
 8003b6e:	e7d3      	b.n	8003b18 <_free_r+0x28>
 8003b70:	6825      	ldr	r5, [r4, #0]
 8003b72:	1961      	adds	r1, r4, r5
 8003b74:	428b      	cmp	r3, r1
 8003b76:	bf04      	itt	eq
 8003b78:	6819      	ldreq	r1, [r3, #0]
 8003b7a:	685b      	ldreq	r3, [r3, #4]
 8003b7c:	6063      	str	r3, [r4, #4]
 8003b7e:	bf04      	itt	eq
 8003b80:	1949      	addeq	r1, r1, r5
 8003b82:	6021      	streq	r1, [r4, #0]
 8003b84:	6054      	str	r4, [r2, #4]
 8003b86:	e7c7      	b.n	8003b18 <_free_r+0x28>
 8003b88:	b003      	add	sp, #12
 8003b8a:	bd30      	pop	{r4, r5, pc}
 8003b8c:	20000178 	.word	0x20000178

08003b90 <_raise_r>:
 8003b90:	291f      	cmp	r1, #31
 8003b92:	b538      	push	{r3, r4, r5, lr}
 8003b94:	4604      	mov	r4, r0
 8003b96:	460d      	mov	r5, r1
 8003b98:	d904      	bls.n	8003ba4 <_raise_r+0x14>
 8003b9a:	2316      	movs	r3, #22
 8003b9c:	6003      	str	r3, [r0, #0]
 8003b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba2:	bd38      	pop	{r3, r4, r5, pc}
 8003ba4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003ba6:	b112      	cbz	r2, 8003bae <_raise_r+0x1e>
 8003ba8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003bac:	b94b      	cbnz	r3, 8003bc2 <_raise_r+0x32>
 8003bae:	4620      	mov	r0, r4
 8003bb0:	f000 f830 	bl	8003c14 <_getpid_r>
 8003bb4:	462a      	mov	r2, r5
 8003bb6:	4601      	mov	r1, r0
 8003bb8:	4620      	mov	r0, r4
 8003bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003bbe:	f000 b817 	b.w	8003bf0 <_kill_r>
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d00a      	beq.n	8003bdc <_raise_r+0x4c>
 8003bc6:	1c59      	adds	r1, r3, #1
 8003bc8:	d103      	bne.n	8003bd2 <_raise_r+0x42>
 8003bca:	2316      	movs	r3, #22
 8003bcc:	6003      	str	r3, [r0, #0]
 8003bce:	2001      	movs	r0, #1
 8003bd0:	e7e7      	b.n	8003ba2 <_raise_r+0x12>
 8003bd2:	2400      	movs	r4, #0
 8003bd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003bd8:	4628      	mov	r0, r5
 8003bda:	4798      	blx	r3
 8003bdc:	2000      	movs	r0, #0
 8003bde:	e7e0      	b.n	8003ba2 <_raise_r+0x12>

08003be0 <raise>:
 8003be0:	4b02      	ldr	r3, [pc, #8]	; (8003bec <raise+0xc>)
 8003be2:	4601      	mov	r1, r0
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	f7ff bfd3 	b.w	8003b90 <_raise_r>
 8003bea:	bf00      	nop
 8003bec:	20000010 	.word	0x20000010

08003bf0 <_kill_r>:
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	4d07      	ldr	r5, [pc, #28]	; (8003c10 <_kill_r+0x20>)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	4604      	mov	r4, r0
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	4611      	mov	r1, r2
 8003bfc:	602b      	str	r3, [r5, #0]
 8003bfe:	f7fd f80e 	bl	8000c1e <_kill>
 8003c02:	1c43      	adds	r3, r0, #1
 8003c04:	d102      	bne.n	8003c0c <_kill_r+0x1c>
 8003c06:	682b      	ldr	r3, [r5, #0]
 8003c08:	b103      	cbz	r3, 8003c0c <_kill_r+0x1c>
 8003c0a:	6023      	str	r3, [r4, #0]
 8003c0c:	bd38      	pop	{r3, r4, r5, pc}
 8003c0e:	bf00      	nop
 8003c10:	20000180 	.word	0x20000180

08003c14 <_getpid_r>:
 8003c14:	f7fc bffb 	b.w	8000c0e <_getpid>

08003c18 <__malloc_lock>:
 8003c18:	4801      	ldr	r0, [pc, #4]	; (8003c20 <__malloc_lock+0x8>)
 8003c1a:	f000 b809 	b.w	8003c30 <__retarget_lock_acquire_recursive>
 8003c1e:	bf00      	nop
 8003c20:	20000188 	.word	0x20000188

08003c24 <__malloc_unlock>:
 8003c24:	4801      	ldr	r0, [pc, #4]	; (8003c2c <__malloc_unlock+0x8>)
 8003c26:	f000 b804 	b.w	8003c32 <__retarget_lock_release_recursive>
 8003c2a:	bf00      	nop
 8003c2c:	20000188 	.word	0x20000188

08003c30 <__retarget_lock_acquire_recursive>:
 8003c30:	4770      	bx	lr

08003c32 <__retarget_lock_release_recursive>:
 8003c32:	4770      	bx	lr

08003c34 <_init>:
 8003c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c36:	bf00      	nop
 8003c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c3a:	bc08      	pop	{r3}
 8003c3c:	469e      	mov	lr, r3
 8003c3e:	4770      	bx	lr

08003c40 <_fini>:
 8003c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c42:	bf00      	nop
 8003c44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c46:	bc08      	pop	{r3}
 8003c48:	469e      	mov	lr, r3
 8003c4a:	4770      	bx	lr
