
ProjektSTM32_Przerwania_i_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800464c  0800464c  0001464c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046f4  080046f4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080046f4  080046f4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046f4  080046f4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080046f4  080046f4  000146f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08004700  08004700  00014700  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800470c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000074  08004780  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08004780  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3e8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002daa  00000000  00000000  0002e48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00031238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  00031ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023d42  00000000  00000000  00032670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001162c  00000000  00000000  000563b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3013  00000000  00000000  000679de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a9f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d68  00000000  00000000  0012aa44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004634 	.word	0x08004634

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	08004634 	.word	0x08004634

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <_ZN5IGPIOC1Ev>:
 */

#ifndef INC_IGPIO_H_
#define INC_IGPIO_H_

class IGPIO {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	4a04      	ldr	r2, [pc, #16]	; (8000204 <_ZN5IGPIOC1Ev+0x1c>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4618      	mov	r0, r3
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr
 8000204:	08004678 	.word	0x08004678

08000208 <_ZN7CButtonC1Ev>:


#include <CButton.h>


CButton::CButton() {
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	4618      	mov	r0, r3
 8000214:	f7ff ffe8 	bl	80001e8 <_ZN5IGPIOC1Ev>
 8000218:	4a03      	ldr	r2, [pc, #12]	; (8000228 <_ZN7CButtonC1Ev+0x20>)
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4618      	mov	r0, r3
 8000222:	3708      	adds	r7, #8
 8000224:	46bd      	mov	sp, r7
 8000226:	bd80      	pop	{r7, pc}
 8000228:	08004664 	.word	0x08004664

0800022c <_ZN7CButtonD1Ev>:

CButton::~CButton() {
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
 8000234:	4a04      	ldr	r2, [pc, #16]	; (8000248 <_ZN7CButtonD1Ev+0x1c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4618      	mov	r0, r3
 800023e:	370c      	adds	r7, #12
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr
 8000248:	08004664 	.word	0x08004664

0800024c <_ZN7CButtonD0Ev>:
CButton::~CButton() {
 800024c:	b580      	push	{r7, lr}
 800024e:	b082      	sub	sp, #8
 8000250:	af00      	add	r7, sp, #0
 8000252:	6078      	str	r0, [r7, #4]
}
 8000254:	6878      	ldr	r0, [r7, #4]
 8000256:	f7ff ffe9 	bl	800022c <_ZN7CButtonD1Ev>
 800025a:	211c      	movs	r1, #28
 800025c:	6878      	ldr	r0, [r7, #4]
 800025e:	f004 f8f2 	bl	8004446 <_ZdlPvj>
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	4618      	mov	r0, r3
 8000266:	3708      	adds	r7, #8
 8000268:	46bd      	mov	sp, r7
 800026a:	bd80      	pop	{r7, pc}

0800026c <_ZN7CButton6updateEv>:
	m_timerDebounce = timerDebounce;
	state 			= idle;
}

void CButton::update()
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b082      	sub	sp, #8
 8000270:	af00      	add	r7, sp, #0
 8000272:	6078      	str	r0, [r7, #4]
	switch(state)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	7d1b      	ldrb	r3, [r3, #20]
 8000278:	2b02      	cmp	r3, #2
 800027a:	d04b      	beq.n	8000314 <_ZN7CButton6updateEv+0xa8>
 800027c:	2b02      	cmp	r3, #2
 800027e:	dc62      	bgt.n	8000346 <_ZN7CButton6updateEv+0xda>
 8000280:	2b00      	cmp	r3, #0
 8000282:	d002      	beq.n	800028a <_ZN7CButton6updateEv+0x1e>
 8000284:	2b01      	cmp	r3, #1
 8000286:	d019      	beq.n	80002bc <_ZN7CButton6updateEv+0x50>
			{
				state = idle;
			}
			break;
	}
}
 8000288:	e05d      	b.n	8000346 <_ZN7CButton6updateEv+0xda>
			if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	685a      	ldr	r2, [r3, #4]
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	891b      	ldrh	r3, [r3, #8]
 8000292:	4619      	mov	r1, r3
 8000294:	4610      	mov	r0, r2
 8000296:	f001 f9f5 	bl	8001684 <HAL_GPIO_ReadPin>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	bf0c      	ite	eq
 80002a0:	2301      	moveq	r3, #1
 80002a2:	2300      	movne	r3, #0
 80002a4:	b2db      	uxtb	r3, r3
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d048      	beq.n	800033c <_ZN7CButton6updateEv+0xd0>
				state = debounce;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	2201      	movs	r2, #1
 80002ae:	751a      	strb	r2, [r3, #20]
				m_lastTick = HAL_GetTick();
 80002b0:	f000 feca 	bl	8001048 <HAL_GetTick>
 80002b4:	4602      	mov	r2, r0
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	60da      	str	r2, [r3, #12]
			break;
 80002ba:	e03f      	b.n	800033c <_ZN7CButton6updateEv+0xd0>
			if((HAL_GetTick() - m_lastTick) > m_timerDebounce)
 80002bc:	f000 fec4 	bl	8001048 <HAL_GetTick>
 80002c0:	4602      	mov	r2, r0
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	68db      	ldr	r3, [r3, #12]
 80002c6:	1ad2      	subs	r2, r2, r3
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	691b      	ldr	r3, [r3, #16]
 80002cc:	429a      	cmp	r2, r3
 80002ce:	bf8c      	ite	hi
 80002d0:	2301      	movhi	r3, #1
 80002d2:	2300      	movls	r3, #0
 80002d4:	b2db      	uxtb	r3, r3
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d032      	beq.n	8000340 <_ZN7CButton6updateEv+0xd4>
				if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	685a      	ldr	r2, [r3, #4]
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	891b      	ldrh	r3, [r3, #8]
 80002e2:	4619      	mov	r1, r3
 80002e4:	4610      	mov	r0, r2
 80002e6:	f001 f9cd 	bl	8001684 <HAL_GPIO_ReadPin>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	bf0c      	ite	eq
 80002f0:	2301      	moveq	r3, #1
 80002f2:	2300      	movne	r3, #0
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d008      	beq.n	800030c <_ZN7CButton6updateEv+0xa0>
					state = pressed;
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	2202      	movs	r2, #2
 80002fe:	751a      	strb	r2, [r3, #20]
					m_lastTick = HAL_GetTick();
 8000300:	f000 fea2 	bl	8001048 <HAL_GetTick>
 8000304:	4602      	mov	r2, r0
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60da      	str	r2, [r3, #12]
			break;
 800030a:	e019      	b.n	8000340 <_ZN7CButton6updateEv+0xd4>
					state = idle;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	2200      	movs	r2, #0
 8000310:	751a      	strb	r2, [r3, #20]
			break;
 8000312:	e015      	b.n	8000340 <_ZN7CButton6updateEv+0xd4>
			if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	685a      	ldr	r2, [r3, #4]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	891b      	ldrh	r3, [r3, #8]
 800031c:	4619      	mov	r1, r3
 800031e:	4610      	mov	r0, r2
 8000320:	f001 f9b0 	bl	8001684 <HAL_GPIO_ReadPin>
 8000324:	4603      	mov	r3, r0
 8000326:	2b01      	cmp	r3, #1
 8000328:	bf0c      	ite	eq
 800032a:	2301      	moveq	r3, #1
 800032c:	2300      	movne	r3, #0
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d007      	beq.n	8000344 <_ZN7CButton6updateEv+0xd8>
				state = idle;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	2200      	movs	r2, #0
 8000338:	751a      	strb	r2, [r3, #20]
			break;
 800033a:	e003      	b.n	8000344 <_ZN7CButton6updateEv+0xd8>
			break;
 800033c:	bf00      	nop
 800033e:	e002      	b.n	8000346 <_ZN7CButton6updateEv+0xda>
			break;
 8000340:	bf00      	nop
 8000342:	e000      	b.n	8000346 <_ZN7CButton6updateEv+0xda>
			break;
 8000344:	bf00      	nop
}
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
	...

08000350 <_ZN17CControlLedByUartC1Ev>:
 *      Author: Konra
 */

#include "CControlLedByUart.h"

CControlLedByUart::CControlLedByUart() {
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	4a0e      	ldr	r2, [pc, #56]	; (8000394 <_ZN17CControlLedByUartC1Ev+0x44>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a0d      	ldr	r2, [pc, #52]	; (8000398 <_ZN17CControlLedByUartC1Ev+0x48>)
 8000362:	3304      	adds	r3, #4
 8000364:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000368:	6018      	str	r0, [r3, #0]
 800036a:	3304      	adds	r3, #4
 800036c:	8019      	strh	r1, [r3, #0]
 800036e:	3302      	adds	r3, #2
 8000370:	0c0a      	lsrs	r2, r1, #16
 8000372:	701a      	strb	r2, [r3, #0]
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4909      	ldr	r1, [pc, #36]	; (800039c <_ZN17CControlLedByUartC1Ev+0x4c>)
 8000378:	f103 020b 	add.w	r2, r3, #11
 800037c:	460b      	mov	r3, r1
 800037e:	cb03      	ldmia	r3!, {r0, r1}
 8000380:	6010      	str	r0, [r2, #0]
 8000382:	6051      	str	r1, [r2, #4]
	// TODO Auto-generated constructor stub

}
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4618      	mov	r0, r3
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	08004684 	.word	0x08004684
 8000398:	0800464c 	.word	0x0800464c
 800039c:	08004654 	.word	0x08004654

080003a0 <_ZN17CControlLedByUartD1Ev>:

CControlLedByUart::~CControlLedByUart() {
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	4a04      	ldr	r2, [pc, #16]	; (80003bc <_ZN17CControlLedByUartD1Ev+0x1c>)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4618      	mov	r0, r3
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	08004684 	.word	0x08004684

080003c0 <_ZN17CControlLedByUartD0Ev>:
CControlLedByUart::~CControlLedByUart() {
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
}
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f7ff ffe9 	bl	80003a0 <_ZN17CControlLedByUartD1Ev>
 80003ce:	211c      	movs	r1, #28
 80003d0:	6878      	ldr	r0, [r7, #4]
 80003d2:	f004 f838 	bl	8004446 <_ZdlPvj>
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4618      	mov	r0, r3
 80003da:	3708      	adds	r7, #8
 80003dc:	46bd      	mov	sp, r7
 80003de:	bd80      	pop	{r7, pc}

080003e0 <_ZN17CControlLedByUart4initEP11CUartDriverP4CLed>:

void CControlLedByUart::init(CUartDriver* uartDriver, CLed* led)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	60f8      	str	r0, [r7, #12]
 80003e8:	60b9      	str	r1, [r7, #8]
 80003ea:	607a      	str	r2, [r7, #4]
	m_uartDriver = uartDriver;
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	68ba      	ldr	r2, [r7, #8]
 80003f0:	615a      	str	r2, [r3, #20]
	m_led = led;
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	687a      	ldr	r2, [r7, #4]
 80003f6:	619a      	str	r2, [r3, #24]
}
 80003f8:	bf00      	nop
 80003fa:	3714      	adds	r7, #20
 80003fc:	46bd      	mov	sp, r7
 80003fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000402:	4770      	bx	lr

08000404 <_ZN17CControlLedByUart6updateEv>:

void CControlLedByUart::update()
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
	if(m_uartDriver->parsing(/*commands.*/led_on))
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	695a      	ldr	r2, [r3, #20]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3304      	adds	r3, #4
 8000414:	4619      	mov	r1, r3
 8000416:	4610      	mov	r0, r2
 8000418:	f000 fbf7 	bl	8000c0a <_ZN11CUartDriver7parsingEPKc>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d005      	beq.n	800042e <_ZN17CControlLedByUart6updateEv+0x2a>
	{
		m_led->turnOnLed();
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	4618      	mov	r0, r3
 8000428:	f000 faa0 	bl	800096c <_ZN4CLed9turnOnLedEv>
	}
	else if(m_uartDriver->parsing(/*commands.*/led_off))
	{
		m_led->turnOffLed();
	}
}
 800042c:	e00f      	b.n	800044e <_ZN17CControlLedByUart6updateEv+0x4a>
	else if(m_uartDriver->parsing(/*commands.*/led_off))
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	695a      	ldr	r2, [r3, #20]
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	330b      	adds	r3, #11
 8000436:	4619      	mov	r1, r3
 8000438:	4610      	mov	r0, r2
 800043a:	f000 fbe6 	bl	8000c0a <_ZN11CUartDriver7parsingEPKc>
 800043e:	4603      	mov	r3, r0
 8000440:	2b00      	cmp	r3, #0
 8000442:	d004      	beq.n	800044e <_ZN17CControlLedByUart6updateEv+0x4a>
		m_led->turnOffLed();
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	4618      	mov	r0, r3
 800044a:	f000 fa9f 	bl	800098c <_ZN4CLed10turnOffLedEv>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}

08000456 <_ZN7CDriverC1Ev>:



const char message[] = "test\r\n";

CDriver::CDriver()
 8000456:	b480      	push	{r7}
 8000458:	b083      	sub	sp, #12
 800045a:	af00      	add	r7, sp, #0
 800045c:	6078      	str	r0, [r7, #4]
{
}
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4618      	mov	r0, r3
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046a:	4770      	bx	lr

0800046c <_ZN7CDriverD1Ev>:
CDriver::~CDriver()
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
{
}
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4618      	mov	r0, r3
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
	...

08000484 <_ZN7CDriver4initEv>:

void CDriver::init()
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
 800048a:	6078      	str	r0, [r7, #4]
	m_uartDriver.init();
 800048c:	4809      	ldr	r0, [pc, #36]	; (80004b4 <_ZN7CDriver4initEv+0x30>)
 800048e:	f000 faed 	bl	8000a6c <_ZN11CUartDriver4initEv>

	m_greenLed.init(LD2_GPIO_Port, LD2_Pin, CLed::LedStates::off);
 8000492:	2301      	movs	r3, #1
 8000494:	2220      	movs	r2, #32
 8000496:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800049a:	4807      	ldr	r0, [pc, #28]	; (80004b8 <_ZN7CDriver4initEv+0x34>)
 800049c:	f000 f9f8 	bl	8000890 <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>
	//m_blueButton.init(B1_GPIO_Port, B1_Pin, 20);
	//m_stateMachineLed.init(&m_greenLed,&m_blueButton,&m_uartDriver);
	m_controlLedByUart.init(&m_uartDriver, &m_greenLed);
 80004a0:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <_ZN7CDriver4initEv+0x34>)
 80004a2:	4904      	ldr	r1, [pc, #16]	; (80004b4 <_ZN7CDriver4initEv+0x30>)
 80004a4:	4805      	ldr	r0, [pc, #20]	; (80004bc <_ZN7CDriver4initEv+0x38>)
 80004a6:	f7ff ff9b 	bl	80003e0 <_ZN17CControlLedByUart4initEP11CUartDriverP4CLed>
}
 80004aa:	bf00      	nop
 80004ac:	3708      	adds	r7, #8
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	bf00      	nop
 80004b4:	20000090 	.word	0x20000090
 80004b8:	20000150 	.word	0x20000150
 80004bc:	20000194 	.word	0x20000194

080004c0 <_ZN7CDriver6updateEv>:


void CDriver::update()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]

	m_greenLed.update();
 80004c8:	4804      	ldr	r0, [pc, #16]	; (80004dc <_ZN7CDriver6updateEv+0x1c>)
 80004ca:	f000 fa02 	bl	80008d2 <_ZN4CLed6updateEv>
	//m_blueButton.update();
	//m_stateMachineLed.update();
	m_controlLedByUart.update();
 80004ce:	4804      	ldr	r0, [pc, #16]	; (80004e0 <_ZN7CDriver6updateEv+0x20>)
 80004d0:	f7ff ff98 	bl	8000404 <_ZN17CControlLedByUart6updateEv>



	//m_uartDriver.transmit((uint8_t*)message, strlen(message),500);

}
 80004d4:	bf00      	nop
 80004d6:	3708      	adds	r7, #8
 80004d8:	46bd      	mov	sp, r7
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	20000150 	.word	0x20000150
 80004e0:	20000194 	.word	0x20000194

080004e4 <_Z41__static_initialization_and_destruction_0ii>:
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	6039      	str	r1, [r7, #0]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d113      	bne.n	800051c <_Z41__static_initialization_and_destruction_0ii+0x38>
 80004f4:	683b      	ldr	r3, [r7, #0]
 80004f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d10e      	bne.n	800051c <_Z41__static_initialization_and_destruction_0ii+0x38>
CUartDriver CDriver::m_uartDriver;
 80004fe:	4815      	ldr	r0, [pc, #84]	; (8000554 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000500:	f000 fa84 	bl	8000a0c <_ZN11CUartDriverC1Ev>
CLed CDriver::m_greenLed;
 8000504:	4814      	ldr	r0, [pc, #80]	; (8000558 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000506:	f000 f993 	bl	8000830 <_ZN4CLedC1Ev>
CButton CDriver::m_blueButton;
 800050a:	4814      	ldr	r0, [pc, #80]	; (800055c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800050c:	f7ff fe7c 	bl	8000208 <_ZN7CButtonC1Ev>
CStateMachineLed CDriver::m_stateMachineLed;
 8000510:	4813      	ldr	r0, [pc, #76]	; (8000560 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000512:	f000 fa4b 	bl	80009ac <_ZN16CStateMachineLedC1Ev>
CControlLedByUart CDriver::m_controlLedByUart;
 8000516:	4813      	ldr	r0, [pc, #76]	; (8000564 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8000518:	f7ff ff1a 	bl	8000350 <_ZN17CControlLedByUartC1Ev>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d113      	bne.n	800054a <_Z41__static_initialization_and_destruction_0ii+0x66>
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000528:	4293      	cmp	r3, r2
 800052a:	d10e      	bne.n	800054a <_Z41__static_initialization_and_destruction_0ii+0x66>
 800052c:	480d      	ldr	r0, [pc, #52]	; (8000564 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800052e:	f7ff ff37 	bl	80003a0 <_ZN17CControlLedByUartD1Ev>
CStateMachineLed CDriver::m_stateMachineLed;
 8000532:	480b      	ldr	r0, [pc, #44]	; (8000560 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8000534:	f000 fa4a 	bl	80009cc <_ZN16CStateMachineLedD1Ev>
CButton CDriver::m_blueButton;
 8000538:	4808      	ldr	r0, [pc, #32]	; (800055c <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800053a:	f7ff fe77 	bl	800022c <_ZN7CButtonD1Ev>
CLed CDriver::m_greenLed;
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8000540:	f000 f986 	bl	8000850 <_ZN4CLedD1Ev>
CUartDriver CDriver::m_uartDriver;
 8000544:	4803      	ldr	r0, [pc, #12]	; (8000554 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000546:	f000 fa71 	bl	8000a2c <_ZN11CUartDriverD1Ev>
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	20000090 	.word	0x20000090
 8000558:	20000150 	.word	0x20000150
 800055c:	20000168 	.word	0x20000168
 8000560:	20000184 	.word	0x20000184
 8000564:	20000194 	.word	0x20000194

08000568 <_GLOBAL__sub_I__ZN7CDriver12driverBufferE>:
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
 800056c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000570:	2001      	movs	r0, #1
 8000572:	f7ff ffb7 	bl	80004e4 <_Z41__static_initialization_and_destruction_0ii>
 8000576:	bd80      	pop	{r7, pc}

08000578 <_GLOBAL__sub_D__ZN7CDriver12driverBufferE>:
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
 800057c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000580:	2000      	movs	r0, #0
 8000582:	f7ff ffaf 	bl	80004e4 <_Z41__static_initialization_and_destruction_0ii>
 8000586:	bd80      	pop	{r7, pc}

08000588 <_ZN11CUartDriver7getUartEv>:
	void Flush();
	void isEndLine(uint8_t value);
	void writeToReceivedBuffer();
	bool parsing(const char* command);

	UART_HandleTypeDef* getUart() {return &m_huart2;}
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	3334      	adds	r3, #52	; 0x34
 8000594:	4618      	mov	r0, r3
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <_ZN7CHelper4initEv>:

//UART_HandleTypeDef CHelper::huart2;


void CHelper::init()
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	SystemClock_Config();
 80005a4:	f000 f8d2 	bl	800074c <_ZN7CHelper18SystemClock_ConfigEv>
	MX_GPIO_Init();
 80005a8:	f000 f82e 	bl	8000608 <_ZN7CHelper12MX_GPIO_InitEv>
	MX_NVIC_Init();
 80005ac:	f000 f8ba 	bl	8000724 <_ZN7CHelper12MX_NVIC_InitEv>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <HAL_UART_TxCpltCallback>:
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	}
//}

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	if(huart == CDriver::m_uartDriver.getUart()) //huart->Instance == USART2
 80005bc:	4804      	ldr	r0, [pc, #16]	; (80005d0 <HAL_UART_TxCpltCallback+0x1c>)
 80005be:	f7ff ffe3 	bl	8000588 <_ZN11CUartDriver7getUartEv>
 80005c2:	4602      	mov	r2, r0
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	4293      	cmp	r3, r2
	{

	}
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20000090 	.word	0x20000090

080005d4 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	if(huart == CDriver::m_uartDriver.getUart())
 80005dc:	4809      	ldr	r0, [pc, #36]	; (8000604 <HAL_UART_RxCpltCallback+0x30>)
 80005de:	f7ff ffd3 	bl	8000588 <_ZN11CUartDriver7getUartEv>
 80005e2:	4602      	mov	r2, r0
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4293      	cmp	r3, r2
 80005e8:	bf0c      	ite	eq
 80005ea:	2301      	moveq	r3, #1
 80005ec:	2300      	movne	r3, #0
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d002      	beq.n	80005fa <HAL_UART_RxCpltCallback+0x26>
	{
		CDriver::m_uartDriver.irqRxComplete();
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <HAL_UART_RxCpltCallback+0x30>)
 80005f6:	f000 fa75 	bl	8000ae4 <_ZN11CUartDriver13irqRxCompleteEv>
	}
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000090 	.word	0x20000090

08000608 <_ZN7CHelper12MX_GPIO_InitEv>:

void CHelper::MX_GPIO_Init()
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4b3f      	ldr	r3, [pc, #252]	; (800071c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a3e      	ldr	r2, [pc, #248]	; (800071c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000624:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b3c      	ldr	r3, [pc, #240]	; (800071c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000636:	4b39      	ldr	r3, [pc, #228]	; (800071c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000638:	695b      	ldr	r3, [r3, #20]
 800063a:	4a38      	ldr	r2, [pc, #224]	; (800071c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800063c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000640:	6153      	str	r3, [r2, #20]
 8000642:	4b36      	ldr	r3, [pc, #216]	; (800071c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000644:	695b      	ldr	r3, [r3, #20]
 8000646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b33      	ldr	r3, [pc, #204]	; (800071c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a32      	ldr	r2, [pc, #200]	; (800071c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000654:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b30      	ldr	r3, [pc, #192]	; (800071c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b2d      	ldr	r3, [pc, #180]	; (800071c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a2c      	ldr	r2, [pc, #176]	; (800071c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800066c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b2a      	ldr	r3, [pc, #168]	; (800071c <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Reddiode_GPIO_Port, Reddiode_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2102      	movs	r1, #2
 8000682:	4827      	ldr	r0, [pc, #156]	; (8000720 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 8000684:	f001 f816 	bl	80016b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2120      	movs	r1, #32
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f001 f810 	bl	80016b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000694:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000698:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800069a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800069e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a4:	f107 0314 	add.w	r3, r7, #20
 80006a8:	4619      	mov	r1, r3
 80006aa:	481d      	ldr	r0, [pc, #116]	; (8000720 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80006ac:	f000 fe60 	bl	8001370 <HAL_GPIO_Init>

	/*Configure GPIO pin : Mybutton_Pin */
	GPIO_InitStruct.Pin = Mybutton_Pin;
 80006b0:	2301      	movs	r3, #1
 80006b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006b4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ba:	2301      	movs	r3, #1
 80006bc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Mybutton_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4816      	ldr	r0, [pc, #88]	; (8000720 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80006c6:	f000 fe53 	bl	8001370 <HAL_GPIO_Init>

	/*Configure GPIO pin : Reddiode_Pin */
	GPIO_InitStruct.Pin = Reddiode_Pin;
 80006ca:	2302      	movs	r3, #2
 80006cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Reddiode_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4619      	mov	r1, r3
 80006e0:	480f      	ldr	r0, [pc, #60]	; (8000720 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80006e2:	f000 fe45 	bl	8001370 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80006e6:	2320      	movs	r3, #32
 80006e8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	2301      	movs	r3, #1
 80006ec:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000700:	f000 fe36 	bl	8001370 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000704:	2200      	movs	r2, #0
 8000706:	2100      	movs	r1, #0
 8000708:	2006      	movs	r0, #6
 800070a:	f000 fd84 	bl	8001216 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800070e:	2006      	movs	r0, #6
 8000710:	f000 fd9d 	bl	800124e <HAL_NVIC_EnableIRQ>
}
 8000714:	bf00      	nop
 8000716:	3728      	adds	r7, #40	; 0x28
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40021000 	.word	0x40021000
 8000720:	48000800 	.word	0x48000800

08000724 <_ZN7CHelper12MX_NVIC_InitEv>:

void CHelper::MX_NVIC_Init()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2100      	movs	r1, #0
 800072c:	2028      	movs	r0, #40	; 0x28
 800072e:	f000 fd72 	bl	8001216 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000732:	2028      	movs	r0, #40	; 0x28
 8000734:	f000 fd8b 	bl	800124e <HAL_NVIC_EnableIRQ>

	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	2026      	movs	r0, #38	; 0x26
 800073e:	f000 fd6a 	bl	8001216 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000742:	2026      	movs	r0, #38	; 0x26
 8000744:	f000 fd83 	bl	800124e <HAL_NVIC_EnableIRQ>
}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}

0800074c <_ZN7CHelper18SystemClock_ConfigEv>:

void CHelper::SystemClock_Config()
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b0a6      	sub	sp, #152	; 0x98
 8000750:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000752:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000756:	2228      	movs	r2, #40	; 0x28
 8000758:	2100      	movs	r1, #0
 800075a:	4618      	mov	r0, r3
 800075c:	f003 fec4 	bl	80044e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000760:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	2258      	movs	r2, #88	; 0x58
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f003 feb6 	bl	80044e8 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800077c:	2302      	movs	r3, #2
 800077e:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000780:	2301      	movs	r3, #1
 8000782:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000784:	2310      	movs	r3, #16
 8000786:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078a:	2302      	movs	r3, #2
 800078c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000790:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000794:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000798:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800079c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007aa:	4618      	mov	r0, r3
 80007ac:	f000 ffd8 	bl	8001760 <HAL_RCC_OscConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	bf14      	ite	ne
 80007b6:	2301      	movne	r3, #1
 80007b8:	2300      	moveq	r3, #0
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <_ZN7CHelper18SystemClock_ConfigEv+0x78>
	{
	Error_Handler();
 80007c0:	f000 f831 	bl	8000826 <_ZN7CHelper13Error_HandlerEv>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007c4:	230f      	movs	r3, #15
 80007c6:	65fb      	str	r3, [r7, #92]	; 0x5c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c8:	2302      	movs	r3, #2
 80007ca:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007d4:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007da:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007de:	2102      	movs	r1, #2
 80007e0:	4618      	mov	r0, r3
 80007e2:	f002 f811 	bl	8002808 <HAL_RCC_ClockConfig>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	bf14      	ite	ne
 80007ec:	2301      	movne	r3, #1
 80007ee:	2300      	moveq	r3, #0
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <_ZN7CHelper18SystemClock_ConfigEv+0xae>
	{
	Error_Handler();
 80007f6:	f000 f816 	bl	8000826 <_ZN7CHelper13Error_HandlerEv>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007fe:	2300      	movs	r3, #0
 8000800:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000802:	1d3b      	adds	r3, r7, #4
 8000804:	4618      	mov	r0, r3
 8000806:	f002 fa35 	bl	8002c74 <HAL_RCCEx_PeriphCLKConfig>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	bf14      	ite	ne
 8000810:	2301      	movne	r3, #1
 8000812:	2300      	moveq	r3, #0
 8000814:	b2db      	uxtb	r3, r3
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <_ZN7CHelper18SystemClock_ConfigEv+0xd2>
	{
	Error_Handler();
 800081a:	f000 f804 	bl	8000826 <_ZN7CHelper13Error_HandlerEv>
	}
}
 800081e:	bf00      	nop
 8000820:	3798      	adds	r7, #152	; 0x98
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}

08000826 <_ZN7CHelper13Error_HandlerEv>:

void CHelper::Error_Handler()
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082a:	b672      	cpsid	i
}
 800082c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800082e:	e7fe      	b.n	800082e <_ZN7CHelper13Error_HandlerEv+0x8>

08000830 <_ZN4CLedC1Ev>:
 *      Author: Konra
 */

#include <CLed.h>

CLed::CLed() {
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	4a04      	ldr	r2, [pc, #16]	; (800084c <_ZN4CLedC1Ev+0x1c>)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4618      	mov	r0, r3
 8000842:	370c      	adds	r7, #12
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	08004694 	.word	0x08004694

08000850 <_ZN4CLedD1Ev>:

CLed::~CLed() {
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	4a04      	ldr	r2, [pc, #16]	; (800086c <_ZN4CLedD1Ev+0x1c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4618      	mov	r0, r3
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr
 800086c:	08004694 	.word	0x08004694

08000870 <_ZN4CLedD0Ev>:
CLed::~CLed() {
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
}
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff ffe9 	bl	8000850 <_ZN4CLedD1Ev>
 800087e:	2118      	movs	r1, #24
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f003 fde0 	bl	8004446 <_ZdlPvj>
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4618      	mov	r0, r3
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>:

void CLed::init(GPIO_TypeDef* GpioPort, uint16_t GpioPin, LedStates state = off)
{
 8000890:	b480      	push	{r7}
 8000892:	b085      	sub	sp, #20
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	4611      	mov	r1, r2
 800089c:	461a      	mov	r2, r3
 800089e:	460b      	mov	r3, r1
 80008a0:	80fb      	strh	r3, [r7, #6]
 80008a2:	4613      	mov	r3, r2
 80008a4:	717b      	strb	r3, [r7, #5]
	this->GpioPort 	= GpioPort;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	68ba      	ldr	r2, [r7, #8]
 80008aa:	605a      	str	r2, [r3, #4]
	this->GpioPin 	= GpioPin;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	88fa      	ldrh	r2, [r7, #6]
 80008b0:	811a      	strh	r2, [r3, #8]
	this->state 	= state;
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	797a      	ldrb	r2, [r7, #5]
 80008b6:	729a      	strb	r2, [r3, #10]
	m_timerToggle 	= 500;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80008be:	60da      	str	r2, [r3, #12]
	m_enter 		= false;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2200      	movs	r2, #0
 80008c4:	751a      	strb	r2, [r3, #20]
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <_ZN4CLed6updateEv>:
void CLed::update()
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
	switch(state)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	7a9b      	ldrb	r3, [r3, #10]
 80008de:	2b02      	cmp	r3, #2
 80008e0:	d00e      	beq.n	8000900 <_ZN4CLed6updateEv+0x2e>
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	dc2e      	bgt.n	8000944 <_ZN4CLed6updateEv+0x72>
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d002      	beq.n	80008f0 <_ZN4CLed6updateEv+0x1e>
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d004      	beq.n	80008f8 <_ZN4CLed6updateEv+0x26>
				m_enter = false;
			}

			break;
	}
}
 80008ee:	e029      	b.n	8000944 <_ZN4CLed6updateEv+0x72>
			turnOnLed();
 80008f0:	6878      	ldr	r0, [r7, #4]
 80008f2:	f000 f83b 	bl	800096c <_ZN4CLed9turnOnLedEv>
			break;
 80008f6:	e025      	b.n	8000944 <_ZN4CLed6updateEv+0x72>
			turnOffLed();
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f000 f847 	bl	800098c <_ZN4CLed10turnOffLedEv>
			break;
 80008fe:	e021      	b.n	8000944 <_ZN4CLed6updateEv+0x72>
			if(m_enter == false)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	7d1b      	ldrb	r3, [r3, #20]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d107      	bne.n	8000918 <_ZN4CLed6updateEv+0x46>
				m_lastTick = HAL_GetTick();
 8000908:	f000 fb9e 	bl	8001048 <HAL_GetTick>
 800090c:	4602      	mov	r2, r0
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	611a      	str	r2, [r3, #16]
				m_enter = true;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2201      	movs	r2, #1
 8000916:	751a      	strb	r2, [r3, #20]
			if((HAL_GetTick() - m_lastTick) > m_timerToggle)
 8000918:	f000 fb96 	bl	8001048 <HAL_GetTick>
 800091c:	4602      	mov	r2, r0
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	691b      	ldr	r3, [r3, #16]
 8000922:	1ad2      	subs	r2, r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	429a      	cmp	r2, r3
 800092a:	bf8c      	ite	hi
 800092c:	2301      	movhi	r3, #1
 800092e:	2300      	movls	r3, #0
 8000930:	b2db      	uxtb	r3, r3
 8000932:	2b00      	cmp	r3, #0
 8000934:	d005      	beq.n	8000942 <_ZN4CLed6updateEv+0x70>
				togglePin();
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f000 f808 	bl	800094c <_ZN4CLed9togglePinEv>
				m_enter = false;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2200      	movs	r2, #0
 8000940:	751a      	strb	r2, [r3, #20]
			break;
 8000942:	bf00      	nop
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <_ZN4CLed9togglePinEv>:
void CLed::togglePin()
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GpioPort, GpioPin);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	685a      	ldr	r2, [r3, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	891b      	ldrh	r3, [r3, #8]
 800095c:	4619      	mov	r1, r3
 800095e:	4610      	mov	r0, r2
 8000960:	f000 fec0 	bl	80016e4 <HAL_GPIO_TogglePin>
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}

0800096c <_ZN4CLed9turnOnLedEv>:

void CLed::turnOnLed()
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GpioPort, GpioPin, GPIO_PIN_SET);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	6858      	ldr	r0, [r3, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	891b      	ldrh	r3, [r3, #8]
 800097c:	2201      	movs	r2, #1
 800097e:	4619      	mov	r1, r3
 8000980:	f000 fe98 	bl	80016b4 <HAL_GPIO_WritePin>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <_ZN4CLed10turnOffLedEv>:

void CLed::turnOffLed()
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GpioPort, GpioPin, GPIO_PIN_RESET);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	6858      	ldr	r0, [r3, #4]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	891b      	ldrh	r3, [r3, #8]
 800099c:	2200      	movs	r2, #0
 800099e:	4619      	mov	r1, r3
 80009a0:	f000 fe88 	bl	80016b4 <HAL_GPIO_WritePin>
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <_ZN16CStateMachineLedC1Ev>:
#include "string.h"
#include "stdio.h"



CStateMachineLed::CStateMachineLed() {
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	4a04      	ldr	r2, [pc, #16]	; (80009c8 <_ZN16CStateMachineLedC1Ev+0x1c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	080046a4 	.word	0x080046a4

080009cc <_ZN16CStateMachineLedD1Ev>:

CStateMachineLed::~CStateMachineLed() {
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <_ZN16CStateMachineLedD1Ev+0x1c>)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4618      	mov	r0, r3
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	080046a4 	.word	0x080046a4

080009ec <_ZN16CStateMachineLedD0Ev>:
CStateMachineLed::~CStateMachineLed() {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
}
 80009f4:	6878      	ldr	r0, [r7, #4]
 80009f6:	f7ff ffe9 	bl	80009cc <_ZN16CStateMachineLedD1Ev>
 80009fa:	2110      	movs	r1, #16
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f003 fd22 	bl	8004446 <_ZdlPvj>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4618      	mov	r0, r3
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <_ZN11CUartDriverC1Ev>:

#include <CUartDriver.h>
#include "string.h"
//UART_HandleTypeDef CUartDriver::m_huart2;

CUartDriver::CUartDriver() {
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	4a04      	ldr	r2, [pc, #16]	; (8000a28 <_ZN11CUartDriverC1Ev+0x1c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	370c      	adds	r7, #12
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr
 8000a28:	080046b4 	.word	0x080046b4

08000a2c <_ZN11CUartDriverD1Ev>:

CUartDriver::~CUartDriver() {
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <_ZN11CUartDriverD1Ev+0x1c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	080046b4 	.word	0x080046b4

08000a4c <_ZN11CUartDriverD0Ev>:
CUartDriver::~CUartDriver() {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
}
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f7ff ffe9 	bl	8000a2c <_ZN11CUartDriverD1Ev>
 8000a5a:	21c0      	movs	r1, #192	; 0xc0
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f003 fcf2 	bl	8004446 <_ZdlPvj>
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <_ZN11CUartDriver4initEv>:

void CUartDriver::init()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	m_huart2.Instance = USART2;
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a1a      	ldr	r2, [pc, #104]	; (8000ae0 <_ZN11CUartDriver4initEv+0x74>)
 8000a78:	635a      	str	r2, [r3, #52]	; 0x34
	m_huart2.Init.BaudRate = 38400;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000a80:	639a      	str	r2, [r3, #56]	; 0x38
	m_huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	63da      	str	r2, [r3, #60]	; 0x3c
	m_huart2.Init.StopBits = UART_STOPBITS_1;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	641a      	str	r2, [r3, #64]	; 0x40
	m_huart2.Init.Parity = UART_PARITY_NONE;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	645a      	str	r2, [r3, #68]	; 0x44
	m_huart2.Init.Mode = UART_MODE_TX_RX;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	220c      	movs	r2, #12
 8000a98:	649a      	str	r2, [r3, #72]	; 0x48
	m_huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	64da      	str	r2, [r3, #76]	; 0x4c
	m_huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	651a      	str	r2, [r3, #80]	; 0x50
	m_huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	655a      	str	r2, [r3, #84]	; 0x54
	m_huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_UART_Init(&m_huart2) != HAL_OK)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3334      	adds	r3, #52	; 0x34
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f002 fafa 	bl	80030b0 <HAL_UART_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	bf14      	ite	ne
 8000ac2:	2301      	movne	r3, #1
 8000ac4:	2300      	moveq	r3, #0
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d002      	beq.n	8000ad2 <_ZN11CUartDriver4initEv+0x66>
	{
		Error_Handler();
 8000acc:	6878      	ldr	r0, [r7, #4]
 8000ace:	f000 f90d 	bl	8000cec <_ZN11CUartDriver13Error_HandlerEv>
	}

	turnOnReceivingIfOff();
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 f82d 	bl	8000b32 <_ZN11CUartDriver20turnOnReceivingIfOffEv>
}
 8000ad8:	bf00      	nop
 8000ada:	3708      	adds	r7, #8
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40004400 	.word	0x40004400

08000ae4 <_ZN11CUartDriver13irqRxCompleteEv>:

void CUartDriver::irqRxComplete()
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
	if(writeToBuffer(m_dataReceive) == BS_OK)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8000af2:	4619      	mov	r1, r3
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 f89d 	bl	8000c34 <_ZN11CUartDriver13writeToBufferEh>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	bf0c      	ite	eq
 8000b00:	2301      	moveq	r3, #1
 8000b02:	2300      	movne	r3, #0
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d006      	beq.n	8000b18 <_ZN11CUartDriver13irqRxCompleteEv+0x34>
	{
		isEndLine(m_dataReceive);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8000b10:	4619      	mov	r1, r3
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f000 f82d 	bl	8000b72 <_ZN11CUartDriver9isEndLineEh>
	}
	HAL_UART_Receive_IT(&m_huart2, &m_dataReceive, sizeof(m_dataReceive));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	33bc      	adds	r3, #188	; 0xbc
 8000b22:	2201      	movs	r2, #1
 8000b24:	4619      	mov	r1, r3
 8000b26:	f002 fb11 	bl	800314c <HAL_UART_Receive_IT>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <_ZN11CUartDriver20turnOnReceivingIfOffEv>:

void CUartDriver::turnOnReceivingIfOff()
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b082      	sub	sp, #8
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
    if (m_huart2.gState == HAL_UART_STATE_READY || m_huart2.gState == HAL_UART_STATE_BUSY_TX)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000b40:	2b20      	cmp	r3, #32
 8000b42:	d004      	beq.n	8000b4e <_ZN11CUartDriver20turnOnReceivingIfOffEv+0x1c>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000b4a:	2b21      	cmp	r3, #33	; 0x21
 8000b4c:	d101      	bne.n	8000b52 <_ZN11CUartDriver20turnOnReceivingIfOffEv+0x20>
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e000      	b.n	8000b54 <_ZN11CUartDriver20turnOnReceivingIfOffEv+0x22>
 8000b52:	2300      	movs	r3, #0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d008      	beq.n	8000b6a <_ZN11CUartDriver20turnOnReceivingIfOffEv+0x38>
    {
        HAL_UART_Receive_IT(&m_huart2, &m_dataReceive, sizeof(m_dataReceive));
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	33bc      	adds	r3, #188	; 0xbc
 8000b62:	2201      	movs	r2, #1
 8000b64:	4619      	mov	r1, r3
 8000b66:	f002 faf1 	bl	800314c <HAL_UART_Receive_IT>
    }
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_ZN11CUartDriver9isEndLineEh>:

void CUartDriver::isEndLine(uint8_t value)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	70fb      	strb	r3, [r7, #3]
	if(value == '\n')
 8000b7e:	78fb      	ldrb	r3, [r7, #3]
 8000b80:	2b0a      	cmp	r3, #10
 8000b82:	d10a      	bne.n	8000b9a <_ZN11CUartDriver9isEndLineEh+0x28>
	{
		m_receivedLines++;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
		writeToReceivedBuffer();
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f000 f804 	bl	8000ba2 <_ZN11CUartDriver21writeToReceivedBufferEv>
	}
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <_ZN11CUartDriver21writeToReceivedBufferEv>:

void CUartDriver::writeToReceivedBuffer()
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
	do
	{
		readFromBuffer(&m_tmpReceivedData);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	33be      	adds	r3, #190	; 0xbe
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f000 f86b 	bl	8000c90 <_ZN11CUartDriver14readFromBufferEPh>
		if(m_tmpReceivedData == '\n')
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8000bc0:	2b0a      	cmp	r3, #10
 8000bc2:	d105      	bne.n	8000bd0 <_ZN11CUartDriver21writeToReceivedBufferEv+0x2e>
		{
			m_receivedBuffer[index] = 0;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	687a      	ldr	r2, [r7, #4]
 8000bc8:	4413      	add	r3, r2
 8000bca:	2200      	movs	r2, #0
 8000bcc:	751a      	strb	r2, [r3, #20]
 8000bce:	e007      	b.n	8000be0 <_ZN11CUartDriver21writeToReceivedBufferEv+0x3e>
		}
		else
		{
			m_receivedBuffer[index] = m_tmpReceivedData;
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	f892 10be 	ldrb.w	r1, [r2, #190]	; 0xbe
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	4413      	add	r3, r2
 8000bdc:	460a      	mov	r2, r1
 8000bde:	751a      	strb	r2, [r3, #20]
		}
		index++;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	3301      	adds	r3, #1
 8000be4:	73fb      	strb	r3, [r7, #15]
	}while(m_tmpReceivedData != '\n');
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8000bec:	2b0a      	cmp	r3, #10
 8000bee:	d000      	beq.n	8000bf2 <_ZN11CUartDriver21writeToReceivedBufferEv+0x50>
	do
 8000bf0:	e7dd      	b.n	8000bae <_ZN11CUartDriver21writeToReceivedBufferEv+0xc>

	m_receivedLines--;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8000bf8:	3b01      	subs	r3, #1
 8000bfa:	b2da      	uxtb	r2, r3
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd

}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <_ZN11CUartDriver7parsingEPKc>:

bool CUartDriver::parsing(const char* command)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	6039      	str	r1, [r7, #0]
	if(strcmp(command, (char*)m_receivedBuffer) == 0)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3314      	adds	r3, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	6838      	ldr	r0, [r7, #0]
 8000c1c:	f7ff fada 	bl	80001d4 <strcmp>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d101      	bne.n	8000c2a <_ZN11CUartDriver7parsingEPKc+0x20>
	{
		return true;
 8000c26:	2301      	movs	r3, #1
 8000c28:	e000      	b.n	8000c2c <_ZN11CUartDriver7parsingEPKc+0x22>
	}

	return false;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <_ZN11CUartDriver13writeToBufferEh>:
{
	HAL_UART_Receive_IT(&m_huart2, pData, Size);
}

CUartDriver::BufferState CUartDriver::writeToBuffer(uint8_t value)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	70fb      	strb	r3, [r7, #3]

	uint8_t tempHead = (m_head + 1) % BUFFER_SIZE;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8000c46:	3301      	adds	r3, #1
 8000c48:	425a      	negs	r2, r3
 8000c4a:	f003 030f 	and.w	r3, r3, #15
 8000c4e:	f002 020f 	and.w	r2, r2, #15
 8000c52:	bf58      	it	pl
 8000c54:	4253      	negpl	r3, r2
 8000c56:	73fb      	strb	r3, [r7, #15]

	if(tempHead == m_tail)
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
 8000c60:	4293      	cmp	r3, r2
 8000c62:	d101      	bne.n	8000c68 <_ZN11CUartDriver13writeToBufferEh+0x34>
	{
		return BufferState::BS_ERROR;
 8000c64:	2301      	movs	r3, #1
 8000c66:	e00d      	b.n	8000c84 <_ZN11CUartDriver13writeToBufferEh+0x50>
	}

	m_buffer[m_head] = value;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8000c6e:	461a      	mov	r2, r3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4413      	add	r3, r2
 8000c74:	78fa      	ldrb	r2, [r7, #3]
 8000c76:	711a      	strb	r2, [r3, #4]
	m_head = tempHead;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
 8000c7a:	b29a      	uxth	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

	return BufferState::BS_OK;
 8000c82:	2300      	movs	r3, #0
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <_ZN11CUartDriver14readFromBufferEPh>:

CUartDriver::BufferState CUartDriver::readFromBuffer(uint8_t* value)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
	if(m_head == m_tail)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d101      	bne.n	8000cae <_ZN11CUartDriver14readFromBufferEPh+0x1e>
	{
		return BufferState::BS_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e018      	b.n	8000ce0 <_ZN11CUartDriver14readFromBufferEPh+0x50>
	}

	*value = m_buffer[m_tail];
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	791a      	ldrb	r2, [r3, #4]
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	701a      	strb	r2, [r3, #0]
	m_tail = (m_tail + 1) % BUFFER_SIZE;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	425a      	negs	r2, r3
 8000cca:	f003 030f 	and.w	r3, r3, #15
 8000cce:	f002 020f 	and.w	r2, r2, #15
 8000cd2:	bf58      	it	pl
 8000cd4:	4253      	negpl	r3, r2
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
	return BufferState::BS_OK;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <_ZN11CUartDriver13Error_HandlerEv>:
	m_head = 0;
	m_tail = 0;
}

void CUartDriver::Error_Handler()
{
 8000cec:	b480      	push	{r7}
 8000cee:	b083      	sub	sp, #12
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
	while(1)
 8000cf4:	e7fe      	b.n	8000cf4 <_ZN11CUartDriver13Error_HandlerEv+0x8>
	...

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfc:	f000 f94a 	bl	8000f94 <HAL_Init>

  /* USER CODE BEGIN Init */
  CHelper::init();
 8000d00:	f7ff fc4e 	bl	80005a0 <_ZN7CHelper4initEv>
  m_driver.init();
 8000d04:	4803      	ldr	r0, [pc, #12]	; (8000d14 <main+0x1c>)
 8000d06:	f7ff fbbd 	bl	8000484 <_ZN7CDriver4initEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  m_driver.update();
 8000d0a:	4802      	ldr	r0, [pc, #8]	; (8000d14 <main+0x1c>)
 8000d0c:	f7ff fbd8 	bl	80004c0 <_ZN7CDriver6updateEv>
 8000d10:	e7fb      	b.n	8000d0a <main+0x12>
 8000d12:	bf00      	nop
 8000d14:	200001b0 	.word	0x200001b0

08000d18 <_Z41__static_initialization_and_destruction_0ii>:
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b01      	cmp	r3, #1
 8000d26:	d107      	bne.n	8000d38 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d102      	bne.n	8000d38 <_Z41__static_initialization_and_destruction_0ii+0x20>
CDriver m_driver;
 8000d32:	4809      	ldr	r0, [pc, #36]	; (8000d58 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000d34:	f7ff fb8f 	bl	8000456 <_ZN7CDriverC1Ev>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d107      	bne.n	8000d4e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d44:	4293      	cmp	r3, r2
 8000d46:	d102      	bne.n	8000d4e <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000d48:	4803      	ldr	r0, [pc, #12]	; (8000d58 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000d4a:	f7ff fb8f 	bl	800046c <_ZN7CDriverD1Ev>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200001b0 	.word	0x200001b0

08000d5c <_GLOBAL__sub_I_m_driver>:
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d64:	2001      	movs	r0, #1
 8000d66:	f7ff ffd7 	bl	8000d18 <_Z41__static_initialization_and_destruction_0ii>
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <_GLOBAL__sub_D_m_driver>:
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000d74:	2000      	movs	r0, #0
 8000d76:	f7ff ffcf 	bl	8000d18 <_Z41__static_initialization_and_destruction_0ii>
 8000d7a:	bd80      	pop	{r7, pc}

08000d7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	4a0e      	ldr	r2, [pc, #56]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d88:	f043 0301 	orr.w	r3, r3, #1
 8000d8c:	6193      	str	r3, [r2, #24]
 8000d8e:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d90:	699b      	ldr	r3, [r3, #24]
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9a:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <HAL_MspInit+0x44>)
 8000d9c:	69db      	ldr	r3, [r3, #28]
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_MspInit+0x44>)
 8000da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da4:	61d3      	str	r3, [r2, #28]
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_MspInit+0x44>)
 8000da8:	69db      	ldr	r3, [r3, #28]
 8000daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dae:	603b      	str	r3, [r7, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000db2:	2007      	movs	r0, #7
 8000db4:	f000 fa24 	bl	8001200 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db8:	bf00      	nop
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000

08000dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08a      	sub	sp, #40	; 0x28
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <HAL_UART_MspInit+0x7c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d128      	bne.n	8000e38 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a16      	ldr	r2, [pc, #88]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b14      	ldr	r3, [pc, #80]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000e00:	695b      	ldr	r3, [r3, #20]
 8000e02:	4a10      	ldr	r2, [pc, #64]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e08:	6153      	str	r3, [r2, #20]
 8000e0a:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_UART_MspInit+0x80>)
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e16:	230c      	movs	r3, #12
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e26:	2307      	movs	r3, #7
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e34:	f000 fa9c 	bl	8001370 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40004400 	.word	0x40004400
 8000e44:	40021000 	.word	0x40021000

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <NMI_Handler+0x4>

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5e:	e7fe      	b.n	8000e5e <BusFault_Handler+0x4>

08000e60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <UsageFault_Handler+0x4>

08000e66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e6a:	bf00      	nop
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr

08000e82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e94:	f000 f8c4 	bl	8001020 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f000 fc39 	bl	8001718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
	...

08000eac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(CDriver::m_uartDriver.getUart());
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <USART2_IRQHandler+0x18>)
 8000eb2:	f7ff fb69 	bl	8000588 <_ZN11CUartDriver7getUartEv>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f002 f995 	bl	80031e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000090 	.word	0x20000090

08000ec8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ecc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ed0:	f000 fc22 	bl	8001718 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
	return 1;
 8000edc:	2301      	movs	r3, #1
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_kill>:

int _kill(int pid, int sig)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ef2:	f003 fac7 	bl	8004484 <__errno>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2216      	movs	r2, #22
 8000efa:	601a      	str	r2, [r3, #0]
	return -1;
 8000efc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <_exit>:

void _exit (int status)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ffe7 	bl	8000ee8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f1a:	e7fe      	b.n	8000f1a <_exit+0x12>

08000f1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <SystemInit+0x20>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f26:	4a05      	ldr	r2, [pc, #20]	; (8000f3c <SystemInit+0x20>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f78 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f44:	480d      	ldr	r0, [pc, #52]	; (8000f7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000f46:	490e      	ldr	r1, [pc, #56]	; (8000f80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f48:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <LoopForever+0xe>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0b      	ldr	r2, [pc, #44]	; (8000f88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f5c:	4c0b      	ldr	r4, [pc, #44]	; (8000f8c <LoopForever+0x16>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f6a:	f7ff ffd7 	bl	8000f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f003 fa8f 	bl	8004490 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f72:	f7ff fec1 	bl	8000cf8 <main>

08000f76 <LoopForever>:

LoopForever:
    b LoopForever
 8000f76:	e7fe      	b.n	8000f76 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f78:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f80:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f84:	0800470c 	.word	0x0800470c
  ldr r2, =_sbss
 8000f88:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f8c:	200001c4 	.word	0x200001c4

08000f90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC1_2_IRQHandler>
	...

08000f94 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	; (8000fbc <HAL_Init+0x28>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	; (8000fbc <HAL_Init+0x28>)
 8000f9e:	f043 0310 	orr.w	r3, r3, #16
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f92b 	bl	8001200 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f000 f808 	bl	8000fc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fee4 	bl	8000d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40022000 	.word	0x40022000

08000fc0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_InitTick+0x54>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_InitTick+0x58>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f943 	bl	800126a <HAL_SYSTICK_Config>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e00e      	b.n	800100c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b0f      	cmp	r3, #15
 8000ff2:	d80a      	bhi.n	800100a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6879      	ldr	r1, [r7, #4]
 8000ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ffc:	f000 f90b 	bl	8001216 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001000:	4a06      	ldr	r2, [pc, #24]	; (800101c <HAL_InitTick+0x5c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	e000      	b.n	800100c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000000 	.word	0x20000000
 8001018:	20000008 	.word	0x20000008
 800101c:	20000004 	.word	0x20000004

08001020 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <HAL_IncTick+0x20>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4b06      	ldr	r3, [pc, #24]	; (8001044 <HAL_IncTick+0x24>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4413      	add	r3, r2
 8001030:	4a04      	ldr	r2, [pc, #16]	; (8001044 <HAL_IncTick+0x24>)
 8001032:	6013      	str	r3, [r2, #0]
}
 8001034:	bf00      	nop
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	20000008 	.word	0x20000008
 8001044:	200001b4 	.word	0x200001b4

08001048 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return uwTick;  
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <HAL_GetTick+0x14>)
 800104e:	681b      	ldr	r3, [r3, #0]
}
 8001050:	4618      	mov	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200001b4 	.word	0x200001b4

08001060 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001076:	68ba      	ldr	r2, [r7, #8]
 8001078:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001088:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800108c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001090:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001092:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	60d3      	str	r3, [r2, #12]
}
 8001098:	bf00      	nop
 800109a:	3714      	adds	r7, #20
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <__NVIC_GetPriorityGrouping+0x18>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	0a1b      	lsrs	r3, r3, #8
 80010b2:	f003 0307 	and.w	r3, r3, #7
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	db0b      	blt.n	80010ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 021f 	and.w	r2, r3, #31
 80010dc:	4907      	ldr	r1, [pc, #28]	; (80010fc <__NVIC_EnableIRQ+0x38>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	095b      	lsrs	r3, r3, #5
 80010e4:	2001      	movs	r0, #1
 80010e6:	fa00 f202 	lsl.w	r2, r0, r2
 80010ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	e000e100 	.word	0xe000e100

08001100 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	6039      	str	r1, [r7, #0]
 800110a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	db0a      	blt.n	800112a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	b2da      	uxtb	r2, r3
 8001118:	490c      	ldr	r1, [pc, #48]	; (800114c <__NVIC_SetPriority+0x4c>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	0112      	lsls	r2, r2, #4
 8001120:	b2d2      	uxtb	r2, r2
 8001122:	440b      	add	r3, r1
 8001124:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001128:	e00a      	b.n	8001140 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	b2da      	uxtb	r2, r3
 800112e:	4908      	ldr	r1, [pc, #32]	; (8001150 <__NVIC_SetPriority+0x50>)
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	f003 030f 	and.w	r3, r3, #15
 8001136:	3b04      	subs	r3, #4
 8001138:	0112      	lsls	r2, r2, #4
 800113a:	b2d2      	uxtb	r2, r2
 800113c:	440b      	add	r3, r1
 800113e:	761a      	strb	r2, [r3, #24]
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000e100 	.word	0xe000e100
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f1c3 0307 	rsb	r3, r3, #7
 800116e:	2b04      	cmp	r3, #4
 8001170:	bf28      	it	cs
 8001172:	2304      	movcs	r3, #4
 8001174:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	3304      	adds	r3, #4
 800117a:	2b06      	cmp	r3, #6
 800117c:	d902      	bls.n	8001184 <NVIC_EncodePriority+0x30>
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3b03      	subs	r3, #3
 8001182:	e000      	b.n	8001186 <NVIC_EncodePriority+0x32>
 8001184:	2300      	movs	r3, #0
 8001186:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	f04f 32ff 	mov.w	r2, #4294967295
 800118c:	69bb      	ldr	r3, [r7, #24]
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	43da      	mvns	r2, r3
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	401a      	ands	r2, r3
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800119c:	f04f 31ff 	mov.w	r1, #4294967295
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	fa01 f303 	lsl.w	r3, r1, r3
 80011a6:	43d9      	mvns	r1, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	4313      	orrs	r3, r2
         );
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3724      	adds	r7, #36	; 0x24
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011cc:	d301      	bcc.n	80011d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00f      	b.n	80011f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d2:	4a0a      	ldr	r2, [pc, #40]	; (80011fc <SysTick_Config+0x40>)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	3b01      	subs	r3, #1
 80011d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011da:	210f      	movs	r1, #15
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f7ff ff8e 	bl	8001100 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e4:	4b05      	ldr	r3, [pc, #20]	; (80011fc <SysTick_Config+0x40>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ea:	4b04      	ldr	r3, [pc, #16]	; (80011fc <SysTick_Config+0x40>)
 80011ec:	2207      	movs	r2, #7
 80011ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	e000e010 	.word	0xe000e010

08001200 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f7ff ff29 	bl	8001060 <__NVIC_SetPriorityGrouping>
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b086      	sub	sp, #24
 800121a:	af00      	add	r7, sp, #0
 800121c:	4603      	mov	r3, r0
 800121e:	60b9      	str	r1, [r7, #8]
 8001220:	607a      	str	r2, [r7, #4]
 8001222:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001228:	f7ff ff3e 	bl	80010a8 <__NVIC_GetPriorityGrouping>
 800122c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	68b9      	ldr	r1, [r7, #8]
 8001232:	6978      	ldr	r0, [r7, #20]
 8001234:	f7ff ff8e 	bl	8001154 <NVIC_EncodePriority>
 8001238:	4602      	mov	r2, r0
 800123a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff5d 	bl	8001100 <__NVIC_SetPriority>
}
 8001246:	bf00      	nop
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b082      	sub	sp, #8
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff ff31 	bl	80010c4 <__NVIC_EnableIRQ>
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b082      	sub	sp, #8
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ffa2 	bl	80011bc <SysTick_Config>
 8001278:	4603      	mov	r3, r0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001282:	b480      	push	{r7}
 8001284:	b083      	sub	sp, #12
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001290:	2b02      	cmp	r3, #2
 8001292:	d008      	beq.n	80012a6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2204      	movs	r2, #4
 8001298:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e020      	b.n	80012e8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 020e 	bic.w	r2, r2, #14
 80012b4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f022 0201 	bic.w	r2, r2, #1
 80012c4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012ce:	2101      	movs	r1, #1
 80012d0:	fa01 f202 	lsl.w	r2, r1, r2
 80012d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80012e6:	2300      	movs	r3, #0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012fc:	2300      	movs	r3, #0
 80012fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001306:	2b02      	cmp	r3, #2
 8001308:	d005      	beq.n	8001316 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2204      	movs	r2, #4
 800130e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	e027      	b.n	8001366 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f022 020e 	bic.w	r2, r2, #14
 8001324:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0201 	bic.w	r2, r2, #1
 8001334:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800133e:	2101      	movs	r1, #1
 8001340:	fa01 f202 	lsl.w	r2, r1, r2
 8001344:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	4798      	blx	r3
    } 
  }
  return status;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3710      	adds	r7, #16
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}

08001370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001370:	b480      	push	{r7}
 8001372:	b087      	sub	sp, #28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800137e:	e160      	b.n	8001642 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2101      	movs	r1, #1
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	fa01 f303 	lsl.w	r3, r1, r3
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 8152 	beq.w	800163c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d005      	beq.n	80013b0 <HAL_GPIO_Init+0x40>
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0303 	and.w	r3, r3, #3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d130      	bne.n	8001412 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013e6:	2201      	movs	r2, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	f003 0201 	and.w	r2, r3, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b03      	cmp	r3, #3
 800141c:	d017      	beq.n	800144e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	2203      	movs	r2, #3
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d123      	bne.n	80014a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	08da      	lsrs	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3208      	adds	r2, #8
 8001462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	691a      	ldr	r2, [r3, #16]
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4313      	orrs	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	08da      	lsrs	r2, r3, #3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	3208      	adds	r2, #8
 800149c:	6939      	ldr	r1, [r7, #16]
 800149e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	2203      	movs	r2, #3
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0203 	and.w	r2, r3, #3
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 80ac 	beq.w	800163c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e4:	4b5e      	ldr	r3, [pc, #376]	; (8001660 <HAL_GPIO_Init+0x2f0>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a5d      	ldr	r2, [pc, #372]	; (8001660 <HAL_GPIO_Init+0x2f0>)
 80014ea:	f043 0301 	orr.w	r3, r3, #1
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b5b      	ldr	r3, [pc, #364]	; (8001660 <HAL_GPIO_Init+0x2f0>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014fc:	4a59      	ldr	r2, [pc, #356]	; (8001664 <HAL_GPIO_Init+0x2f4>)
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	089b      	lsrs	r3, r3, #2
 8001502:	3302      	adds	r3, #2
 8001504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	220f      	movs	r2, #15
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	43db      	mvns	r3, r3
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	4013      	ands	r3, r2
 800151e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001526:	d025      	beq.n	8001574 <HAL_GPIO_Init+0x204>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a4f      	ldr	r2, [pc, #316]	; (8001668 <HAL_GPIO_Init+0x2f8>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d01f      	beq.n	8001570 <HAL_GPIO_Init+0x200>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a4e      	ldr	r2, [pc, #312]	; (800166c <HAL_GPIO_Init+0x2fc>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d019      	beq.n	800156c <HAL_GPIO_Init+0x1fc>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a4d      	ldr	r2, [pc, #308]	; (8001670 <HAL_GPIO_Init+0x300>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d013      	beq.n	8001568 <HAL_GPIO_Init+0x1f8>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a4c      	ldr	r2, [pc, #304]	; (8001674 <HAL_GPIO_Init+0x304>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d00d      	beq.n	8001564 <HAL_GPIO_Init+0x1f4>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a4b      	ldr	r2, [pc, #300]	; (8001678 <HAL_GPIO_Init+0x308>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d007      	beq.n	8001560 <HAL_GPIO_Init+0x1f0>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a4a      	ldr	r2, [pc, #296]	; (800167c <HAL_GPIO_Init+0x30c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d101      	bne.n	800155c <HAL_GPIO_Init+0x1ec>
 8001558:	2306      	movs	r3, #6
 800155a:	e00c      	b.n	8001576 <HAL_GPIO_Init+0x206>
 800155c:	2307      	movs	r3, #7
 800155e:	e00a      	b.n	8001576 <HAL_GPIO_Init+0x206>
 8001560:	2305      	movs	r3, #5
 8001562:	e008      	b.n	8001576 <HAL_GPIO_Init+0x206>
 8001564:	2304      	movs	r3, #4
 8001566:	e006      	b.n	8001576 <HAL_GPIO_Init+0x206>
 8001568:	2303      	movs	r3, #3
 800156a:	e004      	b.n	8001576 <HAL_GPIO_Init+0x206>
 800156c:	2302      	movs	r3, #2
 800156e:	e002      	b.n	8001576 <HAL_GPIO_Init+0x206>
 8001570:	2301      	movs	r3, #1
 8001572:	e000      	b.n	8001576 <HAL_GPIO_Init+0x206>
 8001574:	2300      	movs	r3, #0
 8001576:	697a      	ldr	r2, [r7, #20]
 8001578:	f002 0203 	and.w	r2, r2, #3
 800157c:	0092      	lsls	r2, r2, #2
 800157e:	4093      	lsls	r3, r2
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001586:	4937      	ldr	r1, [pc, #220]	; (8001664 <HAL_GPIO_Init+0x2f4>)
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	3302      	adds	r3, #2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001594:	4b3a      	ldr	r3, [pc, #232]	; (8001680 <HAL_GPIO_Init+0x310>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d003      	beq.n	80015b8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015b8:	4a31      	ldr	r2, [pc, #196]	; (8001680 <HAL_GPIO_Init+0x310>)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015be:	4b30      	ldr	r3, [pc, #192]	; (8001680 <HAL_GPIO_Init+0x310>)
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	4013      	ands	r3, r2
 80015cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80015da:	693a      	ldr	r2, [r7, #16]
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	4313      	orrs	r3, r2
 80015e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015e2:	4a27      	ldr	r2, [pc, #156]	; (8001680 <HAL_GPIO_Init+0x310>)
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015e8:	4b25      	ldr	r3, [pc, #148]	; (8001680 <HAL_GPIO_Init+0x310>)
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001600:	2b00      	cmp	r3, #0
 8001602:	d003      	beq.n	800160c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	4313      	orrs	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800160c:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <HAL_GPIO_Init+0x310>)
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <HAL_GPIO_Init+0x310>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	43db      	mvns	r3, r3
 800161c:	693a      	ldr	r2, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4313      	orrs	r3, r2
 8001634:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001636:	4a12      	ldr	r2, [pc, #72]	; (8001680 <HAL_GPIO_Init+0x310>)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	3301      	adds	r3, #1
 8001640:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	fa22 f303 	lsr.w	r3, r2, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	f47f ae97 	bne.w	8001380 <HAL_GPIO_Init+0x10>
  }
}
 8001652:	bf00      	nop
 8001654:	bf00      	nop
 8001656:	371c      	adds	r7, #28
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	40021000 	.word	0x40021000
 8001664:	40010000 	.word	0x40010000
 8001668:	48000400 	.word	0x48000400
 800166c:	48000800 	.word	0x48000800
 8001670:	48000c00 	.word	0x48000c00
 8001674:	48001000 	.word	0x48001000
 8001678:	48001400 	.word	0x48001400
 800167c:	48001800 	.word	0x48001800
 8001680:	40010400 	.word	0x40010400

08001684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001684:	b480      	push	{r7}
 8001686:	b085      	sub	sp, #20
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
 800168c:	460b      	mov	r3, r1
 800168e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	887b      	ldrh	r3, [r7, #2]
 8001696:	4013      	ands	r3, r2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
 80016a0:	e001      	b.n	80016a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3714      	adds	r7, #20
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016d2:	887a      	ldrh	r2, [r7, #2]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4013      	ands	r3, r2
 80016fc:	041a      	lsls	r2, r3, #16
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	43d9      	mvns	r1, r3
 8001702:	887b      	ldrh	r3, [r7, #2]
 8001704:	400b      	ands	r3, r1
 8001706:	431a      	orrs	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001724:	695a      	ldr	r2, [r3, #20]
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	4013      	ands	r3, r2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001730:	88fb      	ldrh	r3, [r7, #6]
 8001732:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001734:	88fb      	ldrh	r3, [r7, #6]
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f806 	bl	8001748 <HAL_GPIO_EXTI_Callback>
  }
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	40010400 	.word	0x40010400

08001748 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001752:	bf00      	nop
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
	...

08001760 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001766:	af00      	add	r7, sp, #0
 8001768:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800176c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001770:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001772:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001776:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d102      	bne.n	8001786 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	f001 b83a 	b.w	80027fa <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800178a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0301 	and.w	r3, r3, #1
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 816f 	beq.w	8001a7a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800179c:	4bb5      	ldr	r3, [pc, #724]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f003 030c 	and.w	r3, r3, #12
 80017a4:	2b04      	cmp	r3, #4
 80017a6:	d00c      	beq.n	80017c2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80017a8:	4bb2      	ldr	r3, [pc, #712]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 030c 	and.w	r3, r3, #12
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d15c      	bne.n	800186e <HAL_RCC_OscConfig+0x10e>
 80017b4:	4baf      	ldr	r3, [pc, #700]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80017bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c0:	d155      	bne.n	800186e <HAL_RCC_OscConfig+0x10e>
 80017c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017c6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017d6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017da:	fab3 f383 	clz	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	095b      	lsrs	r3, r3, #5
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d102      	bne.n	80017f4 <HAL_RCC_OscConfig+0x94>
 80017ee:	4ba1      	ldr	r3, [pc, #644]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	e015      	b.n	8001820 <HAL_RCC_OscConfig+0xc0>
 80017f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001808:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800180c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001810:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001814:	fa93 f3a3 	rbit	r3, r3
 8001818:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800181c:	4b95      	ldr	r3, [pc, #596]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 800181e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001820:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001824:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001828:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800182c:	fa92 f2a2 	rbit	r2, r2
 8001830:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001834:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001838:	fab2 f282 	clz	r2, r2
 800183c:	b2d2      	uxtb	r2, r2
 800183e:	f042 0220 	orr.w	r2, r2, #32
 8001842:	b2d2      	uxtb	r2, r2
 8001844:	f002 021f 	and.w	r2, r2, #31
 8001848:	2101      	movs	r1, #1
 800184a:	fa01 f202 	lsl.w	r2, r1, r2
 800184e:	4013      	ands	r3, r2
 8001850:	2b00      	cmp	r3, #0
 8001852:	f000 8111 	beq.w	8001a78 <HAL_RCC_OscConfig+0x318>
 8001856:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800185a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	f040 8108 	bne.w	8001a78 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	f000 bfc6 	b.w	80027fa <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001872:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800187e:	d106      	bne.n	800188e <HAL_RCC_OscConfig+0x12e>
 8001880:	4b7c      	ldr	r3, [pc, #496]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a7b      	ldr	r2, [pc, #492]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 8001886:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	e036      	b.n	80018fc <HAL_RCC_OscConfig+0x19c>
 800188e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001892:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x158>
 800189e:	4b75      	ldr	r3, [pc, #468]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a74      	ldr	r2, [pc, #464]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 80018a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018a8:	6013      	str	r3, [r2, #0]
 80018aa:	4b72      	ldr	r3, [pc, #456]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4a71      	ldr	r2, [pc, #452]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 80018b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018b4:	6013      	str	r3, [r2, #0]
 80018b6:	e021      	b.n	80018fc <HAL_RCC_OscConfig+0x19c>
 80018b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x184>
 80018ca:	4b6a      	ldr	r3, [pc, #424]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a69      	ldr	r2, [pc, #420]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b67      	ldr	r3, [pc, #412]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a66      	ldr	r2, [pc, #408]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 80018dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e00b      	b.n	80018fc <HAL_RCC_OscConfig+0x19c>
 80018e4:	4b63      	ldr	r3, [pc, #396]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a62      	ldr	r2, [pc, #392]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 80018ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b60      	ldr	r3, [pc, #384]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a5f      	ldr	r2, [pc, #380]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 80018f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018fa:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001900:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d059      	beq.n	80019c0 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190c:	f7ff fb9c 	bl	8001048 <HAL_GetTick>
 8001910:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001914:	e00a      	b.n	800192c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001916:	f7ff fb97 	bl	8001048 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b64      	cmp	r3, #100	; 0x64
 8001924:	d902      	bls.n	800192c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	f000 bf67 	b.w	80027fa <HAL_RCC_OscConfig+0x109a>
 800192c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001930:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001934:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001938:	fa93 f3a3 	rbit	r3, r3
 800193c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001940:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001944:	fab3 f383 	clz	r3, r3
 8001948:	b2db      	uxtb	r3, r3
 800194a:	095b      	lsrs	r3, r3, #5
 800194c:	b2db      	uxtb	r3, r3
 800194e:	f043 0301 	orr.w	r3, r3, #1
 8001952:	b2db      	uxtb	r3, r3
 8001954:	2b01      	cmp	r3, #1
 8001956:	d102      	bne.n	800195e <HAL_RCC_OscConfig+0x1fe>
 8001958:	4b46      	ldr	r3, [pc, #280]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	e015      	b.n	800198a <HAL_RCC_OscConfig+0x22a>
 800195e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001962:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001966:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800196a:	fa93 f3a3 	rbit	r3, r3
 800196e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001972:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001976:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800197a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800197e:	fa93 f3a3 	rbit	r3, r3
 8001982:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001986:	4b3b      	ldr	r3, [pc, #236]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800198e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001992:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001996:	fa92 f2a2 	rbit	r2, r2
 800199a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800199e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80019a2:	fab2 f282 	clz	r2, r2
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	f042 0220 	orr.w	r2, r2, #32
 80019ac:	b2d2      	uxtb	r2, r2
 80019ae:	f002 021f 	and.w	r2, r2, #31
 80019b2:	2101      	movs	r1, #1
 80019b4:	fa01 f202 	lsl.w	r2, r1, r2
 80019b8:	4013      	ands	r3, r2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0ab      	beq.n	8001916 <HAL_RCC_OscConfig+0x1b6>
 80019be:	e05c      	b.n	8001a7a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019c0:	f7ff fb42 	bl	8001048 <HAL_GetTick>
 80019c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019c8:	e00a      	b.n	80019e0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ca:	f7ff fb3d 	bl	8001048 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	; 0x64
 80019d8:	d902      	bls.n	80019e0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	f000 bf0d 	b.w	80027fa <HAL_RCC_OscConfig+0x109a>
 80019e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019e4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019e8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80019ec:	fa93 f3a3 	rbit	r3, r3
 80019f0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80019f4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f8:	fab3 f383 	clz	r3, r3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	095b      	lsrs	r3, r3, #5
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d102      	bne.n	8001a12 <HAL_RCC_OscConfig+0x2b2>
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	e015      	b.n	8001a3e <HAL_RCC_OscConfig+0x2de>
 8001a12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a16:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001a1e:	fa93 f3a3 	rbit	r3, r3
 8001a22:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001a26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a2a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a32:	fa93 f3a3 	rbit	r3, r3
 8001a36:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <HAL_RCC_OscConfig+0x314>)
 8001a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a42:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001a46:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001a4a:	fa92 f2a2 	rbit	r2, r2
 8001a4e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001a52:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a56:	fab2 f282 	clz	r2, r2
 8001a5a:	b2d2      	uxtb	r2, r2
 8001a5c:	f042 0220 	orr.w	r2, r2, #32
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	f002 021f 	and.w	r2, r2, #31
 8001a66:	2101      	movs	r1, #1
 8001a68:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1ab      	bne.n	80019ca <HAL_RCC_OscConfig+0x26a>
 8001a72:	e002      	b.n	8001a7a <HAL_RCC_OscConfig+0x31a>
 8001a74:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	f000 817f 	beq.w	8001d8e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a90:	4ba7      	ldr	r3, [pc, #668]	; (8001d30 <HAL_RCC_OscConfig+0x5d0>)
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	f003 030c 	and.w	r3, r3, #12
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d00c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a9c:	4ba4      	ldr	r3, [pc, #656]	; (8001d30 <HAL_RCC_OscConfig+0x5d0>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f003 030c 	and.w	r3, r3, #12
 8001aa4:	2b08      	cmp	r3, #8
 8001aa6:	d173      	bne.n	8001b90 <HAL_RCC_OscConfig+0x430>
 8001aa8:	4ba1      	ldr	r3, [pc, #644]	; (8001d30 <HAL_RCC_OscConfig+0x5d0>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ab4:	d16c      	bne.n	8001b90 <HAL_RCC_OscConfig+0x430>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001abc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001ac0:	fa93 f3a3 	rbit	r3, r3
 8001ac4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001ac8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d102      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x386>
 8001ae0:	4b93      	ldr	r3, [pc, #588]	; (8001d30 <HAL_RCC_OscConfig+0x5d0>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	e013      	b.n	8001b0e <HAL_RCC_OscConfig+0x3ae>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001af8:	2302      	movs	r3, #2
 8001afa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001afe:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001b02:	fa93 f3a3 	rbit	r3, r3
 8001b06:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001b0a:	4b89      	ldr	r3, [pc, #548]	; (8001d30 <HAL_RCC_OscConfig+0x5d0>)
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001b14:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001b18:	fa92 f2a2 	rbit	r2, r2
 8001b1c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001b20:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001b24:	fab2 f282 	clz	r2, r2
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	f042 0220 	orr.w	r2, r2, #32
 8001b2e:	b2d2      	uxtb	r2, r2
 8001b30:	f002 021f 	and.w	r2, r2, #31
 8001b34:	2101      	movs	r1, #1
 8001b36:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00a      	beq.n	8001b56 <HAL_RCC_OscConfig+0x3f6>
 8001b40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d002      	beq.n	8001b56 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	f000 be52 	b.w	80027fa <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b56:	4b76      	ldr	r3, [pc, #472]	; (8001d30 <HAL_RCC_OscConfig+0x5d0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	21f8      	movs	r1, #248	; 0xf8
 8001b6c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001b74:	fa91 f1a1 	rbit	r1, r1
 8001b78:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001b7c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b80:	fab1 f181 	clz	r1, r1
 8001b84:	b2c9      	uxtb	r1, r1
 8001b86:	408b      	lsls	r3, r1
 8001b88:	4969      	ldr	r1, [pc, #420]	; (8001d30 <HAL_RCC_OscConfig+0x5d0>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b8e:	e0fe      	b.n	8001d8e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 8088 	beq.w	8001cb2 <HAL_RCC_OscConfig+0x552>
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001bb4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bb8:	fab3 f383 	clz	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bc2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	461a      	mov	r2, r3
 8001bca:	2301      	movs	r3, #1
 8001bcc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bce:	f7ff fa3b 	bl	8001048 <HAL_GetTick>
 8001bd2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bd8:	f7ff fa36 	bl	8001048 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d902      	bls.n	8001bee <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	f000 be06 	b.w	80027fa <HAL_RCC_OscConfig+0x109a>
 8001bee:	2302      	movs	r3, #2
 8001bf0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001bf8:	fa93 f3a3 	rbit	r3, r3
 8001bfc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001c00:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c04:	fab3 f383 	clz	r3, r3
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	095b      	lsrs	r3, r3, #5
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	f043 0301 	orr.w	r3, r3, #1
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d102      	bne.n	8001c1e <HAL_RCC_OscConfig+0x4be>
 8001c18:	4b45      	ldr	r3, [pc, #276]	; (8001d30 <HAL_RCC_OscConfig+0x5d0>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	e013      	b.n	8001c46 <HAL_RCC_OscConfig+0x4e6>
 8001c1e:	2302      	movs	r3, #2
 8001c20:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c24:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001c28:	fa93 f3a3 	rbit	r3, r3
 8001c2c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001c30:	2302      	movs	r3, #2
 8001c32:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c36:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001c3a:	fa93 f3a3 	rbit	r3, r3
 8001c3e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c42:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <HAL_RCC_OscConfig+0x5d0>)
 8001c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c46:	2202      	movs	r2, #2
 8001c48:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001c4c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001c50:	fa92 f2a2 	rbit	r2, r2
 8001c54:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001c58:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c5c:	fab2 f282 	clz	r2, r2
 8001c60:	b2d2      	uxtb	r2, r2
 8001c62:	f042 0220 	orr.w	r2, r2, #32
 8001c66:	b2d2      	uxtb	r2, r2
 8001c68:	f002 021f 	and.w	r2, r2, #31
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d0af      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c78:	4b2d      	ldr	r3, [pc, #180]	; (8001d30 <HAL_RCC_OscConfig+0x5d0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c84:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	21f8      	movs	r1, #248	; 0xf8
 8001c8e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001c96:	fa91 f1a1 	rbit	r1, r1
 8001c9a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001c9e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001ca2:	fab1 f181 	clz	r1, r1
 8001ca6:	b2c9      	uxtb	r1, r1
 8001ca8:	408b      	lsls	r3, r1
 8001caa:	4921      	ldr	r1, [pc, #132]	; (8001d30 <HAL_RCC_OscConfig+0x5d0>)
 8001cac:	4313      	orrs	r3, r2
 8001cae:	600b      	str	r3, [r1, #0]
 8001cb0:	e06d      	b.n	8001d8e <HAL_RCC_OscConfig+0x62e>
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001cc4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cc8:	fab3 f383 	clz	r3, r3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001cd2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	461a      	mov	r2, r3
 8001cda:	2300      	movs	r3, #0
 8001cdc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cde:	f7ff f9b3 	bl	8001048 <HAL_GetTick>
 8001ce2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ce6:	e00a      	b.n	8001cfe <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ce8:	f7ff f9ae 	bl	8001048 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d902      	bls.n	8001cfe <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	f000 bd7e 	b.w	80027fa <HAL_RCC_OscConfig+0x109a>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001d08:	fa93 f3a3 	rbit	r3, r3
 8001d0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001d10:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d14:	fab3 f383 	clz	r3, r3
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	095b      	lsrs	r3, r3, #5
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	b2db      	uxtb	r3, r3
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d105      	bne.n	8001d34 <HAL_RCC_OscConfig+0x5d4>
 8001d28:	4b01      	ldr	r3, [pc, #4]	; (8001d30 <HAL_RCC_OscConfig+0x5d0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	e016      	b.n	8001d5c <HAL_RCC_OscConfig+0x5fc>
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000
 8001d34:	2302      	movs	r3, #2
 8001d36:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d3e:	fa93 f3a3 	rbit	r3, r3
 8001d42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d46:	2302      	movs	r3, #2
 8001d48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d4c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d50:	fa93 f3a3 	rbit	r3, r3
 8001d54:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d58:	4bbf      	ldr	r3, [pc, #764]	; (8002058 <HAL_RCC_OscConfig+0x8f8>)
 8001d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5c:	2202      	movs	r2, #2
 8001d5e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001d62:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001d66:	fa92 f2a2 	rbit	r2, r2
 8001d6a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001d6e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d72:	fab2 f282 	clz	r2, r2
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	f042 0220 	orr.w	r2, r2, #32
 8001d7c:	b2d2      	uxtb	r2, r2
 8001d7e:	f002 021f 	and.w	r2, r2, #31
 8001d82:	2101      	movs	r1, #1
 8001d84:	fa01 f202 	lsl.w	r2, r1, r2
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1ac      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d8e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d92:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8113 	beq.w	8001fca <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001da8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695b      	ldr	r3, [r3, #20]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d07c      	beq.n	8001eae <HAL_RCC_OscConfig+0x74e>
 8001db4:	2301      	movs	r3, #1
 8001db6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001dbe:	fa93 f3a3 	rbit	r3, r3
 8001dc2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001dc6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4ba2      	ldr	r3, [pc, #648]	; (800205c <HAL_RCC_OscConfig+0x8fc>)
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2301      	movs	r3, #1
 8001ddc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7ff f933 	bl	8001048 <HAL_GetTick>
 8001de2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001de6:	e00a      	b.n	8001dfe <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001de8:	f7ff f92e 	bl	8001048 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d902      	bls.n	8001dfe <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	f000 bcfe 	b.w	80027fa <HAL_RCC_OscConfig+0x109a>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001e08:	fa93 f2a3 	rbit	r2, r3
 8001e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e10:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e1e:	2202      	movs	r2, #2
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	fa93 f2a3 	rbit	r2, r3
 8001e30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e38:	601a      	str	r2, [r3, #0]
 8001e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e42:	2202      	movs	r2, #2
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	fa93 f2a3 	rbit	r2, r3
 8001e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e58:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e5c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5e:	4b7e      	ldr	r3, [pc, #504]	; (8002058 <HAL_RCC_OscConfig+0x8f8>)
 8001e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e62:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e66:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e6a:	2102      	movs	r1, #2
 8001e6c:	6019      	str	r1, [r3, #0]
 8001e6e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e72:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	fa93 f1a3 	rbit	r1, r3
 8001e7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e84:	6019      	str	r1, [r3, #0]
  return result;
 8001e86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	fab3 f383 	clz	r3, r3
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f003 031f 	and.w	r3, r3, #31
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d09d      	beq.n	8001de8 <HAL_RCC_OscConfig+0x688>
 8001eac:	e08d      	b.n	8001fca <HAL_RCC_OscConfig+0x86a>
 8001eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eb2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ebe:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	fa93 f2a3 	rbit	r2, r3
 8001ec8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ecc:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ed0:	601a      	str	r2, [r3, #0]
  return result;
 8001ed2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ed6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001eda:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001edc:	fab3 f383 	clz	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4b5d      	ldr	r3, [pc, #372]	; (800205c <HAL_RCC_OscConfig+0x8fc>)
 8001ee6:	4413      	add	r3, r2
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	461a      	mov	r2, r3
 8001eec:	2300      	movs	r3, #0
 8001eee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef0:	f7ff f8aa 	bl	8001048 <HAL_GetTick>
 8001ef4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001efa:	f7ff f8a5 	bl	8001048 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d902      	bls.n	8001f10 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	f000 bc75 	b.w	80027fa <HAL_RCC_OscConfig+0x109a>
 8001f10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f14:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f18:	2202      	movs	r2, #2
 8001f1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f20:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	fa93 f2a3 	rbit	r2, r3
 8001f2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	fa93 f2a3 	rbit	r2, r3
 8001f4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f60:	2202      	movs	r2, #2
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f68:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	fa93 f2a3 	rbit	r2, r3
 8001f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f76:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f7a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7c:	4b36      	ldr	r3, [pc, #216]	; (8002058 <HAL_RCC_OscConfig+0x8f8>)
 8001f7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f84:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f88:	2102      	movs	r1, #2
 8001f8a:	6019      	str	r1, [r3, #0]
 8001f8c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	fa93 f1a3 	rbit	r1, r3
 8001f9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f9e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001fa2:	6019      	str	r1, [r3, #0]
  return result;
 8001fa4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	fab3 f383 	clz	r3, r3
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	f003 031f 	and.w	r3, r3, #31
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d197      	bne.n	8001efa <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 81a5 	beq.w	800232a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fe6:	4b1c      	ldr	r3, [pc, #112]	; (8002058 <HAL_RCC_OscConfig+0x8f8>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d116      	bne.n	8002020 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_RCC_OscConfig+0x8f8>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	4a18      	ldr	r2, [pc, #96]	; (8002058 <HAL_RCC_OscConfig+0x8f8>)
 8001ff8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	61d3      	str	r3, [r2, #28]
 8001ffe:	4b16      	ldr	r3, [pc, #88]	; (8002058 <HAL_RCC_OscConfig+0x8f8>)
 8002000:	69db      	ldr	r3, [r3, #28]
 8002002:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002006:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800200a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002014:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002018:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800201a:	2301      	movs	r3, #1
 800201c:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b0f      	ldr	r3, [pc, #60]	; (8002060 <HAL_RCC_OscConfig+0x900>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d121      	bne.n	8002070 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800202c:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <HAL_RCC_OscConfig+0x900>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <HAL_RCC_OscConfig+0x900>)
 8002032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002036:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002038:	f7ff f806 	bl	8001048 <HAL_GetTick>
 800203c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002040:	e010      	b.n	8002064 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002042:	f7ff f801 	bl	8001048 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b64      	cmp	r3, #100	; 0x64
 8002050:	d908      	bls.n	8002064 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e3d1      	b.n	80027fa <HAL_RCC_OscConfig+0x109a>
 8002056:	bf00      	nop
 8002058:	40021000 	.word	0x40021000
 800205c:	10908120 	.word	0x10908120
 8002060:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002064:	4b8d      	ldr	r3, [pc, #564]	; (800229c <HAL_RCC_OscConfig+0xb3c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0e8      	beq.n	8002042 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002070:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002074:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d106      	bne.n	800208e <HAL_RCC_OscConfig+0x92e>
 8002080:	4b87      	ldr	r3, [pc, #540]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a86      	ldr	r2, [pc, #536]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 8002086:	f043 0301 	orr.w	r3, r3, #1
 800208a:	6213      	str	r3, [r2, #32]
 800208c:	e035      	b.n	80020fa <HAL_RCC_OscConfig+0x99a>
 800208e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002092:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x958>
 800209e:	4b80      	ldr	r3, [pc, #512]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 80020a0:	6a1b      	ldr	r3, [r3, #32]
 80020a2:	4a7f      	ldr	r2, [pc, #508]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6213      	str	r3, [r2, #32]
 80020aa:	4b7d      	ldr	r3, [pc, #500]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4a7c      	ldr	r2, [pc, #496]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 80020b0:	f023 0304 	bic.w	r3, r3, #4
 80020b4:	6213      	str	r3, [r2, #32]
 80020b6:	e020      	b.n	80020fa <HAL_RCC_OscConfig+0x99a>
 80020b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b05      	cmp	r3, #5
 80020c6:	d10c      	bne.n	80020e2 <HAL_RCC_OscConfig+0x982>
 80020c8:	4b75      	ldr	r3, [pc, #468]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 80020ca:	6a1b      	ldr	r3, [r3, #32]
 80020cc:	4a74      	ldr	r2, [pc, #464]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 80020ce:	f043 0304 	orr.w	r3, r3, #4
 80020d2:	6213      	str	r3, [r2, #32]
 80020d4:	4b72      	ldr	r3, [pc, #456]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	4a71      	ldr	r2, [pc, #452]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 80020da:	f043 0301 	orr.w	r3, r3, #1
 80020de:	6213      	str	r3, [r2, #32]
 80020e0:	e00b      	b.n	80020fa <HAL_RCC_OscConfig+0x99a>
 80020e2:	4b6f      	ldr	r3, [pc, #444]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a6e      	ldr	r2, [pc, #440]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 80020e8:	f023 0301 	bic.w	r3, r3, #1
 80020ec:	6213      	str	r3, [r2, #32]
 80020ee:	4b6c      	ldr	r3, [pc, #432]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 80020f0:	6a1b      	ldr	r3, [r3, #32]
 80020f2:	4a6b      	ldr	r2, [pc, #428]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 80020f4:	f023 0304 	bic.w	r3, r3, #4
 80020f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8081 	beq.w	800220e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210c:	f7fe ff9c 	bl	8001048 <HAL_GetTick>
 8002110:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002114:	e00b      	b.n	800212e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002116:	f7fe ff97 	bl	8001048 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	f241 3288 	movw	r2, #5000	; 0x1388
 8002126:	4293      	cmp	r3, r2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e365      	b.n	80027fa <HAL_RCC_OscConfig+0x109a>
 800212e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002132:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002136:	2202      	movs	r2, #2
 8002138:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800213e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	fa93 f2a3 	rbit	r2, r3
 8002148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800214c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002150:	601a      	str	r2, [r3, #0]
 8002152:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002156:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800215a:	2202      	movs	r2, #2
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002162:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	fa93 f2a3 	rbit	r2, r3
 800216c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002170:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002174:	601a      	str	r2, [r3, #0]
  return result;
 8002176:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800217e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f043 0302 	orr.w	r3, r3, #2
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d102      	bne.n	800219a <HAL_RCC_OscConfig+0xa3a>
 8002194:	4b42      	ldr	r3, [pc, #264]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	e013      	b.n	80021c2 <HAL_RCC_OscConfig+0xa62>
 800219a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800219e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80021a2:	2202      	movs	r2, #2
 80021a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021aa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	fa93 f2a3 	rbit	r2, r3
 80021b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b8:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	4b38      	ldr	r3, [pc, #224]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021c6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021ca:	2102      	movs	r1, #2
 80021cc:	6011      	str	r1, [r2, #0]
 80021ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021d2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021d6:	6812      	ldr	r2, [r2, #0]
 80021d8:	fa92 f1a2 	rbit	r1, r2
 80021dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021e0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80021e4:	6011      	str	r1, [r2, #0]
  return result;
 80021e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021ea:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80021ee:	6812      	ldr	r2, [r2, #0]
 80021f0:	fab2 f282 	clz	r2, r2
 80021f4:	b2d2      	uxtb	r2, r2
 80021f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	f002 021f 	and.w	r2, r2, #31
 8002200:	2101      	movs	r1, #1
 8002202:	fa01 f202 	lsl.w	r2, r1, r2
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d084      	beq.n	8002116 <HAL_RCC_OscConfig+0x9b6>
 800220c:	e083      	b.n	8002316 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800220e:	f7fe ff1b 	bl	8001048 <HAL_GetTick>
 8002212:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002216:	e00b      	b.n	8002230 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002218:	f7fe ff16 	bl	8001048 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	f241 3288 	movw	r2, #5000	; 0x1388
 8002228:	4293      	cmp	r3, r2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e2e4      	b.n	80027fa <HAL_RCC_OscConfig+0x109a>
 8002230:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002234:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002238:	2202      	movs	r2, #2
 800223a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002240:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	fa93 f2a3 	rbit	r2, r3
 800224a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800224e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002258:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800225c:	2202      	movs	r2, #2
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002264:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	fa93 f2a3 	rbit	r2, r3
 800226e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002272:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002276:	601a      	str	r2, [r3, #0]
  return result;
 8002278:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800227c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002280:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002282:	fab3 f383 	clz	r3, r3
 8002286:	b2db      	uxtb	r3, r3
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f043 0302 	orr.w	r3, r3, #2
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b02      	cmp	r3, #2
 8002294:	d106      	bne.n	80022a4 <HAL_RCC_OscConfig+0xb44>
 8002296:	4b02      	ldr	r3, [pc, #8]	; (80022a0 <HAL_RCC_OscConfig+0xb40>)
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	e017      	b.n	80022cc <HAL_RCC_OscConfig+0xb6c>
 800229c:	40007000 	.word	0x40007000
 80022a0:	40021000 	.word	0x40021000
 80022a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80022ac:	2202      	movs	r2, #2
 80022ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022b4:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	fa93 f2a3 	rbit	r2, r3
 80022be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022c2:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	4bb3      	ldr	r3, [pc, #716]	; (8002598 <HAL_RCC_OscConfig+0xe38>)
 80022ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022cc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022d0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022d4:	2102      	movs	r1, #2
 80022d6:	6011      	str	r1, [r2, #0]
 80022d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022dc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	fa92 f1a2 	rbit	r1, r2
 80022e6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022ea:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80022ee:	6011      	str	r1, [r2, #0]
  return result;
 80022f0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022f4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80022f8:	6812      	ldr	r2, [r2, #0]
 80022fa:	fab2 f282 	clz	r2, r2
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002304:	b2d2      	uxtb	r2, r2
 8002306:	f002 021f 	and.w	r2, r2, #31
 800230a:	2101      	movs	r1, #1
 800230c:	fa01 f202 	lsl.w	r2, r1, r2
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d180      	bne.n	8002218 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002316:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800231a:	2b01      	cmp	r3, #1
 800231c:	d105      	bne.n	800232a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231e:	4b9e      	ldr	r3, [pc, #632]	; (8002598 <HAL_RCC_OscConfig+0xe38>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a9d      	ldr	r2, [pc, #628]	; (8002598 <HAL_RCC_OscConfig+0xe38>)
 8002324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002328:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800232a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800232e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 825e 	beq.w	80027f8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800233c:	4b96      	ldr	r3, [pc, #600]	; (8002598 <HAL_RCC_OscConfig+0xe38>)
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 030c 	and.w	r3, r3, #12
 8002344:	2b08      	cmp	r3, #8
 8002346:	f000 821f 	beq.w	8002788 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800234a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800234e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699b      	ldr	r3, [r3, #24]
 8002356:	2b02      	cmp	r3, #2
 8002358:	f040 8170 	bne.w	800263c <HAL_RCC_OscConfig+0xedc>
 800235c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002360:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002364:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002368:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800236e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	fa93 f2a3 	rbit	r2, r3
 8002378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800237c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002380:	601a      	str	r2, [r3, #0]
  return result;
 8002382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002386:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800238a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002396:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	461a      	mov	r2, r3
 800239e:	2300      	movs	r3, #0
 80023a0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a2:	f7fe fe51 	bl	8001048 <HAL_GetTick>
 80023a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023aa:	e009      	b.n	80023c0 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe fe4c 	bl	8001048 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e21c      	b.n	80027fa <HAL_RCC_OscConfig+0x109a>
 80023c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	fa93 f2a3 	rbit	r2, r3
 80023dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023e4:	601a      	str	r2, [r3, #0]
  return result;
 80023e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ea:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f0:	fab3 f383 	clz	r3, r3
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	095b      	lsrs	r3, r3, #5
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f043 0301 	orr.w	r3, r3, #1
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d102      	bne.n	800240a <HAL_RCC_OscConfig+0xcaa>
 8002404:	4b64      	ldr	r3, [pc, #400]	; (8002598 <HAL_RCC_OscConfig+0xe38>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	e027      	b.n	800245a <HAL_RCC_OscConfig+0xcfa>
 800240a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002412:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002418:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241c:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	fa93 f2a3 	rbit	r2, r3
 8002426:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800242a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800242e:	601a      	str	r2, [r3, #0]
 8002430:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002434:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002438:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002442:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	fa93 f2a3 	rbit	r2, r3
 800244c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002450:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002454:	601a      	str	r2, [r3, #0]
 8002456:	4b50      	ldr	r3, [pc, #320]	; (8002598 <HAL_RCC_OscConfig+0xe38>)
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800245e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002462:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002466:	6011      	str	r1, [r2, #0]
 8002468:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800246c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	fa92 f1a2 	rbit	r1, r2
 8002476:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800247a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800247e:	6011      	str	r1, [r2, #0]
  return result;
 8002480:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002484:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002488:	6812      	ldr	r2, [r2, #0]
 800248a:	fab2 f282 	clz	r2, r2
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f042 0220 	orr.w	r2, r2, #32
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	f002 021f 	and.w	r2, r2, #31
 800249a:	2101      	movs	r1, #1
 800249c:	fa01 f202 	lsl.w	r2, r1, r2
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d182      	bne.n	80023ac <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a6:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <HAL_RCC_OscConfig+0xe38>)
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024aa:	f023 020f 	bic.w	r2, r3, #15
 80024ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	4937      	ldr	r1, [pc, #220]	; (8002598 <HAL_RCC_OscConfig+0xe38>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	62cb      	str	r3, [r1, #44]	; 0x2c
 80024c0:	4b35      	ldr	r3, [pc, #212]	; (8002598 <HAL_RCC_OscConfig+0xe38>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80024c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6a19      	ldr	r1, [r3, #32]
 80024d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	430b      	orrs	r3, r1
 80024e2:	492d      	ldr	r1, [pc, #180]	; (8002598 <HAL_RCC_OscConfig+0xe38>)
 80024e4:	4313      	orrs	r3, r2
 80024e6:	604b      	str	r3, [r1, #4]
 80024e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ec:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024fa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	fa93 f2a3 	rbit	r2, r3
 8002504:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002508:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800250c:	601a      	str	r2, [r3, #0]
  return result;
 800250e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002512:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002516:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002522:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	461a      	mov	r2, r3
 800252a:	2301      	movs	r3, #1
 800252c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe fd8b 	bl	8001048 <HAL_GetTick>
 8002532:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002536:	e009      	b.n	800254c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002538:	f7fe fd86 	bl	8001048 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002542:	1ad3      	subs	r3, r2, r3
 8002544:	2b02      	cmp	r3, #2
 8002546:	d901      	bls.n	800254c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002548:	2303      	movs	r3, #3
 800254a:	e156      	b.n	80027fa <HAL_RCC_OscConfig+0x109a>
 800254c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002550:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002554:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002558:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800255e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	fa93 f2a3 	rbit	r2, r3
 8002568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800256c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002570:	601a      	str	r2, [r3, #0]
  return result;
 8002572:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002576:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800257a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800257c:	fab3 f383 	clz	r3, r3
 8002580:	b2db      	uxtb	r3, r3
 8002582:	095b      	lsrs	r3, r3, #5
 8002584:	b2db      	uxtb	r3, r3
 8002586:	f043 0301 	orr.w	r3, r3, #1
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b01      	cmp	r3, #1
 800258e:	d105      	bne.n	800259c <HAL_RCC_OscConfig+0xe3c>
 8002590:	4b01      	ldr	r3, [pc, #4]	; (8002598 <HAL_RCC_OscConfig+0xe38>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	e02a      	b.n	80025ec <HAL_RCC_OscConfig+0xe8c>
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000
 800259c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025a0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80025a4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ae:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	fa93 f2a3 	rbit	r2, r3
 80025b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025bc:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80025c0:	601a      	str	r2, [r3, #0]
 80025c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025c6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80025ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025d4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	fa93 f2a3 	rbit	r2, r3
 80025de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025e2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	4b86      	ldr	r3, [pc, #536]	; (8002804 <HAL_RCC_OscConfig+0x10a4>)
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025f0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025f4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025f8:	6011      	str	r1, [r2, #0]
 80025fa:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025fe:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	fa92 f1a2 	rbit	r1, r2
 8002608:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800260c:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8002610:	6011      	str	r1, [r2, #0]
  return result;
 8002612:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002616:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 800261a:	6812      	ldr	r2, [r2, #0]
 800261c:	fab2 f282 	clz	r2, r2
 8002620:	b2d2      	uxtb	r2, r2
 8002622:	f042 0220 	orr.w	r2, r2, #32
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	f002 021f 	and.w	r2, r2, #31
 800262c:	2101      	movs	r1, #1
 800262e:	fa01 f202 	lsl.w	r2, r1, r2
 8002632:	4013      	ands	r3, r2
 8002634:	2b00      	cmp	r3, #0
 8002636:	f43f af7f 	beq.w	8002538 <HAL_RCC_OscConfig+0xdd8>
 800263a:	e0dd      	b.n	80027f8 <HAL_RCC_OscConfig+0x1098>
 800263c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002640:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002644:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002648:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800264e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	fa93 f2a3 	rbit	r2, r3
 8002658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800265c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002660:	601a      	str	r2, [r3, #0]
  return result;
 8002662:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002666:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800266a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002676:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	461a      	mov	r2, r3
 800267e:	2300      	movs	r3, #0
 8002680:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002682:	f7fe fce1 	bl	8001048 <HAL_GetTick>
 8002686:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268a:	e009      	b.n	80026a0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe fcdc 	bl	8001048 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e0ac      	b.n	80027fa <HAL_RCC_OscConfig+0x109a>
 80026a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026b2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	fa93 f2a3 	rbit	r2, r3
 80026bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026c4:	601a      	str	r2, [r3, #0]
  return result;
 80026c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ca:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d0:	fab3 f383 	clz	r3, r3
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d102      	bne.n	80026ea <HAL_RCC_OscConfig+0xf8a>
 80026e4:	4b47      	ldr	r3, [pc, #284]	; (8002804 <HAL_RCC_OscConfig+0x10a4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	e027      	b.n	800273a <HAL_RCC_OscConfig+0xfda>
 80026ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ee:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800270a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002714:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002718:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002722:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	fa93 f2a3 	rbit	r2, r3
 800272c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002730:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	4b33      	ldr	r3, [pc, #204]	; (8002804 <HAL_RCC_OscConfig+0x10a4>)
 8002738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800273e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002742:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002746:	6011      	str	r1, [r2, #0]
 8002748:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800274c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	fa92 f1a2 	rbit	r1, r2
 8002756:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800275a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800275e:	6011      	str	r1, [r2, #0]
  return result;
 8002760:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002764:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	fab2 f282 	clz	r2, r2
 800276e:	b2d2      	uxtb	r2, r2
 8002770:	f042 0220 	orr.w	r2, r2, #32
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	f002 021f 	and.w	r2, r2, #31
 800277a:	2101      	movs	r1, #1
 800277c:	fa01 f202 	lsl.w	r2, r1, r2
 8002780:	4013      	ands	r3, r2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d182      	bne.n	800268c <HAL_RCC_OscConfig+0xf2c>
 8002786:	e037      	b.n	80027f8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800278c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	2b01      	cmp	r3, #1
 8002796:	d101      	bne.n	800279c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e02e      	b.n	80027fa <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <HAL_RCC_OscConfig+0x10a4>)
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80027a4:	4b17      	ldr	r3, [pc, #92]	; (8002804 <HAL_RCC_OscConfig+0x10a4>)
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80027b0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80027b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d117      	bne.n	80027f4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80027c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80027c8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027d8:	429a      	cmp	r2, r3
 80027da:	d10b      	bne.n	80027f4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80027dc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027e0:	f003 020f 	and.w	r2, r3, #15
 80027e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d001      	beq.n	80027f8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e000      	b.n	80027fa <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000

08002808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b09e      	sub	sp, #120	; 0x78
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002812:	2300      	movs	r3, #0
 8002814:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e162      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002820:	4b90      	ldr	r3, [pc, #576]	; (8002a64 <HAL_RCC_ClockConfig+0x25c>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	429a      	cmp	r2, r3
 800282c:	d910      	bls.n	8002850 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800282e:	4b8d      	ldr	r3, [pc, #564]	; (8002a64 <HAL_RCC_ClockConfig+0x25c>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 0207 	bic.w	r2, r3, #7
 8002836:	498b      	ldr	r1, [pc, #556]	; (8002a64 <HAL_RCC_ClockConfig+0x25c>)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	4313      	orrs	r3, r2
 800283c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800283e:	4b89      	ldr	r3, [pc, #548]	; (8002a64 <HAL_RCC_ClockConfig+0x25c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0307 	and.w	r3, r3, #7
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d001      	beq.n	8002850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e14a      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	4b82      	ldr	r3, [pc, #520]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	497f      	ldr	r1, [pc, #508]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 800286a:	4313      	orrs	r3, r2
 800286c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	f000 80dc 	beq.w	8002a34 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d13c      	bne.n	80028fe <HAL_RCC_ClockConfig+0xf6>
 8002884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002888:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002894:	fab3 f383 	clz	r3, r3
 8002898:	b2db      	uxtb	r3, r3
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f043 0301 	orr.w	r3, r3, #1
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d102      	bne.n	80028ae <HAL_RCC_ClockConfig+0xa6>
 80028a8:	4b6f      	ldr	r3, [pc, #444]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	e00f      	b.n	80028ce <HAL_RCC_ClockConfig+0xc6>
 80028ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028b6:	fa93 f3a3 	rbit	r3, r3
 80028ba:	667b      	str	r3, [r7, #100]	; 0x64
 80028bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80028c0:	663b      	str	r3, [r7, #96]	; 0x60
 80028c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028c4:	fa93 f3a3 	rbit	r3, r3
 80028c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028ca:	4b67      	ldr	r3, [pc, #412]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 80028cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80028d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028d6:	fa92 f2a2 	rbit	r2, r2
 80028da:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80028dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028de:	fab2 f282 	clz	r2, r2
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	f042 0220 	orr.w	r2, r2, #32
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	f002 021f 	and.w	r2, r2, #31
 80028ee:	2101      	movs	r1, #1
 80028f0:	fa01 f202 	lsl.w	r2, r1, r2
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d17b      	bne.n	80029f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e0f3      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d13c      	bne.n	8002980 <HAL_RCC_ClockConfig+0x178>
 8002906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002916:	fab3 f383 	clz	r3, r3
 800291a:	b2db      	uxtb	r3, r3
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	b2db      	uxtb	r3, r3
 8002920:	f043 0301 	orr.w	r3, r3, #1
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b01      	cmp	r3, #1
 8002928:	d102      	bne.n	8002930 <HAL_RCC_ClockConfig+0x128>
 800292a:	4b4f      	ldr	r3, [pc, #316]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	e00f      	b.n	8002950 <HAL_RCC_ClockConfig+0x148>
 8002930:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002934:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002938:	fa93 f3a3 	rbit	r3, r3
 800293c:	647b      	str	r3, [r7, #68]	; 0x44
 800293e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002942:	643b      	str	r3, [r7, #64]	; 0x40
 8002944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002946:	fa93 f3a3 	rbit	r3, r3
 800294a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800294c:	4b46      	ldr	r3, [pc, #280]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002954:	63ba      	str	r2, [r7, #56]	; 0x38
 8002956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002958:	fa92 f2a2 	rbit	r2, r2
 800295c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800295e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002960:	fab2 f282 	clz	r2, r2
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	f042 0220 	orr.w	r2, r2, #32
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	f002 021f 	and.w	r2, r2, #31
 8002970:	2101      	movs	r1, #1
 8002972:	fa01 f202 	lsl.w	r2, r1, r2
 8002976:	4013      	ands	r3, r2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d13a      	bne.n	80029f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e0b2      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x2de>
 8002980:	2302      	movs	r3, #2
 8002982:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800298c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800298e:	fab3 f383 	clz	r3, r3
 8002992:	b2db      	uxtb	r3, r3
 8002994:	095b      	lsrs	r3, r3, #5
 8002996:	b2db      	uxtb	r3, r3
 8002998:	f043 0301 	orr.w	r3, r3, #1
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d102      	bne.n	80029a8 <HAL_RCC_ClockConfig+0x1a0>
 80029a2:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	e00d      	b.n	80029c4 <HAL_RCC_ClockConfig+0x1bc>
 80029a8:	2302      	movs	r3, #2
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ae:	fa93 f3a3 	rbit	r3, r3
 80029b2:	627b      	str	r3, [r7, #36]	; 0x24
 80029b4:	2302      	movs	r3, #2
 80029b6:	623b      	str	r3, [r7, #32]
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	fa93 f3a3 	rbit	r3, r3
 80029be:	61fb      	str	r3, [r7, #28]
 80029c0:	4b29      	ldr	r3, [pc, #164]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	2202      	movs	r2, #2
 80029c6:	61ba      	str	r2, [r7, #24]
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	fa92 f2a2 	rbit	r2, r2
 80029ce:	617a      	str	r2, [r7, #20]
  return result;
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	fab2 f282 	clz	r2, r2
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	f042 0220 	orr.w	r2, r2, #32
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	f002 021f 	and.w	r2, r2, #31
 80029e2:	2101      	movs	r1, #1
 80029e4:	fa01 f202 	lsl.w	r2, r1, r2
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e079      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f023 0203 	bic.w	r2, r3, #3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	491a      	ldr	r1, [pc, #104]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 8002a00:	4313      	orrs	r3, r2
 8002a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a04:	f7fe fb20 	bl	8001048 <HAL_GetTick>
 8002a08:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	e00a      	b.n	8002a22 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a0c:	f7fe fb1c 	bl	8001048 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e061      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a22:	4b11      	ldr	r3, [pc, #68]	; (8002a68 <HAL_RCC_ClockConfig+0x260>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f003 020c 	and.w	r2, r3, #12
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d1eb      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_RCC_ClockConfig+0x25c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	683a      	ldr	r2, [r7, #0]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d214      	bcs.n	8002a6c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a42:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <HAL_RCC_ClockConfig+0x25c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f023 0207 	bic.w	r2, r3, #7
 8002a4a:	4906      	ldr	r1, [pc, #24]	; (8002a64 <HAL_RCC_ClockConfig+0x25c>)
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a52:	4b04      	ldr	r3, [pc, #16]	; (8002a64 <HAL_RCC_ClockConfig+0x25c>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0307 	and.w	r3, r3, #7
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d005      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	e040      	b.n	8002ae6 <HAL_RCC_ClockConfig+0x2de>
 8002a64:	40022000 	.word	0x40022000
 8002a68:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a78:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <HAL_RCC_ClockConfig+0x2e8>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	491a      	ldr	r1, [pc, #104]	; (8002af0 <HAL_RCC_ClockConfig+0x2e8>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a96:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <HAL_RCC_ClockConfig+0x2e8>)
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4912      	ldr	r1, [pc, #72]	; (8002af0 <HAL_RCC_ClockConfig+0x2e8>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002aaa:	f000 f829 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8002aae:	4601      	mov	r1, r0
 8002ab0:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <HAL_RCC_ClockConfig+0x2e8>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ab8:	22f0      	movs	r2, #240	; 0xf0
 8002aba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	fa92 f2a2 	rbit	r2, r2
 8002ac2:	60fa      	str	r2, [r7, #12]
  return result;
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	fab2 f282 	clz	r2, r2
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	40d3      	lsrs	r3, r2
 8002ace:	4a09      	ldr	r2, [pc, #36]	; (8002af4 <HAL_RCC_ClockConfig+0x2ec>)
 8002ad0:	5cd3      	ldrb	r3, [r2, r3]
 8002ad2:	fa21 f303 	lsr.w	r3, r1, r3
 8002ad6:	4a08      	ldr	r2, [pc, #32]	; (8002af8 <HAL_RCC_ClockConfig+0x2f0>)
 8002ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ada:	4b08      	ldr	r3, [pc, #32]	; (8002afc <HAL_RCC_ClockConfig+0x2f4>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7fe fa6e 	bl	8000fc0 <HAL_InitTick>
  
  return HAL_OK;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3778      	adds	r7, #120	; 0x78
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000
 8002af4:	080046bc 	.word	0x080046bc
 8002af8:	20000000 	.word	0x20000000
 8002afc:	20000004 	.word	0x20000004

08002b00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b08b      	sub	sp, #44	; 0x2c
 8002b04:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b06:	2300      	movs	r3, #0
 8002b08:	61fb      	str	r3, [r7, #28]
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	61bb      	str	r3, [r7, #24]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
 8002b12:	2300      	movs	r3, #0
 8002b14:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002b1a:	4b2a      	ldr	r3, [pc, #168]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d002      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x30>
 8002b2a:	2b08      	cmp	r3, #8
 8002b2c:	d003      	beq.n	8002b36 <HAL_RCC_GetSysClockFreq+0x36>
 8002b2e:	e03f      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b30:	4b25      	ldr	r3, [pc, #148]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b32:	623b      	str	r3, [r7, #32]
      break;
 8002b34:	e03f      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b3c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b40:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	fa92 f2a2 	rbit	r2, r2
 8002b48:	607a      	str	r2, [r7, #4]
  return result;
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	fab2 f282 	clz	r2, r2
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	40d3      	lsrs	r3, r2
 8002b54:	4a1d      	ldr	r2, [pc, #116]	; (8002bcc <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b56:	5cd3      	ldrb	r3, [r2, r3]
 8002b58:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b5a:	4b1a      	ldr	r3, [pc, #104]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	220f      	movs	r2, #15
 8002b64:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	fa92 f2a2 	rbit	r2, r2
 8002b6c:	60fa      	str	r2, [r7, #12]
  return result;
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	fab2 f282 	clz	r2, r2
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	40d3      	lsrs	r3, r2
 8002b78:	4a15      	ldr	r2, [pc, #84]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b7a:	5cd3      	ldrb	r3, [r2, r3]
 8002b7c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b88:	4a0f      	ldr	r2, [pc, #60]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	fb02 f303 	mul.w	r3, r2, r3
 8002b96:	627b      	str	r3, [r7, #36]	; 0x24
 8002b98:	e007      	b.n	8002baa <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b9a:	4a0b      	ldr	r2, [pc, #44]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	fb02 f303 	mul.w	r3, r2, r3
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	623b      	str	r3, [r7, #32]
      break;
 8002bae:	e002      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002bb2:	623b      	str	r3, [r7, #32]
      break;
 8002bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	372c      	adds	r7, #44	; 0x2c
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	007a1200 	.word	0x007a1200
 8002bcc:	080046d4 	.word	0x080046d4
 8002bd0:	080046e4 	.word	0x080046e4

08002bd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bd8:	4b03      	ldr	r3, [pc, #12]	; (8002be8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	20000000 	.word	0x20000000

08002bec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002bf2:	f7ff ffef 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002bf6:	4601      	mov	r1, r0
 8002bf8:	4b0b      	ldr	r3, [pc, #44]	; (8002c28 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c00:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c04:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	fa92 f2a2 	rbit	r2, r2
 8002c0c:	603a      	str	r2, [r7, #0]
  return result;
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	fab2 f282 	clz	r2, r2
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	40d3      	lsrs	r3, r2
 8002c18:	4a04      	ldr	r2, [pc, #16]	; (8002c2c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002c1a:	5cd3      	ldrb	r3, [r2, r3]
 8002c1c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	080046cc 	.word	0x080046cc

08002c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c36:	f7ff ffcd 	bl	8002bd4 <HAL_RCC_GetHCLKFreq>
 8002c3a:	4601      	mov	r1, r0
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c44:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c48:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	fa92 f2a2 	rbit	r2, r2
 8002c50:	603a      	str	r2, [r7, #0]
  return result;
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	fab2 f282 	clz	r2, r2
 8002c58:	b2d2      	uxtb	r2, r2
 8002c5a:	40d3      	lsrs	r3, r2
 8002c5c:	4a04      	ldr	r2, [pc, #16]	; (8002c70 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c5e:	5cd3      	ldrb	r3, [r2, r3]
 8002c60:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	080046cc 	.word	0x080046cc

08002c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b092      	sub	sp, #72	; 0x48
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c80:	2300      	movs	r3, #0
 8002c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c84:	2300      	movs	r3, #0
 8002c86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f000 80d4 	beq.w	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c98:	4b4e      	ldr	r3, [pc, #312]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9a:	69db      	ldr	r3, [r3, #28]
 8002c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d10e      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ca4:	4b4b      	ldr	r3, [pc, #300]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	4a4a      	ldr	r2, [pc, #296]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cae:	61d3      	str	r3, [r2, #28]
 8002cb0:	4b48      	ldr	r3, [pc, #288]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb2:	69db      	ldr	r3, [r3, #28]
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc2:	4b45      	ldr	r3, [pc, #276]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d118      	bne.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cce:	4b42      	ldr	r3, [pc, #264]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a41      	ldr	r2, [pc, #260]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cd8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cda:	f7fe f9b5 	bl	8001048 <HAL_GetTick>
 8002cde:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce0:	e008      	b.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce2:	f7fe f9b1 	bl	8001048 <HAL_GetTick>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cea:	1ad3      	subs	r3, r2, r3
 8002cec:	2b64      	cmp	r3, #100	; 0x64
 8002cee:	d901      	bls.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e1d6      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cf4:	4b38      	ldr	r3, [pc, #224]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d0f0      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d00:	4b34      	ldr	r3, [pc, #208]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d02:	6a1b      	ldr	r3, [r3, #32]
 8002d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d08:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	f000 8084 	beq.w	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d07c      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d20:	4b2c      	ldr	r3, [pc, #176]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	fa93 f3a3 	rbit	r3, r3
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d3a:	fab3 f383 	clz	r3, r3
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b26      	ldr	r3, [pc, #152]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	6013      	str	r3, [r2, #0]
 8002d4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d5e:	fab3 f383 	clz	r3, r3
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b1d      	ldr	r3, [pc, #116]	; (8002ddc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	2300      	movs	r3, #0
 8002d70:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d72:	4a18      	ldr	r2, [pc, #96]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d76:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d04b      	beq.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d82:	f7fe f961 	bl	8001048 <HAL_GetTick>
 8002d86:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d88:	e00a      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d8a:	f7fe f95d 	bl	8001048 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e180      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002da0:	2302      	movs	r3, #2
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da6:	fa93 f3a3 	rbit	r3, r3
 8002daa:	627b      	str	r3, [r7, #36]	; 0x24
 8002dac:	2302      	movs	r3, #2
 8002dae:	623b      	str	r3, [r7, #32]
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	61fb      	str	r3, [r7, #28]
  return result;
 8002db8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f043 0302 	orr.w	r3, r3, #2
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d108      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002dce:	4b01      	ldr	r3, [pc, #4]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	e00d      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002dd4:	40021000 	.word	0x40021000
 8002dd8:	40007000 	.word	0x40007000
 8002ddc:	10908100 	.word	0x10908100
 8002de0:	2302      	movs	r3, #2
 8002de2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	fa93 f3a3 	rbit	r3, r3
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	4b9a      	ldr	r3, [pc, #616]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	2202      	movs	r2, #2
 8002df2:	613a      	str	r2, [r7, #16]
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	fa92 f2a2 	rbit	r2, r2
 8002dfa:	60fa      	str	r2, [r7, #12]
  return result;
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	fab2 f282 	clz	r2, r2
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	f002 021f 	and.w	r2, r2, #31
 8002e0e:	2101      	movs	r1, #1
 8002e10:	fa01 f202 	lsl.w	r2, r1, r2
 8002e14:	4013      	ands	r3, r2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0b7      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e1a:	4b8f      	ldr	r3, [pc, #572]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e1c:	6a1b      	ldr	r3, [r3, #32]
 8002e1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	498c      	ldr	r1, [pc, #560]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d105      	bne.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e34:	4b88      	ldr	r3, [pc, #544]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	4a87      	ldr	r2, [pc, #540]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e4c:	4b82      	ldr	r3, [pc, #520]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	f023 0203 	bic.w	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	497f      	ldr	r1, [pc, #508]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d008      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e6a:	4b7b      	ldr	r3, [pc, #492]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	4978      	ldr	r1, [pc, #480]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e88:	4b73      	ldr	r3, [pc, #460]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	4970      	ldr	r1, [pc, #448]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0320 	and.w	r3, r3, #32
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d008      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ea6:	4b6c      	ldr	r3, [pc, #432]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	f023 0210 	bic.w	r2, r3, #16
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	4969      	ldr	r1, [pc, #420]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002ec4:	4b64      	ldr	r3, [pc, #400]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed0:	4961      	ldr	r1, [pc, #388]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ee2:	4b5d      	ldr	r3, [pc, #372]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f023 0220 	bic.w	r2, r3, #32
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	495a      	ldr	r1, [pc, #360]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d008      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f00:	4b55      	ldr	r3, [pc, #340]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f04:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0c:	4952      	ldr	r1, [pc, #328]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d008      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f1e:	4b4e      	ldr	r3, [pc, #312]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	494b      	ldr	r1, [pc, #300]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f3c:	4b46      	ldr	r3, [pc, #280]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f40:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	4943      	ldr	r1, [pc, #268]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d008      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f5a:	4b3f      	ldr	r3, [pc, #252]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	493c      	ldr	r1, [pc, #240]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f78:	4b37      	ldr	r3, [pc, #220]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	4934      	ldr	r1, [pc, #208]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d008      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f96:	4b30      	ldr	r3, [pc, #192]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa2:	492d      	ldr	r1, [pc, #180]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d008      	beq.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fb4:	4b28      	ldr	r3, [pc, #160]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc0:	4925      	ldr	r1, [pc, #148]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002fd2:	4b21      	ldr	r3, [pc, #132]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	491e      	ldr	r1, [pc, #120]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002ff0:	4b19      	ldr	r3, [pc, #100]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffc:	4916      	ldr	r1, [pc, #88]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d008      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800300e:	4b12      	ldr	r3, [pc, #72]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301a:	490f      	ldr	r1, [pc, #60]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800301c:	4313      	orrs	r3, r2
 800301e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800302e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003030:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003038:	4907      	ldr	r1, [pc, #28]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800303a:	4313      	orrs	r3, r2
 800303c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00c      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800304a:	4b03      	ldr	r3, [pc, #12]	; (8003058 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	e002      	b.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800305e:	4913      	ldr	r1, [pc, #76]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003060:	4313      	orrs	r3, r2
 8003062:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d008      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003070:	4b0e      	ldr	r3, [pc, #56]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003074:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307c:	490b      	ldr	r1, [pc, #44]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800307e:	4313      	orrs	r3, r2
 8003080:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d008      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800308e:	4b07      	ldr	r3, [pc, #28]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003092:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800309a:	4904      	ldr	r1, [pc, #16]	; (80030ac <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800309c:	4313      	orrs	r3, r2
 800309e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3748      	adds	r7, #72	; 0x48
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	40021000 	.word	0x40021000

080030b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e040      	b.n	8003144 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d106      	bne.n	80030d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7fd fe76 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2224      	movs	r2, #36	; 0x24
 80030dc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fb6e 	bl	80037d0 <UART_SetConfig>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d101      	bne.n	80030fe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e022      	b.n	8003144 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	2b00      	cmp	r3, #0
 8003104:	d002      	beq.n	800310c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fd38 	bl	8003b7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800311a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800312a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f000 fdbf 	bl	8003cc0 <UART_CheckIdleState>
 8003142:	4603      	mov	r3, r0
}
 8003144:	4618      	mov	r0, r3
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08a      	sub	sp, #40	; 0x28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	4613      	mov	r3, r2
 8003158:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800315e:	2b20      	cmp	r3, #32
 8003160:	d13d      	bne.n	80031de <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <HAL_UART_Receive_IT+0x22>
 8003168:	88fb      	ldrh	r3, [r7, #6]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	e036      	b.n	80031e0 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003178:	2b01      	cmp	r3, #1
 800317a:	d101      	bne.n	8003180 <HAL_UART_Receive_IT+0x34>
 800317c:	2302      	movs	r3, #2
 800317e:	e02f      	b.n	80031e0 <HAL_UART_Receive_IT+0x94>
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d018      	beq.n	80031ce <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	e853 3f00 	ldrex	r3, [r3]
 80031a8:	613b      	str	r3, [r7, #16]
   return(result);
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	69f9      	ldr	r1, [r7, #28]
 80031c0:	6a3a      	ldr	r2, [r7, #32]
 80031c2:	e841 2300 	strex	r3, r2, [r1]
 80031c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1e6      	bne.n	800319c <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	461a      	mov	r2, r3
 80031d2:	68b9      	ldr	r1, [r7, #8]
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 fe81 	bl	8003edc <UART_Start_Receive_IT>
 80031da:	4603      	mov	r3, r0
 80031dc:	e000      	b.n	80031e0 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031de:	2302      	movs	r3, #2
  }
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3728      	adds	r7, #40	; 0x28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b0ba      	sub	sp, #232	; 0xe8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800320e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003212:	f640 030f 	movw	r3, #2063	; 0x80f
 8003216:	4013      	ands	r3, r2
 8003218:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800321c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003220:	2b00      	cmp	r3, #0
 8003222:	d115      	bne.n	8003250 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00f      	beq.n	8003250 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d009      	beq.n	8003250 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 82a3 	beq.w	800378c <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	4798      	blx	r3
      }
      return;
 800324e:	e29d      	b.n	800378c <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003250:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 8117 	beq.w	8003488 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800325a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d106      	bne.n	8003274 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003266:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800326a:	4b85      	ldr	r3, [pc, #532]	; (8003480 <HAL_UART_IRQHandler+0x298>)
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 810a 	beq.w	8003488 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	2b00      	cmp	r3, #0
 800327e:	d011      	beq.n	80032a4 <HAL_UART_IRQHandler+0xbc>
 8003280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00b      	beq.n	80032a4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2201      	movs	r2, #1
 8003292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800329a:	f043 0201 	orr.w	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d011      	beq.n	80032d4 <HAL_UART_IRQHandler+0xec>
 80032b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2202      	movs	r2, #2
 80032c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032ca:	f043 0204 	orr.w	r2, r3, #4
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032d8:	f003 0304 	and.w	r3, r3, #4
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d011      	beq.n	8003304 <HAL_UART_IRQHandler+0x11c>
 80032e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00b      	beq.n	8003304 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2204      	movs	r2, #4
 80032f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032fa:	f043 0202 	orr.w	r2, r3, #2
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b00      	cmp	r3, #0
 800330e:	d017      	beq.n	8003340 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d105      	bne.n	8003328 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800331c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003320:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00b      	beq.n	8003340 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2208      	movs	r2, #8
 800332e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003336:	f043 0208 	orr.w	r2, r3, #8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003344:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003348:	2b00      	cmp	r3, #0
 800334a:	d012      	beq.n	8003372 <HAL_UART_IRQHandler+0x18a>
 800334c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003350:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00c      	beq.n	8003372 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003360:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003368:	f043 0220 	orr.w	r2, r3, #32
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 8209 	beq.w	8003790 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800337e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00d      	beq.n	80033a6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800338a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800339a:	2b00      	cmp	r3, #0
 800339c:	d003      	beq.n	80033a6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b40      	cmp	r3, #64	; 0x40
 80033bc:	d005      	beq.n	80033ca <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80033c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d04f      	beq.n	800346a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 fe32 	bl	8004034 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b40      	cmp	r3, #64	; 0x40
 80033dc:	d141      	bne.n	8003462 <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3308      	adds	r3, #8
 80033e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3308      	adds	r3, #8
 8003406:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800340a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800340e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003412:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003416:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800341a:	e841 2300 	strex	r3, r2, [r1]
 800341e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003422:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1d9      	bne.n	80033de <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	2b00      	cmp	r3, #0
 8003430:	d013      	beq.n	800345a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003436:	4a13      	ldr	r2, [pc, #76]	; (8003484 <HAL_UART_IRQHandler+0x29c>)
 8003438:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	4618      	mov	r0, r3
 8003440:	f7fd ff58 	bl	80012f4 <HAL_DMA_Abort_IT>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d017      	beq.n	800347a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003454:	4610      	mov	r0, r2
 8003456:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003458:	e00f      	b.n	800347a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f9a2 	bl	80037a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003460:	e00b      	b.n	800347a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f99e 	bl	80037a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003468:	e007      	b.n	800347a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f000 f99a 	bl	80037a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2200      	movs	r2, #0
 8003474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003478:	e18a      	b.n	8003790 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347a:	bf00      	nop
    return;
 800347c:	e188      	b.n	8003790 <HAL_UART_IRQHandler+0x5a8>
 800347e:	bf00      	nop
 8003480:	04000120 	.word	0x04000120
 8003484:	080040fb 	.word	0x080040fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800348c:	2b01      	cmp	r3, #1
 800348e:	f040 8143 	bne.w	8003718 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003492:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003496:	f003 0310 	and.w	r3, r3, #16
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 813c 	beq.w	8003718 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80034a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f000 8135 	beq.w	8003718 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2210      	movs	r2, #16
 80034b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c0:	2b40      	cmp	r3, #64	; 0x40
 80034c2:	f040 80b1 	bne.w	8003628 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f000 815c 	beq.w	8003794 <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80034e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034e6:	429a      	cmp	r2, r3
 80034e8:	f080 8154 	bcs.w	8003794 <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	f000 8085 	beq.w	800360c <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800350e:	e853 3f00 	ldrex	r3, [r3]
 8003512:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003516:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800351a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800351e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	461a      	mov	r2, r3
 8003528:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800352c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003530:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003538:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800353c:	e841 2300 	strex	r3, r2, [r1]
 8003540:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1da      	bne.n	8003502 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3308      	adds	r3, #8
 8003552:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800355c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3308      	adds	r3, #8
 800356c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003570:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003574:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003576:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003578:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800357c:	e841 2300 	strex	r3, r2, [r1]
 8003580:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003582:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1e1      	bne.n	800354c <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3308      	adds	r3, #8
 800358e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003590:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003592:	e853 3f00 	ldrex	r3, [r3]
 8003596:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003598:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800359a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800359e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3308      	adds	r3, #8
 80035a8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80035ac:	66fa      	str	r2, [r7, #108]	; 0x6c
 80035ae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035b0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80035b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035b4:	e841 2300 	strex	r3, r2, [r1]
 80035b8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80035ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e3      	bne.n	8003588 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2220      	movs	r2, #32
 80035c4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035d4:	e853 3f00 	ldrex	r3, [r3]
 80035d8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035dc:	f023 0310 	bic.w	r3, r3, #16
 80035e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	461a      	mov	r2, r3
 80035ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035ee:	65bb      	str	r3, [r7, #88]	; 0x58
 80035f0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035f6:	e841 2300 	strex	r3, r2, [r1]
 80035fa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1e4      	bne.n	80035cc <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003606:	4618      	mov	r0, r3
 8003608:	f7fd fe3b 	bl	8001282 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003618:	b29b      	uxth	r3, r3
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	b29b      	uxth	r3, r3
 800361e:	4619      	mov	r1, r3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 f8c9 	bl	80037b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003626:	e0b5      	b.n	8003794 <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003634:	b29b      	uxth	r3, r3
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80a7 	beq.w	8003798 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 800364a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800364e:	2b00      	cmp	r3, #0
 8003650:	f000 80a2 	beq.w	8003798 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003664:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003668:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	461a      	mov	r2, r3
 8003672:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003676:	647b      	str	r3, [r7, #68]	; 0x44
 8003678:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800367c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800367e:	e841 2300 	strex	r3, r2, [r1]
 8003682:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1e4      	bne.n	8003654 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	3308      	adds	r3, #8
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003694:	e853 3f00 	ldrex	r3, [r3]
 8003698:	623b      	str	r3, [r7, #32]
   return(result);
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	3308      	adds	r3, #8
 80036aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80036ae:	633a      	str	r2, [r7, #48]	; 0x30
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80036b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036b6:	e841 2300 	strex	r3, r2, [r1]
 80036ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80036bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1e3      	bne.n	800368a <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2220      	movs	r2, #32
 80036c6:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f023 0310 	bic.w	r3, r3, #16
 80036e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	461a      	mov	r2, r3
 80036f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036f6:	61fb      	str	r3, [r7, #28]
 80036f8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036fa:	69b9      	ldr	r1, [r7, #24]
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	e841 2300 	strex	r3, r2, [r1]
 8003702:	617b      	str	r3, [r7, #20]
   return(result);
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1e4      	bne.n	80036d4 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800370a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800370e:	4619      	mov	r1, r3
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f851 	bl	80037b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003716:	e03f      	b.n	8003798 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00e      	beq.n	8003742 <HAL_UART_IRQHandler+0x55a>
 8003724:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d008      	beq.n	8003742 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003738:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f000 fe79 	bl	8004432 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003740:	e02d      	b.n	800379e <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374a:	2b00      	cmp	r3, #0
 800374c:	d00e      	beq.n	800376c <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800374e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003756:	2b00      	cmp	r3, #0
 8003758:	d008      	beq.n	800376c <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01c      	beq.n	800379c <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	4798      	blx	r3
    }
    return;
 800376a:	e017      	b.n	800379c <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800376c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003774:	2b00      	cmp	r3, #0
 8003776:	d012      	beq.n	800379e <HAL_UART_IRQHandler+0x5b6>
 8003778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800377c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00c      	beq.n	800379e <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fcce 	bl	8004126 <UART_EndTransmit_IT>
    return;
 800378a:	e008      	b.n	800379e <HAL_UART_IRQHandler+0x5b6>
      return;
 800378c:	bf00      	nop
 800378e:	e006      	b.n	800379e <HAL_UART_IRQHandler+0x5b6>
    return;
 8003790:	bf00      	nop
 8003792:	e004      	b.n	800379e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003794:	bf00      	nop
 8003796:	e002      	b.n	800379e <HAL_UART_IRQHandler+0x5b6>
      return;
 8003798:	bf00      	nop
 800379a:	e000      	b.n	800379e <HAL_UART_IRQHandler+0x5b6>
    return;
 800379c:	bf00      	nop
  }

}
 800379e:	37e8      	adds	r7, #232	; 0xe8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b088      	sub	sp, #32
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	69db      	ldr	r3, [r3, #28]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	4b92      	ldr	r3, [pc, #584]	; (8003a44 <UART_SetConfig+0x274>)
 80037fc:	4013      	ands	r3, r2
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	6979      	ldr	r1, [r7, #20]
 8003804:	430b      	orrs	r3, r1
 8003806:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68da      	ldr	r2, [r3, #12]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	699b      	ldr	r3, [r3, #24]
 8003822:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	430a      	orrs	r2, r1
 8003840:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a80      	ldr	r2, [pc, #512]	; (8003a48 <UART_SetConfig+0x278>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d120      	bne.n	800388e <UART_SetConfig+0xbe>
 800384c:	4b7f      	ldr	r3, [pc, #508]	; (8003a4c <UART_SetConfig+0x27c>)
 800384e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003850:	f003 0303 	and.w	r3, r3, #3
 8003854:	2b03      	cmp	r3, #3
 8003856:	d817      	bhi.n	8003888 <UART_SetConfig+0xb8>
 8003858:	a201      	add	r2, pc, #4	; (adr r2, 8003860 <UART_SetConfig+0x90>)
 800385a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800385e:	bf00      	nop
 8003860:	08003871 	.word	0x08003871
 8003864:	0800387d 	.word	0x0800387d
 8003868:	08003883 	.word	0x08003883
 800386c:	08003877 	.word	0x08003877
 8003870:	2301      	movs	r3, #1
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e0b5      	b.n	80039e2 <UART_SetConfig+0x212>
 8003876:	2302      	movs	r3, #2
 8003878:	77fb      	strb	r3, [r7, #31]
 800387a:	e0b2      	b.n	80039e2 <UART_SetConfig+0x212>
 800387c:	2304      	movs	r3, #4
 800387e:	77fb      	strb	r3, [r7, #31]
 8003880:	e0af      	b.n	80039e2 <UART_SetConfig+0x212>
 8003882:	2308      	movs	r3, #8
 8003884:	77fb      	strb	r3, [r7, #31]
 8003886:	e0ac      	b.n	80039e2 <UART_SetConfig+0x212>
 8003888:	2310      	movs	r3, #16
 800388a:	77fb      	strb	r3, [r7, #31]
 800388c:	e0a9      	b.n	80039e2 <UART_SetConfig+0x212>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a6f      	ldr	r2, [pc, #444]	; (8003a50 <UART_SetConfig+0x280>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d124      	bne.n	80038e2 <UART_SetConfig+0x112>
 8003898:	4b6c      	ldr	r3, [pc, #432]	; (8003a4c <UART_SetConfig+0x27c>)
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038a0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038a4:	d011      	beq.n	80038ca <UART_SetConfig+0xfa>
 80038a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80038aa:	d817      	bhi.n	80038dc <UART_SetConfig+0x10c>
 80038ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038b0:	d011      	beq.n	80038d6 <UART_SetConfig+0x106>
 80038b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80038b6:	d811      	bhi.n	80038dc <UART_SetConfig+0x10c>
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <UART_SetConfig+0xf4>
 80038bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038c0:	d006      	beq.n	80038d0 <UART_SetConfig+0x100>
 80038c2:	e00b      	b.n	80038dc <UART_SetConfig+0x10c>
 80038c4:	2300      	movs	r3, #0
 80038c6:	77fb      	strb	r3, [r7, #31]
 80038c8:	e08b      	b.n	80039e2 <UART_SetConfig+0x212>
 80038ca:	2302      	movs	r3, #2
 80038cc:	77fb      	strb	r3, [r7, #31]
 80038ce:	e088      	b.n	80039e2 <UART_SetConfig+0x212>
 80038d0:	2304      	movs	r3, #4
 80038d2:	77fb      	strb	r3, [r7, #31]
 80038d4:	e085      	b.n	80039e2 <UART_SetConfig+0x212>
 80038d6:	2308      	movs	r3, #8
 80038d8:	77fb      	strb	r3, [r7, #31]
 80038da:	e082      	b.n	80039e2 <UART_SetConfig+0x212>
 80038dc:	2310      	movs	r3, #16
 80038de:	77fb      	strb	r3, [r7, #31]
 80038e0:	e07f      	b.n	80039e2 <UART_SetConfig+0x212>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a5b      	ldr	r2, [pc, #364]	; (8003a54 <UART_SetConfig+0x284>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d124      	bne.n	8003936 <UART_SetConfig+0x166>
 80038ec:	4b57      	ldr	r3, [pc, #348]	; (8003a4c <UART_SetConfig+0x27c>)
 80038ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038f0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80038f4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038f8:	d011      	beq.n	800391e <UART_SetConfig+0x14e>
 80038fa:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038fe:	d817      	bhi.n	8003930 <UART_SetConfig+0x160>
 8003900:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003904:	d011      	beq.n	800392a <UART_SetConfig+0x15a>
 8003906:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800390a:	d811      	bhi.n	8003930 <UART_SetConfig+0x160>
 800390c:	2b00      	cmp	r3, #0
 800390e:	d003      	beq.n	8003918 <UART_SetConfig+0x148>
 8003910:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003914:	d006      	beq.n	8003924 <UART_SetConfig+0x154>
 8003916:	e00b      	b.n	8003930 <UART_SetConfig+0x160>
 8003918:	2300      	movs	r3, #0
 800391a:	77fb      	strb	r3, [r7, #31]
 800391c:	e061      	b.n	80039e2 <UART_SetConfig+0x212>
 800391e:	2302      	movs	r3, #2
 8003920:	77fb      	strb	r3, [r7, #31]
 8003922:	e05e      	b.n	80039e2 <UART_SetConfig+0x212>
 8003924:	2304      	movs	r3, #4
 8003926:	77fb      	strb	r3, [r7, #31]
 8003928:	e05b      	b.n	80039e2 <UART_SetConfig+0x212>
 800392a:	2308      	movs	r3, #8
 800392c:	77fb      	strb	r3, [r7, #31]
 800392e:	e058      	b.n	80039e2 <UART_SetConfig+0x212>
 8003930:	2310      	movs	r3, #16
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	e055      	b.n	80039e2 <UART_SetConfig+0x212>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a47      	ldr	r2, [pc, #284]	; (8003a58 <UART_SetConfig+0x288>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d124      	bne.n	800398a <UART_SetConfig+0x1ba>
 8003940:	4b42      	ldr	r3, [pc, #264]	; (8003a4c <UART_SetConfig+0x27c>)
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003948:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800394c:	d011      	beq.n	8003972 <UART_SetConfig+0x1a2>
 800394e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003952:	d817      	bhi.n	8003984 <UART_SetConfig+0x1b4>
 8003954:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003958:	d011      	beq.n	800397e <UART_SetConfig+0x1ae>
 800395a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800395e:	d811      	bhi.n	8003984 <UART_SetConfig+0x1b4>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d003      	beq.n	800396c <UART_SetConfig+0x19c>
 8003964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003968:	d006      	beq.n	8003978 <UART_SetConfig+0x1a8>
 800396a:	e00b      	b.n	8003984 <UART_SetConfig+0x1b4>
 800396c:	2300      	movs	r3, #0
 800396e:	77fb      	strb	r3, [r7, #31]
 8003970:	e037      	b.n	80039e2 <UART_SetConfig+0x212>
 8003972:	2302      	movs	r3, #2
 8003974:	77fb      	strb	r3, [r7, #31]
 8003976:	e034      	b.n	80039e2 <UART_SetConfig+0x212>
 8003978:	2304      	movs	r3, #4
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e031      	b.n	80039e2 <UART_SetConfig+0x212>
 800397e:	2308      	movs	r3, #8
 8003980:	77fb      	strb	r3, [r7, #31]
 8003982:	e02e      	b.n	80039e2 <UART_SetConfig+0x212>
 8003984:	2310      	movs	r3, #16
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e02b      	b.n	80039e2 <UART_SetConfig+0x212>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a33      	ldr	r2, [pc, #204]	; (8003a5c <UART_SetConfig+0x28c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d124      	bne.n	80039de <UART_SetConfig+0x20e>
 8003994:	4b2d      	ldr	r3, [pc, #180]	; (8003a4c <UART_SetConfig+0x27c>)
 8003996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003998:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800399c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039a0:	d011      	beq.n	80039c6 <UART_SetConfig+0x1f6>
 80039a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80039a6:	d817      	bhi.n	80039d8 <UART_SetConfig+0x208>
 80039a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039ac:	d011      	beq.n	80039d2 <UART_SetConfig+0x202>
 80039ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039b2:	d811      	bhi.n	80039d8 <UART_SetConfig+0x208>
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <UART_SetConfig+0x1f0>
 80039b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039bc:	d006      	beq.n	80039cc <UART_SetConfig+0x1fc>
 80039be:	e00b      	b.n	80039d8 <UART_SetConfig+0x208>
 80039c0:	2300      	movs	r3, #0
 80039c2:	77fb      	strb	r3, [r7, #31]
 80039c4:	e00d      	b.n	80039e2 <UART_SetConfig+0x212>
 80039c6:	2302      	movs	r3, #2
 80039c8:	77fb      	strb	r3, [r7, #31]
 80039ca:	e00a      	b.n	80039e2 <UART_SetConfig+0x212>
 80039cc:	2304      	movs	r3, #4
 80039ce:	77fb      	strb	r3, [r7, #31]
 80039d0:	e007      	b.n	80039e2 <UART_SetConfig+0x212>
 80039d2:	2308      	movs	r3, #8
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e004      	b.n	80039e2 <UART_SetConfig+0x212>
 80039d8:	2310      	movs	r3, #16
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e001      	b.n	80039e2 <UART_SetConfig+0x212>
 80039de:	2310      	movs	r3, #16
 80039e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ea:	d16c      	bne.n	8003ac6 <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80039ec:	7ffb      	ldrb	r3, [r7, #31]
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d838      	bhi.n	8003a64 <UART_SetConfig+0x294>
 80039f2:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <UART_SetConfig+0x228>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a1d 	.word	0x08003a1d
 80039fc:	08003a25 	.word	0x08003a25
 8003a00:	08003a2d 	.word	0x08003a2d
 8003a04:	08003a65 	.word	0x08003a65
 8003a08:	08003a33 	.word	0x08003a33
 8003a0c:	08003a65 	.word	0x08003a65
 8003a10:	08003a65 	.word	0x08003a65
 8003a14:	08003a65 	.word	0x08003a65
 8003a18:	08003a3b 	.word	0x08003a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f7ff f8e6 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8003a20:	61b8      	str	r0, [r7, #24]
        break;
 8003a22:	e024      	b.n	8003a6e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a24:	f7ff f904 	bl	8002c30 <HAL_RCC_GetPCLK2Freq>
 8003a28:	61b8      	str	r0, [r7, #24]
        break;
 8003a2a:	e020      	b.n	8003a6e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a2c:	4b0c      	ldr	r3, [pc, #48]	; (8003a60 <UART_SetConfig+0x290>)
 8003a2e:	61bb      	str	r3, [r7, #24]
        break;
 8003a30:	e01d      	b.n	8003a6e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a32:	f7ff f865 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8003a36:	61b8      	str	r0, [r7, #24]
        break;
 8003a38:	e019      	b.n	8003a6e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3e:	61bb      	str	r3, [r7, #24]
        break;
 8003a40:	e015      	b.n	8003a6e <UART_SetConfig+0x29e>
 8003a42:	bf00      	nop
 8003a44:	efff69f3 	.word	0xefff69f3
 8003a48:	40013800 	.word	0x40013800
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	40004400 	.word	0x40004400
 8003a54:	40004800 	.word	0x40004800
 8003a58:	40004c00 	.word	0x40004c00
 8003a5c:	40005000 	.word	0x40005000
 8003a60:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	77bb      	strb	r3, [r7, #30]
        break;
 8003a6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d075      	beq.n	8003b60 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	005a      	lsls	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	085b      	lsrs	r3, r3, #1
 8003a7e:	441a      	add	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	2b0f      	cmp	r3, #15
 8003a90:	d916      	bls.n	8003ac0 <UART_SetConfig+0x2f0>
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a98:	d212      	bcs.n	8003ac0 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	f023 030f 	bic.w	r3, r3, #15
 8003aa2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	085b      	lsrs	r3, r3, #1
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	89fb      	ldrh	r3, [r7, #14]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	89fa      	ldrh	r2, [r7, #14]
 8003abc:	60da      	str	r2, [r3, #12]
 8003abe:	e04f      	b.n	8003b60 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	77bb      	strb	r3, [r7, #30]
 8003ac4:	e04c      	b.n	8003b60 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ac6:	7ffb      	ldrb	r3, [r7, #31]
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	d828      	bhi.n	8003b1e <UART_SetConfig+0x34e>
 8003acc:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <UART_SetConfig+0x304>)
 8003ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad2:	bf00      	nop
 8003ad4:	08003af9 	.word	0x08003af9
 8003ad8:	08003b01 	.word	0x08003b01
 8003adc:	08003b09 	.word	0x08003b09
 8003ae0:	08003b1f 	.word	0x08003b1f
 8003ae4:	08003b0f 	.word	0x08003b0f
 8003ae8:	08003b1f 	.word	0x08003b1f
 8003aec:	08003b1f 	.word	0x08003b1f
 8003af0:	08003b1f 	.word	0x08003b1f
 8003af4:	08003b17 	.word	0x08003b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003af8:	f7ff f878 	bl	8002bec <HAL_RCC_GetPCLK1Freq>
 8003afc:	61b8      	str	r0, [r7, #24]
        break;
 8003afe:	e013      	b.n	8003b28 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b00:	f7ff f896 	bl	8002c30 <HAL_RCC_GetPCLK2Freq>
 8003b04:	61b8      	str	r0, [r7, #24]
        break;
 8003b06:	e00f      	b.n	8003b28 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b08:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <UART_SetConfig+0x3a8>)
 8003b0a:	61bb      	str	r3, [r7, #24]
        break;
 8003b0c:	e00c      	b.n	8003b28 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b0e:	f7fe fff7 	bl	8002b00 <HAL_RCC_GetSysClockFreq>
 8003b12:	61b8      	str	r0, [r7, #24]
        break;
 8003b14:	e008      	b.n	8003b28 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b1a:	61bb      	str	r3, [r7, #24]
        break;
 8003b1c:	e004      	b.n	8003b28 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	77bb      	strb	r3, [r7, #30]
        break;
 8003b26:	bf00      	nop
    }

    if (pclk != 0U)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d018      	beq.n	8003b60 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	085a      	lsrs	r2, r3, #1
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	441a      	add	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2b0f      	cmp	r3, #15
 8003b48:	d908      	bls.n	8003b5c <UART_SetConfig+0x38c>
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b50:	d204      	bcs.n	8003b5c <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	60da      	str	r2, [r3, #12]
 8003b5a:	e001      	b.n	8003b60 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b6c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3720      	adds	r7, #32
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	007a1200 	.word	0x007a1200

08003b7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	430a      	orrs	r2, r1
 8003ba4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	f003 0308 	and.w	r3, r3, #8
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	f003 0320 	and.w	r3, r3, #32
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01a      	beq.n	8003c92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c7a:	d10a      	bne.n	8003c92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00a      	beq.n	8003cb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]
  }
}
 8003cb4:	bf00      	nop
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af02      	add	r7, sp, #8
 8003cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cd0:	f7fd f9ba 	bl	8001048 <HAL_GetTick>
 8003cd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b08      	cmp	r3, #8
 8003ce2:	d10e      	bne.n	8003d02 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ce8:	9300      	str	r3, [sp, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f82d 	bl	8003d52 <UART_WaitOnFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e023      	b.n	8003d4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d10e      	bne.n	8003d2e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f817 	bl	8003d52 <UART_WaitOnFlagUntilTimeout>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e00d      	b.n	8003d4a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2220      	movs	r2, #32
 8003d32:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2220      	movs	r2, #32
 8003d38:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b09c      	sub	sp, #112	; 0x70
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	60f8      	str	r0, [r7, #12]
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	603b      	str	r3, [r7, #0]
 8003d5e:	4613      	mov	r3, r2
 8003d60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d62:	e0a5      	b.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d6a:	f000 80a1 	beq.w	8003eb0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d6e:	f7fd f96b 	bl	8001048 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d302      	bcc.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d13e      	bne.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d8c:	e853 3f00 	ldrex	r3, [r3]
 8003d90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d98:	667b      	str	r3, [r7, #100]	; 0x64
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	461a      	mov	r2, r3
 8003da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003da2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003da4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003da6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003da8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003daa:	e841 2300 	strex	r3, r2, [r1]
 8003dae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1e6      	bne.n	8003d84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3308      	adds	r3, #8
 8003dbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc0:	e853 3f00 	ldrex	r3, [r3]
 8003dc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc8:	f023 0301 	bic.w	r3, r3, #1
 8003dcc:	663b      	str	r3, [r7, #96]	; 0x60
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	3308      	adds	r3, #8
 8003dd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003dd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003ddc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dde:	e841 2300 	strex	r3, r2, [r1]
 8003de2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003de4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1e5      	bne.n	8003db6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2220      	movs	r2, #32
 8003dee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e067      	b.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f003 0304 	and.w	r3, r3, #4
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d04f      	beq.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	69db      	ldr	r3, [r3, #28]
 8003e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1e:	d147      	bne.n	8003eb0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e32:	e853 3f00 	ldrex	r3, [r3]
 8003e36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	461a      	mov	r2, r3
 8003e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e48:	637b      	str	r3, [r7, #52]	; 0x34
 8003e4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e50:	e841 2300 	strex	r3, r2, [r1]
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e6      	bne.n	8003e2a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3308      	adds	r3, #8
 8003e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	e853 3f00 	ldrex	r3, [r3]
 8003e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f023 0301 	bic.w	r3, r3, #1
 8003e72:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3308      	adds	r3, #8
 8003e7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e7c:	623a      	str	r2, [r7, #32]
 8003e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e80:	69f9      	ldr	r1, [r7, #28]
 8003e82:	6a3a      	ldr	r2, [r7, #32]
 8003e84:	e841 2300 	strex	r3, r2, [r1]
 8003e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1e5      	bne.n	8003e5c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2220      	movs	r2, #32
 8003e94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e010      	b.n	8003ed2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69da      	ldr	r2, [r3, #28]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	4013      	ands	r3, r2
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	429a      	cmp	r2, r3
 8003ebe:	bf0c      	ite	eq
 8003ec0:	2301      	moveq	r3, #1
 8003ec2:	2300      	movne	r3, #0
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	79fb      	ldrb	r3, [r7, #7]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	f43f af4a 	beq.w	8003d64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3770      	adds	r7, #112	; 0x70
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
	...

08003edc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b091      	sub	sp, #68	; 0x44
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	60f8      	str	r0, [r7, #12]
 8003ee4:	60b9      	str	r1, [r7, #8]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	68ba      	ldr	r2, [r7, #8]
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	88fa      	ldrh	r2, [r7, #6]
 8003ef4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	88fa      	ldrh	r2, [r7, #6]
 8003efc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f0e:	d10e      	bne.n	8003f2e <UART_Start_Receive_IT+0x52>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	691b      	ldr	r3, [r3, #16]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d105      	bne.n	8003f24 <UART_Start_Receive_IT+0x48>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003f1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f22:	e02d      	b.n	8003f80 <UART_Start_Receive_IT+0xa4>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	22ff      	movs	r2, #255	; 0xff
 8003f28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f2c:	e028      	b.n	8003f80 <UART_Start_Receive_IT+0xa4>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10d      	bne.n	8003f52 <UART_Start_Receive_IT+0x76>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d104      	bne.n	8003f48 <UART_Start_Receive_IT+0x6c>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	22ff      	movs	r2, #255	; 0xff
 8003f42:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f46:	e01b      	b.n	8003f80 <UART_Start_Receive_IT+0xa4>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	227f      	movs	r2, #127	; 0x7f
 8003f4c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f50:	e016      	b.n	8003f80 <UART_Start_Receive_IT+0xa4>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f5a:	d10d      	bne.n	8003f78 <UART_Start_Receive_IT+0x9c>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d104      	bne.n	8003f6e <UART_Start_Receive_IT+0x92>
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	227f      	movs	r2, #127	; 0x7f
 8003f68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f6c:	e008      	b.n	8003f80 <UART_Start_Receive_IT+0xa4>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	223f      	movs	r2, #63	; 0x3f
 8003f72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f76:	e003      	b.n	8003f80 <UART_Start_Receive_IT+0xa4>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2222      	movs	r2, #34	; 0x22
 8003f8c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	3308      	adds	r3, #8
 8003f94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f98:	e853 3f00 	ldrex	r3, [r3]
 8003f9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	f043 0301 	orr.w	r3, r3, #1
 8003fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3308      	adds	r3, #8
 8003fac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fae:	637a      	str	r2, [r7, #52]	; 0x34
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fb6:	e841 2300 	strex	r3, r2, [r1]
 8003fba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1e5      	bne.n	8003f8e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fca:	d107      	bne.n	8003fdc <UART_Start_Receive_IT+0x100>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d103      	bne.n	8003fdc <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4a15      	ldr	r2, [pc, #84]	; (800402c <UART_Start_Receive_IT+0x150>)
 8003fd8:	665a      	str	r2, [r3, #100]	; 0x64
 8003fda:	e002      	b.n	8003fe2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4a14      	ldr	r2, [pc, #80]	; (8004030 <UART_Start_Receive_IT+0x154>)
 8003fe0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	e853 3f00 	ldrex	r3, [r3]
 8003ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003ffe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004008:	623b      	str	r3, [r7, #32]
 800400a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400c:	69f9      	ldr	r1, [r7, #28]
 800400e:	6a3a      	ldr	r2, [r7, #32]
 8004010:	e841 2300 	strex	r3, r2, [r1]
 8004014:	61bb      	str	r3, [r7, #24]
   return(result);
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1e6      	bne.n	8003fea <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3744      	adds	r7, #68	; 0x44
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	080042d7 	.word	0x080042d7
 8004030:	0800417b 	.word	0x0800417b

08004034 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004034:	b480      	push	{r7}
 8004036:	b095      	sub	sp, #84	; 0x54
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004044:	e853 3f00 	ldrex	r3, [r3]
 8004048:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004050:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	461a      	mov	r2, r3
 8004058:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800405a:	643b      	str	r3, [r7, #64]	; 0x40
 800405c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004060:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e6      	bne.n	800403c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3308      	adds	r3, #8
 8004074:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	61fb      	str	r3, [r7, #28]
   return(result);
 800407e:	69fb      	ldr	r3, [r7, #28]
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	64bb      	str	r3, [r7, #72]	; 0x48
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3308      	adds	r3, #8
 800408c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800408e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004090:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004092:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004094:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004096:	e841 2300 	strex	r3, r2, [r1]
 800409a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800409c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1e5      	bne.n	800406e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d118      	bne.n	80040dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	f023 0310 	bic.w	r3, r3, #16
 80040be:	647b      	str	r3, [r7, #68]	; 0x44
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c8:	61bb      	str	r3, [r7, #24]
 80040ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6979      	ldr	r1, [r7, #20]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	613b      	str	r3, [r7, #16]
   return(result);
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e6      	bne.n	80040aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2220      	movs	r2, #32
 80040e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	665a      	str	r2, [r3, #100]	; 0x64
}
 80040ee:	bf00      	nop
 80040f0:	3754      	adds	r7, #84	; 0x54
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr

080040fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040fa:	b580      	push	{r7, lr}
 80040fc:	b084      	sub	sp, #16
 80040fe:	af00      	add	r7, sp, #0
 8004100:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f7ff fb43 	bl	80037a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b088      	sub	sp, #32
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	e853 3f00 	ldrex	r3, [r3]
 800413a:	60bb      	str	r3, [r7, #8]
   return(result);
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004142:	61fb      	str	r3, [r7, #28]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	461a      	mov	r2, r3
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	61bb      	str	r3, [r7, #24]
 800414e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004150:	6979      	ldr	r1, [r7, #20]
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	e841 2300 	strex	r3, r2, [r1]
 8004158:	613b      	str	r3, [r7, #16]
   return(result);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1e6      	bne.n	800412e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2220      	movs	r2, #32
 8004164:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f7fc fa21 	bl	80005b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004172:	bf00      	nop
 8004174:	3720      	adds	r7, #32
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800417a:	b580      	push	{r7, lr}
 800417c:	b096      	sub	sp, #88	; 0x58
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004188:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004190:	2b22      	cmp	r3, #34	; 0x22
 8004192:	f040 8094 	bne.w	80042be <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800419c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80041a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80041a4:	b2d9      	uxtb	r1, r3
 80041a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	400a      	ands	r2, r1
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ba:	1c5a      	adds	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b29a      	uxth	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041d8:	b29b      	uxth	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d177      	bne.n	80042ce <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041f2:	653b      	str	r3, [r7, #80]	; 0x50
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041fc:	647b      	str	r3, [r7, #68]	; 0x44
 80041fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004202:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004204:	e841 2300 	strex	r3, r2, [r1]
 8004208:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800420a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e6      	bne.n	80041de <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3308      	adds	r3, #8
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	623b      	str	r3, [r7, #32]
   return(result);
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	f023 0301 	bic.w	r3, r3, #1
 8004226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3308      	adds	r3, #8
 800422e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004230:	633a      	str	r2, [r7, #48]	; 0x30
 8004232:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e5      	bne.n	8004210 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004254:	2b01      	cmp	r3, #1
 8004256:	d12e      	bne.n	80042b6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	60fb      	str	r3, [r7, #12]
   return(result);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0310 	bic.w	r3, r3, #16
 8004272:	64bb      	str	r3, [r7, #72]	; 0x48
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800427c:	61fb      	str	r3, [r7, #28]
 800427e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	69b9      	ldr	r1, [r7, #24]
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	617b      	str	r3, [r7, #20]
   return(result);
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e6      	bne.n	800425e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f003 0310 	and.w	r3, r3, #16
 800429a:	2b10      	cmp	r3, #16
 800429c:	d103      	bne.n	80042a6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2210      	movs	r2, #16
 80042a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042ac:	4619      	mov	r1, r3
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff fa82 	bl	80037b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042b4:	e00b      	b.n	80042ce <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fc f98c 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 80042bc:	e007      	b.n	80042ce <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	699a      	ldr	r2, [r3, #24]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0208 	orr.w	r2, r2, #8
 80042cc:	619a      	str	r2, [r3, #24]
}
 80042ce:	bf00      	nop
 80042d0:	3758      	adds	r7, #88	; 0x58
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b096      	sub	sp, #88	; 0x58
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042ec:	2b22      	cmp	r3, #34	; 0x22
 80042ee:	f040 8094 	bne.w	800441a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042f8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004302:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004306:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800430a:	4013      	ands	r3, r2
 800430c:	b29a      	uxth	r2, r3
 800430e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004310:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004316:	1c9a      	adds	r2, r3, #2
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004322:	b29b      	uxth	r3, r3
 8004324:	3b01      	subs	r3, #1
 8004326:	b29a      	uxth	r2, r3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d177      	bne.n	800442a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800434e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004358:	643b      	str	r3, [r7, #64]	; 0x40
 800435a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800435e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004360:	e841 2300 	strex	r3, r2, [r1]
 8004364:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004368:	2b00      	cmp	r3, #0
 800436a:	d1e6      	bne.n	800433a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	3308      	adds	r3, #8
 8004372:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	6a3b      	ldr	r3, [r7, #32]
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	61fb      	str	r3, [r7, #28]
   return(result);
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f023 0301 	bic.w	r3, r3, #1
 8004382:	64bb      	str	r3, [r7, #72]	; 0x48
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3308      	adds	r3, #8
 800438a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800438c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800438e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800439a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e5      	bne.n	800436c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d12e      	bne.n	8004412 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	e853 3f00 	ldrex	r3, [r3]
 80043c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	f023 0310 	bic.w	r3, r3, #16
 80043ce:	647b      	str	r3, [r7, #68]	; 0x44
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	461a      	mov	r2, r3
 80043d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043d8:	61bb      	str	r3, [r7, #24]
 80043da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043dc:	6979      	ldr	r1, [r7, #20]
 80043de:	69ba      	ldr	r2, [r7, #24]
 80043e0:	e841 2300 	strex	r3, r2, [r1]
 80043e4:	613b      	str	r3, [r7, #16]
   return(result);
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1e6      	bne.n	80043ba <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	2b10      	cmp	r3, #16
 80043f8:	d103      	bne.n	8004402 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2210      	movs	r2, #16
 8004400:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f7ff f9d4 	bl	80037b8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004410:	e00b      	b.n	800442a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fc f8de 	bl	80005d4 <HAL_UART_RxCpltCallback>
}
 8004418:	e007      	b.n	800442a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699a      	ldr	r2, [r3, #24]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f042 0208 	orr.w	r2, r2, #8
 8004428:	619a      	str	r2, [r3, #24]
}
 800442a:	bf00      	nop
 800442c:	3758      	adds	r7, #88	; 0x58
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <_ZdlPvj>:
 8004446:	f000 b803 	b.w	8004450 <_ZdlPv>

0800444a <__cxa_pure_virtual>:
 800444a:	b508      	push	{r3, lr}
 800444c:	f000 f80e 	bl	800446c <_ZSt9terminatev>

08004450 <_ZdlPv>:
 8004450:	f000 b842 	b.w	80044d8 <free>

08004454 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8004454:	b508      	push	{r3, lr}
 8004456:	4780      	blx	r0
 8004458:	f000 f80d 	bl	8004476 <abort>

0800445c <_ZSt13get_terminatev>:
 800445c:	4b02      	ldr	r3, [pc, #8]	; (8004468 <_ZSt13get_terminatev+0xc>)
 800445e:	6818      	ldr	r0, [r3, #0]
 8004460:	f3bf 8f5b 	dmb	ish
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	2000000c 	.word	0x2000000c

0800446c <_ZSt9terminatev>:
 800446c:	b508      	push	{r3, lr}
 800446e:	f7ff fff5 	bl	800445c <_ZSt13get_terminatev>
 8004472:	f7ff ffef 	bl	8004454 <_ZN10__cxxabiv111__terminateEPFvvE>

08004476 <abort>:
 8004476:	b508      	push	{r3, lr}
 8004478:	2006      	movs	r0, #6
 800447a:	f000 f8b1 	bl	80045e0 <raise>
 800447e:	2001      	movs	r0, #1
 8004480:	f7fc fd42 	bl	8000f08 <_exit>

08004484 <__errno>:
 8004484:	4b01      	ldr	r3, [pc, #4]	; (800448c <__errno+0x8>)
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	20000010 	.word	0x20000010

08004490 <__libc_init_array>:
 8004490:	b570      	push	{r4, r5, r6, lr}
 8004492:	4d0d      	ldr	r5, [pc, #52]	; (80044c8 <__libc_init_array+0x38>)
 8004494:	4c0d      	ldr	r4, [pc, #52]	; (80044cc <__libc_init_array+0x3c>)
 8004496:	1b64      	subs	r4, r4, r5
 8004498:	10a4      	asrs	r4, r4, #2
 800449a:	2600      	movs	r6, #0
 800449c:	42a6      	cmp	r6, r4
 800449e:	d109      	bne.n	80044b4 <__libc_init_array+0x24>
 80044a0:	4d0b      	ldr	r5, [pc, #44]	; (80044d0 <__libc_init_array+0x40>)
 80044a2:	4c0c      	ldr	r4, [pc, #48]	; (80044d4 <__libc_init_array+0x44>)
 80044a4:	f000 f8c6 	bl	8004634 <_init>
 80044a8:	1b64      	subs	r4, r4, r5
 80044aa:	10a4      	asrs	r4, r4, #2
 80044ac:	2600      	movs	r6, #0
 80044ae:	42a6      	cmp	r6, r4
 80044b0:	d105      	bne.n	80044be <__libc_init_array+0x2e>
 80044b2:	bd70      	pop	{r4, r5, r6, pc}
 80044b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044b8:	4798      	blx	r3
 80044ba:	3601      	adds	r6, #1
 80044bc:	e7ee      	b.n	800449c <__libc_init_array+0xc>
 80044be:	f855 3b04 	ldr.w	r3, [r5], #4
 80044c2:	4798      	blx	r3
 80044c4:	3601      	adds	r6, #1
 80044c6:	e7f2      	b.n	80044ae <__libc_init_array+0x1e>
 80044c8:	080046f4 	.word	0x080046f4
 80044cc:	080046f4 	.word	0x080046f4
 80044d0:	080046f4 	.word	0x080046f4
 80044d4:	08004700 	.word	0x08004700

080044d8 <free>:
 80044d8:	4b02      	ldr	r3, [pc, #8]	; (80044e4 <free+0xc>)
 80044da:	4601      	mov	r1, r0
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	f000 b80b 	b.w	80044f8 <_free_r>
 80044e2:	bf00      	nop
 80044e4:	20000010 	.word	0x20000010

080044e8 <memset>:
 80044e8:	4402      	add	r2, r0
 80044ea:	4603      	mov	r3, r0
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d100      	bne.n	80044f2 <memset+0xa>
 80044f0:	4770      	bx	lr
 80044f2:	f803 1b01 	strb.w	r1, [r3], #1
 80044f6:	e7f9      	b.n	80044ec <memset+0x4>

080044f8 <_free_r>:
 80044f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80044fa:	2900      	cmp	r1, #0
 80044fc:	d044      	beq.n	8004588 <_free_r+0x90>
 80044fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004502:	9001      	str	r0, [sp, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f1a1 0404 	sub.w	r4, r1, #4
 800450a:	bfb8      	it	lt
 800450c:	18e4      	addlt	r4, r4, r3
 800450e:	f000 f883 	bl	8004618 <__malloc_lock>
 8004512:	4a1e      	ldr	r2, [pc, #120]	; (800458c <_free_r+0x94>)
 8004514:	9801      	ldr	r0, [sp, #4]
 8004516:	6813      	ldr	r3, [r2, #0]
 8004518:	b933      	cbnz	r3, 8004528 <_free_r+0x30>
 800451a:	6063      	str	r3, [r4, #4]
 800451c:	6014      	str	r4, [r2, #0]
 800451e:	b003      	add	sp, #12
 8004520:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004524:	f000 b87e 	b.w	8004624 <__malloc_unlock>
 8004528:	42a3      	cmp	r3, r4
 800452a:	d908      	bls.n	800453e <_free_r+0x46>
 800452c:	6825      	ldr	r5, [r4, #0]
 800452e:	1961      	adds	r1, r4, r5
 8004530:	428b      	cmp	r3, r1
 8004532:	bf01      	itttt	eq
 8004534:	6819      	ldreq	r1, [r3, #0]
 8004536:	685b      	ldreq	r3, [r3, #4]
 8004538:	1949      	addeq	r1, r1, r5
 800453a:	6021      	streq	r1, [r4, #0]
 800453c:	e7ed      	b.n	800451a <_free_r+0x22>
 800453e:	461a      	mov	r2, r3
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	b10b      	cbz	r3, 8004548 <_free_r+0x50>
 8004544:	42a3      	cmp	r3, r4
 8004546:	d9fa      	bls.n	800453e <_free_r+0x46>
 8004548:	6811      	ldr	r1, [r2, #0]
 800454a:	1855      	adds	r5, r2, r1
 800454c:	42a5      	cmp	r5, r4
 800454e:	d10b      	bne.n	8004568 <_free_r+0x70>
 8004550:	6824      	ldr	r4, [r4, #0]
 8004552:	4421      	add	r1, r4
 8004554:	1854      	adds	r4, r2, r1
 8004556:	42a3      	cmp	r3, r4
 8004558:	6011      	str	r1, [r2, #0]
 800455a:	d1e0      	bne.n	800451e <_free_r+0x26>
 800455c:	681c      	ldr	r4, [r3, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	6053      	str	r3, [r2, #4]
 8004562:	4421      	add	r1, r4
 8004564:	6011      	str	r1, [r2, #0]
 8004566:	e7da      	b.n	800451e <_free_r+0x26>
 8004568:	d902      	bls.n	8004570 <_free_r+0x78>
 800456a:	230c      	movs	r3, #12
 800456c:	6003      	str	r3, [r0, #0]
 800456e:	e7d6      	b.n	800451e <_free_r+0x26>
 8004570:	6825      	ldr	r5, [r4, #0]
 8004572:	1961      	adds	r1, r4, r5
 8004574:	428b      	cmp	r3, r1
 8004576:	bf04      	itt	eq
 8004578:	6819      	ldreq	r1, [r3, #0]
 800457a:	685b      	ldreq	r3, [r3, #4]
 800457c:	6063      	str	r3, [r4, #4]
 800457e:	bf04      	itt	eq
 8004580:	1949      	addeq	r1, r1, r5
 8004582:	6021      	streq	r1, [r4, #0]
 8004584:	6054      	str	r4, [r2, #4]
 8004586:	e7ca      	b.n	800451e <_free_r+0x26>
 8004588:	b003      	add	sp, #12
 800458a:	bd30      	pop	{r4, r5, pc}
 800458c:	200001b8 	.word	0x200001b8

08004590 <_raise_r>:
 8004590:	291f      	cmp	r1, #31
 8004592:	b538      	push	{r3, r4, r5, lr}
 8004594:	4604      	mov	r4, r0
 8004596:	460d      	mov	r5, r1
 8004598:	d904      	bls.n	80045a4 <_raise_r+0x14>
 800459a:	2316      	movs	r3, #22
 800459c:	6003      	str	r3, [r0, #0]
 800459e:	f04f 30ff 	mov.w	r0, #4294967295
 80045a2:	bd38      	pop	{r3, r4, r5, pc}
 80045a4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80045a6:	b112      	cbz	r2, 80045ae <_raise_r+0x1e>
 80045a8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80045ac:	b94b      	cbnz	r3, 80045c2 <_raise_r+0x32>
 80045ae:	4620      	mov	r0, r4
 80045b0:	f000 f830 	bl	8004614 <_getpid_r>
 80045b4:	462a      	mov	r2, r5
 80045b6:	4601      	mov	r1, r0
 80045b8:	4620      	mov	r0, r4
 80045ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80045be:	f000 b817 	b.w	80045f0 <_kill_r>
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d00a      	beq.n	80045dc <_raise_r+0x4c>
 80045c6:	1c59      	adds	r1, r3, #1
 80045c8:	d103      	bne.n	80045d2 <_raise_r+0x42>
 80045ca:	2316      	movs	r3, #22
 80045cc:	6003      	str	r3, [r0, #0]
 80045ce:	2001      	movs	r0, #1
 80045d0:	e7e7      	b.n	80045a2 <_raise_r+0x12>
 80045d2:	2400      	movs	r4, #0
 80045d4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80045d8:	4628      	mov	r0, r5
 80045da:	4798      	blx	r3
 80045dc:	2000      	movs	r0, #0
 80045de:	e7e0      	b.n	80045a2 <_raise_r+0x12>

080045e0 <raise>:
 80045e0:	4b02      	ldr	r3, [pc, #8]	; (80045ec <raise+0xc>)
 80045e2:	4601      	mov	r1, r0
 80045e4:	6818      	ldr	r0, [r3, #0]
 80045e6:	f7ff bfd3 	b.w	8004590 <_raise_r>
 80045ea:	bf00      	nop
 80045ec:	20000010 	.word	0x20000010

080045f0 <_kill_r>:
 80045f0:	b538      	push	{r3, r4, r5, lr}
 80045f2:	4d07      	ldr	r5, [pc, #28]	; (8004610 <_kill_r+0x20>)
 80045f4:	2300      	movs	r3, #0
 80045f6:	4604      	mov	r4, r0
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	602b      	str	r3, [r5, #0]
 80045fe:	f7fc fc73 	bl	8000ee8 <_kill>
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	d102      	bne.n	800460c <_kill_r+0x1c>
 8004606:	682b      	ldr	r3, [r5, #0]
 8004608:	b103      	cbz	r3, 800460c <_kill_r+0x1c>
 800460a:	6023      	str	r3, [r4, #0]
 800460c:	bd38      	pop	{r3, r4, r5, pc}
 800460e:	bf00      	nop
 8004610:	200001bc 	.word	0x200001bc

08004614 <_getpid_r>:
 8004614:	f7fc bc60 	b.w	8000ed8 <_getpid>

08004618 <__malloc_lock>:
 8004618:	4801      	ldr	r0, [pc, #4]	; (8004620 <__malloc_lock+0x8>)
 800461a:	f000 b809 	b.w	8004630 <__retarget_lock_acquire_recursive>
 800461e:	bf00      	nop
 8004620:	200001c0 	.word	0x200001c0

08004624 <__malloc_unlock>:
 8004624:	4801      	ldr	r0, [pc, #4]	; (800462c <__malloc_unlock+0x8>)
 8004626:	f000 b804 	b.w	8004632 <__retarget_lock_release_recursive>
 800462a:	bf00      	nop
 800462c:	200001c0 	.word	0x200001c0

08004630 <__retarget_lock_acquire_recursive>:
 8004630:	4770      	bx	lr

08004632 <__retarget_lock_release_recursive>:
 8004632:	4770      	bx	lr

08004634 <_init>:
 8004634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004636:	bf00      	nop
 8004638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800463a:	bc08      	pop	{r3}
 800463c:	469e      	mov	lr, r3
 800463e:	4770      	bx	lr

08004640 <_fini>:
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	bf00      	nop
 8004644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004646:	bc08      	pop	{r3}
 8004648:	469e      	mov	lr, r3
 800464a:	4770      	bx	lr
