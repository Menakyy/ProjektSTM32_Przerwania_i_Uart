
ProjektSTM32_Przerwania_i_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003594  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003728  08003728  00013728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037b4  080037b4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080037b4  080037b4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037b4  080037b4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080037b4  080037b4  000137b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  080037c0  080037c0  000137c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080037cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000074  08003840  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000178  08003840  00020178  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce8b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000270c  00000000  00000000  0002cf2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  0002f640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002ff68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023462  00000000  00000000  000307a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ead4  00000000  00000000  00053c0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c28cf  00000000  00000000  000626de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00124fad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002754  00000000  00000000  00125000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000074 	.word	0x20000074
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003710 	.word	0x08003710

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000078 	.word	0x20000078
 80001d0:	08003710 	.word	0x08003710

080001d4 <_ZN5IGPIOC1Ev>:
 */

#ifndef INC_IGPIO_H_
#define INC_IGPIO_H_

class IGPIO {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	; (80001f0 <_ZN5IGPIOC1Ev+0x1c>)
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	601a      	str	r2, [r3, #0]
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	4618      	mov	r0, r3
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	08003744 	.word	0x08003744

080001f4 <_ZN7CButtonC1Ev>:


#include <CButton.h>


CButton::CButton() {
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	4618      	mov	r0, r3
 8000200:	f7ff ffe8 	bl	80001d4 <_ZN5IGPIOC1Ev>
 8000204:	4a03      	ldr	r2, [pc, #12]	; (8000214 <_ZN7CButtonC1Ev+0x20>)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4618      	mov	r0, r3
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	08003730 	.word	0x08003730

08000218 <_ZN7CButtonD1Ev>:

CButton::~CButton() {
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	4a04      	ldr	r2, [pc, #16]	; (8000234 <_ZN7CButtonD1Ev+0x1c>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4618      	mov	r0, r3
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	08003730 	.word	0x08003730

08000238 <_ZN7CButtonD0Ev>:
CButton::~CButton() {
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
}
 8000240:	6878      	ldr	r0, [r7, #4]
 8000242:	f7ff ffe9 	bl	8000218 <_ZN7CButtonD1Ev>
 8000246:	211c      	movs	r1, #28
 8000248:	6878      	ldr	r0, [r7, #4]
 800024a:	f003 f96a 	bl	8003522 <_ZdlPvj>
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	4618      	mov	r0, r3
 8000252:	3708      	adds	r7, #8
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}

08000258 <_ZN7CButton4initEP12GPIO_TypeDeftm>:

void CButton::init(GPIO_TypeDef* GpioPort, uint16_t GpioPin, uint32_t timerDebounce)
{
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	603b      	str	r3, [r7, #0]
 8000264:	4613      	mov	r3, r2
 8000266:	80fb      	strh	r3, [r7, #6]
	this->GpioPort 	= GpioPort;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	68ba      	ldr	r2, [r7, #8]
 800026c:	605a      	str	r2, [r3, #4]
	this->GpioPin 	= GpioPin;
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	88fa      	ldrh	r2, [r7, #6]
 8000272:	811a      	strh	r2, [r3, #8]
	m_timerDebounce = timerDebounce;
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	683a      	ldr	r2, [r7, #0]
 8000278:	611a      	str	r2, [r3, #16]
	state 			= idle;
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	2200      	movs	r2, #0
 800027e:	751a      	strb	r2, [r3, #20]
}
 8000280:	bf00      	nop
 8000282:	3714      	adds	r7, #20
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr

0800028c <_ZN7CButton6updateEv>:

void CButton::update()
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b082      	sub	sp, #8
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
	switch(state)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	7d1b      	ldrb	r3, [r3, #20]
 8000298:	2b02      	cmp	r3, #2
 800029a:	d04b      	beq.n	8000334 <_ZN7CButton6updateEv+0xa8>
 800029c:	2b02      	cmp	r3, #2
 800029e:	dc62      	bgt.n	8000366 <_ZN7CButton6updateEv+0xda>
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d002      	beq.n	80002aa <_ZN7CButton6updateEv+0x1e>
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d019      	beq.n	80002dc <_ZN7CButton6updateEv+0x50>
			{
				state = idle;
			}
			break;
	}
}
 80002a8:	e05d      	b.n	8000366 <_ZN7CButton6updateEv+0xda>
			if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	685a      	ldr	r2, [r3, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
 80002b0:	891b      	ldrh	r3, [r3, #8]
 80002b2:	4619      	mov	r1, r3
 80002b4:	4610      	mov	r0, r2
 80002b6:	f001 f84b 	bl	8001350 <HAL_GPIO_ReadPin>
 80002ba:	4603      	mov	r3, r0
 80002bc:	2b00      	cmp	r3, #0
 80002be:	bf0c      	ite	eq
 80002c0:	2301      	moveq	r3, #1
 80002c2:	2300      	movne	r3, #0
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d048      	beq.n	800035c <_ZN7CButton6updateEv+0xd0>
				state = debounce;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	2201      	movs	r2, #1
 80002ce:	751a      	strb	r2, [r3, #20]
				m_lastTick = HAL_GetTick();
 80002d0:	f000 fd96 	bl	8000e00 <HAL_GetTick>
 80002d4:	4602      	mov	r2, r0
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	60da      	str	r2, [r3, #12]
			break;
 80002da:	e03f      	b.n	800035c <_ZN7CButton6updateEv+0xd0>
			if((HAL_GetTick() - m_lastTick) > m_timerDebounce)
 80002dc:	f000 fd90 	bl	8000e00 <HAL_GetTick>
 80002e0:	4602      	mov	r2, r0
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	1ad2      	subs	r2, r2, r3
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	429a      	cmp	r2, r3
 80002ee:	bf8c      	ite	hi
 80002f0:	2301      	movhi	r3, #1
 80002f2:	2300      	movls	r3, #0
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d032      	beq.n	8000360 <_ZN7CButton6updateEv+0xd4>
				if(GPIO_PIN_RESET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	685a      	ldr	r2, [r3, #4]
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	891b      	ldrh	r3, [r3, #8]
 8000302:	4619      	mov	r1, r3
 8000304:	4610      	mov	r0, r2
 8000306:	f001 f823 	bl	8001350 <HAL_GPIO_ReadPin>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	bf0c      	ite	eq
 8000310:	2301      	moveq	r3, #1
 8000312:	2300      	movne	r3, #0
 8000314:	b2db      	uxtb	r3, r3
 8000316:	2b00      	cmp	r3, #0
 8000318:	d008      	beq.n	800032c <_ZN7CButton6updateEv+0xa0>
					state = pressed;
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2202      	movs	r2, #2
 800031e:	751a      	strb	r2, [r3, #20]
					m_lastTick = HAL_GetTick();
 8000320:	f000 fd6e 	bl	8000e00 <HAL_GetTick>
 8000324:	4602      	mov	r2, r0
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	60da      	str	r2, [r3, #12]
			break;
 800032a:	e019      	b.n	8000360 <_ZN7CButton6updateEv+0xd4>
					state = idle;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	2200      	movs	r2, #0
 8000330:	751a      	strb	r2, [r3, #20]
			break;
 8000332:	e015      	b.n	8000360 <_ZN7CButton6updateEv+0xd4>
			if(GPIO_PIN_SET == HAL_GPIO_ReadPin(GpioPort, GpioPin))
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	685a      	ldr	r2, [r3, #4]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	891b      	ldrh	r3, [r3, #8]
 800033c:	4619      	mov	r1, r3
 800033e:	4610      	mov	r0, r2
 8000340:	f001 f806 	bl	8001350 <HAL_GPIO_ReadPin>
 8000344:	4603      	mov	r3, r0
 8000346:	2b01      	cmp	r3, #1
 8000348:	bf0c      	ite	eq
 800034a:	2301      	moveq	r3, #1
 800034c:	2300      	movne	r3, #0
 800034e:	b2db      	uxtb	r3, r3
 8000350:	2b00      	cmp	r3, #0
 8000352:	d007      	beq.n	8000364 <_ZN7CButton6updateEv+0xd8>
				state = idle;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	2200      	movs	r2, #0
 8000358:	751a      	strb	r2, [r3, #20]
			break;
 800035a:	e003      	b.n	8000364 <_ZN7CButton6updateEv+0xd8>
			break;
 800035c:	bf00      	nop
 800035e:	e002      	b.n	8000366 <_ZN7CButton6updateEv+0xda>
			break;
 8000360:	bf00      	nop
 8000362:	e000      	b.n	8000366 <_ZN7CButton6updateEv+0xda>
			break;
 8000364:	bf00      	nop
}
 8000366:	bf00      	nop
 8000368:	3708      	adds	r7, #8
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}

0800036e <_ZN7CButton8getStateEv>:
{
	this->state = state;
}

CButton::ButtonStates CButton::getState()
{
 800036e:	b480      	push	{r7}
 8000370:	b083      	sub	sp, #12
 8000372:	af00      	add	r7, sp, #0
 8000374:	6078      	str	r0, [r7, #4]
	return state;
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	7d1b      	ldrb	r3, [r3, #20]
}
 800037a:	4618      	mov	r0, r3
 800037c:	370c      	adds	r7, #12
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
	...

08000388 <_ZN7CHelper7getUartEv>:
	//functions
	static void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin);
	static void Error_Handler();

	static UART_HandleTypeDef huart2;
	static inline UART_HandleTypeDef* getUart() {return &huart2;}
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
 800038c:	4b02      	ldr	r3, [pc, #8]	; (8000398 <_ZN7CHelper7getUartEv+0x10>)
 800038e:	4618      	mov	r0, r3
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr
 8000398:	200000e0 	.word	0x200000e0

0800039c <_ZN7CDriverC1Ev>:
CLed CDriver::m_greenLed;
CButton CDriver::m_blueButton;
CStateMachineLed CDriver::m_stateMachineLed;


CDriver::CDriver()
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
{
}
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4618      	mov	r0, r3
 80003a8:	370c      	adds	r7, #12
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr

080003b2 <_ZN7CDriverD1Ev>:
CDriver::~CDriver()
 80003b2:	b480      	push	{r7}
 80003b4:	b083      	sub	sp, #12
 80003b6:	af00      	add	r7, sp, #0
 80003b8:	6078      	str	r0, [r7, #4]
{
}
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4618      	mov	r0, r3
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr

080003c8 <_ZN7CDriver4initEv>:

void CDriver::init()
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	m_uartDriver.init(CHelper::getUart());
 80003d0:	f7ff ffda 	bl	8000388 <_ZN7CHelper7getUartEv>
 80003d4:	4603      	mov	r3, r0
 80003d6:	4619      	mov	r1, r3
 80003d8:	480d      	ldr	r0, [pc, #52]	; (8000410 <_ZN7CDriver4initEv+0x48>)
 80003da:	f000 fb69 	bl	8000ab0 <_ZN11CUartDriver4initEP20__UART_HandleTypeDef>

	m_greenLed.init(LD2_GPIO_Port, LD2_Pin, CLed::LedStates::on);
 80003de:	2300      	movs	r3, #0
 80003e0:	2220      	movs	r2, #32
 80003e2:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 80003e6:	480b      	ldr	r0, [pc, #44]	; (8000414 <_ZN7CDriver4initEv+0x4c>)
 80003e8:	f000 f9fc 	bl	80007e4 <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>
	m_blueButton.init(B1_GPIO_Port, B1_Pin, 20);
 80003ec:	2314      	movs	r3, #20
 80003ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80003f2:	4909      	ldr	r1, [pc, #36]	; (8000418 <_ZN7CDriver4initEv+0x50>)
 80003f4:	4809      	ldr	r0, [pc, #36]	; (800041c <_ZN7CDriver4initEv+0x54>)
 80003f6:	f7ff ff2f 	bl	8000258 <_ZN7CButton4initEP12GPIO_TypeDeftm>
	m_stateMachineLed.init(&m_greenLed,&m_blueButton,&m_uartDriver);
 80003fa:	4b05      	ldr	r3, [pc, #20]	; (8000410 <_ZN7CDriver4initEv+0x48>)
 80003fc:	4a07      	ldr	r2, [pc, #28]	; (800041c <_ZN7CDriver4initEv+0x54>)
 80003fe:	4905      	ldr	r1, [pc, #20]	; (8000414 <_ZN7CDriver4initEv+0x4c>)
 8000400:	4807      	ldr	r0, [pc, #28]	; (8000420 <_ZN7CDriver4initEv+0x58>)
 8000402:	f000 fab9 	bl	8000978 <_ZN16CStateMachineLed4initEP4CLedP7CButtonP11CUartDriver>
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	20000090 	.word	0x20000090
 8000414:	2000009c 	.word	0x2000009c
 8000418:	48000800 	.word	0x48000800
 800041c:	200000b4 	.word	0x200000b4
 8000420:	200000d0 	.word	0x200000d0

08000424 <_ZN7CDriver6updateEv>:


void CDriver::update()
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	m_blueButton.update();
 800042c:	4806      	ldr	r0, [pc, #24]	; (8000448 <_ZN7CDriver6updateEv+0x24>)
 800042e:	f7ff ff2d 	bl	800028c <_ZN7CButton6updateEv>
	m_greenLed.update();
 8000432:	4806      	ldr	r0, [pc, #24]	; (800044c <_ZN7CDriver6updateEv+0x28>)
 8000434:	f000 f9f7 	bl	8000826 <_ZN4CLed6updateEv>
	m_stateMachineLed.update();
 8000438:	4805      	ldr	r0, [pc, #20]	; (8000450 <_ZN7CDriver6updateEv+0x2c>)
 800043a:	f000 fab3 	bl	80009a4 <_ZN16CStateMachineLed6updateEv>
}
 800043e:	bf00      	nop
 8000440:	3708      	adds	r7, #8
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}
 8000446:	bf00      	nop
 8000448:	200000b4 	.word	0x200000b4
 800044c:	2000009c 	.word	0x2000009c
 8000450:	200000d0 	.word	0x200000d0

08000454 <_Z41__static_initialization_and_destruction_0ii>:
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	2b01      	cmp	r3, #1
 8000462:	d110      	bne.n	8000486 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8000464:	683b      	ldr	r3, [r7, #0]
 8000466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800046a:	4293      	cmp	r3, r2
 800046c:	d10b      	bne.n	8000486 <_Z41__static_initialization_and_destruction_0ii+0x32>
CUartDriver CDriver::m_uartDriver;
 800046e:	4812      	ldr	r0, [pc, #72]	; (80004b8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8000470:	f000 faee 	bl	8000a50 <_ZN11CUartDriverC1Ev>
CLed CDriver::m_greenLed;
 8000474:	4811      	ldr	r0, [pc, #68]	; (80004bc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8000476:	f000 f983 	bl	8000780 <_ZN4CLedC1Ev>
CButton CDriver::m_blueButton;
 800047a:	4811      	ldr	r0, [pc, #68]	; (80004c0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800047c:	f7ff feba 	bl	80001f4 <_ZN7CButtonC1Ev>
CStateMachineLed CDriver::m_stateMachineLed;
 8000480:	4810      	ldr	r0, [pc, #64]	; (80004c4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000482:	f000 fa49 	bl	8000918 <_ZN16CStateMachineLedC1Ev>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2b00      	cmp	r3, #0
 800048a:	d110      	bne.n	80004ae <_Z41__static_initialization_and_destruction_0ii+0x5a>
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000492:	4293      	cmp	r3, r2
 8000494:	d10b      	bne.n	80004ae <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8000496:	480b      	ldr	r0, [pc, #44]	; (80004c4 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8000498:	f000 fa4e 	bl	8000938 <_ZN16CStateMachineLedD1Ev>
CButton CDriver::m_blueButton;
 800049c:	4808      	ldr	r0, [pc, #32]	; (80004c0 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800049e:	f7ff febb 	bl	8000218 <_ZN7CButtonD1Ev>
CLed CDriver::m_greenLed;
 80004a2:	4806      	ldr	r0, [pc, #24]	; (80004bc <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80004a4:	f000 f97e 	bl	80007a4 <_ZN4CLedD1Ev>
CUartDriver CDriver::m_uartDriver;
 80004a8:	4803      	ldr	r0, [pc, #12]	; (80004b8 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80004aa:	f000 fae1 	bl	8000a70 <_ZN11CUartDriverD1Ev>
}
 80004ae:	bf00      	nop
 80004b0:	3708      	adds	r7, #8
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000090 	.word	0x20000090
 80004bc:	2000009c 	.word	0x2000009c
 80004c0:	200000b4 	.word	0x200000b4
 80004c4:	200000d0 	.word	0x200000d0

080004c8 <_GLOBAL__sub_I__ZN7CDriver12m_uartDriverE>:
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004d0:	2001      	movs	r0, #1
 80004d2:	f7ff ffbf 	bl	8000454 <_Z41__static_initialization_and_destruction_0ii>
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <_GLOBAL__sub_D__ZN7CDriver12m_uartDriverE>:
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
 80004dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80004e0:	2000      	movs	r0, #0
 80004e2:	f7ff ffb7 	bl	8000454 <_Z41__static_initialization_and_destruction_0ii>
 80004e6:	bd80      	pop	{r7, pc}

080004e8 <_ZN7CHelper4initEv>:

UART_HandleTypeDef CHelper::huart2;


void CHelper::init()
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	SystemClock_Config();
 80004ec:	f000 f8d6 	bl	800069c <_ZN7CHelper18SystemClock_ConfigEv>
	MX_GPIO_Init();
 80004f0:	f000 f806 	bl	8000500 <_ZN7CHelper12MX_GPIO_InitEv>
	MX_USART2_UART_Init();
 80004f4:	f000 f89e 	bl	8000634 <_ZN7CHelper19MX_USART2_UART_InitEv>
	MX_NVIC_Init();
 80004f8:	f000 f890 	bl	800061c <_ZN7CHelper12MX_NVIC_InitEv>
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <_ZN7CHelper12MX_GPIO_InitEv>:
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	}
}

void CHelper::MX_GPIO_Init()
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b08a      	sub	sp, #40	; 0x28
 8000504:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	f107 0314 	add.w	r3, r7, #20
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	4b3f      	ldr	r3, [pc, #252]	; (8000614 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000518:	695b      	ldr	r3, [r3, #20]
 800051a:	4a3e      	ldr	r2, [pc, #248]	; (8000614 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800051c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000520:	6153      	str	r3, [r2, #20]
 8000522:	4b3c      	ldr	r3, [pc, #240]	; (8000614 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800052e:	4b39      	ldr	r3, [pc, #228]	; (8000614 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	4a38      	ldr	r2, [pc, #224]	; (8000614 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000538:	6153      	str	r3, [r2, #20]
 800053a:	4b36      	ldr	r3, [pc, #216]	; (8000614 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800053c:	695b      	ldr	r3, [r3, #20]
 800053e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b33      	ldr	r3, [pc, #204]	; (8000614 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000548:	695b      	ldr	r3, [r3, #20]
 800054a:	4a32      	ldr	r2, [pc, #200]	; (8000614 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800054c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000550:	6153      	str	r3, [r2, #20]
 8000552:	4b30      	ldr	r3, [pc, #192]	; (8000614 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000554:	695b      	ldr	r3, [r3, #20]
 8000556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b2d      	ldr	r3, [pc, #180]	; (8000614 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000560:	695b      	ldr	r3, [r3, #20]
 8000562:	4a2c      	ldr	r2, [pc, #176]	; (8000614 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000568:	6153      	str	r3, [r2, #20]
 800056a:	4b2a      	ldr	r3, [pc, #168]	; (8000614 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800056c:	695b      	ldr	r3, [r3, #20]
 800056e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Reddiode_GPIO_Port, Reddiode_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2102      	movs	r1, #2
 800057a:	4827      	ldr	r0, [pc, #156]	; (8000618 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 800057c:	f000 ff00 	bl	8001380 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2120      	movs	r1, #32
 8000584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000588:	f000 fefa 	bl	8001380 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800058c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000590:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000592:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000596:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000598:	2300      	movs	r3, #0
 800059a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0314 	add.w	r3, r7, #20
 80005a0:	4619      	mov	r1, r3
 80005a2:	481d      	ldr	r0, [pc, #116]	; (8000618 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80005a4:	f000 fd4a 	bl	800103c <HAL_GPIO_Init>

	/*Configure GPIO pin : Mybutton_Pin */
	GPIO_InitStruct.Pin = Mybutton_Pin;
 80005a8:	2301      	movs	r3, #1
 80005aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005ac:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005b0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Mybutton_GPIO_Port, &GPIO_InitStruct);
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4619      	mov	r1, r3
 80005bc:	4816      	ldr	r0, [pc, #88]	; (8000618 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80005be:	f000 fd3d 	bl	800103c <HAL_GPIO_Init>

	/*Configure GPIO pin : Reddiode_Pin */
	GPIO_InitStruct.Pin = Reddiode_Pin;
 80005c2:	2302      	movs	r3, #2
 80005c4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005c6:	2301      	movs	r3, #1
 80005c8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ce:	2300      	movs	r3, #0
 80005d0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Reddiode_GPIO_Port, &GPIO_InitStruct);
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	4619      	mov	r1, r3
 80005d8:	480f      	ldr	r0, [pc, #60]	; (8000618 <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80005da:	f000 fd2f 	bl	800103c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80005de:	2320      	movs	r3, #32
 80005e0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e2:	2301      	movs	r3, #1
 80005e4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ea:	2300      	movs	r3, #0
 80005ec:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4619      	mov	r1, r3
 80005f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f8:	f000 fd20 	bl	800103c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2100      	movs	r1, #0
 8000600:	2006      	movs	r0, #6
 8000602:	f000 fce4 	bl	8000fce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000606:	2006      	movs	r0, #6
 8000608:	f000 fcfd 	bl	8001006 <HAL_NVIC_EnableIRQ>
}
 800060c:	bf00      	nop
 800060e:	3728      	adds	r7, #40	; 0x28
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	40021000 	.word	0x40021000
 8000618:	48000800 	.word	0x48000800

0800061c <_ZN7CHelper12MX_NVIC_InitEv>:

void CHelper::MX_NVIC_Init()
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000620:	2200      	movs	r2, #0
 8000622:	2100      	movs	r1, #0
 8000624:	2028      	movs	r0, #40	; 0x28
 8000626:	f000 fcd2 	bl	8000fce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800062a:	2028      	movs	r0, #40	; 0x28
 800062c:	f000 fceb 	bl	8001006 <HAL_NVIC_EnableIRQ>
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <_ZN7CHelper19MX_USART2_UART_InitEv>:

void CHelper::MX_USART2_UART_Init()
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	huart2.Instance = USART2;
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 800063a:	4a17      	ldr	r2, [pc, #92]	; (8000698 <_ZN7CHelper19MX_USART2_UART_InitEv+0x64>)
 800063c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 38400;
 800063e:	4b15      	ldr	r3, [pc, #84]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000640:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000644:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800064c:	4b11      	ldr	r3, [pc, #68]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000658:	4b0e      	ldr	r3, [pc, #56]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 800065a:	220c      	movs	r2, #12
 800065c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000664:	4b0b      	ldr	r3, [pc, #44]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800066a:	4b0a      	ldr	r3, [pc, #40]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000672:	2200      	movs	r2, #0
 8000674:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000676:	4807      	ldr	r0, [pc, #28]	; (8000694 <_ZN7CHelper19MX_USART2_UART_InitEv+0x60>)
 8000678:	f002 fb80 	bl	8002d7c <HAL_UART_Init>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	bf14      	ite	ne
 8000682:	2301      	movne	r3, #1
 8000684:	2300      	moveq	r3, #0
 8000686:	b2db      	uxtb	r3, r3
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <_ZN7CHelper19MX_USART2_UART_InitEv+0x5c>
	{
		Error_Handler();
 800068c:	f000 f873 	bl	8000776 <_ZN7CHelper13Error_HandlerEv>
	}
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000e0 	.word	0x200000e0
 8000698:	40004400 	.word	0x40004400

0800069c <_ZN7CHelper18SystemClock_ConfigEv>:

void CHelper::SystemClock_Config()
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b0a6      	sub	sp, #152	; 0x98
 80006a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006a6:	2228      	movs	r2, #40	; 0x28
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f002 ff8a 	bl	80035c4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006c0:	1d3b      	adds	r3, r7, #4
 80006c2:	2258      	movs	r2, #88	; 0x58
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 ff7c 	bl	80035c4 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006cc:	2302      	movs	r3, #2
 80006ce:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	2301      	movs	r3, #1
 80006d2:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d4:	2310      	movs	r3, #16
 80006d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80006e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fe96 	bl	800142c <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	bf14      	ite	ne
 8000706:	2301      	movne	r3, #1
 8000708:	2300      	moveq	r3, #0
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <_ZN7CHelper18SystemClock_ConfigEv+0x78>
	{
	Error_Handler();
 8000710:	f000 f831 	bl	8000776 <_ZN7CHelper13Error_HandlerEv>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	65fb      	str	r3, [r7, #92]	; 0x5c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000724:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800072e:	2102      	movs	r1, #2
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fecf 	bl	80024d4 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	bf14      	ite	ne
 800073c:	2301      	movne	r3, #1
 800073e:	2300      	moveq	r3, #0
 8000740:	b2db      	uxtb	r3, r3
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <_ZN7CHelper18SystemClock_ConfigEv+0xae>
	{
	Error_Handler();
 8000746:	f000 f816 	bl	8000776 <_ZN7CHelper13Error_HandlerEv>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800074a:	2302      	movs	r3, #2
 800074c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800074e:	2300      	movs	r3, #0
 8000750:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4618      	mov	r0, r3
 8000756:	f002 f8f3 	bl	8002940 <HAL_RCCEx_PeriphCLKConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <_ZN7CHelper18SystemClock_ConfigEv+0xd2>
	{
	Error_Handler();
 800076a:	f000 f804 	bl	8000776 <_ZN7CHelper13Error_HandlerEv>
	}
}
 800076e:	bf00      	nop
 8000770:	3798      	adds	r7, #152	; 0x98
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}

08000776 <_ZN7CHelper13Error_HandlerEv>:

void CHelper::Error_Handler()
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077a:	b672      	cpsid	i
}
 800077c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800077e:	e7fe      	b.n	800077e <_ZN7CHelper13Error_HandlerEv+0x8>

08000780 <_ZN4CLedC1Ev>:
 *      Author: Konra
 */

#include <CLed.h>

CLed::CLed() {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff fd22 	bl	80001d4 <_ZN5IGPIOC1Ev>
 8000790:	4a03      	ldr	r2, [pc, #12]	; (80007a0 <_ZN4CLedC1Ev+0x20>)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	4618      	mov	r0, r3
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	08003750 	.word	0x08003750

080007a4 <_ZN4CLedD1Ev>:

CLed::~CLed() {
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <_ZN4CLedD1Ev+0x1c>)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4618      	mov	r0, r3
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr
 80007c0:	08003750 	.word	0x08003750

080007c4 <_ZN4CLedD0Ev>:
CLed::~CLed() {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
}
 80007cc:	6878      	ldr	r0, [r7, #4]
 80007ce:	f7ff ffe9 	bl	80007a4 <_ZN4CLedD1Ev>
 80007d2:	2118      	movs	r1, #24
 80007d4:	6878      	ldr	r0, [r7, #4]
 80007d6:	f002 fea4 	bl	8003522 <_ZdlPvj>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>:

void CLed::init(GPIO_TypeDef* GpioPort, uint16_t GpioPin, LedStates state = off)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	4611      	mov	r1, r2
 80007f0:	461a      	mov	r2, r3
 80007f2:	460b      	mov	r3, r1
 80007f4:	80fb      	strh	r3, [r7, #6]
 80007f6:	4613      	mov	r3, r2
 80007f8:	717b      	strb	r3, [r7, #5]
	this->GpioPort 	= GpioPort;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	68ba      	ldr	r2, [r7, #8]
 80007fe:	605a      	str	r2, [r3, #4]
	this->GpioPin 	= GpioPin;
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	88fa      	ldrh	r2, [r7, #6]
 8000804:	811a      	strh	r2, [r3, #8]
	this->state 	= state;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	797a      	ldrb	r2, [r7, #5]
 800080a:	729a      	strb	r2, [r3, #10]
	m_timerToggle 	= 500;
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000812:	60da      	str	r2, [r3, #12]
	m_enter 		= false;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	2200      	movs	r2, #0
 8000818:	751a      	strb	r2, [r3, #20]
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <_ZN4CLed6updateEv>:
void CLed::update()
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
	switch(state)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7a9b      	ldrb	r3, [r3, #10]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d00e      	beq.n	8000854 <_ZN4CLed6updateEv+0x2e>
 8000836:	2b02      	cmp	r3, #2
 8000838:	dc2e      	bgt.n	8000898 <_ZN4CLed6updateEv+0x72>
 800083a:	2b00      	cmp	r3, #0
 800083c:	d002      	beq.n	8000844 <_ZN4CLed6updateEv+0x1e>
 800083e:	2b01      	cmp	r3, #1
 8000840:	d004      	beq.n	800084c <_ZN4CLed6updateEv+0x26>
				m_enter = false;
			}

			break;
	}
}
 8000842:	e029      	b.n	8000898 <_ZN4CLed6updateEv+0x72>
			turnOnLed();
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f000 f83b 	bl	80008c0 <_ZN4CLed9turnOnLedEv>
			break;
 800084a:	e025      	b.n	8000898 <_ZN4CLed6updateEv+0x72>
			turnOffLed();
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 f847 	bl	80008e0 <_ZN4CLed10turnOffLedEv>
			break;
 8000852:	e021      	b.n	8000898 <_ZN4CLed6updateEv+0x72>
			if(m_enter == false)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7d1b      	ldrb	r3, [r3, #20]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d107      	bne.n	800086c <_ZN4CLed6updateEv+0x46>
				m_lastTick = HAL_GetTick();
 800085c:	f000 fad0 	bl	8000e00 <HAL_GetTick>
 8000860:	4602      	mov	r2, r0
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	611a      	str	r2, [r3, #16]
				m_enter = true;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2201      	movs	r2, #1
 800086a:	751a      	strb	r2, [r3, #20]
			if((HAL_GetTick() - m_lastTick) > m_timerToggle)
 800086c:	f000 fac8 	bl	8000e00 <HAL_GetTick>
 8000870:	4602      	mov	r2, r0
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	691b      	ldr	r3, [r3, #16]
 8000876:	1ad2      	subs	r2, r2, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	429a      	cmp	r2, r3
 800087e:	bf8c      	ite	hi
 8000880:	2301      	movhi	r3, #1
 8000882:	2300      	movls	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d005      	beq.n	8000896 <_ZN4CLed6updateEv+0x70>
				togglePin();
 800088a:	6878      	ldr	r0, [r7, #4]
 800088c:	f000 f808 	bl	80008a0 <_ZN4CLed9togglePinEv>
				m_enter = false;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2200      	movs	r2, #0
 8000894:	751a      	strb	r2, [r3, #20]
			break;
 8000896:	bf00      	nop
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}

080008a0 <_ZN4CLed9togglePinEv>:
void CLed::togglePin()
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GpioPort, GpioPin);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	891b      	ldrh	r3, [r3, #8]
 80008b0:	4619      	mov	r1, r3
 80008b2:	4610      	mov	r0, r2
 80008b4:	f000 fd7c 	bl	80013b0 <HAL_GPIO_TogglePin>
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <_ZN4CLed9turnOnLedEv>:

void CLed::turnOnLed()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GpioPort, GpioPin, GPIO_PIN_SET);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6858      	ldr	r0, [r3, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	891b      	ldrh	r3, [r3, #8]
 80008d0:	2201      	movs	r2, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	f000 fd54 	bl	8001380 <HAL_GPIO_WritePin>
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}

080008e0 <_ZN4CLed10turnOffLedEv>:

void CLed::turnOffLed()
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GpioPort, GpioPin, GPIO_PIN_RESET);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	6858      	ldr	r0, [r3, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	891b      	ldrh	r3, [r3, #8]
 80008f0:	2200      	movs	r2, #0
 80008f2:	4619      	mov	r1, r3
 80008f4:	f000 fd44 	bl	8001380 <HAL_GPIO_WritePin>
}
 80008f8:	bf00      	nop
 80008fa:	3708      	adds	r7, #8
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <_ZN4CLed8getStateEv>:
{
	this->state = state;
}

CLed::LedStates CLed::getState()
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
	return state;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	7a9b      	ldrb	r3, [r3, #10]
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <_ZN16CStateMachineLedC1Ev>:
#include "stdio.h"


uint8_t CStateMachineLed::buffer[32];

CStateMachineLed::CStateMachineLed() {
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <_ZN16CStateMachineLedC1Ev+0x1c>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	4618      	mov	r0, r3
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	08003764 	.word	0x08003764

08000938 <_ZN16CStateMachineLedD1Ev>:

CStateMachineLed::~CStateMachineLed() {
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	4a04      	ldr	r2, [pc, #16]	; (8000954 <_ZN16CStateMachineLedD1Ev+0x1c>)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4618      	mov	r0, r3
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	08003764 	.word	0x08003764

08000958 <_ZN16CStateMachineLedD0Ev>:
CStateMachineLed::~CStateMachineLed() {
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
}
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff ffe9 	bl	8000938 <_ZN16CStateMachineLedD1Ev>
 8000966:	2110      	movs	r1, #16
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f002 fdda 	bl	8003522 <_ZdlPvj>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4618      	mov	r0, r3
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <_ZN16CStateMachineLed4initEP4CLedP7CButtonP11CUartDriver>:

void CStateMachineLed::init(CLed* led, CButton* button, CUartDriver* uart)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	603b      	str	r3, [r7, #0]
	this->led 		= led;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	68ba      	ldr	r2, [r7, #8]
 800098a:	605a      	str	r2, [r3, #4]
	this->button 	= button;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	687a      	ldr	r2, [r7, #4]
 8000990:	609a      	str	r2, [r3, #8]
	this->uart 		= uart;
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	683a      	ldr	r2, [r7, #0]
 8000996:	60da      	str	r2, [r3, #12]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <_ZN16CStateMachineLed6updateEv>:

void CStateMachineLed::update()
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	//uartReceive();

	if(button->getState() == CButton::pressed && led->getState() == CLed::on /*&& checkReceive()*/)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	4618      	mov	r0, r3
 80009b2:	f7ff fcdc 	bl	800036e <_ZN7CButton8getStateEv>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b02      	cmp	r3, #2
 80009ba:	d109      	bne.n	80009d0 <_ZN16CStateMachineLed6updateEv+0x2c>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	685b      	ldr	r3, [r3, #4]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f7ff ff9d 	bl	8000900 <_ZN4CLed8getStateEv>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d101      	bne.n	80009d0 <_ZN16CStateMachineLed6updateEv+0x2c>
 80009cc:	2301      	movs	r3, #1
 80009ce:	e000      	b.n	80009d2 <_ZN16CStateMachineLed6updateEv+0x2e>
 80009d0:	2300      	movs	r3, #0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d004      	beq.n	80009e0 <_ZN16CStateMachineLed6updateEv+0x3c>
	{
		led->turnOffLed();
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	4618      	mov	r0, r3
 80009dc:	f7ff ff80 	bl	80008e0 <_ZN4CLed10turnOffLedEv>

//		const char message[] = "Dioda wylaczona \r\n";
//		uart->transmit((uint8_t*)message, strlen(message), 500);
	}

	if(button->getState() == CButton::pressed && led->getState() == CLed::off /*&& checkReceive()*/)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	689b      	ldr	r3, [r3, #8]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff fcc2 	bl	800036e <_ZN7CButton8getStateEv>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d109      	bne.n	8000a04 <_ZN16CStateMachineLed6updateEv+0x60>
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff ff83 	bl	8000900 <_ZN4CLed8getStateEv>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d101      	bne.n	8000a04 <_ZN16CStateMachineLed6updateEv+0x60>
 8000a00:	2301      	movs	r3, #1
 8000a02:	e000      	b.n	8000a06 <_ZN16CStateMachineLed6updateEv+0x62>
 8000a04:	2300      	movs	r3, #0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d004      	beq.n	8000a14 <_ZN16CStateMachineLed6updateEv+0x70>
	{
		led->turnOnLed();
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ff56 	bl	80008c0 <_ZN4CLed9turnOnLedEv>
	}

	if(button->getState() == CButton::pressed && led->getState() == CLed::toggle)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	689b      	ldr	r3, [r3, #8]
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f7ff fca8 	bl	800036e <_ZN7CButton8getStateEv>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d109      	bne.n	8000a38 <_ZN16CStateMachineLed6updateEv+0x94>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff ff69 	bl	8000900 <_ZN4CLed8getStateEv>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d101      	bne.n	8000a38 <_ZN16CStateMachineLed6updateEv+0x94>
 8000a34:	2301      	movs	r3, #1
 8000a36:	e000      	b.n	8000a3a <_ZN16CStateMachineLed6updateEv+0x96>
 8000a38:	2300      	movs	r3, #0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d004      	beq.n	8000a48 <_ZN16CStateMachineLed6updateEv+0xa4>
	{
		led->togglePin();
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff2c 	bl	80008a0 <_ZN4CLed9togglePinEv>
	}
}
 8000a48:	bf00      	nop
 8000a4a:	3708      	adds	r7, #8
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <_ZN11CUartDriverC1Ev>:
 *      Author: Konra
 */

#include <CUartDriver.h>

CUartDriver::CUartDriver() {
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <_ZN11CUartDriverC1Ev+0x1c>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4618      	mov	r0, r3
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	08003774 	.word	0x08003774

08000a70 <_ZN11CUartDriverD1Ev>:

CUartDriver::~CUartDriver() {
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <_ZN11CUartDriverD1Ev+0x1c>)
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4618      	mov	r0, r3
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	08003774 	.word	0x08003774

08000a90 <_ZN11CUartDriverD0Ev>:
CUartDriver::~CUartDriver() {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
}
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f7ff ffe9 	bl	8000a70 <_ZN11CUartDriverD1Ev>
 8000a9e:	210c      	movs	r1, #12
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f002 fd3e 	bl	8003522 <_ZdlPvj>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <_ZN11CUartDriver4initEP20__UART_HandleTypeDef>:

void CUartDriver::init(UART_HandleTypeDef* m_uartDriver)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
 8000ab8:	6039      	str	r1, [r7, #0]
	this->m_uartDriver = m_uartDriver;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	609a      	str	r2, [r3, #8]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad0:	f000 f93c 	bl	8000d4c <HAL_Init>

  /* USER CODE BEGIN Init */
  CHelper::init();
 8000ad4:	f7ff fd08 	bl	80004e8 <_ZN7CHelper4initEv>
  m_driver.init();
 8000ad8:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <main+0x1c>)
 8000ada:	f7ff fc75 	bl	80003c8 <_ZN7CDriver4initEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  m_driver.update();
 8000ade:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <main+0x1c>)
 8000ae0:	f7ff fca0 	bl	8000424 <_ZN7CDriver6updateEv>
 8000ae4:	e7fb      	b.n	8000ade <main+0x12>
 8000ae6:	bf00      	nop
 8000ae8:	20000164 	.word	0x20000164

08000aec <_Z41__static_initialization_and_destruction_0ii>:
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
 8000af4:	6039      	str	r1, [r7, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d107      	bne.n	8000b0c <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d102      	bne.n	8000b0c <_Z41__static_initialization_and_destruction_0ii+0x20>
CDriver m_driver;
 8000b06:	4809      	ldr	r0, [pc, #36]	; (8000b2c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000b08:	f7ff fc48 	bl	800039c <_ZN7CDriverC1Ev>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d107      	bne.n	8000b22 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d102      	bne.n	8000b22 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000b1e:	f7ff fc48 	bl	80003b2 <_ZN7CDriverD1Ev>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000164 	.word	0x20000164

08000b30 <_GLOBAL__sub_I_m_driver>:
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b38:	2001      	movs	r0, #1
 8000b3a:	f7ff ffd7 	bl	8000aec <_Z41__static_initialization_and_destruction_0ii>
 8000b3e:	bd80      	pop	{r7, pc}

08000b40 <_GLOBAL__sub_D_m_driver>:
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f7ff ffcf 	bl	8000aec <_Z41__static_initialization_and_destruction_0ii>
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <HAL_MspInit+0x44>)
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	; (8000b94 <HAL_MspInit+0x44>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6193      	str	r3, [r2, #24]
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <HAL_MspInit+0x44>)
 8000b64:	699b      	ldr	r3, [r3, #24]
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_MspInit+0x44>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <HAL_MspInit+0x44>)
 8000b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b78:	61d3      	str	r3, [r2, #28]
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_MspInit+0x44>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b86:	2007      	movs	r0, #7
 8000b88:	f000 fa16 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	3708      	adds	r7, #8
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40021000 	.word	0x40021000

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08a      	sub	sp, #40	; 0x28
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a17      	ldr	r2, [pc, #92]	; (8000c14 <HAL_UART_MspInit+0x7c>)
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	d128      	bne.n	8000c0c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bc4:	61d3      	str	r3, [r2, #28]
 8000bc6:	4b14      	ldr	r3, [pc, #80]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bc8:	69db      	ldr	r3, [r3, #28]
 8000bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bd4:	695b      	ldr	r3, [r3, #20]
 8000bd6:	4a10      	ldr	r2, [pc, #64]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bdc:	6153      	str	r3, [r2, #20]
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_UART_MspInit+0x80>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bea:	230c      	movs	r3, #12
 8000bec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bfa:	2307      	movs	r3, #7
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	4619      	mov	r1, r3
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c08:	f000 fa18 	bl	800103c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c0c:	bf00      	nop
 8000c0e:	3728      	adds	r7, #40	; 0x28
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40004400 	.word	0x40004400
 8000c18:	40021000 	.word	0x40021000

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <NMI_Handler+0x4>

08000c22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <HardFault_Handler+0x4>

08000c28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <MemManage_Handler+0x4>

08000c2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <BusFault_Handler+0x4>

08000c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <UsageFault_Handler+0x4>

08000c3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr

08000c56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c56:	b480      	push	{r7}
 8000c58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c68:	f000 f8b6 	bl	8000dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c74:	2001      	movs	r0, #1
 8000c76:	f000 fbb5 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c82:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c86:	f000 fbad 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
	return 1;
 8000c92:	2301      	movs	r3, #1
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <_kill>:

int _kill(int pid, int sig)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000ca8:	f002 fc5a 	bl	8003560 <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2216      	movs	r2, #22
 8000cb0:	601a      	str	r2, [r3, #0]
	return -1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_exit>:

void _exit (int status)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cc6:	f04f 31ff 	mov.w	r1, #4294967295
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ffe7 	bl	8000c9e <_kill>
	while (1) {}		/* Make sure we hang here */
 8000cd0:	e7fe      	b.n	8000cd0 <_exit+0x12>
	...

08000cd4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <SystemInit+0x20>)
 8000cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cde:	4a05      	ldr	r2, [pc, #20]	; (8000cf4 <SystemInit+0x20>)
 8000ce0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d30 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cfc:	480d      	ldr	r0, [pc, #52]	; (8000d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cfe:	490e      	ldr	r1, [pc, #56]	; (8000d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d00:	4a0e      	ldr	r2, [pc, #56]	; (8000d3c <LoopForever+0xe>)
  movs r3, #0
 8000d02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d04:	e002      	b.n	8000d0c <LoopCopyDataInit>

08000d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d0a:	3304      	adds	r3, #4

08000d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d10:	d3f9      	bcc.n	8000d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d12:	4a0b      	ldr	r2, [pc, #44]	; (8000d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d14:	4c0b      	ldr	r4, [pc, #44]	; (8000d44 <LoopForever+0x16>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d18:	e001      	b.n	8000d1e <LoopFillZerobss>

08000d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d1c:	3204      	adds	r2, #4

08000d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d20:	d3fb      	bcc.n	8000d1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d22:	f7ff ffd7 	bl	8000cd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d26:	f002 fc21 	bl	800356c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d2a:	f7ff fecf 	bl	8000acc <main>

08000d2e <LoopForever>:

LoopForever:
    b LoopForever
 8000d2e:	e7fe      	b.n	8000d2e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d30:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d38:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000d3c:	080037cc 	.word	0x080037cc
  ldr r2, =_sbss
 8000d40:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000d44:	20000178 	.word	0x20000178

08000d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d48:	e7fe      	b.n	8000d48 <ADC1_2_IRQHandler>
	...

08000d4c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <HAL_Init+0x28>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a07      	ldr	r2, [pc, #28]	; (8000d74 <HAL_Init+0x28>)
 8000d56:	f043 0310 	orr.w	r3, r3, #16
 8000d5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d5c:	2003      	movs	r0, #3
 8000d5e:	f000 f92b 	bl	8000fb8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d62:	2000      	movs	r0, #0
 8000d64:	f000 f808 	bl	8000d78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d68:	f7ff fef2 	bl	8000b50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40022000 	.word	0x40022000

08000d78 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <HAL_InitTick+0x54>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_InitTick+0x58>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d96:	4618      	mov	r0, r3
 8000d98:	f000 f943 	bl	8001022 <HAL_SYSTICK_Config>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00e      	b.n	8000dc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b0f      	cmp	r3, #15
 8000daa:	d80a      	bhi.n	8000dc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dac:	2200      	movs	r2, #0
 8000dae:	6879      	ldr	r1, [r7, #4]
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f000 f90b 	bl	8000fce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db8:	4a06      	ldr	r2, [pc, #24]	; (8000dd4 <HAL_InitTick+0x5c>)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e000      	b.n	8000dc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	20000004 	.word	0x20000004

08000dd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	; (8000df8 <HAL_IncTick+0x20>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	461a      	mov	r2, r3
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <HAL_IncTick+0x24>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4413      	add	r3, r2
 8000de8:	4a04      	ldr	r2, [pc, #16]	; (8000dfc <HAL_IncTick+0x24>)
 8000dea:	6013      	str	r3, [r2, #0]
}
 8000dec:	bf00      	nop
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000168 	.word	0x20000168

08000e00 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e04:	4b03      	ldr	r3, [pc, #12]	; (8000e14 <HAL_GetTick+0x14>)
 8000e06:	681b      	ldr	r3, [r3, #0]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000168 	.word	0x20000168

08000e18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e2e:	68ba      	ldr	r2, [r7, #8]
 8000e30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e34:	4013      	ands	r3, r2
 8000e36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e4a:	4a04      	ldr	r2, [pc, #16]	; (8000e5c <__NVIC_SetPriorityGrouping+0x44>)
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	60d3      	str	r3, [r2, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	e000ed00 	.word	0xe000ed00

08000e60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e64:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <__NVIC_GetPriorityGrouping+0x18>)
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	0a1b      	lsrs	r3, r3, #8
 8000e6a:	f003 0307 	and.w	r3, r3, #7
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000ed00 	.word	0xe000ed00

08000e7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	db0b      	blt.n	8000ea6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8e:	79fb      	ldrb	r3, [r7, #7]
 8000e90:	f003 021f 	and.w	r2, r3, #31
 8000e94:	4907      	ldr	r1, [pc, #28]	; (8000eb4 <__NVIC_EnableIRQ+0x38>)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	095b      	lsrs	r3, r3, #5
 8000e9c:	2001      	movs	r0, #1
 8000e9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000ea2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000e100 	.word	0xe000e100

08000eb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	6039      	str	r1, [r7, #0]
 8000ec2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	db0a      	blt.n	8000ee2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	b2da      	uxtb	r2, r3
 8000ed0:	490c      	ldr	r1, [pc, #48]	; (8000f04 <__NVIC_SetPriority+0x4c>)
 8000ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed6:	0112      	lsls	r2, r2, #4
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	440b      	add	r3, r1
 8000edc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee0:	e00a      	b.n	8000ef8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_SetPriority+0x50>)
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	f003 030f 	and.w	r3, r3, #15
 8000eee:	3b04      	subs	r3, #4
 8000ef0:	0112      	lsls	r2, r2, #4
 8000ef2:	b2d2      	uxtb	r2, r2
 8000ef4:	440b      	add	r3, r1
 8000ef6:	761a      	strb	r2, [r3, #24]
}
 8000ef8:	bf00      	nop
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000e100 	.word	0xe000e100
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b089      	sub	sp, #36	; 0x24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	f1c3 0307 	rsb	r3, r3, #7
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	bf28      	it	cs
 8000f2a:	2304      	movcs	r3, #4
 8000f2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	3304      	adds	r3, #4
 8000f32:	2b06      	cmp	r3, #6
 8000f34:	d902      	bls.n	8000f3c <NVIC_EncodePriority+0x30>
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3b03      	subs	r3, #3
 8000f3a:	e000      	b.n	8000f3e <NVIC_EncodePriority+0x32>
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	f04f 32ff 	mov.w	r2, #4294967295
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	401a      	ands	r2, r3
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f54:	f04f 31ff 	mov.w	r1, #4294967295
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f5e:	43d9      	mvns	r1, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f64:	4313      	orrs	r3, r2
         );
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3724      	adds	r7, #36	; 0x24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr
	...

08000f74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3b01      	subs	r3, #1
 8000f80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f84:	d301      	bcc.n	8000f8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f86:	2301      	movs	r3, #1
 8000f88:	e00f      	b.n	8000faa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <SysTick_Config+0x40>)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f92:	210f      	movs	r1, #15
 8000f94:	f04f 30ff 	mov.w	r0, #4294967295
 8000f98:	f7ff ff8e 	bl	8000eb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f9c:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <SysTick_Config+0x40>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fa2:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <SysTick_Config+0x40>)
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	e000e010 	.word	0xe000e010

08000fb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ff29 	bl	8000e18 <__NVIC_SetPriorityGrouping>
}
 8000fc6:	bf00      	nop
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b086      	sub	sp, #24
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	60b9      	str	r1, [r7, #8]
 8000fd8:	607a      	str	r2, [r7, #4]
 8000fda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe0:	f7ff ff3e 	bl	8000e60 <__NVIC_GetPriorityGrouping>
 8000fe4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	68b9      	ldr	r1, [r7, #8]
 8000fea:	6978      	ldr	r0, [r7, #20]
 8000fec:	f7ff ff8e 	bl	8000f0c <NVIC_EncodePriority>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ff6:	4611      	mov	r1, r2
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff ff5d 	bl	8000eb8 <__NVIC_SetPriority>
}
 8000ffe:	bf00      	nop
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b082      	sub	sp, #8
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff ff31 	bl	8000e7c <__NVIC_EnableIRQ>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff ffa2 	bl	8000f74 <SysTick_Config>
 8001030:	4603      	mov	r3, r0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b087      	sub	sp, #28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001046:	2300      	movs	r3, #0
 8001048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104a:	e160      	b.n	800130e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 8152 	beq.w	8001308 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b01      	cmp	r3, #1
 800106e:	d005      	beq.n	800107c <HAL_GPIO_Init+0x40>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d130      	bne.n	80010de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	693a      	ldr	r2, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b2:	2201      	movs	r2, #1
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	091b      	lsrs	r3, r3, #4
 80010c8:	f003 0201 	and.w	r2, r3, #1
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d017      	beq.n	800111a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d123      	bne.n	800116e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	693a      	ldr	r2, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	6939      	ldr	r1, [r7, #16]
 800116a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	693a      	ldr	r2, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0203 	and.w	r2, r3, #3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 80ac 	beq.w	8001308 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b0:	4b5e      	ldr	r3, [pc, #376]	; (800132c <HAL_GPIO_Init+0x2f0>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a5d      	ldr	r2, [pc, #372]	; (800132c <HAL_GPIO_Init+0x2f0>)
 80011b6:	f043 0301 	orr.w	r3, r3, #1
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b5b      	ldr	r3, [pc, #364]	; (800132c <HAL_GPIO_Init+0x2f0>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0301 	and.w	r3, r3, #1
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011c8:	4a59      	ldr	r2, [pc, #356]	; (8001330 <HAL_GPIO_Init+0x2f4>)
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	089b      	lsrs	r3, r3, #2
 80011ce:	3302      	adds	r3, #2
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	220f      	movs	r2, #15
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	4013      	ands	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011f2:	d025      	beq.n	8001240 <HAL_GPIO_Init+0x204>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a4f      	ldr	r2, [pc, #316]	; (8001334 <HAL_GPIO_Init+0x2f8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d01f      	beq.n	800123c <HAL_GPIO_Init+0x200>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a4e      	ldr	r2, [pc, #312]	; (8001338 <HAL_GPIO_Init+0x2fc>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d019      	beq.n	8001238 <HAL_GPIO_Init+0x1fc>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a4d      	ldr	r2, [pc, #308]	; (800133c <HAL_GPIO_Init+0x300>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d013      	beq.n	8001234 <HAL_GPIO_Init+0x1f8>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a4c      	ldr	r2, [pc, #304]	; (8001340 <HAL_GPIO_Init+0x304>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d00d      	beq.n	8001230 <HAL_GPIO_Init+0x1f4>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	4a4b      	ldr	r2, [pc, #300]	; (8001344 <HAL_GPIO_Init+0x308>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d007      	beq.n	800122c <HAL_GPIO_Init+0x1f0>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a4a      	ldr	r2, [pc, #296]	; (8001348 <HAL_GPIO_Init+0x30c>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d101      	bne.n	8001228 <HAL_GPIO_Init+0x1ec>
 8001224:	2306      	movs	r3, #6
 8001226:	e00c      	b.n	8001242 <HAL_GPIO_Init+0x206>
 8001228:	2307      	movs	r3, #7
 800122a:	e00a      	b.n	8001242 <HAL_GPIO_Init+0x206>
 800122c:	2305      	movs	r3, #5
 800122e:	e008      	b.n	8001242 <HAL_GPIO_Init+0x206>
 8001230:	2304      	movs	r3, #4
 8001232:	e006      	b.n	8001242 <HAL_GPIO_Init+0x206>
 8001234:	2303      	movs	r3, #3
 8001236:	e004      	b.n	8001242 <HAL_GPIO_Init+0x206>
 8001238:	2302      	movs	r3, #2
 800123a:	e002      	b.n	8001242 <HAL_GPIO_Init+0x206>
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <HAL_GPIO_Init+0x206>
 8001240:	2300      	movs	r3, #0
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	f002 0203 	and.w	r2, r2, #3
 8001248:	0092      	lsls	r2, r2, #2
 800124a:	4093      	lsls	r3, r2
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001252:	4937      	ldr	r1, [pc, #220]	; (8001330 <HAL_GPIO_Init+0x2f4>)
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	089b      	lsrs	r3, r3, #2
 8001258:	3302      	adds	r3, #2
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001260:	4b3a      	ldr	r3, [pc, #232]	; (800134c <HAL_GPIO_Init+0x310>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001284:	4a31      	ldr	r2, [pc, #196]	; (800134c <HAL_GPIO_Init+0x310>)
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800128a:	4b30      	ldr	r3, [pc, #192]	; (800134c <HAL_GPIO_Init+0x310>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	43db      	mvns	r3, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4013      	ands	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80012a6:	693a      	ldr	r2, [r7, #16]
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012ae:	4a27      	ldr	r2, [pc, #156]	; (800134c <HAL_GPIO_Init+0x310>)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b4:	4b25      	ldr	r3, [pc, #148]	; (800134c <HAL_GPIO_Init+0x310>)
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012d8:	4a1c      	ldr	r2, [pc, #112]	; (800134c <HAL_GPIO_Init+0x310>)
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012de:	4b1b      	ldr	r3, [pc, #108]	; (800134c <HAL_GPIO_Init+0x310>)
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	4013      	ands	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001302:	4a12      	ldr	r2, [pc, #72]	; (800134c <HAL_GPIO_Init+0x310>)
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	3301      	adds	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	fa22 f303 	lsr.w	r3, r2, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	f47f ae97 	bne.w	800104c <HAL_GPIO_Init+0x10>
  }
}
 800131e:	bf00      	nop
 8001320:	bf00      	nop
 8001322:	371c      	adds	r7, #28
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40021000 	.word	0x40021000
 8001330:	40010000 	.word	0x40010000
 8001334:	48000400 	.word	0x48000400
 8001338:	48000800 	.word	0x48000800
 800133c:	48000c00 	.word	0x48000c00
 8001340:	48001000 	.word	0x48001000
 8001344:	48001400 	.word	0x48001400
 8001348:	48001800 	.word	0x48001800
 800134c:	40010400 	.word	0x40010400

08001350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001350:	b480      	push	{r7}
 8001352:	b085      	sub	sp, #20
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	691a      	ldr	r2, [r3, #16]
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	4013      	ands	r3, r2
 8001364:	2b00      	cmp	r3, #0
 8001366:	d002      	beq.n	800136e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001368:	2301      	movs	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	e001      	b.n	8001372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001372:	7bfb      	ldrb	r3, [r7, #15]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3714      	adds	r7, #20
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr

08001380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	807b      	strh	r3, [r7, #2]
 800138c:	4613      	mov	r3, r2
 800138e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001390:	787b      	ldrb	r3, [r7, #1]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d003      	beq.n	800139e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001396:	887a      	ldrh	r2, [r7, #2]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800139c:	e002      	b.n	80013a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800139e:	887a      	ldrh	r2, [r7, #2]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013a4:	bf00      	nop
 80013a6:	370c      	adds	r7, #12
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	695b      	ldr	r3, [r3, #20]
 80013c0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013c2:	887a      	ldrh	r2, [r7, #2]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4013      	ands	r3, r2
 80013c8:	041a      	lsls	r2, r3, #16
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	43d9      	mvns	r1, r3
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	400b      	ands	r3, r1
 80013d2:	431a      	orrs	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	619a      	str	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	3714      	adds	r7, #20
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f806 	bl	8001414 <HAL_GPIO_EXTI_Callback>
  }
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40010400 	.word	0x40010400

08001414 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
	...

0800142c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8001432:	af00      	add	r7, sp, #0
 8001434:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001438:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800143c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800143e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001442:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d102      	bne.n	8001452 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	f001 b83a 	b.w	80024c6 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001452:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001456:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	f000 816f 	beq.w	8001746 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001468:	4bb5      	ldr	r3, [pc, #724]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 030c 	and.w	r3, r3, #12
 8001470:	2b04      	cmp	r3, #4
 8001472:	d00c      	beq.n	800148e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001474:	4bb2      	ldr	r3, [pc, #712]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 030c 	and.w	r3, r3, #12
 800147c:	2b08      	cmp	r3, #8
 800147e:	d15c      	bne.n	800153a <HAL_RCC_OscConfig+0x10e>
 8001480:	4baf      	ldr	r3, [pc, #700]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800148c:	d155      	bne.n	800153a <HAL_RCC_OscConfig+0x10e>
 800148e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001492:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001496:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800149a:	fa93 f3a3 	rbit	r3, r3
 800149e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014a2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014a6:	fab3 f383 	clz	r3, r3
 80014aa:	b2db      	uxtb	r3, r3
 80014ac:	095b      	lsrs	r3, r3, #5
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d102      	bne.n	80014c0 <HAL_RCC_OscConfig+0x94>
 80014ba:	4ba1      	ldr	r3, [pc, #644]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	e015      	b.n	80014ec <HAL_RCC_OscConfig+0xc0>
 80014c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c4:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014c8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80014cc:	fa93 f3a3 	rbit	r3, r3
 80014d0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80014d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80014dc:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80014e0:	fa93 f3a3 	rbit	r3, r3
 80014e4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80014e8:	4b95      	ldr	r3, [pc, #596]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 80014ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ec:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80014f0:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80014f4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80014f8:	fa92 f2a2 	rbit	r2, r2
 80014fc:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8001500:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001504:	fab2 f282 	clz	r2, r2
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	f042 0220 	orr.w	r2, r2, #32
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	f002 021f 	and.w	r2, r2, #31
 8001514:	2101      	movs	r1, #1
 8001516:	fa01 f202 	lsl.w	r2, r1, r2
 800151a:	4013      	ands	r3, r2
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 8111 	beq.w	8001744 <HAL_RCC_OscConfig+0x318>
 8001522:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001526:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	f040 8108 	bne.w	8001744 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	f000 bfc6 	b.w	80024c6 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800153a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800153e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800154a:	d106      	bne.n	800155a <HAL_RCC_OscConfig+0x12e>
 800154c:	4b7c      	ldr	r3, [pc, #496]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a7b      	ldr	r2, [pc, #492]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 8001552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001556:	6013      	str	r3, [r2, #0]
 8001558:	e036      	b.n	80015c8 <HAL_RCC_OscConfig+0x19c>
 800155a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10c      	bne.n	8001584 <HAL_RCC_OscConfig+0x158>
 800156a:	4b75      	ldr	r3, [pc, #468]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a74      	ldr	r2, [pc, #464]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 8001570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001574:	6013      	str	r3, [r2, #0]
 8001576:	4b72      	ldr	r3, [pc, #456]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a71      	ldr	r2, [pc, #452]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 800157c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001580:	6013      	str	r3, [r2, #0]
 8001582:	e021      	b.n	80015c8 <HAL_RCC_OscConfig+0x19c>
 8001584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001588:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001594:	d10c      	bne.n	80015b0 <HAL_RCC_OscConfig+0x184>
 8001596:	4b6a      	ldr	r3, [pc, #424]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a69      	ldr	r2, [pc, #420]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 800159c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b67      	ldr	r3, [pc, #412]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a66      	ldr	r2, [pc, #408]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 80015a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	e00b      	b.n	80015c8 <HAL_RCC_OscConfig+0x19c>
 80015b0:	4b63      	ldr	r3, [pc, #396]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a62      	ldr	r2, [pc, #392]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 80015b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b60      	ldr	r3, [pc, #384]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a5f      	ldr	r2, [pc, #380]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 80015c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c6:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d059      	beq.n	800168c <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d8:	f7ff fc12 	bl	8000e00 <HAL_GetTick>
 80015dc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e0:	e00a      	b.n	80015f8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e2:	f7ff fc0d 	bl	8000e00 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d902      	bls.n	80015f8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	f000 bf67 	b.w	80024c6 <HAL_RCC_OscConfig+0x109a>
 80015f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015fc:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001600:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001604:	fa93 f3a3 	rbit	r3, r3
 8001608:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 800160c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001610:	fab3 f383 	clz	r3, r3
 8001614:	b2db      	uxtb	r3, r3
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	b2db      	uxtb	r3, r3
 800161a:	f043 0301 	orr.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b01      	cmp	r3, #1
 8001622:	d102      	bne.n	800162a <HAL_RCC_OscConfig+0x1fe>
 8001624:	4b46      	ldr	r3, [pc, #280]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	e015      	b.n	8001656 <HAL_RCC_OscConfig+0x22a>
 800162a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800162e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001632:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001636:	fa93 f3a3 	rbit	r3, r3
 800163a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800163e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001642:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001646:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800164a:	fa93 f3a3 	rbit	r3, r3
 800164e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001652:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 8001654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001656:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800165a:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800165e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001662:	fa92 f2a2 	rbit	r2, r2
 8001666:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800166a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800166e:	fab2 f282 	clz	r2, r2
 8001672:	b2d2      	uxtb	r2, r2
 8001674:	f042 0220 	orr.w	r2, r2, #32
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	f002 021f 	and.w	r2, r2, #31
 800167e:	2101      	movs	r1, #1
 8001680:	fa01 f202 	lsl.w	r2, r1, r2
 8001684:	4013      	ands	r3, r2
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0ab      	beq.n	80015e2 <HAL_RCC_OscConfig+0x1b6>
 800168a:	e05c      	b.n	8001746 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fbb8 	bl	8000e00 <HAL_GetTick>
 8001690:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001694:	e00a      	b.n	80016ac <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001696:	f7ff fbb3 	bl	8000e00 <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d902      	bls.n	80016ac <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	f000 bf0d 	b.w	80024c6 <HAL_RCC_OscConfig+0x109a>
 80016ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016b0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80016c0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016c4:	fab3 f383 	clz	r3, r3
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	095b      	lsrs	r3, r3, #5
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	f043 0301 	orr.w	r3, r3, #1
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d102      	bne.n	80016de <HAL_RCC_OscConfig+0x2b2>
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	e015      	b.n	800170a <HAL_RCC_OscConfig+0x2de>
 80016de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016e2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80016ea:	fa93 f3a3 	rbit	r3, r3
 80016ee:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80016f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80016f6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80016fa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_RCC_OscConfig+0x314>)
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800170e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001712:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001716:	fa92 f2a2 	rbit	r2, r2
 800171a:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800171e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001722:	fab2 f282 	clz	r2, r2
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	f042 0220 	orr.w	r2, r2, #32
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	f002 021f 	and.w	r2, r2, #31
 8001732:	2101      	movs	r1, #1
 8001734:	fa01 f202 	lsl.w	r2, r1, r2
 8001738:	4013      	ands	r3, r2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1ab      	bne.n	8001696 <HAL_RCC_OscConfig+0x26a>
 800173e:	e002      	b.n	8001746 <HAL_RCC_OscConfig+0x31a>
 8001740:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001744:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001746:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800174a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	2b00      	cmp	r3, #0
 8001758:	f000 817f 	beq.w	8001a5a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800175c:	4ba7      	ldr	r3, [pc, #668]	; (80019fc <HAL_RCC_OscConfig+0x5d0>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f003 030c 	and.w	r3, r3, #12
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00c      	beq.n	8001782 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001768:	4ba4      	ldr	r3, [pc, #656]	; (80019fc <HAL_RCC_OscConfig+0x5d0>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 030c 	and.w	r3, r3, #12
 8001770:	2b08      	cmp	r3, #8
 8001772:	d173      	bne.n	800185c <HAL_RCC_OscConfig+0x430>
 8001774:	4ba1      	ldr	r3, [pc, #644]	; (80019fc <HAL_RCC_OscConfig+0x5d0>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800177c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001780:	d16c      	bne.n	800185c <HAL_RCC_OscConfig+0x430>
 8001782:	2302      	movs	r3, #2
 8001784:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001788:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800178c:	fa93 f3a3 	rbit	r3, r3
 8001790:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001794:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001798:	fab3 f383 	clz	r3, r3
 800179c:	b2db      	uxtb	r3, r3
 800179e:	095b      	lsrs	r3, r3, #5
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	f043 0301 	orr.w	r3, r3, #1
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d102      	bne.n	80017b2 <HAL_RCC_OscConfig+0x386>
 80017ac:	4b93      	ldr	r3, [pc, #588]	; (80019fc <HAL_RCC_OscConfig+0x5d0>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	e013      	b.n	80017da <HAL_RCC_OscConfig+0x3ae>
 80017b2:	2302      	movs	r3, #2
 80017b4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80017c4:	2302      	movs	r3, #2
 80017c6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80017ca:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80017ce:	fa93 f3a3 	rbit	r3, r3
 80017d2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80017d6:	4b89      	ldr	r3, [pc, #548]	; (80019fc <HAL_RCC_OscConfig+0x5d0>)
 80017d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017da:	2202      	movs	r2, #2
 80017dc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80017e0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80017e4:	fa92 f2a2 	rbit	r2, r2
 80017e8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80017ec:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80017f0:	fab2 f282 	clz	r2, r2
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	f042 0220 	orr.w	r2, r2, #32
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f002 021f 	and.w	r2, r2, #31
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00a      	beq.n	8001822 <HAL_RCC_OscConfig+0x3f6>
 800180c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001810:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d002      	beq.n	8001822 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	f000 be52 	b.w	80024c6 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001822:	4b76      	ldr	r3, [pc, #472]	; (80019fc <HAL_RCC_OscConfig+0x5d0>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800182a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800182e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	691b      	ldr	r3, [r3, #16]
 8001836:	21f8      	movs	r1, #248	; 0xf8
 8001838:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001840:	fa91 f1a1 	rbit	r1, r1
 8001844:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001848:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800184c:	fab1 f181 	clz	r1, r1
 8001850:	b2c9      	uxtb	r1, r1
 8001852:	408b      	lsls	r3, r1
 8001854:	4969      	ldr	r1, [pc, #420]	; (80019fc <HAL_RCC_OscConfig+0x5d0>)
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800185a:	e0fe      	b.n	8001a5a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800185c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001860:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 8088 	beq.w	800197e <HAL_RCC_OscConfig+0x552>
 800186e:	2301      	movs	r3, #1
 8001870:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001874:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001878:	fa93 f3a3 	rbit	r3, r3
 800187c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001880:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001884:	fab3 f383 	clz	r3, r3
 8001888:	b2db      	uxtb	r3, r3
 800188a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800188e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	461a      	mov	r2, r3
 8001896:	2301      	movs	r3, #1
 8001898:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189a:	f7ff fab1 	bl	8000e00 <HAL_GetTick>
 800189e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018a4:	f7ff faac 	bl	8000e00 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d902      	bls.n	80018ba <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	f000 be06 	b.w	80024c6 <HAL_RCC_OscConfig+0x109a>
 80018ba:	2302      	movs	r3, #2
 80018bc:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80018c4:	fa93 f3a3 	rbit	r3, r3
 80018c8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 80018cc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d0:	fab3 f383 	clz	r3, r3
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	095b      	lsrs	r3, r3, #5
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d102      	bne.n	80018ea <HAL_RCC_OscConfig+0x4be>
 80018e4:	4b45      	ldr	r3, [pc, #276]	; (80019fc <HAL_RCC_OscConfig+0x5d0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	e013      	b.n	8001912 <HAL_RCC_OscConfig+0x4e6>
 80018ea:	2302      	movs	r3, #2
 80018ec:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80018f4:	fa93 f3a3 	rbit	r3, r3
 80018f8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80018fc:	2302      	movs	r3, #2
 80018fe:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001902:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001906:	fa93 f3a3 	rbit	r3, r3
 800190a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800190e:	4b3b      	ldr	r3, [pc, #236]	; (80019fc <HAL_RCC_OscConfig+0x5d0>)
 8001910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001912:	2202      	movs	r2, #2
 8001914:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001918:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800191c:	fa92 f2a2 	rbit	r2, r2
 8001920:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001924:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001928:	fab2 f282 	clz	r2, r2
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	f042 0220 	orr.w	r2, r2, #32
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	f002 021f 	and.w	r2, r2, #31
 8001938:	2101      	movs	r1, #1
 800193a:	fa01 f202 	lsl.w	r2, r1, r2
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0af      	beq.n	80018a4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001944:	4b2d      	ldr	r3, [pc, #180]	; (80019fc <HAL_RCC_OscConfig+0x5d0>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800194c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001950:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	21f8      	movs	r1, #248	; 0xf8
 800195a:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195e:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001962:	fa91 f1a1 	rbit	r1, r1
 8001966:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 800196a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800196e:	fab1 f181 	clz	r1, r1
 8001972:	b2c9      	uxtb	r1, r1
 8001974:	408b      	lsls	r3, r1
 8001976:	4921      	ldr	r1, [pc, #132]	; (80019fc <HAL_RCC_OscConfig+0x5d0>)
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]
 800197c:	e06d      	b.n	8001a5a <HAL_RCC_OscConfig+0x62e>
 800197e:	2301      	movs	r3, #1
 8001980:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001984:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001988:	fa93 f3a3 	rbit	r3, r3
 800198c:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001990:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001994:	fab3 f383 	clz	r3, r3
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800199e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	461a      	mov	r2, r3
 80019a6:	2300      	movs	r3, #0
 80019a8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019aa:	f7ff fa29 	bl	8000e00 <HAL_GetTick>
 80019ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b4:	f7ff fa24 	bl	8000e00 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d902      	bls.n	80019ca <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	f000 bd7e 	b.w	80024c6 <HAL_RCC_OscConfig+0x109a>
 80019ca:	2302      	movs	r3, #2
 80019cc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80019dc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	b2db      	uxtb	r3, r3
 80019ea:	f043 0301 	orr.w	r3, r3, #1
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d105      	bne.n	8001a00 <HAL_RCC_OscConfig+0x5d4>
 80019f4:	4b01      	ldr	r3, [pc, #4]	; (80019fc <HAL_RCC_OscConfig+0x5d0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	e016      	b.n	8001a28 <HAL_RCC_OscConfig+0x5fc>
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	2302      	movs	r3, #2
 8001a02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001a12:	2302      	movs	r3, #2
 8001a14:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001a18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001a1c:	fa93 f3a3 	rbit	r3, r3
 8001a20:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001a24:	4bbf      	ldr	r3, [pc, #764]	; (8001d24 <HAL_RCC_OscConfig+0x8f8>)
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	2202      	movs	r2, #2
 8001a2a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001a2e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001a32:	fa92 f2a2 	rbit	r2, r2
 8001a36:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001a3a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001a3e:	fab2 f282 	clz	r2, r2
 8001a42:	b2d2      	uxtb	r2, r2
 8001a44:	f042 0220 	orr.w	r2, r2, #32
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	f002 021f 	and.w	r2, r2, #31
 8001a4e:	2101      	movs	r1, #1
 8001a50:	fa01 f202 	lsl.w	r2, r1, r2
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ac      	bne.n	80019b4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 8113 	beq.w	8001c96 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d07c      	beq.n	8001b7a <HAL_RCC_OscConfig+0x74e>
 8001a80:	2301      	movs	r3, #1
 8001a82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001a8a:	fa93 f3a3 	rbit	r3, r3
 8001a8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001a92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4ba2      	ldr	r3, [pc, #648]	; (8001d28 <HAL_RCC_OscConfig+0x8fc>)
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aaa:	f7ff f9a9 	bl	8000e00 <HAL_GetTick>
 8001aae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ab4:	f7ff f9a4 	bl	8000e00 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d902      	bls.n	8001aca <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001ac4:	2303      	movs	r3, #3
 8001ac6:	f000 bcfe 	b.w	80024c6 <HAL_RCC_OscConfig+0x109a>
 8001aca:	2302      	movs	r3, #2
 8001acc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001ad4:	fa93 f2a3 	rbit	r2, r3
 8001ad8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001adc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001aea:	2202      	movs	r2, #2
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	fa93 f2a3 	rbit	r2, r3
 8001afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b0e:	2202      	movs	r2, #2
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	fa93 f2a3 	rbit	r2, r3
 8001b20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001b28:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b2a:	4b7e      	ldr	r3, [pc, #504]	; (8001d24 <HAL_RCC_OscConfig+0x8f8>)
 8001b2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b36:	2102      	movs	r1, #2
 8001b38:	6019      	str	r1, [r3, #0]
 8001b3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	fa93 f1a3 	rbit	r1, r3
 8001b48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b4c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b50:	6019      	str	r1, [r3, #0]
  return result;
 8001b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b56:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	fab3 f383 	clz	r3, r3
 8001b60:	b2db      	uxtb	r3, r3
 8001b62:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d09d      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x688>
 8001b78:	e08d      	b.n	8001c96 <HAL_RCC_OscConfig+0x86a>
 8001b7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b7e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b82:	2201      	movs	r2, #1
 8001b84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	fa93 f2a3 	rbit	r2, r3
 8001b94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b98:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001b9c:	601a      	str	r2, [r3, #0]
  return result;
 8001b9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ba6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ba8:	fab3 f383 	clz	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b5d      	ldr	r3, [pc, #372]	; (8001d28 <HAL_RCC_OscConfig+0x8fc>)
 8001bb2:	4413      	add	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	2300      	movs	r3, #0
 8001bba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bbc:	f7ff f920 	bl	8000e00 <HAL_GetTick>
 8001bc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bc6:	f7ff f91b 	bl	8000e00 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d902      	bls.n	8001bdc <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	f000 bc75 	b.w	80024c6 <HAL_RCC_OscConfig+0x109a>
 8001bdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001be4:	2202      	movs	r2, #2
 8001be6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	fa93 f2a3 	rbit	r2, r3
 8001bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfa:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c08:	2202      	movs	r2, #2
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	fa93 f2a3 	rbit	r2, r3
 8001c1a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c28:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c2c:	2202      	movs	r2, #2
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	fa93 f2a3 	rbit	r2, r3
 8001c3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c42:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c46:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c48:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <HAL_RCC_OscConfig+0x8f8>)
 8001c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c50:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c54:	2102      	movs	r1, #2
 8001c56:	6019      	str	r1, [r3, #0]
 8001c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	fa93 f1a3 	rbit	r1, r3
 8001c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c6e:	6019      	str	r1, [r3, #0]
  return result;
 8001c70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c74:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	fab3 f383 	clz	r3, r3
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	f003 031f 	and.w	r3, r3, #31
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	4013      	ands	r3, r2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d197      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 81a5 	beq.w	8001ff6 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cac:	2300      	movs	r3, #0
 8001cae:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_RCC_OscConfig+0x8f8>)
 8001cb4:	69db      	ldr	r3, [r3, #28]
 8001cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d116      	bne.n	8001cec <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cbe:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_RCC_OscConfig+0x8f8>)
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <HAL_RCC_OscConfig+0x8f8>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc8:	61d3      	str	r3, [r2, #28]
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_RCC_OscConfig+0x8f8>)
 8001ccc:	69db      	ldr	r3, [r3, #28]
 8001cce:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001cd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ce4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_RCC_OscConfig+0x900>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d121      	bne.n	8001d3c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_RCC_OscConfig+0x900>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <HAL_RCC_OscConfig+0x900>)
 8001cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d02:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d04:	f7ff f87c 	bl	8000e00 <HAL_GetTick>
 8001d08:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0c:	e010      	b.n	8001d30 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d0e:	f7ff f877 	bl	8000e00 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d908      	bls.n	8001d30 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e3d1      	b.n	80024c6 <HAL_RCC_OscConfig+0x109a>
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	10908120 	.word	0x10908120
 8001d2c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d30:	4b8d      	ldr	r3, [pc, #564]	; (8001f68 <HAL_RCC_OscConfig+0xb3c>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0e8      	beq.n	8001d0e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d106      	bne.n	8001d5a <HAL_RCC_OscConfig+0x92e>
 8001d4c:	4b87      	ldr	r3, [pc, #540]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001d4e:	6a1b      	ldr	r3, [r3, #32]
 8001d50:	4a86      	ldr	r2, [pc, #536]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	6213      	str	r3, [r2, #32]
 8001d58:	e035      	b.n	8001dc6 <HAL_RCC_OscConfig+0x99a>
 8001d5a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d10c      	bne.n	8001d84 <HAL_RCC_OscConfig+0x958>
 8001d6a:	4b80      	ldr	r3, [pc, #512]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001d6c:	6a1b      	ldr	r3, [r3, #32]
 8001d6e:	4a7f      	ldr	r2, [pc, #508]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001d70:	f023 0301 	bic.w	r3, r3, #1
 8001d74:	6213      	str	r3, [r2, #32]
 8001d76:	4b7d      	ldr	r3, [pc, #500]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001d78:	6a1b      	ldr	r3, [r3, #32]
 8001d7a:	4a7c      	ldr	r2, [pc, #496]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001d7c:	f023 0304 	bic.w	r3, r3, #4
 8001d80:	6213      	str	r3, [r2, #32]
 8001d82:	e020      	b.n	8001dc6 <HAL_RCC_OscConfig+0x99a>
 8001d84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d88:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	d10c      	bne.n	8001dae <HAL_RCC_OscConfig+0x982>
 8001d94:	4b75      	ldr	r3, [pc, #468]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001d96:	6a1b      	ldr	r3, [r3, #32]
 8001d98:	4a74      	ldr	r2, [pc, #464]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6213      	str	r3, [r2, #32]
 8001da0:	4b72      	ldr	r3, [pc, #456]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	4a71      	ldr	r2, [pc, #452]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6213      	str	r3, [r2, #32]
 8001dac:	e00b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x99a>
 8001dae:	4b6f      	ldr	r3, [pc, #444]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001db0:	6a1b      	ldr	r3, [r3, #32]
 8001db2:	4a6e      	ldr	r2, [pc, #440]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6213      	str	r3, [r2, #32]
 8001dba:	4b6c      	ldr	r3, [pc, #432]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001dbc:	6a1b      	ldr	r3, [r3, #32]
 8001dbe:	4a6b      	ldr	r2, [pc, #428]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001dc0:	f023 0304 	bic.w	r3, r3, #4
 8001dc4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dc6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dca:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 8081 	beq.w	8001eda <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd8:	f7ff f812 	bl	8000e00 <HAL_GetTick>
 8001ddc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	e00b      	b.n	8001dfa <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7ff f80d 	bl	8000e00 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e365      	b.n	80024c6 <HAL_RCC_OscConfig+0x109a>
 8001dfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e02:	2202      	movs	r2, #2
 8001e04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	fa93 f2a3 	rbit	r2, r3
 8001e14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e18:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e26:	2202      	movs	r2, #2
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e2e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	fa93 f2a3 	rbit	r2, r3
 8001e38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e40:	601a      	str	r2, [r3, #0]
  return result;
 8001e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e46:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8001e4a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e4c:	fab3 f383 	clz	r3, r3
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	095b      	lsrs	r3, r3, #5
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	f043 0302 	orr.w	r3, r3, #2
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d102      	bne.n	8001e66 <HAL_RCC_OscConfig+0xa3a>
 8001e60:	4b42      	ldr	r3, [pc, #264]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	e013      	b.n	8001e8e <HAL_RCC_OscConfig+0xa62>
 8001e66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e6e:	2202      	movs	r2, #2
 8001e70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e76:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	fa93 f2a3 	rbit	r2, r3
 8001e80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e84:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	4b38      	ldr	r3, [pc, #224]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e92:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001e96:	2102      	movs	r1, #2
 8001e98:	6011      	str	r1, [r2, #0]
 8001e9a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001e9e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	fa92 f1a2 	rbit	r1, r2
 8001ea8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eac:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001eb0:	6011      	str	r1, [r2, #0]
  return result;
 8001eb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001eb6:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001eba:	6812      	ldr	r2, [r2, #0]
 8001ebc:	fab2 f282 	clz	r2, r2
 8001ec0:	b2d2      	uxtb	r2, r2
 8001ec2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	f002 021f 	and.w	r2, r2, #31
 8001ecc:	2101      	movs	r1, #1
 8001ece:	fa01 f202 	lsl.w	r2, r1, r2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d084      	beq.n	8001de2 <HAL_RCC_OscConfig+0x9b6>
 8001ed8:	e083      	b.n	8001fe2 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eda:	f7fe ff91 	bl	8000e00 <HAL_GetTick>
 8001ede:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ee2:	e00b      	b.n	8001efc <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ee4:	f7fe ff8c 	bl	8000e00 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e2e4      	b.n	80024c6 <HAL_RCC_OscConfig+0x109a>
 8001efc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f00:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f04:	2202      	movs	r2, #2
 8001f06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f0c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	fa93 f2a3 	rbit	r2, r3
 8001f16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f24:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f28:	2202      	movs	r2, #2
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f30:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	fa93 f2a3 	rbit	r2, r3
 8001f3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f3e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f42:	601a      	str	r2, [r3, #0]
  return result;
 8001f44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f48:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8001f4c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d106      	bne.n	8001f70 <HAL_RCC_OscConfig+0xb44>
 8001f62:	4b02      	ldr	r3, [pc, #8]	; (8001f6c <HAL_RCC_OscConfig+0xb40>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	e017      	b.n	8001f98 <HAL_RCC_OscConfig+0xb6c>
 8001f68:	40007000 	.word	0x40007000
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f74:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f78:	2202      	movs	r2, #2
 8001f7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f80:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	fa93 f2a3 	rbit	r2, r3
 8001f8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f8e:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8001f92:	601a      	str	r2, [r3, #0]
 8001f94:	4bb3      	ldr	r3, [pc, #716]	; (8002264 <HAL_RCC_OscConfig+0xe38>)
 8001f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f98:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001f9c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001fa0:	2102      	movs	r1, #2
 8001fa2:	6011      	str	r1, [r2, #0]
 8001fa4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fa8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001fac:	6812      	ldr	r2, [r2, #0]
 8001fae:	fa92 f1a2 	rbit	r1, r2
 8001fb2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fb6:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001fba:	6011      	str	r1, [r2, #0]
  return result;
 8001fbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001fc0:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001fc4:	6812      	ldr	r2, [r2, #0]
 8001fc6:	fab2 f282 	clz	r2, r2
 8001fca:	b2d2      	uxtb	r2, r2
 8001fcc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	f002 021f 	and.w	r2, r2, #31
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d180      	bne.n	8001ee4 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001fe2:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fea:	4b9e      	ldr	r3, [pc, #632]	; (8002264 <HAL_RCC_OscConfig+0xe38>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a9d      	ldr	r2, [pc, #628]	; (8002264 <HAL_RCC_OscConfig+0xe38>)
 8001ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ffa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 825e 	beq.w	80024c4 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002008:	4b96      	ldr	r3, [pc, #600]	; (8002264 <HAL_RCC_OscConfig+0xe38>)
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f003 030c 	and.w	r3, r3, #12
 8002010:	2b08      	cmp	r3, #8
 8002012:	f000 821f 	beq.w	8002454 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002016:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800201a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b02      	cmp	r3, #2
 8002024:	f040 8170 	bne.w	8002308 <HAL_RCC_OscConfig+0xedc>
 8002028:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800202c:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002030:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002034:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002036:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800203a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	fa93 f2a3 	rbit	r2, r3
 8002044:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002048:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800204c:	601a      	str	r2, [r3, #0]
  return result;
 800204e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002052:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002056:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002062:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	461a      	mov	r2, r3
 800206a:	2300      	movs	r3, #0
 800206c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206e:	f7fe fec7 	bl	8000e00 <HAL_GetTick>
 8002072:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002076:	e009      	b.n	800208c <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002078:	f7fe fec2 	bl	8000e00 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d901      	bls.n	800208c <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002088:	2303      	movs	r3, #3
 800208a:	e21c      	b.n	80024c6 <HAL_RCC_OscConfig+0x109a>
 800208c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002090:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002094:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002098:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800209e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	fa93 f2a3 	rbit	r2, r3
 80020a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020ac:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020b0:	601a      	str	r2, [r3, #0]
  return result;
 80020b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020b6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80020ba:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020bc:	fab3 f383 	clz	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	095b      	lsrs	r3, r3, #5
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d102      	bne.n	80020d6 <HAL_RCC_OscConfig+0xcaa>
 80020d0:	4b64      	ldr	r3, [pc, #400]	; (8002264 <HAL_RCC_OscConfig+0xe38>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	e027      	b.n	8002126 <HAL_RCC_OscConfig+0xcfa>
 80020d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020da:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80020de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020e8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	fa93 f2a3 	rbit	r2, r3
 80020f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020f6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002100:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002104:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210e:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	fa93 f2a3 	rbit	r2, r3
 8002118:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800211c:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	4b50      	ldr	r3, [pc, #320]	; (8002264 <HAL_RCC_OscConfig+0xe38>)
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800212a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800212e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002132:	6011      	str	r1, [r2, #0]
 8002134:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002138:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800213c:	6812      	ldr	r2, [r2, #0]
 800213e:	fa92 f1a2 	rbit	r1, r2
 8002142:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002146:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800214a:	6011      	str	r1, [r2, #0]
  return result;
 800214c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002150:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002154:	6812      	ldr	r2, [r2, #0]
 8002156:	fab2 f282 	clz	r2, r2
 800215a:	b2d2      	uxtb	r2, r2
 800215c:	f042 0220 	orr.w	r2, r2, #32
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	f002 021f 	and.w	r2, r2, #31
 8002166:	2101      	movs	r1, #1
 8002168:	fa01 f202 	lsl.w	r2, r1, r2
 800216c:	4013      	ands	r3, r2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d182      	bne.n	8002078 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002172:	4b3c      	ldr	r3, [pc, #240]	; (8002264 <HAL_RCC_OscConfig+0xe38>)
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	f023 020f 	bic.w	r2, r3, #15
 800217a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800217e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	4937      	ldr	r1, [pc, #220]	; (8002264 <HAL_RCC_OscConfig+0xe38>)
 8002188:	4313      	orrs	r3, r2
 800218a:	62cb      	str	r3, [r1, #44]	; 0x2c
 800218c:	4b35      	ldr	r3, [pc, #212]	; (8002264 <HAL_RCC_OscConfig+0xe38>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8002194:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002198:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6a19      	ldr	r1, [r3, #32]
 80021a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69db      	ldr	r3, [r3, #28]
 80021ac:	430b      	orrs	r3, r1
 80021ae:	492d      	ldr	r1, [pc, #180]	; (8002264 <HAL_RCC_OscConfig+0xe38>)
 80021b0:	4313      	orrs	r3, r2
 80021b2:	604b      	str	r3, [r1, #4]
 80021b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021b8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021c0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021c6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	fa93 f2a3 	rbit	r2, r3
 80021d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021d4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021d8:	601a      	str	r2, [r3, #0]
  return result;
 80021da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80021de:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80021e2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021e4:	fab3 f383 	clz	r3, r3
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	461a      	mov	r2, r3
 80021f6:	2301      	movs	r3, #1
 80021f8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021fa:	f7fe fe01 	bl	8000e00 <HAL_GetTick>
 80021fe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002202:	e009      	b.n	8002218 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002204:	f7fe fdfc 	bl	8000e00 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800220e:	1ad3      	subs	r3, r2, r3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e156      	b.n	80024c6 <HAL_RCC_OscConfig+0x109a>
 8002218:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800221c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002220:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002224:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800222a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	fa93 f2a3 	rbit	r2, r3
 8002234:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002238:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800223c:	601a      	str	r2, [r3, #0]
  return result;
 800223e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002242:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002246:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	b2db      	uxtb	r3, r3
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	b2db      	uxtb	r3, r3
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	b2db      	uxtb	r3, r3
 8002258:	2b01      	cmp	r3, #1
 800225a:	d105      	bne.n	8002268 <HAL_RCC_OscConfig+0xe3c>
 800225c:	4b01      	ldr	r3, [pc, #4]	; (8002264 <HAL_RCC_OscConfig+0xe38>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	e02a      	b.n	80022b8 <HAL_RCC_OscConfig+0xe8c>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800226c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002270:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002274:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002276:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800227a:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fa93 f2a3 	rbit	r2, r3
 8002284:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002288:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002292:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002296:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022a0:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	fa93 f2a3 	rbit	r2, r3
 80022aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80022ae:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	4b86      	ldr	r3, [pc, #536]	; (80024d0 <HAL_RCC_OscConfig+0x10a4>)
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022bc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80022c4:	6011      	str	r1, [r2, #0]
 80022c6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022ca:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	fa92 f1a2 	rbit	r1, r2
 80022d4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022d8:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80022dc:	6011      	str	r1, [r2, #0]
  return result;
 80022de:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022e2:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	fab2 f282 	clz	r2, r2
 80022ec:	b2d2      	uxtb	r2, r2
 80022ee:	f042 0220 	orr.w	r2, r2, #32
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	f002 021f 	and.w	r2, r2, #31
 80022f8:	2101      	movs	r1, #1
 80022fa:	fa01 f202 	lsl.w	r2, r1, r2
 80022fe:	4013      	ands	r3, r2
 8002300:	2b00      	cmp	r3, #0
 8002302:	f43f af7f 	beq.w	8002204 <HAL_RCC_OscConfig+0xdd8>
 8002306:	e0dd      	b.n	80024c4 <HAL_RCC_OscConfig+0x1098>
 8002308:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800230c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002310:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002314:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002316:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800231a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	fa93 f2a3 	rbit	r2, r3
 8002324:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002328:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800232c:	601a      	str	r2, [r3, #0]
  return result;
 800232e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002332:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002336:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002338:	fab3 f383 	clz	r3, r3
 800233c:	b2db      	uxtb	r3, r3
 800233e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002342:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	461a      	mov	r2, r3
 800234a:	2300      	movs	r3, #0
 800234c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7fe fd57 	bl	8000e00 <HAL_GetTick>
 8002352:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002356:	e009      	b.n	800236c <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe fd52 	bl	8000e00 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0ac      	b.n	80024c6 <HAL_RCC_OscConfig+0x109a>
 800236c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002370:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002374:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002378:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800237e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	fa93 f2a3 	rbit	r2, r3
 8002388:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800238c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002390:	601a      	str	r2, [r3, #0]
  return result;
 8002392:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002396:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800239a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239c:	fab3 f383 	clz	r3, r3
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f043 0301 	orr.w	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d102      	bne.n	80023b6 <HAL_RCC_OscConfig+0xf8a>
 80023b0:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <HAL_RCC_OscConfig+0x10a4>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	e027      	b.n	8002406 <HAL_RCC_OscConfig+0xfda>
 80023b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ba:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80023be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c8:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fa93 f2a3 	rbit	r2, r3
 80023d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023d6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80023e4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023ee:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	fa93 f2a3 	rbit	r2, r3
 80023f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023fc:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	4b33      	ldr	r3, [pc, #204]	; (80024d0 <HAL_RCC_OscConfig+0x10a4>)
 8002404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002406:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800240a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800240e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002412:	6011      	str	r1, [r2, #0]
 8002414:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002418:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800241c:	6812      	ldr	r2, [r2, #0]
 800241e:	fa92 f1a2 	rbit	r1, r2
 8002422:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002426:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800242a:	6011      	str	r1, [r2, #0]
  return result;
 800242c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002430:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002434:	6812      	ldr	r2, [r2, #0]
 8002436:	fab2 f282 	clz	r2, r2
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	f042 0220 	orr.w	r2, r2, #32
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	f002 021f 	and.w	r2, r2, #31
 8002446:	2101      	movs	r1, #1
 8002448:	fa01 f202 	lsl.w	r2, r1, r2
 800244c:	4013      	ands	r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d182      	bne.n	8002358 <HAL_RCC_OscConfig+0xf2c>
 8002452:	e037      	b.n	80024c4 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002454:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002458:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	699b      	ldr	r3, [r3, #24]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e02e      	b.n	80024c6 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002468:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_RCC_OscConfig+0x10a4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002470:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <HAL_RCC_OscConfig+0x10a4>)
 8002472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002474:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002478:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800247c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8002480:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002484:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	429a      	cmp	r2, r3
 800248e:	d117      	bne.n	80024c0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002490:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002494:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002498:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800249c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d10b      	bne.n	80024c0 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80024a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024ac:	f003 020f 	and.w	r2, r3, #15
 80024b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80024bc:	429a      	cmp	r2, r3
 80024be:	d001      	beq.n	80024c4 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e000      	b.n	80024c6 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000

080024d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b09e      	sub	sp, #120	; 0x78
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80024de:	2300      	movs	r3, #0
 80024e0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e162      	b.n	80027b2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024ec:	4b90      	ldr	r3, [pc, #576]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d910      	bls.n	800251c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024fa:	4b8d      	ldr	r3, [pc, #564]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f023 0207 	bic.w	r2, r3, #7
 8002502:	498b      	ldr	r1, [pc, #556]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800250a:	4b89      	ldr	r3, [pc, #548]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	429a      	cmp	r2, r3
 8002516:	d001      	beq.n	800251c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e14a      	b.n	80027b2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002528:	4b82      	ldr	r3, [pc, #520]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	497f      	ldr	r1, [pc, #508]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002536:	4313      	orrs	r3, r2
 8002538:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 80dc 	beq.w	8002700 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d13c      	bne.n	80025ca <HAL_RCC_ClockConfig+0xf6>
 8002550:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002554:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002558:	fa93 f3a3 	rbit	r3, r3
 800255c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800255e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	095b      	lsrs	r3, r3, #5
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	b2db      	uxtb	r3, r3
 8002570:	2b01      	cmp	r3, #1
 8002572:	d102      	bne.n	800257a <HAL_RCC_ClockConfig+0xa6>
 8002574:	4b6f      	ldr	r3, [pc, #444]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	e00f      	b.n	800259a <HAL_RCC_ClockConfig+0xc6>
 800257a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800257e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002580:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	667b      	str	r3, [r7, #100]	; 0x64
 8002588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800258c:	663b      	str	r3, [r7, #96]	; 0x60
 800258e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002590:	fa93 f3a3 	rbit	r3, r3
 8002594:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002596:	4b67      	ldr	r3, [pc, #412]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800259e:	65ba      	str	r2, [r7, #88]	; 0x58
 80025a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80025a2:	fa92 f2a2 	rbit	r2, r2
 80025a6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80025a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80025aa:	fab2 f282 	clz	r2, r2
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	f042 0220 	orr.w	r2, r2, #32
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	f002 021f 	and.w	r2, r2, #31
 80025ba:	2101      	movs	r1, #1
 80025bc:	fa01 f202 	lsl.w	r2, r1, r2
 80025c0:	4013      	ands	r3, r2
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d17b      	bne.n	80026be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e0f3      	b.n	80027b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d13c      	bne.n	800264c <HAL_RCC_ClockConfig+0x178>
 80025d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025da:	fa93 f3a3 	rbit	r3, r3
 80025de:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80025e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e2:	fab3 f383 	clz	r3, r3
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	095b      	lsrs	r3, r3, #5
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d102      	bne.n	80025fc <HAL_RCC_ClockConfig+0x128>
 80025f6:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	e00f      	b.n	800261c <HAL_RCC_ClockConfig+0x148>
 80025fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002600:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002604:	fa93 f3a3 	rbit	r3, r3
 8002608:	647b      	str	r3, [r7, #68]	; 0x44
 800260a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800260e:	643b      	str	r3, [r7, #64]	; 0x40
 8002610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002618:	4b46      	ldr	r3, [pc, #280]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002620:	63ba      	str	r2, [r7, #56]	; 0x38
 8002622:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002624:	fa92 f2a2 	rbit	r2, r2
 8002628:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800262a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800262c:	fab2 f282 	clz	r2, r2
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	f042 0220 	orr.w	r2, r2, #32
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	f002 021f 	and.w	r2, r2, #31
 800263c:	2101      	movs	r1, #1
 800263e:	fa01 f202 	lsl.w	r2, r1, r2
 8002642:	4013      	ands	r3, r2
 8002644:	2b00      	cmp	r3, #0
 8002646:	d13a      	bne.n	80026be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e0b2      	b.n	80027b2 <HAL_RCC_ClockConfig+0x2de>
 800264c:	2302      	movs	r3, #2
 800264e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002652:	fa93 f3a3 	rbit	r3, r3
 8002656:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800265a:	fab3 f383 	clz	r3, r3
 800265e:	b2db      	uxtb	r3, r3
 8002660:	095b      	lsrs	r3, r3, #5
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b01      	cmp	r3, #1
 800266c:	d102      	bne.n	8002674 <HAL_RCC_ClockConfig+0x1a0>
 800266e:	4b31      	ldr	r3, [pc, #196]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	e00d      	b.n	8002690 <HAL_RCC_ClockConfig+0x1bc>
 8002674:	2302      	movs	r3, #2
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800267a:	fa93 f3a3 	rbit	r3, r3
 800267e:	627b      	str	r3, [r7, #36]	; 0x24
 8002680:	2302      	movs	r3, #2
 8002682:	623b      	str	r3, [r7, #32]
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	fa93 f3a3 	rbit	r3, r3
 800268a:	61fb      	str	r3, [r7, #28]
 800268c:	4b29      	ldr	r3, [pc, #164]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	2202      	movs	r2, #2
 8002692:	61ba      	str	r2, [r7, #24]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	fa92 f2a2 	rbit	r2, r2
 800269a:	617a      	str	r2, [r7, #20]
  return result;
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	fab2 f282 	clz	r2, r2
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	f042 0220 	orr.w	r2, r2, #32
 80026a8:	b2d2      	uxtb	r2, r2
 80026aa:	f002 021f 	and.w	r2, r2, #31
 80026ae:	2101      	movs	r1, #1
 80026b0:	fa01 f202 	lsl.w	r2, r1, r2
 80026b4:	4013      	ands	r3, r2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d101      	bne.n	80026be <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e079      	b.n	80027b2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026be:	4b1d      	ldr	r3, [pc, #116]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f023 0203 	bic.w	r2, r3, #3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	491a      	ldr	r1, [pc, #104]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d0:	f7fe fb96 	bl	8000e00 <HAL_GetTick>
 80026d4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026d8:	f7fe fb92 	bl	8000e00 <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e061      	b.n	80027b2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ee:	4b11      	ldr	r3, [pc, #68]	; (8002734 <HAL_RCC_ClockConfig+0x260>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	f003 020c 	and.w	r2, r3, #12
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d1eb      	bne.n	80026d8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0307 	and.w	r3, r3, #7
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	429a      	cmp	r2, r3
 800270c:	d214      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800270e:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 0207 	bic.w	r2, r3, #7
 8002716:	4906      	ldr	r1, [pc, #24]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	4313      	orrs	r3, r2
 800271c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800271e:	4b04      	ldr	r3, [pc, #16]	; (8002730 <HAL_RCC_ClockConfig+0x25c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	429a      	cmp	r2, r3
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e040      	b.n	80027b2 <HAL_RCC_ClockConfig+0x2de>
 8002730:	40022000 	.word	0x40022000
 8002734:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b1d      	ldr	r3, [pc, #116]	; (80027bc <HAL_RCC_ClockConfig+0x2e8>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	491a      	ldr	r1, [pc, #104]	; (80027bc <HAL_RCC_ClockConfig+0x2e8>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002762:	4b16      	ldr	r3, [pc, #88]	; (80027bc <HAL_RCC_ClockConfig+0x2e8>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	4912      	ldr	r1, [pc, #72]	; (80027bc <HAL_RCC_ClockConfig+0x2e8>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002776:	f000 f829 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 800277a:	4601      	mov	r1, r0
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <HAL_RCC_ClockConfig+0x2e8>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002784:	22f0      	movs	r2, #240	; 0xf0
 8002786:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	fa92 f2a2 	rbit	r2, r2
 800278e:	60fa      	str	r2, [r7, #12]
  return result;
 8002790:	68fa      	ldr	r2, [r7, #12]
 8002792:	fab2 f282 	clz	r2, r2
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	40d3      	lsrs	r3, r2
 800279a:	4a09      	ldr	r2, [pc, #36]	; (80027c0 <HAL_RCC_ClockConfig+0x2ec>)
 800279c:	5cd3      	ldrb	r3, [r2, r3]
 800279e:	fa21 f303 	lsr.w	r3, r1, r3
 80027a2:	4a08      	ldr	r2, [pc, #32]	; (80027c4 <HAL_RCC_ClockConfig+0x2f0>)
 80027a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <HAL_RCC_ClockConfig+0x2f4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fe fae4 	bl	8000d78 <HAL_InitTick>
  
  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3778      	adds	r7, #120	; 0x78
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000
 80027c0:	0800377c 	.word	0x0800377c
 80027c4:	20000000 	.word	0x20000000
 80027c8:	20000004 	.word	0x20000004

080027cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b08b      	sub	sp, #44	; 0x2c
 80027d0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	2300      	movs	r3, #0
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	2300      	movs	r3, #0
 80027dc:	627b      	str	r3, [r7, #36]	; 0x24
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80027e6:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <HAL_RCC_GetSysClockFreq+0xc4>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d002      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x30>
 80027f6:	2b08      	cmp	r3, #8
 80027f8:	d003      	beq.n	8002802 <HAL_RCC_GetSysClockFreq+0x36>
 80027fa:	e03f      	b.n	800287c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027fc:	4b25      	ldr	r3, [pc, #148]	; (8002894 <HAL_RCC_GetSysClockFreq+0xc8>)
 80027fe:	623b      	str	r3, [r7, #32]
      break;
 8002800:	e03f      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002808:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800280c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	68ba      	ldr	r2, [r7, #8]
 8002810:	fa92 f2a2 	rbit	r2, r2
 8002814:	607a      	str	r2, [r7, #4]
  return result;
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	fab2 f282 	clz	r2, r2
 800281c:	b2d2      	uxtb	r2, r2
 800281e:	40d3      	lsrs	r3, r2
 8002820:	4a1d      	ldr	r2, [pc, #116]	; (8002898 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002826:	4b1a      	ldr	r3, [pc, #104]	; (8002890 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	f003 030f 	and.w	r3, r3, #15
 800282e:	220f      	movs	r2, #15
 8002830:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	fa92 f2a2 	rbit	r2, r2
 8002838:	60fa      	str	r2, [r7, #12]
  return result;
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	fab2 f282 	clz	r2, r2
 8002840:	b2d2      	uxtb	r2, r2
 8002842:	40d3      	lsrs	r3, r2
 8002844:	4a15      	ldr	r2, [pc, #84]	; (800289c <HAL_RCC_GetSysClockFreq+0xd0>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
 8002848:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002854:	4a0f      	ldr	r2, [pc, #60]	; (8002894 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	fbb2 f2f3 	udiv	r2, r2, r3
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	fb02 f303 	mul.w	r3, r2, r3
 8002862:	627b      	str	r3, [r7, #36]	; 0x24
 8002864:	e007      	b.n	8002876 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002866:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	fbb2 f2f3 	udiv	r2, r2, r3
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	fb02 f303 	mul.w	r3, r2, r3
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	623b      	str	r3, [r7, #32]
      break;
 800287a:	e002      	b.n	8002882 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <HAL_RCC_GetSysClockFreq+0xc8>)
 800287e:	623b      	str	r3, [r7, #32]
      break;
 8002880:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002882:	6a3b      	ldr	r3, [r7, #32]
}
 8002884:	4618      	mov	r0, r3
 8002886:	372c      	adds	r7, #44	; 0x2c
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40021000 	.word	0x40021000
 8002894:	007a1200 	.word	0x007a1200
 8002898:	08003794 	.word	0x08003794
 800289c:	080037a4 	.word	0x080037a4

080028a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a4:	4b03      	ldr	r3, [pc, #12]	; (80028b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a6:	681b      	ldr	r3, [r3, #0]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000000 	.word	0x20000000

080028b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80028be:	f7ff ffef 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 80028c2:	4601      	mov	r1, r0
 80028c4:	4b0b      	ldr	r3, [pc, #44]	; (80028f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80028d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	fa92 f2a2 	rbit	r2, r2
 80028d8:	603a      	str	r2, [r7, #0]
  return result;
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	fab2 f282 	clz	r2, r2
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	40d3      	lsrs	r3, r2
 80028e4:	4a04      	ldr	r2, [pc, #16]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80028e6:	5cd3      	ldrb	r3, [r2, r3]
 80028e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40021000 	.word	0x40021000
 80028f8:	0800378c 	.word	0x0800378c

080028fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002902:	f7ff ffcd 	bl	80028a0 <HAL_RCC_GetHCLKFreq>
 8002906:	4601      	mov	r1, r0
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002910:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002914:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	fa92 f2a2 	rbit	r2, r2
 800291c:	603a      	str	r2, [r7, #0]
  return result;
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	fab2 f282 	clz	r2, r2
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	40d3      	lsrs	r3, r2
 8002928:	4a04      	ldr	r2, [pc, #16]	; (800293c <HAL_RCC_GetPCLK2Freq+0x40>)
 800292a:	5cd3      	ldrb	r3, [r2, r3]
 800292c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002930:	4618      	mov	r0, r3
 8002932:	3708      	adds	r7, #8
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	40021000 	.word	0x40021000
 800293c:	0800378c 	.word	0x0800378c

08002940 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b092      	sub	sp, #72	; 0x48
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002948:	2300      	movs	r3, #0
 800294a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002950:	2300      	movs	r3, #0
 8002952:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800295e:	2b00      	cmp	r3, #0
 8002960:	f000 80d4 	beq.w	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002964:	4b4e      	ldr	r3, [pc, #312]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10e      	bne.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002970:	4b4b      	ldr	r3, [pc, #300]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	4a4a      	ldr	r2, [pc, #296]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800297a:	61d3      	str	r3, [r2, #28]
 800297c:	4b48      	ldr	r3, [pc, #288]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002984:	60bb      	str	r3, [r7, #8]
 8002986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002988:	2301      	movs	r3, #1
 800298a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800298e:	4b45      	ldr	r3, [pc, #276]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002996:	2b00      	cmp	r3, #0
 8002998:	d118      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800299a:	4b42      	ldr	r3, [pc, #264]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a41      	ldr	r2, [pc, #260]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029a6:	f7fe fa2b 	bl	8000e00 <HAL_GetTick>
 80029aa:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ac:	e008      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ae:	f7fe fa27 	bl	8000e00 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b64      	cmp	r3, #100	; 0x64
 80029ba:	d901      	bls.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e1d6      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c0:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029cc:	4b34      	ldr	r3, [pc, #208]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 8084 	beq.w	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d07c      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029ec:	4b2c      	ldr	r3, [pc, #176]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80029fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fe:	fa93 f3a3 	rbit	r3, r3
 8002a02:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a06:	fab3 f383 	clz	r3, r3
 8002a0a:	b2db      	uxtb	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	461a      	mov	r2, r3
 8002a16:	2301      	movs	r3, #1
 8002a18:	6013      	str	r3, [r2, #0]
 8002a1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a1e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a2a:	fab3 f383 	clz	r3, r3
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	461a      	mov	r2, r3
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a34:	4413      	add	r3, r2
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a3e:	4a18      	ldr	r2, [pc, #96]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a42:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d04b      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4e:	f7fe f9d7 	bl	8000e00 <HAL_GetTick>
 8002a52:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a54:	e00a      	b.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a56:	f7fe f9d3 	bl	8000e00 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e180      	b.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a72:	fa93 f3a3 	rbit	r3, r3
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
 8002a78:	2302      	movs	r3, #2
 8002a7a:	623b      	str	r3, [r7, #32]
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	fa93 f3a3 	rbit	r3, r3
 8002a82:	61fb      	str	r3, [r7, #28]
  return result;
 8002a84:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a86:	fab3 f383 	clz	r3, r3
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	095b      	lsrs	r3, r3, #5
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	f043 0302 	orr.w	r3, r3, #2
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d108      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002a9a:	4b01      	ldr	r3, [pc, #4]	; (8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	e00d      	b.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	40007000 	.word	0x40007000
 8002aa8:	10908100 	.word	0x10908100
 8002aac:	2302      	movs	r3, #2
 8002aae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab0:	69bb      	ldr	r3, [r7, #24]
 8002ab2:	fa93 f3a3 	rbit	r3, r3
 8002ab6:	617b      	str	r3, [r7, #20]
 8002ab8:	4b9a      	ldr	r3, [pc, #616]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	2202      	movs	r2, #2
 8002abe:	613a      	str	r2, [r7, #16]
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	fa92 f2a2 	rbit	r2, r2
 8002ac6:	60fa      	str	r2, [r7, #12]
  return result;
 8002ac8:	68fa      	ldr	r2, [r7, #12]
 8002aca:	fab2 f282 	clz	r2, r2
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	f002 021f 	and.w	r2, r2, #31
 8002ada:	2101      	movs	r1, #1
 8002adc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0b7      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002ae6:	4b8f      	ldr	r3, [pc, #572]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	498c      	ldr	r1, [pc, #560]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002af8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d105      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b00:	4b88      	ldr	r3, [pc, #544]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	4a87      	ldr	r2, [pc, #540]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b0a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b18:	4b82      	ldr	r3, [pc, #520]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b1c:	f023 0203 	bic.w	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	497f      	ldr	r1, [pc, #508]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d008      	beq.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b36:	4b7b      	ldr	r3, [pc, #492]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	4978      	ldr	r1, [pc, #480]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0304 	and.w	r3, r3, #4
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b54:	4b73      	ldr	r3, [pc, #460]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b58:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	4970      	ldr	r1, [pc, #448]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b72:	4b6c      	ldr	r3, [pc, #432]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f023 0210 	bic.w	r2, r3, #16
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	4969      	ldr	r1, [pc, #420]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d008      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002b90:	4b64      	ldr	r3, [pc, #400]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	4961      	ldr	r1, [pc, #388]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d008      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bae:	4b5d      	ldr	r3, [pc, #372]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f023 0220 	bic.w	r2, r3, #32
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	495a      	ldr	r1, [pc, #360]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bcc:	4b55      	ldr	r3, [pc, #340]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	4952      	ldr	r1, [pc, #328]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0308 	and.w	r3, r3, #8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d008      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002bea:	4b4e      	ldr	r3, [pc, #312]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	494b      	ldr	r1, [pc, #300]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d008      	beq.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002c08:	4b46      	ldr	r3, [pc, #280]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	4943      	ldr	r1, [pc, #268]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d008      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c26:	4b3f      	ldr	r3, [pc, #252]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	493c      	ldr	r1, [pc, #240]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d008      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c44:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c48:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c50:	4934      	ldr	r1, [pc, #208]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d008      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002c62:	4b30      	ldr	r3, [pc, #192]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	492d      	ldr	r1, [pc, #180]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d008      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002c80:	4b28      	ldr	r3, [pc, #160]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8c:	4925      	ldr	r1, [pc, #148]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d008      	beq.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	491e      	ldr	r1, [pc, #120]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cac:	4313      	orrs	r3, r2
 8002cae:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d008      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002cbc:	4b19      	ldr	r3, [pc, #100]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	4916      	ldr	r1, [pc, #88]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d008      	beq.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002cda:	4b12      	ldr	r3, [pc, #72]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	490f      	ldr	r1, [pc, #60]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d008      	beq.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002cf8:	4b0a      	ldr	r3, [pc, #40]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d04:	4907      	ldr	r1, [pc, #28]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00c      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002d16:	4b03      	ldr	r3, [pc, #12]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	e002      	b.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d2a:	4913      	ldr	r1, [pc, #76]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d008      	beq.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d48:	490b      	ldr	r1, [pc, #44]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d008      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002d5a:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d66:	4904      	ldr	r1, [pc, #16]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3748      	adds	r7, #72	; 0x48
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000

08002d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e040      	b.n	8002e10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f7fd fefa 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2224      	movs	r2, #36	; 0x24
 8002da8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f022 0201 	bic.w	r2, r2, #1
 8002db8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f82c 	bl	8002e18 <UART_SetConfig>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d101      	bne.n	8002dca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e022      	b.n	8002e10 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f9f6 	bl	80031c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002de6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002df6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fa7d 	bl	8003308 <UART_CheckIdleState>
 8002e0e:	4603      	mov	r3, r0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	689a      	ldr	r2, [r3, #8]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	431a      	orrs	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	431a      	orrs	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	4b92      	ldr	r3, [pc, #584]	; (800308c <UART_SetConfig+0x274>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	6979      	ldr	r1, [r7, #20]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a1b      	ldr	r3, [r3, #32]
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a80      	ldr	r2, [pc, #512]	; (8003090 <UART_SetConfig+0x278>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d120      	bne.n	8002ed6 <UART_SetConfig+0xbe>
 8002e94:	4b7f      	ldr	r3, [pc, #508]	; (8003094 <UART_SetConfig+0x27c>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d817      	bhi.n	8002ed0 <UART_SetConfig+0xb8>
 8002ea0:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <UART_SetConfig+0x90>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002eb9 	.word	0x08002eb9
 8002eac:	08002ec5 	.word	0x08002ec5
 8002eb0:	08002ecb 	.word	0x08002ecb
 8002eb4:	08002ebf 	.word	0x08002ebf
 8002eb8:	2301      	movs	r3, #1
 8002eba:	77fb      	strb	r3, [r7, #31]
 8002ebc:	e0b5      	b.n	800302a <UART_SetConfig+0x212>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	77fb      	strb	r3, [r7, #31]
 8002ec2:	e0b2      	b.n	800302a <UART_SetConfig+0x212>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	77fb      	strb	r3, [r7, #31]
 8002ec8:	e0af      	b.n	800302a <UART_SetConfig+0x212>
 8002eca:	2308      	movs	r3, #8
 8002ecc:	77fb      	strb	r3, [r7, #31]
 8002ece:	e0ac      	b.n	800302a <UART_SetConfig+0x212>
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	77fb      	strb	r3, [r7, #31]
 8002ed4:	e0a9      	b.n	800302a <UART_SetConfig+0x212>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6f      	ldr	r2, [pc, #444]	; (8003098 <UART_SetConfig+0x280>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d124      	bne.n	8002f2a <UART_SetConfig+0x112>
 8002ee0:	4b6c      	ldr	r3, [pc, #432]	; (8003094 <UART_SetConfig+0x27c>)
 8002ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ee8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002eec:	d011      	beq.n	8002f12 <UART_SetConfig+0xfa>
 8002eee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002ef2:	d817      	bhi.n	8002f24 <UART_SetConfig+0x10c>
 8002ef4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ef8:	d011      	beq.n	8002f1e <UART_SetConfig+0x106>
 8002efa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002efe:	d811      	bhi.n	8002f24 <UART_SetConfig+0x10c>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <UART_SetConfig+0xf4>
 8002f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f08:	d006      	beq.n	8002f18 <UART_SetConfig+0x100>
 8002f0a:	e00b      	b.n	8002f24 <UART_SetConfig+0x10c>
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	77fb      	strb	r3, [r7, #31]
 8002f10:	e08b      	b.n	800302a <UART_SetConfig+0x212>
 8002f12:	2302      	movs	r3, #2
 8002f14:	77fb      	strb	r3, [r7, #31]
 8002f16:	e088      	b.n	800302a <UART_SetConfig+0x212>
 8002f18:	2304      	movs	r3, #4
 8002f1a:	77fb      	strb	r3, [r7, #31]
 8002f1c:	e085      	b.n	800302a <UART_SetConfig+0x212>
 8002f1e:	2308      	movs	r3, #8
 8002f20:	77fb      	strb	r3, [r7, #31]
 8002f22:	e082      	b.n	800302a <UART_SetConfig+0x212>
 8002f24:	2310      	movs	r3, #16
 8002f26:	77fb      	strb	r3, [r7, #31]
 8002f28:	e07f      	b.n	800302a <UART_SetConfig+0x212>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a5b      	ldr	r2, [pc, #364]	; (800309c <UART_SetConfig+0x284>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d124      	bne.n	8002f7e <UART_SetConfig+0x166>
 8002f34:	4b57      	ldr	r3, [pc, #348]	; (8003094 <UART_SetConfig+0x27c>)
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002f3c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f40:	d011      	beq.n	8002f66 <UART_SetConfig+0x14e>
 8002f42:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f46:	d817      	bhi.n	8002f78 <UART_SetConfig+0x160>
 8002f48:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f4c:	d011      	beq.n	8002f72 <UART_SetConfig+0x15a>
 8002f4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f52:	d811      	bhi.n	8002f78 <UART_SetConfig+0x160>
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d003      	beq.n	8002f60 <UART_SetConfig+0x148>
 8002f58:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f5c:	d006      	beq.n	8002f6c <UART_SetConfig+0x154>
 8002f5e:	e00b      	b.n	8002f78 <UART_SetConfig+0x160>
 8002f60:	2300      	movs	r3, #0
 8002f62:	77fb      	strb	r3, [r7, #31]
 8002f64:	e061      	b.n	800302a <UART_SetConfig+0x212>
 8002f66:	2302      	movs	r3, #2
 8002f68:	77fb      	strb	r3, [r7, #31]
 8002f6a:	e05e      	b.n	800302a <UART_SetConfig+0x212>
 8002f6c:	2304      	movs	r3, #4
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	e05b      	b.n	800302a <UART_SetConfig+0x212>
 8002f72:	2308      	movs	r3, #8
 8002f74:	77fb      	strb	r3, [r7, #31]
 8002f76:	e058      	b.n	800302a <UART_SetConfig+0x212>
 8002f78:	2310      	movs	r3, #16
 8002f7a:	77fb      	strb	r3, [r7, #31]
 8002f7c:	e055      	b.n	800302a <UART_SetConfig+0x212>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a47      	ldr	r2, [pc, #284]	; (80030a0 <UART_SetConfig+0x288>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d124      	bne.n	8002fd2 <UART_SetConfig+0x1ba>
 8002f88:	4b42      	ldr	r3, [pc, #264]	; (8003094 <UART_SetConfig+0x27c>)
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002f90:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f94:	d011      	beq.n	8002fba <UART_SetConfig+0x1a2>
 8002f96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002f9a:	d817      	bhi.n	8002fcc <UART_SetConfig+0x1b4>
 8002f9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fa0:	d011      	beq.n	8002fc6 <UART_SetConfig+0x1ae>
 8002fa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fa6:	d811      	bhi.n	8002fcc <UART_SetConfig+0x1b4>
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <UART_SetConfig+0x19c>
 8002fac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fb0:	d006      	beq.n	8002fc0 <UART_SetConfig+0x1a8>
 8002fb2:	e00b      	b.n	8002fcc <UART_SetConfig+0x1b4>
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	77fb      	strb	r3, [r7, #31]
 8002fb8:	e037      	b.n	800302a <UART_SetConfig+0x212>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	77fb      	strb	r3, [r7, #31]
 8002fbe:	e034      	b.n	800302a <UART_SetConfig+0x212>
 8002fc0:	2304      	movs	r3, #4
 8002fc2:	77fb      	strb	r3, [r7, #31]
 8002fc4:	e031      	b.n	800302a <UART_SetConfig+0x212>
 8002fc6:	2308      	movs	r3, #8
 8002fc8:	77fb      	strb	r3, [r7, #31]
 8002fca:	e02e      	b.n	800302a <UART_SetConfig+0x212>
 8002fcc:	2310      	movs	r3, #16
 8002fce:	77fb      	strb	r3, [r7, #31]
 8002fd0:	e02b      	b.n	800302a <UART_SetConfig+0x212>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a33      	ldr	r2, [pc, #204]	; (80030a4 <UART_SetConfig+0x28c>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d124      	bne.n	8003026 <UART_SetConfig+0x20e>
 8002fdc:	4b2d      	ldr	r3, [pc, #180]	; (8003094 <UART_SetConfig+0x27c>)
 8002fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8002fe4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fe8:	d011      	beq.n	800300e <UART_SetConfig+0x1f6>
 8002fea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fee:	d817      	bhi.n	8003020 <UART_SetConfig+0x208>
 8002ff0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ff4:	d011      	beq.n	800301a <UART_SetConfig+0x202>
 8002ff6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ffa:	d811      	bhi.n	8003020 <UART_SetConfig+0x208>
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d003      	beq.n	8003008 <UART_SetConfig+0x1f0>
 8003000:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003004:	d006      	beq.n	8003014 <UART_SetConfig+0x1fc>
 8003006:	e00b      	b.n	8003020 <UART_SetConfig+0x208>
 8003008:	2300      	movs	r3, #0
 800300a:	77fb      	strb	r3, [r7, #31]
 800300c:	e00d      	b.n	800302a <UART_SetConfig+0x212>
 800300e:	2302      	movs	r3, #2
 8003010:	77fb      	strb	r3, [r7, #31]
 8003012:	e00a      	b.n	800302a <UART_SetConfig+0x212>
 8003014:	2304      	movs	r3, #4
 8003016:	77fb      	strb	r3, [r7, #31]
 8003018:	e007      	b.n	800302a <UART_SetConfig+0x212>
 800301a:	2308      	movs	r3, #8
 800301c:	77fb      	strb	r3, [r7, #31]
 800301e:	e004      	b.n	800302a <UART_SetConfig+0x212>
 8003020:	2310      	movs	r3, #16
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e001      	b.n	800302a <UART_SetConfig+0x212>
 8003026:	2310      	movs	r3, #16
 8003028:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003032:	d16c      	bne.n	800310e <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 8003034:	7ffb      	ldrb	r3, [r7, #31]
 8003036:	2b08      	cmp	r3, #8
 8003038:	d838      	bhi.n	80030ac <UART_SetConfig+0x294>
 800303a:	a201      	add	r2, pc, #4	; (adr r2, 8003040 <UART_SetConfig+0x228>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	08003065 	.word	0x08003065
 8003044:	0800306d 	.word	0x0800306d
 8003048:	08003075 	.word	0x08003075
 800304c:	080030ad 	.word	0x080030ad
 8003050:	0800307b 	.word	0x0800307b
 8003054:	080030ad 	.word	0x080030ad
 8003058:	080030ad 	.word	0x080030ad
 800305c:	080030ad 	.word	0x080030ad
 8003060:	08003083 	.word	0x08003083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003064:	f7ff fc28 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003068:	61b8      	str	r0, [r7, #24]
        break;
 800306a:	e024      	b.n	80030b6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800306c:	f7ff fc46 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 8003070:	61b8      	str	r0, [r7, #24]
        break;
 8003072:	e020      	b.n	80030b6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b0c      	ldr	r3, [pc, #48]	; (80030a8 <UART_SetConfig+0x290>)
 8003076:	61bb      	str	r3, [r7, #24]
        break;
 8003078:	e01d      	b.n	80030b6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7ff fba7 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 800307e:	61b8      	str	r0, [r7, #24]
        break;
 8003080:	e019      	b.n	80030b6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003086:	61bb      	str	r3, [r7, #24]
        break;
 8003088:	e015      	b.n	80030b6 <UART_SetConfig+0x29e>
 800308a:	bf00      	nop
 800308c:	efff69f3 	.word	0xefff69f3
 8003090:	40013800 	.word	0x40013800
 8003094:	40021000 	.word	0x40021000
 8003098:	40004400 	.word	0x40004400
 800309c:	40004800 	.word	0x40004800
 80030a0:	40004c00 	.word	0x40004c00
 80030a4:	40005000 	.word	0x40005000
 80030a8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	77bb      	strb	r3, [r7, #30]
        break;
 80030b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d075      	beq.n	80031a8 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	005a      	lsls	r2, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	085b      	lsrs	r3, r3, #1
 80030c6:	441a      	add	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	2b0f      	cmp	r3, #15
 80030d8:	d916      	bls.n	8003108 <UART_SetConfig+0x2f0>
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e0:	d212      	bcs.n	8003108 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f023 030f 	bic.w	r3, r3, #15
 80030ea:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	89fb      	ldrh	r3, [r7, #14]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	89fa      	ldrh	r2, [r7, #14]
 8003104:	60da      	str	r2, [r3, #12]
 8003106:	e04f      	b.n	80031a8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	77bb      	strb	r3, [r7, #30]
 800310c:	e04c      	b.n	80031a8 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 800310e:	7ffb      	ldrb	r3, [r7, #31]
 8003110:	2b08      	cmp	r3, #8
 8003112:	d828      	bhi.n	8003166 <UART_SetConfig+0x34e>
 8003114:	a201      	add	r2, pc, #4	; (adr r2, 800311c <UART_SetConfig+0x304>)
 8003116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800311a:	bf00      	nop
 800311c:	08003141 	.word	0x08003141
 8003120:	08003149 	.word	0x08003149
 8003124:	08003151 	.word	0x08003151
 8003128:	08003167 	.word	0x08003167
 800312c:	08003157 	.word	0x08003157
 8003130:	08003167 	.word	0x08003167
 8003134:	08003167 	.word	0x08003167
 8003138:	08003167 	.word	0x08003167
 800313c:	0800315f 	.word	0x0800315f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003140:	f7ff fbba 	bl	80028b8 <HAL_RCC_GetPCLK1Freq>
 8003144:	61b8      	str	r0, [r7, #24]
        break;
 8003146:	e013      	b.n	8003170 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003148:	f7ff fbd8 	bl	80028fc <HAL_RCC_GetPCLK2Freq>
 800314c:	61b8      	str	r0, [r7, #24]
        break;
 800314e:	e00f      	b.n	8003170 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003150:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <UART_SetConfig+0x3a8>)
 8003152:	61bb      	str	r3, [r7, #24]
        break;
 8003154:	e00c      	b.n	8003170 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003156:	f7ff fb39 	bl	80027cc <HAL_RCC_GetSysClockFreq>
 800315a:	61b8      	str	r0, [r7, #24]
        break;
 800315c:	e008      	b.n	8003170 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800315e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003162:	61bb      	str	r3, [r7, #24]
        break;
 8003164:	e004      	b.n	8003170 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	77bb      	strb	r3, [r7, #30]
        break;
 800316e:	bf00      	nop
    }

    if (pclk != 0U)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d018      	beq.n	80031a8 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	085a      	lsrs	r2, r3, #1
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	441a      	add	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	b29b      	uxth	r3, r3
 800318a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	2b0f      	cmp	r3, #15
 8003190:	d908      	bls.n	80031a4 <UART_SetConfig+0x38c>
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003198:	d204      	bcs.n	80031a4 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	e001      	b.n	80031a8 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80031b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3720      	adds	r7, #32
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	007a1200 	.word	0x007a1200

080031c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	f003 0301 	and.w	r3, r3, #1
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	f003 0304 	and.w	r3, r3, #4
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00a      	beq.n	8003232 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00a      	beq.n	8003254 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	430a      	orrs	r2, r1
 8003252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	f003 0310 	and.w	r3, r3, #16
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00a      	beq.n	8003276 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327a:	f003 0320 	and.w	r3, r3, #32
 800327e:	2b00      	cmp	r3, #0
 8003280:	d00a      	beq.n	8003298 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	430a      	orrs	r2, r1
 8003296:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01a      	beq.n	80032da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032c2:	d10a      	bne.n	80032da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	605a      	str	r2, [r3, #4]
  }
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af02      	add	r7, sp, #8
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003318:	f7fd fd72 	bl	8000e00 <HAL_GetTick>
 800331c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b08      	cmp	r3, #8
 800332a:	d10e      	bne.n	800334a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800332c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003330:	9300      	str	r3, [sp, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f82d 	bl	800339a <UART_WaitOnFlagUntilTimeout>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e023      	b.n	8003392 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b04      	cmp	r3, #4
 8003356:	d10e      	bne.n	8003376 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003358:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f000 f817 	bl	800339a <UART_WaitOnFlagUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d001      	beq.n	8003376 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e00d      	b.n	8003392 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2220      	movs	r2, #32
 800337a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2220      	movs	r2, #32
 8003380:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b09c      	sub	sp, #112	; 0x70
 800339e:	af00      	add	r7, sp, #0
 80033a0:	60f8      	str	r0, [r7, #12]
 80033a2:	60b9      	str	r1, [r7, #8]
 80033a4:	603b      	str	r3, [r7, #0]
 80033a6:	4613      	mov	r3, r2
 80033a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033aa:	e0a5      	b.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b2:	f000 80a1 	beq.w	80034f8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b6:	f7fd fd23 	bl	8000e00 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d302      	bcc.n	80033cc <UART_WaitOnFlagUntilTimeout+0x32>
 80033c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d13e      	bne.n	800344a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033d4:	e853 3f00 	ldrex	r3, [r3]
 80033d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80033da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033e0:	667b      	str	r3, [r7, #100]	; 0x64
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80033f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033f2:	e841 2300 	strex	r3, r2, [r1]
 80033f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80033f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1e6      	bne.n	80033cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	3308      	adds	r3, #8
 8003404:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003406:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003408:	e853 3f00 	ldrex	r3, [r3]
 800340c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	f023 0301 	bic.w	r3, r3, #1
 8003414:	663b      	str	r3, [r7, #96]	; 0x60
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	3308      	adds	r3, #8
 800341c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800341e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003420:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003422:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003426:	e841 2300 	strex	r3, r2, [r1]
 800342a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800342c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1e5      	bne.n	80033fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e067      	b.n	800351a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d04f      	beq.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003462:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003466:	d147      	bne.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003470:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347a:	e853 3f00 	ldrex	r3, [r3]
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003486:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	461a      	mov	r2, r3
 800348e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003490:	637b      	str	r3, [r7, #52]	; 0x34
 8003492:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003494:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003496:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003498:	e841 2300 	strex	r3, r2, [r1]
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800349e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e6      	bne.n	8003472 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3308      	adds	r3, #8
 80034aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	e853 3f00 	ldrex	r3, [r3]
 80034b2:	613b      	str	r3, [r7, #16]
   return(result);
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f023 0301 	bic.w	r3, r3, #1
 80034ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3308      	adds	r3, #8
 80034c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034c4:	623a      	str	r2, [r7, #32]
 80034c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	69f9      	ldr	r1, [r7, #28]
 80034ca:	6a3a      	ldr	r2, [r7, #32]
 80034cc:	e841 2300 	strex	r3, r2, [r1]
 80034d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e5      	bne.n	80034a4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2220      	movs	r2, #32
 80034dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2220      	movs	r2, #32
 80034e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e010      	b.n	800351a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	4013      	ands	r3, r2
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	429a      	cmp	r2, r3
 8003514:	f43f af4a 	beq.w	80033ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3770      	adds	r7, #112	; 0x70
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <_ZdlPvj>:
 8003522:	f000 b803 	b.w	800352c <_ZdlPv>

08003526 <__cxa_pure_virtual>:
 8003526:	b508      	push	{r3, lr}
 8003528:	f000 f80e 	bl	8003548 <_ZSt9terminatev>

0800352c <_ZdlPv>:
 800352c:	f000 b842 	b.w	80035b4 <free>

08003530 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8003530:	b508      	push	{r3, lr}
 8003532:	4780      	blx	r0
 8003534:	f000 f80d 	bl	8003552 <abort>

08003538 <_ZSt13get_terminatev>:
 8003538:	4b02      	ldr	r3, [pc, #8]	; (8003544 <_ZSt13get_terminatev+0xc>)
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	f3bf 8f5b 	dmb	ish
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	2000000c 	.word	0x2000000c

08003548 <_ZSt9terminatev>:
 8003548:	b508      	push	{r3, lr}
 800354a:	f7ff fff5 	bl	8003538 <_ZSt13get_terminatev>
 800354e:	f7ff ffef 	bl	8003530 <_ZN10__cxxabiv111__terminateEPFvvE>

08003552 <abort>:
 8003552:	b508      	push	{r3, lr}
 8003554:	2006      	movs	r0, #6
 8003556:	f000 f8b1 	bl	80036bc <raise>
 800355a:	2001      	movs	r0, #1
 800355c:	f7fd fbaf 	bl	8000cbe <_exit>

08003560 <__errno>:
 8003560:	4b01      	ldr	r3, [pc, #4]	; (8003568 <__errno+0x8>)
 8003562:	6818      	ldr	r0, [r3, #0]
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000010 	.word	0x20000010

0800356c <__libc_init_array>:
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	4d0d      	ldr	r5, [pc, #52]	; (80035a4 <__libc_init_array+0x38>)
 8003570:	4c0d      	ldr	r4, [pc, #52]	; (80035a8 <__libc_init_array+0x3c>)
 8003572:	1b64      	subs	r4, r4, r5
 8003574:	10a4      	asrs	r4, r4, #2
 8003576:	2600      	movs	r6, #0
 8003578:	42a6      	cmp	r6, r4
 800357a:	d109      	bne.n	8003590 <__libc_init_array+0x24>
 800357c:	4d0b      	ldr	r5, [pc, #44]	; (80035ac <__libc_init_array+0x40>)
 800357e:	4c0c      	ldr	r4, [pc, #48]	; (80035b0 <__libc_init_array+0x44>)
 8003580:	f000 f8c6 	bl	8003710 <_init>
 8003584:	1b64      	subs	r4, r4, r5
 8003586:	10a4      	asrs	r4, r4, #2
 8003588:	2600      	movs	r6, #0
 800358a:	42a6      	cmp	r6, r4
 800358c:	d105      	bne.n	800359a <__libc_init_array+0x2e>
 800358e:	bd70      	pop	{r4, r5, r6, pc}
 8003590:	f855 3b04 	ldr.w	r3, [r5], #4
 8003594:	4798      	blx	r3
 8003596:	3601      	adds	r6, #1
 8003598:	e7ee      	b.n	8003578 <__libc_init_array+0xc>
 800359a:	f855 3b04 	ldr.w	r3, [r5], #4
 800359e:	4798      	blx	r3
 80035a0:	3601      	adds	r6, #1
 80035a2:	e7f2      	b.n	800358a <__libc_init_array+0x1e>
 80035a4:	080037b4 	.word	0x080037b4
 80035a8:	080037b4 	.word	0x080037b4
 80035ac:	080037b4 	.word	0x080037b4
 80035b0:	080037c0 	.word	0x080037c0

080035b4 <free>:
 80035b4:	4b02      	ldr	r3, [pc, #8]	; (80035c0 <free+0xc>)
 80035b6:	4601      	mov	r1, r0
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	f000 b80b 	b.w	80035d4 <_free_r>
 80035be:	bf00      	nop
 80035c0:	20000010 	.word	0x20000010

080035c4 <memset>:
 80035c4:	4402      	add	r2, r0
 80035c6:	4603      	mov	r3, r0
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d100      	bne.n	80035ce <memset+0xa>
 80035cc:	4770      	bx	lr
 80035ce:	f803 1b01 	strb.w	r1, [r3], #1
 80035d2:	e7f9      	b.n	80035c8 <memset+0x4>

080035d4 <_free_r>:
 80035d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035d6:	2900      	cmp	r1, #0
 80035d8:	d044      	beq.n	8003664 <_free_r+0x90>
 80035da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035de:	9001      	str	r0, [sp, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f1a1 0404 	sub.w	r4, r1, #4
 80035e6:	bfb8      	it	lt
 80035e8:	18e4      	addlt	r4, r4, r3
 80035ea:	f000 f883 	bl	80036f4 <__malloc_lock>
 80035ee:	4a1e      	ldr	r2, [pc, #120]	; (8003668 <_free_r+0x94>)
 80035f0:	9801      	ldr	r0, [sp, #4]
 80035f2:	6813      	ldr	r3, [r2, #0]
 80035f4:	b933      	cbnz	r3, 8003604 <_free_r+0x30>
 80035f6:	6063      	str	r3, [r4, #4]
 80035f8:	6014      	str	r4, [r2, #0]
 80035fa:	b003      	add	sp, #12
 80035fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003600:	f000 b87e 	b.w	8003700 <__malloc_unlock>
 8003604:	42a3      	cmp	r3, r4
 8003606:	d908      	bls.n	800361a <_free_r+0x46>
 8003608:	6825      	ldr	r5, [r4, #0]
 800360a:	1961      	adds	r1, r4, r5
 800360c:	428b      	cmp	r3, r1
 800360e:	bf01      	itttt	eq
 8003610:	6819      	ldreq	r1, [r3, #0]
 8003612:	685b      	ldreq	r3, [r3, #4]
 8003614:	1949      	addeq	r1, r1, r5
 8003616:	6021      	streq	r1, [r4, #0]
 8003618:	e7ed      	b.n	80035f6 <_free_r+0x22>
 800361a:	461a      	mov	r2, r3
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	b10b      	cbz	r3, 8003624 <_free_r+0x50>
 8003620:	42a3      	cmp	r3, r4
 8003622:	d9fa      	bls.n	800361a <_free_r+0x46>
 8003624:	6811      	ldr	r1, [r2, #0]
 8003626:	1855      	adds	r5, r2, r1
 8003628:	42a5      	cmp	r5, r4
 800362a:	d10b      	bne.n	8003644 <_free_r+0x70>
 800362c:	6824      	ldr	r4, [r4, #0]
 800362e:	4421      	add	r1, r4
 8003630:	1854      	adds	r4, r2, r1
 8003632:	42a3      	cmp	r3, r4
 8003634:	6011      	str	r1, [r2, #0]
 8003636:	d1e0      	bne.n	80035fa <_free_r+0x26>
 8003638:	681c      	ldr	r4, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	6053      	str	r3, [r2, #4]
 800363e:	4421      	add	r1, r4
 8003640:	6011      	str	r1, [r2, #0]
 8003642:	e7da      	b.n	80035fa <_free_r+0x26>
 8003644:	d902      	bls.n	800364c <_free_r+0x78>
 8003646:	230c      	movs	r3, #12
 8003648:	6003      	str	r3, [r0, #0]
 800364a:	e7d6      	b.n	80035fa <_free_r+0x26>
 800364c:	6825      	ldr	r5, [r4, #0]
 800364e:	1961      	adds	r1, r4, r5
 8003650:	428b      	cmp	r3, r1
 8003652:	bf04      	itt	eq
 8003654:	6819      	ldreq	r1, [r3, #0]
 8003656:	685b      	ldreq	r3, [r3, #4]
 8003658:	6063      	str	r3, [r4, #4]
 800365a:	bf04      	itt	eq
 800365c:	1949      	addeq	r1, r1, r5
 800365e:	6021      	streq	r1, [r4, #0]
 8003660:	6054      	str	r4, [r2, #4]
 8003662:	e7ca      	b.n	80035fa <_free_r+0x26>
 8003664:	b003      	add	sp, #12
 8003666:	bd30      	pop	{r4, r5, pc}
 8003668:	2000016c 	.word	0x2000016c

0800366c <_raise_r>:
 800366c:	291f      	cmp	r1, #31
 800366e:	b538      	push	{r3, r4, r5, lr}
 8003670:	4604      	mov	r4, r0
 8003672:	460d      	mov	r5, r1
 8003674:	d904      	bls.n	8003680 <_raise_r+0x14>
 8003676:	2316      	movs	r3, #22
 8003678:	6003      	str	r3, [r0, #0]
 800367a:	f04f 30ff 	mov.w	r0, #4294967295
 800367e:	bd38      	pop	{r3, r4, r5, pc}
 8003680:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003682:	b112      	cbz	r2, 800368a <_raise_r+0x1e>
 8003684:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003688:	b94b      	cbnz	r3, 800369e <_raise_r+0x32>
 800368a:	4620      	mov	r0, r4
 800368c:	f000 f830 	bl	80036f0 <_getpid_r>
 8003690:	462a      	mov	r2, r5
 8003692:	4601      	mov	r1, r0
 8003694:	4620      	mov	r0, r4
 8003696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800369a:	f000 b817 	b.w	80036cc <_kill_r>
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d00a      	beq.n	80036b8 <_raise_r+0x4c>
 80036a2:	1c59      	adds	r1, r3, #1
 80036a4:	d103      	bne.n	80036ae <_raise_r+0x42>
 80036a6:	2316      	movs	r3, #22
 80036a8:	6003      	str	r3, [r0, #0]
 80036aa:	2001      	movs	r0, #1
 80036ac:	e7e7      	b.n	800367e <_raise_r+0x12>
 80036ae:	2400      	movs	r4, #0
 80036b0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80036b4:	4628      	mov	r0, r5
 80036b6:	4798      	blx	r3
 80036b8:	2000      	movs	r0, #0
 80036ba:	e7e0      	b.n	800367e <_raise_r+0x12>

080036bc <raise>:
 80036bc:	4b02      	ldr	r3, [pc, #8]	; (80036c8 <raise+0xc>)
 80036be:	4601      	mov	r1, r0
 80036c0:	6818      	ldr	r0, [r3, #0]
 80036c2:	f7ff bfd3 	b.w	800366c <_raise_r>
 80036c6:	bf00      	nop
 80036c8:	20000010 	.word	0x20000010

080036cc <_kill_r>:
 80036cc:	b538      	push	{r3, r4, r5, lr}
 80036ce:	4d07      	ldr	r5, [pc, #28]	; (80036ec <_kill_r+0x20>)
 80036d0:	2300      	movs	r3, #0
 80036d2:	4604      	mov	r4, r0
 80036d4:	4608      	mov	r0, r1
 80036d6:	4611      	mov	r1, r2
 80036d8:	602b      	str	r3, [r5, #0]
 80036da:	f7fd fae0 	bl	8000c9e <_kill>
 80036de:	1c43      	adds	r3, r0, #1
 80036e0:	d102      	bne.n	80036e8 <_kill_r+0x1c>
 80036e2:	682b      	ldr	r3, [r5, #0]
 80036e4:	b103      	cbz	r3, 80036e8 <_kill_r+0x1c>
 80036e6:	6023      	str	r3, [r4, #0]
 80036e8:	bd38      	pop	{r3, r4, r5, pc}
 80036ea:	bf00      	nop
 80036ec:	20000170 	.word	0x20000170

080036f0 <_getpid_r>:
 80036f0:	f7fd bacd 	b.w	8000c8e <_getpid>

080036f4 <__malloc_lock>:
 80036f4:	4801      	ldr	r0, [pc, #4]	; (80036fc <__malloc_lock+0x8>)
 80036f6:	f000 b809 	b.w	800370c <__retarget_lock_acquire_recursive>
 80036fa:	bf00      	nop
 80036fc:	20000174 	.word	0x20000174

08003700 <__malloc_unlock>:
 8003700:	4801      	ldr	r0, [pc, #4]	; (8003708 <__malloc_unlock+0x8>)
 8003702:	f000 b804 	b.w	800370e <__retarget_lock_release_recursive>
 8003706:	bf00      	nop
 8003708:	20000174 	.word	0x20000174

0800370c <__retarget_lock_acquire_recursive>:
 800370c:	4770      	bx	lr

0800370e <__retarget_lock_release_recursive>:
 800370e:	4770      	bx	lr

08003710 <_init>:
 8003710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003712:	bf00      	nop
 8003714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003716:	bc08      	pop	{r3}
 8003718:	469e      	mov	lr, r3
 800371a:	4770      	bx	lr

0800371c <_fini>:
 800371c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800371e:	bf00      	nop
 8003720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003722:	bc08      	pop	{r3}
 8003724:	469e      	mov	lr, r3
 8003726:	4770      	bx	lr
