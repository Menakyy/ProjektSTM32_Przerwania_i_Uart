
ProjektSTM32_Przerwania_i_Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043c8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800455c  0800455c  0001455c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004604  08004604  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004604  08004604  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004604  08004604  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08004604  08004604  00014604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   0000000c  08004610  08004610  00014610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800461c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  20000070  0800468c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  0800468c  00020238  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e12b  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df2  00000000  00000000  0002e1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a40  00000000  00000000  00030fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  00031a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022fc3  00000000  00000000  00032328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113bd  00000000  00000000  000552eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1a12  00000000  00000000  000666a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001280ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028f4  00000000  00000000  0012810c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000070 	.word	0x20000070
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004544 	.word	0x08004544

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000074 	.word	0x20000074
 80001d0:	08004544 	.word	0x08004544

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <_ZN7CButtonC1Ev>:


#include <CButton.h>


CButton::CButton() {
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	6078      	str	r0, [r7, #4]
 80001f0:	4a04      	ldr	r2, [pc, #16]	; (8000204 <_ZN7CButtonC1Ev+0x1c>)
 80001f2:	687b      	ldr	r3, [r7, #4]
 80001f4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4618      	mov	r0, r3
 80001fa:	370c      	adds	r7, #12
 80001fc:	46bd      	mov	sp, r7
 80001fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000202:	4770      	bx	lr
 8000204:	08004574 	.word	0x08004574

08000208 <_ZN7CButtonD1Ev>:

CButton::~CButton() {
 8000208:	b480      	push	{r7}
 800020a:	b083      	sub	sp, #12
 800020c:	af00      	add	r7, sp, #0
 800020e:	6078      	str	r0, [r7, #4]
 8000210:	4a04      	ldr	r2, [pc, #16]	; (8000224 <_ZN7CButtonD1Ev+0x1c>)
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4618      	mov	r0, r3
 800021a:	370c      	adds	r7, #12
 800021c:	46bd      	mov	sp, r7
 800021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000222:	4770      	bx	lr
 8000224:	08004574 	.word	0x08004574

08000228 <_ZN7CButtonD0Ev>:
CButton::~CButton() {
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
}
 8000230:	6878      	ldr	r0, [r7, #4]
 8000232:	f7ff ffe9 	bl	8000208 <_ZN7CButtonD1Ev>
 8000236:	211c      	movs	r1, #28
 8000238:	6878      	ldr	r0, [r7, #4]
 800023a:	f004 f8f0 	bl	800441e <_ZdlPvj>
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <_ZN15CCompleteParserC1Ev>:
 *      Author: user
 */

#include "CCompleteParser.h"

CCompleteParser::CCompleteParser() {
 8000248:	b480      	push	{r7}
 800024a:	b083      	sub	sp, #12
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <_ZN15CCompleteParserC1Ev+0x1c>)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	4618      	mov	r0, r3
 800025a:	370c      	adds	r7, #12
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	08004584 	.word	0x08004584

08000268 <_ZN15CCompleteParserD1Ev>:

CCompleteParser::~CCompleteParser() {
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]
 8000270:	4a04      	ldr	r2, [pc, #16]	; (8000284 <_ZN15CCompleteParserD1Ev+0x1c>)
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	4618      	mov	r0, r3
 800027a:	370c      	adds	r7, #12
 800027c:	46bd      	mov	sp, r7
 800027e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000282:	4770      	bx	lr
 8000284:	08004584 	.word	0x08004584

08000288 <_ZN15CCompleteParserD0Ev>:
CCompleteParser::~CCompleteParser() {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
}
 8000290:	6878      	ldr	r0, [r7, #4]
 8000292:	f7ff ffe9 	bl	8000268 <_ZN15CCompleteParserD1Ev>
 8000296:	2134      	movs	r1, #52	; 0x34
 8000298:	6878      	ldr	r0, [r7, #4]
 800029a:	f004 f8c0 	bl	800441e <_ZdlPvj>
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	4618      	mov	r0, r3
 80002a2:	3708      	adds	r7, #8
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}

080002a8 <_ZN15CCompleteParser4initEP11CUartDriverP4CLedS3_S3_>:

void CCompleteParser::init(CUartDriver* uartDriver, CLed* red, CLed* blue, CLed* green)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b085      	sub	sp, #20
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	60f8      	str	r0, [r7, #12]
 80002b0:	60b9      	str	r1, [r7, #8]
 80002b2:	607a      	str	r2, [r7, #4]
 80002b4:	603b      	str	r3, [r7, #0]
	m_uartDriver = uartDriver;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	68ba      	ldr	r2, [r7, #8]
 80002ba:	625a      	str	r2, [r3, #36]	; 0x24
	m_red = red;
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	629a      	str	r2, [r3, #40]	; 0x28
	m_blue = blue;
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	683a      	ldr	r2, [r7, #0]
 80002c6:	62da      	str	r2, [r3, #44]	; 0x2c
	m_green = green;
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	69ba      	ldr	r2, [r7, #24]
 80002cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80002ce:	bf00      	nop
 80002d0:	3714      	adds	r7, #20
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
	...

080002dc <_ZN17CControlLedByUart9SCommandsC1Ev>:
{
public:
	CControlLedByUart();
	virtual ~CControlLedByUart();

	struct SCommands
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	6078      	str	r0, [r7, #4]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <_ZN17CControlLedByUart9SCommandsC1Ev+0x34>)
 80002e8:	6810      	ldr	r0, [r2, #0]
 80002ea:	6018      	str	r0, [r3, #0]
 80002ec:	8891      	ldrh	r1, [r2, #4]
 80002ee:	7992      	ldrb	r2, [r2, #6]
 80002f0:	8099      	strh	r1, [r3, #4]
 80002f2:	719a      	strb	r2, [r3, #6]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	4907      	ldr	r1, [pc, #28]	; (8000314 <_ZN17CControlLedByUart9SCommandsC1Ev+0x38>)
 80002f8:	1dda      	adds	r2, r3, #7
 80002fa:	460b      	mov	r3, r1
 80002fc:	cb03      	ldmia	r3!, {r0, r1}
 80002fe:	6010      	str	r0, [r2, #0]
 8000300:	6051      	str	r1, [r2, #4]
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4618      	mov	r0, r3
 8000306:	370c      	adds	r7, #12
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr
 8000310:	0800455c 	.word	0x0800455c
 8000314:	08004564 	.word	0x08004564

08000318 <_ZN17CControlLedByUartC1Ev>:
 *      Author: Konra
 */

#include "CControlLedByUart.h"

CControlLedByUart::CControlLedByUart() {
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	6078      	str	r0, [r7, #4]
 8000320:	4a06      	ldr	r2, [pc, #24]	; (800033c <_ZN17CControlLedByUartC1Ev+0x24>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	3304      	adds	r3, #4
 800032a:	4618      	mov	r0, r3
 800032c:	f7ff ffd6 	bl	80002dc <_ZN17CControlLedByUart9SCommandsC1Ev>
	// TODO Auto-generated constructor stub

}
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4618      	mov	r0, r3
 8000334:	3708      	adds	r7, #8
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	08004594 	.word	0x08004594

08000340 <_ZN17CControlLedByUartD1Ev>:

CControlLedByUart::~CControlLedByUart() {
 8000340:	b480      	push	{r7}
 8000342:	b083      	sub	sp, #12
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	4a04      	ldr	r2, [pc, #16]	; (800035c <_ZN17CControlLedByUartD1Ev+0x1c>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4618      	mov	r0, r3
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr
 800035c:	08004594 	.word	0x08004594

08000360 <_ZN17CControlLedByUartD0Ev>:
CControlLedByUart::~CControlLedByUart() {
 8000360:	b580      	push	{r7, lr}
 8000362:	b082      	sub	sp, #8
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
}
 8000368:	6878      	ldr	r0, [r7, #4]
 800036a:	f7ff ffe9 	bl	8000340 <_ZN17CControlLedByUartD1Ev>
 800036e:	211c      	movs	r1, #28
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f004 f854 	bl	800441e <_ZdlPvj>
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4618      	mov	r0, r3
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <_ZN17CControlLedByUart4initEP11CUartDriverP4CLed>:

void CControlLedByUart::init(CUartDriver* uartDriver, CLed* led)
{
 8000380:	b480      	push	{r7}
 8000382:	b085      	sub	sp, #20
 8000384:	af00      	add	r7, sp, #0
 8000386:	60f8      	str	r0, [r7, #12]
 8000388:	60b9      	str	r1, [r7, #8]
 800038a:	607a      	str	r2, [r7, #4]
	m_uartDriver = uartDriver;
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	68ba      	ldr	r2, [r7, #8]
 8000390:	615a      	str	r2, [r3, #20]
	m_led = led;
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	687a      	ldr	r2, [r7, #4]
 8000396:	619a      	str	r2, [r3, #24]
}
 8000398:	bf00      	nop
 800039a:	3714      	adds	r7, #20
 800039c:	46bd      	mov	sp, r7
 800039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a2:	4770      	bx	lr

080003a4 <_ZN17CControlLedByUart6updateEv>:

void CControlLedByUart::update()
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	if(m_uartDriver->parsing(m_commands.led_on))
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	695a      	ldr	r2, [r3, #20]
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3304      	adds	r3, #4
 80003b4:	4619      	mov	r1, r3
 80003b6:	4610      	mov	r0, r2
 80003b8:	f000 fc4d 	bl	8000c56 <_ZN11CUartDriver7parsingEPKc>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d005      	beq.n	80003ce <_ZN17CControlLedByUart6updateEv+0x2a>
	{
		m_led->turnOnLed();
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	699b      	ldr	r3, [r3, #24]
 80003c6:	4618      	mov	r0, r3
 80003c8:	f000 faf6 	bl	80009b8 <_ZN4CLed9turnOnLedEv>
	}
	else if(m_uartDriver->parsing(m_commands.led_off))
	{
		m_led->turnOffLed();
	}
}
 80003cc:	e00f      	b.n	80003ee <_ZN17CControlLedByUart6updateEv+0x4a>
	else if(m_uartDriver->parsing(m_commands.led_off))
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	695a      	ldr	r2, [r3, #20]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	330b      	adds	r3, #11
 80003d6:	4619      	mov	r1, r3
 80003d8:	4610      	mov	r0, r2
 80003da:	f000 fc3c 	bl	8000c56 <_ZN11CUartDriver7parsingEPKc>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d004      	beq.n	80003ee <_ZN17CControlLedByUart6updateEv+0x4a>
		m_led->turnOffLed();
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	699b      	ldr	r3, [r3, #24]
 80003e8:	4618      	mov	r0, r3
 80003ea:	f000 faf5 	bl	80009d8 <_ZN4CLed10turnOffLedEv>
}
 80003ee:	bf00      	nop
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <_ZN7CDriverC1Ev>:
CCompleteParser		CDriver::m_completeParser;


const char message[] = "test\r\n";

CDriver::CDriver()
 80003f6:	b480      	push	{r7}
 80003f8:	b083      	sub	sp, #12
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
{
}
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4618      	mov	r0, r3
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <_ZN7CDriverD1Ev>:
CDriver::~CDriver()
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
{
}
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4618      	mov	r0, r3
 8000418:	370c      	adds	r7, #12
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
	...

08000424 <_ZN7CDriver4initEv>:

void CDriver::init()
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af02      	add	r7, sp, #8
 800042a:	6078      	str	r0, [r7, #4]
	m_uartDriver.init();
 800042c:	4816      	ldr	r0, [pc, #88]	; (8000488 <_ZN7CDriver4initEv+0x64>)
 800042e:	f000 fb43 	bl	8000ab8 <_ZN11CUartDriver4initEv>

	LD2.init(LD2_GPIO_Port, LD2_Pin, CLed::LedStates::off);
 8000432:	2301      	movs	r3, #1
 8000434:	2220      	movs	r2, #32
 8000436:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 800043a:	4814      	ldr	r0, [pc, #80]	; (800048c <_ZN7CDriver4initEv+0x68>)
 800043c:	f000 fa4e 	bl	80008dc <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>

	m_redLed.init(Reddiode_GPIO_Port, Reddiode_Pin, CLed::LedStates::off);
 8000440:	2301      	movs	r3, #1
 8000442:	2202      	movs	r2, #2
 8000444:	4912      	ldr	r1, [pc, #72]	; (8000490 <_ZN7CDriver4initEv+0x6c>)
 8000446:	4813      	ldr	r0, [pc, #76]	; (8000494 <_ZN7CDriver4initEv+0x70>)
 8000448:	f000 fa48 	bl	80008dc <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>
	m_blueLed.init(BlueDiode_GPIO_Port, BlueDiode_Pin, CLed::LedStates::off);
 800044c:	2301      	movs	r3, #1
 800044e:	2201      	movs	r2, #1
 8000450:	4911      	ldr	r1, [pc, #68]	; (8000498 <_ZN7CDriver4initEv+0x74>)
 8000452:	4812      	ldr	r0, [pc, #72]	; (800049c <_ZN7CDriver4initEv+0x78>)
 8000454:	f000 fa42 	bl	80008dc <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>
	m_greenLed.init(GreenDiode_GPIO_Port,GreenDiode_Pin,CLed::LedStates::off);
 8000458:	2301      	movs	r3, #1
 800045a:	2210      	movs	r2, #16
 800045c:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8000460:	480f      	ldr	r0, [pc, #60]	; (80004a0 <_ZN7CDriver4initEv+0x7c>)
 8000462:	f000 fa3b 	bl	80008dc <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>

	//m_blueButton.init(B1_GPIO_Port, B1_Pin, 20);
	//m_stateMachineLed.init(&m_greenLed,&m_blueButton,&m_uartDriver);
	m_controlLedByUart.init(&m_uartDriver, &LD2);
 8000466:	4a09      	ldr	r2, [pc, #36]	; (800048c <_ZN7CDriver4initEv+0x68>)
 8000468:	4907      	ldr	r1, [pc, #28]	; (8000488 <_ZN7CDriver4initEv+0x64>)
 800046a:	480e      	ldr	r0, [pc, #56]	; (80004a4 <_ZN7CDriver4initEv+0x80>)
 800046c:	f7ff ff88 	bl	8000380 <_ZN17CControlLedByUart4initEP11CUartDriverP4CLed>
	m_completeParser.init(&m_uartDriver, &m_redLed, &m_blueLed, &m_greenLed);
 8000470:	4b0b      	ldr	r3, [pc, #44]	; (80004a0 <_ZN7CDriver4initEv+0x7c>)
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	4b09      	ldr	r3, [pc, #36]	; (800049c <_ZN7CDriver4initEv+0x78>)
 8000476:	4a07      	ldr	r2, [pc, #28]	; (8000494 <_ZN7CDriver4initEv+0x70>)
 8000478:	4903      	ldr	r1, [pc, #12]	; (8000488 <_ZN7CDriver4initEv+0x64>)
 800047a:	480b      	ldr	r0, [pc, #44]	; (80004a8 <_ZN7CDriver4initEv+0x84>)
 800047c:	f7ff ff14 	bl	80002a8 <_ZN15CCompleteParser4initEP11CUartDriverP4CLedS3_S3_>
}
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}
 8000488:	2000008c 	.word	0x2000008c
 800048c:	2000014c 	.word	0x2000014c
 8000490:	48000800 	.word	0x48000800
 8000494:	20000164 	.word	0x20000164
 8000498:	48000400 	.word	0x48000400
 800049c:	2000017c 	.word	0x2000017c
 80004a0:	20000194 	.word	0x20000194
 80004a4:	200001d8 	.word	0x200001d8
 80004a8:	200001f4 	.word	0x200001f4

080004ac <_ZN7CDriver6updateEv>:


void CDriver::update()
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b082      	sub	sp, #8
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]

	LD2.update();
 80004b4:	4809      	ldr	r0, [pc, #36]	; (80004dc <_ZN7CDriver6updateEv+0x30>)
 80004b6:	f000 fa32 	bl	800091e <_ZN4CLed6updateEv>

	m_redLed.update();
 80004ba:	4809      	ldr	r0, [pc, #36]	; (80004e0 <_ZN7CDriver6updateEv+0x34>)
 80004bc:	f000 fa2f 	bl	800091e <_ZN4CLed6updateEv>
	m_blueLed.update();
 80004c0:	4808      	ldr	r0, [pc, #32]	; (80004e4 <_ZN7CDriver6updateEv+0x38>)
 80004c2:	f000 fa2c 	bl	800091e <_ZN4CLed6updateEv>
	m_greenLed.update();
 80004c6:	4808      	ldr	r0, [pc, #32]	; (80004e8 <_ZN7CDriver6updateEv+0x3c>)
 80004c8:	f000 fa29 	bl	800091e <_ZN4CLed6updateEv>
	//m_blueButton.update();
	//m_stateMachineLed.update();

	m_controlLedByUart.update();
 80004cc:	4807      	ldr	r0, [pc, #28]	; (80004ec <_ZN7CDriver6updateEv+0x40>)
 80004ce:	f7ff ff69 	bl	80003a4 <_ZN17CControlLedByUart6updateEv>



	//m_uartDriver.transmit((uint8_t*)message, strlen(message),500);

}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	2000014c 	.word	0x2000014c
 80004e0:	20000164 	.word	0x20000164
 80004e4:	2000017c 	.word	0x2000017c
 80004e8:	20000194 	.word	0x20000194
 80004ec:	200001d8 	.word	0x200001d8

080004f0 <_Z41__static_initialization_and_destruction_0ii>:
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2b01      	cmp	r3, #1
 80004fe:	d11f      	bne.n	8000540 <_Z41__static_initialization_and_destruction_0ii+0x50>
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000506:	4293      	cmp	r3, r2
 8000508:	d11a      	bne.n	8000540 <_Z41__static_initialization_and_destruction_0ii+0x50>
CUartDriver CDriver::m_uartDriver;
 800050a:	4821      	ldr	r0, [pc, #132]	; (8000590 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800050c:	f000 faa4 	bl	8000a58 <_ZN11CUartDriverC1Ev>
CLed 		CDriver::LD2;
 8000510:	4820      	ldr	r0, [pc, #128]	; (8000594 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8000512:	f000 f9b3 	bl	800087c <_ZN4CLedC1Ev>
CLed 		CDriver::m_redLed;
 8000516:	4820      	ldr	r0, [pc, #128]	; (8000598 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8000518:	f000 f9b0 	bl	800087c <_ZN4CLedC1Ev>
CLed 		CDriver::m_blueLed;
 800051c:	481f      	ldr	r0, [pc, #124]	; (800059c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800051e:	f000 f9ad 	bl	800087c <_ZN4CLedC1Ev>
CLed		CDriver::m_greenLed;
 8000522:	481f      	ldr	r0, [pc, #124]	; (80005a0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8000524:	f000 f9aa 	bl	800087c <_ZN4CLedC1Ev>
CButton 	CDriver::m_blueButton;
 8000528:	481e      	ldr	r0, [pc, #120]	; (80005a4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800052a:	f7ff fe5d 	bl	80001e8 <_ZN7CButtonC1Ev>
CStateMachineLed 	CDriver::m_stateMachineLed;
 800052e:	481e      	ldr	r0, [pc, #120]	; (80005a8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8000530:	f000 fa62 	bl	80009f8 <_ZN16CStateMachineLedC1Ev>
CControlLedByUart 	CDriver::m_controlLedByUart;
 8000534:	481d      	ldr	r0, [pc, #116]	; (80005ac <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000536:	f7ff feef 	bl	8000318 <_ZN17CControlLedByUartC1Ev>
CCompleteParser		CDriver::m_completeParser;
 800053a:	481d      	ldr	r0, [pc, #116]	; (80005b0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 800053c:	f7ff fe84 	bl	8000248 <_ZN15CCompleteParserC1Ev>
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d11f      	bne.n	8000586 <_Z41__static_initialization_and_destruction_0ii+0x96>
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800054c:	4293      	cmp	r3, r2
 800054e:	d11a      	bne.n	8000586 <_Z41__static_initialization_and_destruction_0ii+0x96>
 8000550:	4817      	ldr	r0, [pc, #92]	; (80005b0 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8000552:	f7ff fe89 	bl	8000268 <_ZN15CCompleteParserD1Ev>
CControlLedByUart 	CDriver::m_controlLedByUart;
 8000556:	4815      	ldr	r0, [pc, #84]	; (80005ac <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8000558:	f7ff fef2 	bl	8000340 <_ZN17CControlLedByUartD1Ev>
CStateMachineLed 	CDriver::m_stateMachineLed;
 800055c:	4812      	ldr	r0, [pc, #72]	; (80005a8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800055e:	f000 fa5b 	bl	8000a18 <_ZN16CStateMachineLedD1Ev>
CButton 	CDriver::m_blueButton;
 8000562:	4810      	ldr	r0, [pc, #64]	; (80005a4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8000564:	f7ff fe50 	bl	8000208 <_ZN7CButtonD1Ev>
CLed		CDriver::m_greenLed;
 8000568:	480d      	ldr	r0, [pc, #52]	; (80005a0 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800056a:	f000 f997 	bl	800089c <_ZN4CLedD1Ev>
CLed 		CDriver::m_blueLed;
 800056e:	480b      	ldr	r0, [pc, #44]	; (800059c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8000570:	f000 f994 	bl	800089c <_ZN4CLedD1Ev>
CLed 		CDriver::m_redLed;
 8000574:	4808      	ldr	r0, [pc, #32]	; (8000598 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8000576:	f000 f991 	bl	800089c <_ZN4CLedD1Ev>
CLed 		CDriver::LD2;
 800057a:	4806      	ldr	r0, [pc, #24]	; (8000594 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800057c:	f000 f98e 	bl	800089c <_ZN4CLedD1Ev>
CUartDriver CDriver::m_uartDriver;
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8000582:	f000 fa79 	bl	8000a78 <_ZN11CUartDriverD1Ev>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	2000008c 	.word	0x2000008c
 8000594:	2000014c 	.word	0x2000014c
 8000598:	20000164 	.word	0x20000164
 800059c:	2000017c 	.word	0x2000017c
 80005a0:	20000194 	.word	0x20000194
 80005a4:	200001ac 	.word	0x200001ac
 80005a8:	200001c8 	.word	0x200001c8
 80005ac:	200001d8 	.word	0x200001d8
 80005b0:	200001f4 	.word	0x200001f4

080005b4 <_GLOBAL__sub_I__ZN7CDriver12driverBufferE>:
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005bc:	2001      	movs	r0, #1
 80005be:	f7ff ff97 	bl	80004f0 <_Z41__static_initialization_and_destruction_0ii>
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <_GLOBAL__sub_D__ZN7CDriver12driverBufferE>:
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005cc:	2000      	movs	r0, #0
 80005ce:	f7ff ff8f 	bl	80004f0 <_Z41__static_initialization_and_destruction_0ii>
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <_ZN11CUartDriver7getUartEv>:
	void Flush();
	void isEndLine(uint8_t value);
	void writeToReceivedBuffer();
	bool parsing(const char* command);

	UART_HandleTypeDef* getUart() {return &m_huart2;}
 80005d4:	b480      	push	{r7}
 80005d6:	b083      	sub	sp, #12
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	3334      	adds	r3, #52	; 0x34
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ea:	4770      	bx	lr

080005ec <_ZN7CHelper4initEv>:

//UART_HandleTypeDef CHelper::huart2;


void CHelper::init()
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	SystemClock_Config();
 80005f0:	f000 f8d2 	bl	8000798 <_ZN7CHelper18SystemClock_ConfigEv>
	MX_GPIO_Init();
 80005f4:	f000 f82e 	bl	8000654 <_ZN7CHelper12MX_GPIO_InitEv>
	MX_NVIC_Init();
 80005f8:	f000 f8ba 	bl	8000770 <_ZN7CHelper12MX_NVIC_InitEv>
}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}

08000600 <HAL_UART_TxCpltCallback>:
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	}
//}

extern "C" void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if(huart == CDriver::m_uartDriver.getUart()) //huart->Instance == USART2
 8000608:	4804      	ldr	r0, [pc, #16]	; (800061c <HAL_UART_TxCpltCallback+0x1c>)
 800060a:	f7ff ffe3 	bl	80005d4 <_ZN11CUartDriver7getUartEv>
 800060e:	4602      	mov	r2, r0
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4293      	cmp	r3, r2
	{

	}
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000008c 	.word	0x2000008c

08000620 <HAL_UART_RxCpltCallback>:

extern "C" void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	if(huart == CDriver::m_uartDriver.getUart())
 8000628:	4809      	ldr	r0, [pc, #36]	; (8000650 <HAL_UART_RxCpltCallback+0x30>)
 800062a:	f7ff ffd3 	bl	80005d4 <_ZN11CUartDriver7getUartEv>
 800062e:	4602      	mov	r2, r0
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4293      	cmp	r3, r2
 8000634:	bf0c      	ite	eq
 8000636:	2301      	moveq	r3, #1
 8000638:	2300      	movne	r3, #0
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d002      	beq.n	8000646 <HAL_UART_RxCpltCallback+0x26>
	{
		CDriver::m_uartDriver.irqRxComplete();
 8000640:	4803      	ldr	r0, [pc, #12]	; (8000650 <HAL_UART_RxCpltCallback+0x30>)
 8000642:	f000 fa75 	bl	8000b30 <_ZN11CUartDriver13irqRxCompleteEv>
	}
}
 8000646:	bf00      	nop
 8000648:	3708      	adds	r7, #8
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000008c 	.word	0x2000008c

08000654 <_ZN7CHelper12MX_GPIO_InitEv>:

void CHelper::MX_GPIO_Init()
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b08a      	sub	sp, #40	; 0x28
 8000658:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	4b3f      	ldr	r3, [pc, #252]	; (8000768 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	4a3e      	ldr	r2, [pc, #248]	; (8000768 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000670:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000674:	6153      	str	r3, [r2, #20]
 8000676:	4b3c      	ldr	r3, [pc, #240]	; (8000768 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8000682:	4b39      	ldr	r3, [pc, #228]	; (8000768 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	4a38      	ldr	r2, [pc, #224]	; (8000768 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800068c:	6153      	str	r3, [r2, #20]
 800068e:	4b36      	ldr	r3, [pc, #216]	; (8000768 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 8000690:	695b      	ldr	r3, [r3, #20]
 8000692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b33      	ldr	r3, [pc, #204]	; (8000768 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 800069c:	695b      	ldr	r3, [r3, #20]
 800069e:	4a32      	ldr	r2, [pc, #200]	; (8000768 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a4:	6153      	str	r3, [r2, #20]
 80006a6:	4b30      	ldr	r3, [pc, #192]	; (8000768 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4b2d      	ldr	r3, [pc, #180]	; (8000768 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	4a2c      	ldr	r2, [pc, #176]	; (8000768 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80006b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006bc:	6153      	str	r3, [r2, #20]
 80006be:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <_ZN7CHelper12MX_GPIO_InitEv+0x114>)
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(Reddiode_GPIO_Port, Reddiode_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2102      	movs	r1, #2
 80006ce:	4827      	ldr	r0, [pc, #156]	; (800076c <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80006d0:	f000 ffdc 	bl	800168c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2120      	movs	r1, #32
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006dc:	f000 ffd6 	bl	800168c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80006e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006f0:	f107 0314 	add.w	r3, r7, #20
 80006f4:	4619      	mov	r1, r3
 80006f6:	481d      	ldr	r0, [pc, #116]	; (800076c <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 80006f8:	f000 fe3e 	bl	8001378 <HAL_GPIO_Init>

	/*Configure GPIO pin : Mybutton_Pin */
	GPIO_InitStruct.Pin = Mybutton_Pin;
 80006fc:	2301      	movs	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000700:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000704:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000706:	2301      	movs	r3, #1
 8000708:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(Mybutton_GPIO_Port, &GPIO_InitStruct);
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	4619      	mov	r1, r3
 8000710:	4816      	ldr	r0, [pc, #88]	; (800076c <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 8000712:	f000 fe31 	bl	8001378 <HAL_GPIO_Init>

	/*Configure GPIO pin : Reddiode_Pin */
	GPIO_InitStruct.Pin = Reddiode_Pin;
 8000716:	2302      	movs	r3, #2
 8000718:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(Reddiode_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0314 	add.w	r3, r7, #20
 800072a:	4619      	mov	r1, r3
 800072c:	480f      	ldr	r0, [pc, #60]	; (800076c <_ZN7CHelper12MX_GPIO_InitEv+0x118>)
 800072e:	f000 fe23 	bl	8001378 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000732:	2320      	movs	r3, #32
 8000734:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	4619      	mov	r1, r3
 8000748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074c:	f000 fe14 	bl	8001378 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	2100      	movs	r1, #0
 8000754:	2006      	movs	r0, #6
 8000756:	f000 fd62 	bl	800121e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800075a:	2006      	movs	r0, #6
 800075c:	f000 fd7b 	bl	8001256 <HAL_NVIC_EnableIRQ>
}
 8000760:	bf00      	nop
 8000762:	3728      	adds	r7, #40	; 0x28
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}
 8000768:	40021000 	.word	0x40021000
 800076c:	48000800 	.word	0x48000800

08000770 <_ZN7CHelper12MX_NVIC_InitEv>:

void CHelper::MX_NVIC_Init()
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000774:	2200      	movs	r2, #0
 8000776:	2100      	movs	r1, #0
 8000778:	2028      	movs	r0, #40	; 0x28
 800077a:	f000 fd50 	bl	800121e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800077e:	2028      	movs	r0, #40	; 0x28
 8000780:	f000 fd69 	bl	8001256 <HAL_NVIC_EnableIRQ>

	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000784:	2200      	movs	r2, #0
 8000786:	2100      	movs	r1, #0
 8000788:	2026      	movs	r0, #38	; 0x26
 800078a:	f000 fd48 	bl	800121e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 800078e:	2026      	movs	r0, #38	; 0x26
 8000790:	f000 fd61 	bl	8001256 <HAL_NVIC_EnableIRQ>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}

08000798 <_ZN7CHelper18SystemClock_ConfigEv>:

void CHelper::SystemClock_Config()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b0a6      	sub	sp, #152	; 0x98
 800079c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007a2:	2228      	movs	r2, #40	; 0x28
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f003 fe6a 	bl	8004480 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2258      	movs	r2, #88	; 0x58
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f003 fe5c 	bl	8004480 <memset>

	/** Initializes the RCC Oscillators according to the specified parameters
	* in the RCC_OscInitTypeDef structure.
	*/
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007c8:	2302      	movs	r3, #2
 80007ca:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007cc:	2301      	movs	r3, #1
 80007ce:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007d0:	2310      	movs	r3, #16
 80007d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d6:	2302      	movs	r3, #2
 80007d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007dc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80007e4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80007e8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007f6:	4618      	mov	r0, r3
 80007f8:	f000 ff9e 	bl	8001738 <HAL_RCC_OscConfig>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bf14      	ite	ne
 8000802:	2301      	movne	r3, #1
 8000804:	2300      	moveq	r3, #0
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <_ZN7CHelper18SystemClock_ConfigEv+0x78>
	{
	Error_Handler();
 800080c:	f000 f831 	bl	8000872 <_ZN7CHelper13Error_HandlerEv>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	*/
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	230f      	movs	r3, #15
 8000812:	65fb      	str	r3, [r7, #92]	; 0x5c
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000814:	2302      	movs	r3, #2
 8000816:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000818:	2300      	movs	r3, #0
 800081a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800081c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000820:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000826:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800082a:	2102      	movs	r1, #2
 800082c:	4618      	mov	r0, r3
 800082e:	f001 ffd7 	bl	80027e0 <HAL_RCC_ClockConfig>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	bf14      	ite	ne
 8000838:	2301      	movne	r3, #1
 800083a:	2300      	moveq	r3, #0
 800083c:	b2db      	uxtb	r3, r3
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <_ZN7CHelper18SystemClock_ConfigEv+0xae>
	{
	Error_Handler();
 8000842:	f000 f816 	bl	8000872 <_ZN7CHelper13Error_HandlerEv>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000846:	2302      	movs	r3, #2
 8000848:	607b      	str	r3, [r7, #4]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800084a:	2300      	movs	r3, #0
 800084c:	613b      	str	r3, [r7, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	4618      	mov	r0, r3
 8000852:	f002 f9fb 	bl	8002c4c <HAL_RCCEx_PeriphCLKConfig>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	bf14      	ite	ne
 800085c:	2301      	movne	r3, #1
 800085e:	2300      	moveq	r3, #0
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <_ZN7CHelper18SystemClock_ConfigEv+0xd2>
	{
	Error_Handler();
 8000866:	f000 f804 	bl	8000872 <_ZN7CHelper13Error_HandlerEv>
	}
}
 800086a:	bf00      	nop
 800086c:	3798      	adds	r7, #152	; 0x98
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <_ZN7CHelper13Error_HandlerEv>:

void CHelper::Error_Handler()
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000876:	b672      	cpsid	i
}
 8000878:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800087a:	e7fe      	b.n	800087a <_ZN7CHelper13Error_HandlerEv+0x8>

0800087c <_ZN4CLedC1Ev>:
 *      Author: Konra
 */

#include <CLed.h>

CLed::CLed() {
 800087c:	b480      	push	{r7}
 800087e:	b083      	sub	sp, #12
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	4a04      	ldr	r2, [pc, #16]	; (8000898 <_ZN4CLedC1Ev+0x1c>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4618      	mov	r0, r3
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	080045a4 	.word	0x080045a4

0800089c <_ZN4CLedD1Ev>:

CLed::~CLed() {
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <_ZN4CLedD1Ev+0x1c>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4618      	mov	r0, r3
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr
 80008b8:	080045a4 	.word	0x080045a4

080008bc <_ZN4CLedD0Ev>:
CLed::~CLed() {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
}
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff ffe9 	bl	800089c <_ZN4CLedD1Ev>
 80008ca:	2118      	movs	r1, #24
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f003 fda6 	bl	800441e <_ZdlPvj>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4618      	mov	r0, r3
 80008d6:	3708      	adds	r7, #8
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <_ZN4CLed4initEP12GPIO_TypeDeftNS_9LedStatesE>:

void CLed::init(GPIO_TypeDef* GpioPort, uint16_t GpioPin, LedStates state = off)
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	4611      	mov	r1, r2
 80008e8:	461a      	mov	r2, r3
 80008ea:	460b      	mov	r3, r1
 80008ec:	80fb      	strh	r3, [r7, #6]
 80008ee:	4613      	mov	r3, r2
 80008f0:	717b      	strb	r3, [r7, #5]
	this->GpioPort 	= GpioPort;
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	68ba      	ldr	r2, [r7, #8]
 80008f6:	605a      	str	r2, [r3, #4]
	this->GpioPin 	= GpioPin;
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	88fa      	ldrh	r2, [r7, #6]
 80008fc:	811a      	strh	r2, [r3, #8]
	this->state 	= state;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	797a      	ldrb	r2, [r7, #5]
 8000902:	729a      	strb	r2, [r3, #10]
	m_timerToggle 	= 500;
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800090a:	60da      	str	r2, [r3, #12]
	m_enter 		= false;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	2200      	movs	r2, #0
 8000910:	751a      	strb	r2, [r3, #20]
}
 8000912:	bf00      	nop
 8000914:	3714      	adds	r7, #20
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <_ZN4CLed6updateEv>:
void CLed::update()
{
 800091e:	b580      	push	{r7, lr}
 8000920:	b082      	sub	sp, #8
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
	switch(state)
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7a9b      	ldrb	r3, [r3, #10]
 800092a:	2b02      	cmp	r3, #2
 800092c:	d00e      	beq.n	800094c <_ZN4CLed6updateEv+0x2e>
 800092e:	2b02      	cmp	r3, #2
 8000930:	dc2e      	bgt.n	8000990 <_ZN4CLed6updateEv+0x72>
 8000932:	2b00      	cmp	r3, #0
 8000934:	d002      	beq.n	800093c <_ZN4CLed6updateEv+0x1e>
 8000936:	2b01      	cmp	r3, #1
 8000938:	d004      	beq.n	8000944 <_ZN4CLed6updateEv+0x26>
				m_enter = false;
			}

			break;
	}
}
 800093a:	e029      	b.n	8000990 <_ZN4CLed6updateEv+0x72>
			turnOnLed();
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f000 f83b 	bl	80009b8 <_ZN4CLed9turnOnLedEv>
			break;
 8000942:	e025      	b.n	8000990 <_ZN4CLed6updateEv+0x72>
			turnOffLed();
 8000944:	6878      	ldr	r0, [r7, #4]
 8000946:	f000 f847 	bl	80009d8 <_ZN4CLed10turnOffLedEv>
			break;
 800094a:	e021      	b.n	8000990 <_ZN4CLed6updateEv+0x72>
			if(m_enter == false)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	7d1b      	ldrb	r3, [r3, #20]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d107      	bne.n	8000964 <_ZN4CLed6updateEv+0x46>
				m_lastTick = HAL_GetTick();
 8000954:	f000 fb7c 	bl	8001050 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	611a      	str	r2, [r3, #16]
				m_enter = true;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	2201      	movs	r2, #1
 8000962:	751a      	strb	r2, [r3, #20]
			if((HAL_GetTick() - m_lastTick) > m_timerToggle)
 8000964:	f000 fb74 	bl	8001050 <HAL_GetTick>
 8000968:	4602      	mov	r2, r0
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	691b      	ldr	r3, [r3, #16]
 800096e:	1ad2      	subs	r2, r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	429a      	cmp	r2, r3
 8000976:	bf8c      	ite	hi
 8000978:	2301      	movhi	r3, #1
 800097a:	2300      	movls	r3, #0
 800097c:	b2db      	uxtb	r3, r3
 800097e:	2b00      	cmp	r3, #0
 8000980:	d005      	beq.n	800098e <_ZN4CLed6updateEv+0x70>
				togglePin();
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f000 f808 	bl	8000998 <_ZN4CLed9togglePinEv>
				m_enter = false;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2200      	movs	r2, #0
 800098c:	751a      	strb	r2, [r3, #20]
			break;
 800098e:	bf00      	nop
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_ZN4CLed9togglePinEv>:
void CLed::togglePin()
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GpioPort, GpioPin);
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	891b      	ldrh	r3, [r3, #8]
 80009a8:	4619      	mov	r1, r3
 80009aa:	4610      	mov	r0, r2
 80009ac:	f000 fe86 	bl	80016bc <HAL_GPIO_TogglePin>
}
 80009b0:	bf00      	nop
 80009b2:	3708      	adds	r7, #8
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}

080009b8 <_ZN4CLed9turnOnLedEv>:

void CLed::turnOnLed()
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GpioPort, GpioPin, GPIO_PIN_SET);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6858      	ldr	r0, [r3, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	891b      	ldrh	r3, [r3, #8]
 80009c8:	2201      	movs	r2, #1
 80009ca:	4619      	mov	r1, r3
 80009cc:	f000 fe5e 	bl	800168c <HAL_GPIO_WritePin>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}

080009d8 <_ZN4CLed10turnOffLedEv>:

void CLed::turnOffLed()
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GpioPort, GpioPin, GPIO_PIN_RESET);
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6858      	ldr	r0, [r3, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	891b      	ldrh	r3, [r3, #8]
 80009e8:	2200      	movs	r2, #0
 80009ea:	4619      	mov	r1, r3
 80009ec:	f000 fe4e 	bl	800168c <HAL_GPIO_WritePin>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <_ZN16CStateMachineLedC1Ev>:
#include "string.h"
#include "stdio.h"



CStateMachineLed::CStateMachineLed() {
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	4a04      	ldr	r2, [pc, #16]	; (8000a14 <_ZN16CStateMachineLedC1Ev+0x1c>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4618      	mov	r0, r3
 8000a0a:	370c      	adds	r7, #12
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a12:	4770      	bx	lr
 8000a14:	080045b4 	.word	0x080045b4

08000a18 <_ZN16CStateMachineLedD1Ev>:

CStateMachineLed::~CStateMachineLed() {
 8000a18:	b480      	push	{r7}
 8000a1a:	b083      	sub	sp, #12
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <_ZN16CStateMachineLedD1Ev+0x1c>)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	080045b4 	.word	0x080045b4

08000a38 <_ZN16CStateMachineLedD0Ev>:
CStateMachineLed::~CStateMachineLed() {
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
}
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f7ff ffe9 	bl	8000a18 <_ZN16CStateMachineLedD1Ev>
 8000a46:	2110      	movs	r1, #16
 8000a48:	6878      	ldr	r0, [r7, #4]
 8000a4a:	f003 fce8 	bl	800441e <_ZdlPvj>
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4618      	mov	r0, r3
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <_ZN11CUartDriverC1Ev>:

#include <CUartDriver.h>
#include "string.h"
//UART_HandleTypeDef CUartDriver::m_huart2;

CUartDriver::CUartDriver() {
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <_ZN11CUartDriverC1Ev+0x1c>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub

}
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4618      	mov	r0, r3
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	080045c4 	.word	0x080045c4

08000a78 <_ZN11CUartDriverD1Ev>:

CUartDriver::~CUartDriver() {
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <_ZN11CUartDriverD1Ev+0x1c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	080045c4 	.word	0x080045c4

08000a98 <_ZN11CUartDriverD0Ev>:
CUartDriver::~CUartDriver() {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
}
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ffe9 	bl	8000a78 <_ZN11CUartDriverD1Ev>
 8000aa6:	21c0      	movs	r1, #192	; 0xc0
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f003 fcb8 	bl	800441e <_ZdlPvj>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_ZN11CUartDriver4initEv>:

void CUartDriver::init()
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	m_huart2.Instance = USART2;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	4a1a      	ldr	r2, [pc, #104]	; (8000b2c <_ZN11CUartDriver4initEv+0x74>)
 8000ac4:	635a      	str	r2, [r3, #52]	; 0x34
	m_huart2.Init.BaudRate = 38400;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000acc:	639a      	str	r2, [r3, #56]	; 0x38
	m_huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	63da      	str	r2, [r3, #60]	; 0x3c
	m_huart2.Init.StopBits = UART_STOPBITS_1;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	641a      	str	r2, [r3, #64]	; 0x40
	m_huart2.Init.Parity = UART_PARITY_NONE;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2200      	movs	r2, #0
 8000ade:	645a      	str	r2, [r3, #68]	; 0x44
	m_huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	649a      	str	r2, [r3, #72]	; 0x48
	m_huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	64da      	str	r2, [r3, #76]	; 0x4c
	m_huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2200      	movs	r2, #0
 8000af0:	651a      	str	r2, [r3, #80]	; 0x50
	m_huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2200      	movs	r2, #0
 8000af6:	655a      	str	r2, [r3, #84]	; 0x54
	m_huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2200      	movs	r2, #0
 8000afc:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_UART_Init(&m_huart2) != HAL_OK)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3334      	adds	r3, #52	; 0x34
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 fac0 	bl	8003088 <HAL_UART_Init>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	bf14      	ite	ne
 8000b0e:	2301      	movne	r3, #1
 8000b10:	2300      	moveq	r3, #0
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d002      	beq.n	8000b1e <_ZN11CUartDriver4initEv+0x66>
	{
		Error_Handler();
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f000 f90d 	bl	8000d38 <_ZN11CUartDriver13Error_HandlerEv>
	}

	turnOnReceivingIfOff();
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f000 f82d 	bl	8000b7e <_ZN11CUartDriver20turnOnReceivingIfOffEv>
}
 8000b24:	bf00      	nop
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	40004400 	.word	0x40004400

08000b30 <_ZN11CUartDriver13irqRxCompleteEv>:

void CUartDriver::irqRxComplete()
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	if(writeToBuffer(m_dataReceive) == BS_OK)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8000b3e:	4619      	mov	r1, r3
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f000 f89d 	bl	8000c80 <_ZN11CUartDriver13writeToBufferEh>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf0c      	ite	eq
 8000b4c:	2301      	moveq	r3, #1
 8000b4e:	2300      	movne	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d006      	beq.n	8000b64 <_ZN11CUartDriver13irqRxCompleteEv+0x34>
	{
		isEndLine(m_dataReceive);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	6878      	ldr	r0, [r7, #4]
 8000b60:	f000 f82d 	bl	8000bbe <_ZN11CUartDriver9isEndLineEh>
	}
	HAL_UART_Receive_IT(&m_huart2, &m_dataReceive, sizeof(m_dataReceive));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	33bc      	adds	r3, #188	; 0xbc
 8000b6e:	2201      	movs	r2, #1
 8000b70:	4619      	mov	r1, r3
 8000b72:	f002 fad7 	bl	8003124 <HAL_UART_Receive_IT>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <_ZN11CUartDriver20turnOnReceivingIfOffEv>:

void CUartDriver::turnOnReceivingIfOff()
{
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
    if (m_huart2.gState == HAL_UART_STATE_READY || m_huart2.gState == HAL_UART_STATE_BUSY_TX)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000b8c:	2b20      	cmp	r3, #32
 8000b8e:	d004      	beq.n	8000b9a <_ZN11CUartDriver20turnOnReceivingIfOffEv+0x1c>
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8000b96:	2b21      	cmp	r3, #33	; 0x21
 8000b98:	d101      	bne.n	8000b9e <_ZN11CUartDriver20turnOnReceivingIfOffEv+0x20>
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e000      	b.n	8000ba0 <_ZN11CUartDriver20turnOnReceivingIfOffEv+0x22>
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d008      	beq.n	8000bb6 <_ZN11CUartDriver20turnOnReceivingIfOffEv+0x38>
    {
        HAL_UART_Receive_IT(&m_huart2, &m_dataReceive, sizeof(m_dataReceive));
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	33bc      	adds	r3, #188	; 0xbc
 8000bae:	2201      	movs	r2, #1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f002 fab7 	bl	8003124 <HAL_UART_Receive_IT>
    }
}
 8000bb6:	bf00      	nop
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}

08000bbe <_ZN11CUartDriver9isEndLineEh>:

void CUartDriver::isEndLine(uint8_t value)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	b082      	sub	sp, #8
 8000bc2:	af00      	add	r7, sp, #0
 8000bc4:	6078      	str	r0, [r7, #4]
 8000bc6:	460b      	mov	r3, r1
 8000bc8:	70fb      	strb	r3, [r7, #3]
	if(value == '\n')
 8000bca:	78fb      	ldrb	r3, [r7, #3]
 8000bcc:	2b0a      	cmp	r3, #10
 8000bce:	d10a      	bne.n	8000be6 <_ZN11CUartDriver9isEndLineEh+0x28>
	{
		m_receivedLines++;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	b2da      	uxtb	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
		writeToReceivedBuffer();
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f000 f804 	bl	8000bee <_ZN11CUartDriver21writeToReceivedBufferEv>
	}
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <_ZN11CUartDriver21writeToReceivedBufferEv>:

void CUartDriver::writeToReceivedBuffer()
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b084      	sub	sp, #16
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	uint8_t index = 0;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	73fb      	strb	r3, [r7, #15]
	do
	{
		readFromBuffer(&m_tmpReceivedData);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	33be      	adds	r3, #190	; 0xbe
 8000bfe:	4619      	mov	r1, r3
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f000 f86b 	bl	8000cdc <_ZN11CUartDriver14readFromBufferEPh>
		if(m_tmpReceivedData == '\n')
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8000c0c:	2b0a      	cmp	r3, #10
 8000c0e:	d105      	bne.n	8000c1c <_ZN11CUartDriver21writeToReceivedBufferEv+0x2e>
		{
			m_receivedBuffer[index] = 0;
 8000c10:	7bfb      	ldrb	r3, [r7, #15]
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	2200      	movs	r2, #0
 8000c18:	751a      	strb	r2, [r3, #20]
 8000c1a:	e007      	b.n	8000c2c <_ZN11CUartDriver21writeToReceivedBufferEv+0x3e>
		}
		else
		{
			m_receivedBuffer[index] = m_tmpReceivedData;
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	687a      	ldr	r2, [r7, #4]
 8000c20:	f892 10be 	ldrb.w	r1, [r2, #190]	; 0xbe
 8000c24:	687a      	ldr	r2, [r7, #4]
 8000c26:	4413      	add	r3, r2
 8000c28:	460a      	mov	r2, r1
 8000c2a:	751a      	strb	r2, [r3, #20]
		}
		index++;
 8000c2c:	7bfb      	ldrb	r3, [r7, #15]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	73fb      	strb	r3, [r7, #15]
	}while(m_tmpReceivedData != '\n');
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8000c38:	2b0a      	cmp	r3, #10
 8000c3a:	d000      	beq.n	8000c3e <_ZN11CUartDriver21writeToReceivedBufferEv+0x50>
	do
 8000c3c:	e7dd      	b.n	8000bfa <_ZN11CUartDriver21writeToReceivedBufferEv+0xc>

	m_receivedLines--;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8000c44:	3b01      	subs	r3, #1
 8000c46:	b2da      	uxtb	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd

}
 8000c4e:	bf00      	nop
 8000c50:	3710      	adds	r7, #16
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <_ZN11CUartDriver7parsingEPKc>:

bool CUartDriver::parsing(const char* command)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	6078      	str	r0, [r7, #4]
 8000c5e:	6039      	str	r1, [r7, #0]
	if(strcmp(command, (char*)m_receivedBuffer) == 0)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	3314      	adds	r3, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	6838      	ldr	r0, [r7, #0]
 8000c68:	f7ff fab4 	bl	80001d4 <strcmp>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d101      	bne.n	8000c76 <_ZN11CUartDriver7parsingEPKc+0x20>
	{
		return true;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e000      	b.n	8000c78 <_ZN11CUartDriver7parsingEPKc+0x22>
	}

	return false;
 8000c76:	2300      	movs	r3, #0
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <_ZN11CUartDriver13writeToBufferEh>:
{
	HAL_UART_Receive_IT(&m_huart2, pData, Size);
}

CUartDriver::BufferState CUartDriver::writeToBuffer(uint8_t value)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	70fb      	strb	r3, [r7, #3]

	uint8_t tempHead = (m_head + 1) % BUFFER_SIZE;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8000c92:	3301      	adds	r3, #1
 8000c94:	425a      	negs	r2, r3
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	f002 020f 	and.w	r2, r2, #15
 8000c9e:	bf58      	it	pl
 8000ca0:	4253      	negpl	r3, r2
 8000ca2:	73fb      	strb	r3, [r7, #15]

	if(tempHead == m_tail)
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	f8b2 20b8 	ldrh.w	r2, [r2, #184]	; 0xb8
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d101      	bne.n	8000cb4 <_ZN11CUartDriver13writeToBufferEh+0x34>
	{
		return BufferState::BS_ERROR;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	e00d      	b.n	8000cd0 <_ZN11CUartDriver13writeToBufferEh+0x50>
	}

	m_buffer[m_head] = value;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	; 0xba
 8000cba:	461a      	mov	r2, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	78fa      	ldrb	r2, [r7, #3]
 8000cc2:	711a      	strb	r2, [r3, #4]
	m_head = tempHead;
 8000cc4:	7bfb      	ldrb	r3, [r7, #15]
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba

	return BufferState::BS_OK;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_ZN11CUartDriver14readFromBufferEPh>:

CUartDriver::BufferState CUartDriver::readFromBuffer(uint8_t* value)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
	if(m_head == m_tail)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f8b3 20ba 	ldrh.w	r2, [r3, #186]	; 0xba
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d101      	bne.n	8000cfa <_ZN11CUartDriver14readFromBufferEPh+0x1e>
	{
		return BufferState::BS_ERROR;
 8000cf6:	2301      	movs	r3, #1
 8000cf8:	e018      	b.n	8000d2c <_ZN11CUartDriver14readFromBufferEPh+0x50>
	}

	*value = m_buffer[m_tail];
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8000d00:	461a      	mov	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4413      	add	r3, r2
 8000d06:	791a      	ldrb	r2, [r3, #4]
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	701a      	strb	r2, [r3, #0]
	m_tail = (m_tail + 1) % BUFFER_SIZE;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	; 0xb8
 8000d12:	3301      	adds	r3, #1
 8000d14:	425a      	negs	r2, r3
 8000d16:	f003 030f 	and.w	r3, r3, #15
 8000d1a:	f002 020f 	and.w	r2, r2, #15
 8000d1e:	bf58      	it	pl
 8000d20:	4253      	negpl	r3, r2
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
	return BufferState::BS_OK;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_ZN11CUartDriver13Error_HandlerEv>:
	m_head = 0;
	m_tail = 0;
}

void CUartDriver::Error_Handler()
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	while(1)
 8000d40:	e7fe      	b.n	8000d40 <_ZN11CUartDriver13Error_HandlerEv+0x8>
	...

08000d44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d48:	f000 f928 	bl	8000f9c <HAL_Init>

  /* USER CODE BEGIN Init */
  CHelper::init();
 8000d4c:	f7ff fc4e 	bl	80005ec <_ZN7CHelper4initEv>
  m_driver.init();
 8000d50:	4803      	ldr	r0, [pc, #12]	; (8000d60 <main+0x1c>)
 8000d52:	f7ff fb67 	bl	8000424 <_ZN7CDriver4initEv>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  m_driver.update();
 8000d56:	4802      	ldr	r0, [pc, #8]	; (8000d60 <main+0x1c>)
 8000d58:	f7ff fba8 	bl	80004ac <_ZN7CDriver6updateEv>
 8000d5c:	e7fb      	b.n	8000d56 <main+0x12>
 8000d5e:	bf00      	nop
 8000d60:	20000228 	.word	0x20000228

08000d64 <_Z41__static_initialization_and_destruction_0ii>:
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d107      	bne.n	8000d84 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d102      	bne.n	8000d84 <_Z41__static_initialization_and_destruction_0ii+0x20>
CDriver m_driver;
 8000d7e:	4809      	ldr	r0, [pc, #36]	; (8000da4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000d80:	f7ff fb39 	bl	80003f6 <_ZN7CDriverC1Ev>
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d107      	bne.n	8000d9a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d102      	bne.n	8000d9a <_Z41__static_initialization_and_destruction_0ii+0x36>
 8000d94:	4803      	ldr	r0, [pc, #12]	; (8000da4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8000d96:	f7ff fb39 	bl	800040c <_ZN7CDriverD1Ev>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000228 	.word	0x20000228

08000da8 <_GLOBAL__sub_I_m_driver>:
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000db0:	2001      	movs	r0, #1
 8000db2:	f7ff ffd7 	bl	8000d64 <_Z41__static_initialization_and_destruction_0ii>
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_GLOBAL__sub_D_m_driver>:
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff ffcf 	bl	8000d64 <_Z41__static_initialization_and_destruction_0ii>
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_MspInit+0x44>)
 8000dd0:	699b      	ldr	r3, [r3, #24]
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <HAL_MspInit+0x44>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6193      	str	r3, [r2, #24]
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_MspInit+0x44>)
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_MspInit+0x44>)
 8000de8:	69db      	ldr	r3, [r3, #28]
 8000dea:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <HAL_MspInit+0x44>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	61d3      	str	r3, [r2, #28]
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_MspInit+0x44>)
 8000df4:	69db      	ldr	r3, [r3, #28]
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000dfe:	2007      	movs	r0, #7
 8000e00:	f000 fa02 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40021000 	.word	0x40021000

08000e10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a17      	ldr	r2, [pc, #92]	; (8000e8c <HAL_UART_MspInit+0x7c>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d128      	bne.n	8000e84 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_UART_MspInit+0x80>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	4a16      	ldr	r2, [pc, #88]	; (8000e90 <HAL_UART_MspInit+0x80>)
 8000e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e3c:	61d3      	str	r3, [r2, #28]
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <HAL_UART_MspInit+0x80>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <HAL_UART_MspInit+0x80>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <HAL_UART_MspInit+0x80>)
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	6153      	str	r3, [r2, #20]
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <HAL_UART_MspInit+0x80>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	60fb      	str	r3, [r7, #12]
 8000e60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e62:	230c      	movs	r3, #12
 8000e64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e66:	2302      	movs	r3, #2
 8000e68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e72:	2307      	movs	r3, #7
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e80:	f000 fa7a 	bl	8001378 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	; 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40004400 	.word	0x40004400
 8000e90:	40021000 	.word	0x40021000

08000e94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <NMI_Handler+0x4>

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee0:	f000 f8a2 	bl	8001028 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000eec:	2001      	movs	r0, #1
 8000eee:	f000 fbff 	bl	80016f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
	...

08000ef8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(CDriver::m_uartDriver.getUart());
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <USART2_IRQHandler+0x18>)
 8000efe:	f7ff fb69 	bl	80005d4 <_ZN11CUartDriver7getUartEv>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 f95b 	bl	80031c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000008c 	.word	0x2000008c

08000f14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000f18:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f1c:	f000 fbe8 	bl	80016f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <SystemInit+0x20>)
 8000f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <SystemInit+0x20>)
 8000f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f80 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480d      	ldr	r0, [pc, #52]	; (8000f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4e:	490e      	ldr	r1, [pc, #56]	; (8000f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f50:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <LoopForever+0xe>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0b      	ldr	r2, [pc, #44]	; (8000f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f64:	4c0b      	ldr	r4, [pc, #44]	; (8000f94 <LoopForever+0x16>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f72:	f7ff ffd7 	bl	8000f24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f76:	f003 fa57 	bl	8004428 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f7a:	f7ff fee3 	bl	8000d44 <main>

08000f7e <LoopForever>:

LoopForever:
    b LoopForever
 8000f7e:	e7fe      	b.n	8000f7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f8c:	0800461c 	.word	0x0800461c
  ldr r2, =_sbss
 8000f90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f94:	20000238 	.word	0x20000238

08000f98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f98:	e7fe      	b.n	8000f98 <ADC1_2_IRQHandler>
	...

08000f9c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa0:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <HAL_Init+0x28>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a07      	ldr	r2, [pc, #28]	; (8000fc4 <HAL_Init+0x28>)
 8000fa6:	f043 0310 	orr.w	r3, r3, #16
 8000faa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fac:	2003      	movs	r0, #3
 8000fae:	f000 f92b 	bl	8001208 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 f808 	bl	8000fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb8:	f7ff ff06 	bl	8000dc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	40022000 	.word	0x40022000

08000fc8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_InitTick+0x54>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x58>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 f943 	bl	8001272 <HAL_SYSTICK_Config>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e00e      	b.n	8001014 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	2b0f      	cmp	r3, #15
 8000ffa:	d80a      	bhi.n	8001012 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	f04f 30ff 	mov.w	r0, #4294967295
 8001004:	f000 f90b 	bl	800121e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001008:	4a06      	ldr	r2, [pc, #24]	; (8001024 <HAL_InitTick+0x5c>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	e000      	b.n	8001014 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	20000000 	.word	0x20000000
 8001020:	20000008 	.word	0x20000008
 8001024:	20000004 	.word	0x20000004

08001028 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800102c:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_IncTick+0x20>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x24>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4413      	add	r3, r2
 8001038:	4a04      	ldr	r2, [pc, #16]	; (800104c <HAL_IncTick+0x24>)
 800103a:	6013      	str	r3, [r2, #0]
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000008 	.word	0x20000008
 800104c:	2000022c 	.word	0x2000022c

08001050 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  return uwTick;  
 8001054:	4b03      	ldr	r3, [pc, #12]	; (8001064 <HAL_GetTick+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
}
 8001058:	4618      	mov	r0, r3
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	2000022c 	.word	0x2000022c

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	db0b      	blt.n	80010f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	f003 021f 	and.w	r2, r3, #31
 80010e4:	4907      	ldr	r1, [pc, #28]	; (8001104 <__NVIC_EnableIRQ+0x38>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	095b      	lsrs	r3, r3, #5
 80010ec:	2001      	movs	r0, #1
 80010ee:	fa00 f202 	lsl.w	r2, r0, r2
 80010f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010f6:	bf00      	nop
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3b01      	subs	r3, #1
 80011d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d4:	d301      	bcc.n	80011da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d6:	2301      	movs	r3, #1
 80011d8:	e00f      	b.n	80011fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011da:	4a0a      	ldr	r2, [pc, #40]	; (8001204 <SysTick_Config+0x40>)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3b01      	subs	r3, #1
 80011e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e2:	210f      	movs	r1, #15
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	f7ff ff8e 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ec:	4b05      	ldr	r3, [pc, #20]	; (8001204 <SysTick_Config+0x40>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f2:	4b04      	ldr	r3, [pc, #16]	; (8001204 <SysTick_Config+0x40>)
 80011f4:	2207      	movs	r2, #7
 80011f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	e000e010 	.word	0xe000e010

08001208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff29 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	4603      	mov	r3, r0
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
 800122a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001230:	f7ff ff3e 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 8001234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	68b9      	ldr	r1, [r7, #8]
 800123a:	6978      	ldr	r0, [r7, #20]
 800123c:	f7ff ff8e 	bl	800115c <NVIC_EncodePriority>
 8001240:	4602      	mov	r2, r0
 8001242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001246:	4611      	mov	r1, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff5d 	bl	8001108 <__NVIC_SetPriority>
}
 800124e:	bf00      	nop
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
 800125c:	4603      	mov	r3, r0
 800125e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff31 	bl	80010cc <__NVIC_EnableIRQ>
}
 800126a:	bf00      	nop
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffa2 	bl	80011c4 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001298:	2b02      	cmp	r3, #2
 800129a:	d008      	beq.n	80012ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2204      	movs	r2, #4
 80012a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e020      	b.n	80012f0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 020e 	bic.w	r2, r2, #14
 80012bc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0201 	bic.w	r2, r2, #1
 80012cc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012d6:	2101      	movs	r1, #1
 80012d8:	fa01 f202 	lsl.w	r2, r1, r2
 80012dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2200      	movs	r2, #0
 80012ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001304:	2300      	movs	r3, #0
 8001306:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800130e:	2b02      	cmp	r3, #2
 8001310:	d005      	beq.n	800131e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2204      	movs	r2, #4
 8001316:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	73fb      	strb	r3, [r7, #15]
 800131c:	e027      	b.n	800136e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 020e 	bic.w	r2, r2, #14
 800132c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0201 	bic.w	r2, r2, #1
 800133c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001346:	2101      	movs	r1, #1
 8001348:	fa01 f202 	lsl.w	r2, r1, r2
 800134c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2201      	movs	r2, #1
 8001352:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2200      	movs	r2, #0
 800135a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001362:	2b00      	cmp	r3, #0
 8001364:	d003      	beq.n	800136e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	4798      	blx	r3
    } 
  }
  return status;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001378:	b480      	push	{r7}
 800137a:	b087      	sub	sp, #28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001382:	2300      	movs	r3, #0
 8001384:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001386:	e160      	b.n	800164a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	2101      	movs	r1, #1
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	4013      	ands	r3, r2
 8001396:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	f000 8152 	beq.w	8001644 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f003 0303 	and.w	r3, r3, #3
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d005      	beq.n	80013b8 <HAL_GPIO_Init+0x40>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d130      	bne.n	800141a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	68da      	ldr	r2, [r3, #12]
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ee:	2201      	movs	r2, #1
 80013f0:	697b      	ldr	r3, [r7, #20]
 80013f2:	fa02 f303 	lsl.w	r3, r2, r3
 80013f6:	43db      	mvns	r3, r3
 80013f8:	693a      	ldr	r2, [r7, #16]
 80013fa:	4013      	ands	r3, r2
 80013fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	091b      	lsrs	r3, r3, #4
 8001404:	f003 0201 	and.w	r2, r3, #1
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f003 0303 	and.w	r3, r3, #3
 8001422:	2b03      	cmp	r3, #3
 8001424:	d017      	beq.n	8001456 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	2203      	movs	r2, #3
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4013      	ands	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	689a      	ldr	r2, [r3, #8]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	2b02      	cmp	r3, #2
 8001460:	d123      	bne.n	80014aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	08da      	lsrs	r2, r3, #3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3208      	adds	r2, #8
 800146a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800146e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	691a      	ldr	r2, [r3, #16]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f003 0307 	and.w	r3, r3, #7
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	08da      	lsrs	r2, r3, #3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3208      	adds	r2, #8
 80014a4:	6939      	ldr	r1, [r7, #16]
 80014a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80014b0:	697b      	ldr	r3, [r7, #20]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	2203      	movs	r2, #3
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 0203 	and.w	r2, r3, #3
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 80ac 	beq.w	8001644 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ec:	4b5e      	ldr	r3, [pc, #376]	; (8001668 <HAL_GPIO_Init+0x2f0>)
 80014ee:	699b      	ldr	r3, [r3, #24]
 80014f0:	4a5d      	ldr	r2, [pc, #372]	; (8001668 <HAL_GPIO_Init+0x2f0>)
 80014f2:	f043 0301 	orr.w	r3, r3, #1
 80014f6:	6193      	str	r3, [r2, #24]
 80014f8:	4b5b      	ldr	r3, [pc, #364]	; (8001668 <HAL_GPIO_Init+0x2f0>)
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001504:	4a59      	ldr	r2, [pc, #356]	; (800166c <HAL_GPIO_Init+0x2f4>)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	3302      	adds	r3, #2
 800150c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001510:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	220f      	movs	r2, #15
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4013      	ands	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800152e:	d025      	beq.n	800157c <HAL_GPIO_Init+0x204>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a4f      	ldr	r2, [pc, #316]	; (8001670 <HAL_GPIO_Init+0x2f8>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d01f      	beq.n	8001578 <HAL_GPIO_Init+0x200>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a4e      	ldr	r2, [pc, #312]	; (8001674 <HAL_GPIO_Init+0x2fc>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d019      	beq.n	8001574 <HAL_GPIO_Init+0x1fc>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a4d      	ldr	r2, [pc, #308]	; (8001678 <HAL_GPIO_Init+0x300>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d013      	beq.n	8001570 <HAL_GPIO_Init+0x1f8>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a4c      	ldr	r2, [pc, #304]	; (800167c <HAL_GPIO_Init+0x304>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d00d      	beq.n	800156c <HAL_GPIO_Init+0x1f4>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a4b      	ldr	r2, [pc, #300]	; (8001680 <HAL_GPIO_Init+0x308>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d007      	beq.n	8001568 <HAL_GPIO_Init+0x1f0>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	4a4a      	ldr	r2, [pc, #296]	; (8001684 <HAL_GPIO_Init+0x30c>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d101      	bne.n	8001564 <HAL_GPIO_Init+0x1ec>
 8001560:	2306      	movs	r3, #6
 8001562:	e00c      	b.n	800157e <HAL_GPIO_Init+0x206>
 8001564:	2307      	movs	r3, #7
 8001566:	e00a      	b.n	800157e <HAL_GPIO_Init+0x206>
 8001568:	2305      	movs	r3, #5
 800156a:	e008      	b.n	800157e <HAL_GPIO_Init+0x206>
 800156c:	2304      	movs	r3, #4
 800156e:	e006      	b.n	800157e <HAL_GPIO_Init+0x206>
 8001570:	2303      	movs	r3, #3
 8001572:	e004      	b.n	800157e <HAL_GPIO_Init+0x206>
 8001574:	2302      	movs	r3, #2
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0x206>
 8001578:	2301      	movs	r3, #1
 800157a:	e000      	b.n	800157e <HAL_GPIO_Init+0x206>
 800157c:	2300      	movs	r3, #0
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	f002 0203 	and.w	r2, r2, #3
 8001584:	0092      	lsls	r2, r2, #2
 8001586:	4093      	lsls	r3, r2
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	4313      	orrs	r3, r2
 800158c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800158e:	4937      	ldr	r1, [pc, #220]	; (800166c <HAL_GPIO_Init+0x2f4>)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	089b      	lsrs	r3, r3, #2
 8001594:	3302      	adds	r3, #2
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800159c:	4b3a      	ldr	r3, [pc, #232]	; (8001688 <HAL_GPIO_Init+0x310>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d003      	beq.n	80015c0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	4313      	orrs	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80015c0:	4a31      	ldr	r2, [pc, #196]	; (8001688 <HAL_GPIO_Init+0x310>)
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015c6:	4b30      	ldr	r3, [pc, #192]	; (8001688 <HAL_GPIO_Init+0x310>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43db      	mvns	r3, r3
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4013      	ands	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d003      	beq.n	80015ea <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80015ea:	4a27      	ldr	r2, [pc, #156]	; (8001688 <HAL_GPIO_Init+0x310>)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015f0:	4b25      	ldr	r3, [pc, #148]	; (8001688 <HAL_GPIO_Init+0x310>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	43db      	mvns	r3, r3
 80015fa:	693a      	ldr	r2, [r7, #16]
 80015fc:	4013      	ands	r3, r2
 80015fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d003      	beq.n	8001614 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800160c:	693a      	ldr	r2, [r7, #16]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001614:	4a1c      	ldr	r2, [pc, #112]	; (8001688 <HAL_GPIO_Init+0x310>)
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800161a:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <HAL_GPIO_Init+0x310>)
 800161c:	68db      	ldr	r3, [r3, #12]
 800161e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	43db      	mvns	r3, r3
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d003      	beq.n	800163e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4313      	orrs	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800163e:	4a12      	ldr	r2, [pc, #72]	; (8001688 <HAL_GPIO_Init+0x310>)
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa22 f303 	lsr.w	r3, r2, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	f47f ae97 	bne.w	8001388 <HAL_GPIO_Init+0x10>
  }
}
 800165a:	bf00      	nop
 800165c:	bf00      	nop
 800165e:	371c      	adds	r7, #28
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	40021000 	.word	0x40021000
 800166c:	40010000 	.word	0x40010000
 8001670:	48000400 	.word	0x48000400
 8001674:	48000800 	.word	0x48000800
 8001678:	48000c00 	.word	0x48000c00
 800167c:	48001000 	.word	0x48001000
 8001680:	48001400 	.word	0x48001400
 8001684:	48001800 	.word	0x48001800
 8001688:	40010400 	.word	0x40010400

0800168c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]
 8001698:	4613      	mov	r3, r2
 800169a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800169c:	787b      	ldrb	r3, [r7, #1]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a8:	e002      	b.n	80016b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016bc:	b480      	push	{r7}
 80016be:	b085      	sub	sp, #20
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	460b      	mov	r3, r1
 80016c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	695b      	ldr	r3, [r3, #20]
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016ce:	887a      	ldrh	r2, [r7, #2]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	4013      	ands	r3, r2
 80016d4:	041a      	lsls	r2, r3, #16
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	43d9      	mvns	r1, r3
 80016da:	887b      	ldrh	r3, [r7, #2]
 80016dc:	400b      	ands	r3, r1
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	619a      	str	r2, [r3, #24]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	4013      	ands	r3, r2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d006      	beq.n	8001714 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001706:	4a05      	ldr	r2, [pc, #20]	; (800171c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001708:	88fb      	ldrh	r3, [r7, #6]
 800170a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f806 	bl	8001720 <HAL_GPIO_EXTI_Callback>
  }
}
 8001714:	bf00      	nop
 8001716:	3708      	adds	r7, #8
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40010400 	.word	0x40010400

08001720 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800173e:	af00      	add	r7, sp, #0
 8001740:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001744:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001748:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800174a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800174e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d102      	bne.n	800175e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	f001 b83a 	b.w	80027d2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001762:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0301 	and.w	r3, r3, #1
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 816f 	beq.w	8001a52 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001774:	4bb5      	ldr	r3, [pc, #724]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b04      	cmp	r3, #4
 800177e:	d00c      	beq.n	800179a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001780:	4bb2      	ldr	r3, [pc, #712]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 030c 	and.w	r3, r3, #12
 8001788:	2b08      	cmp	r3, #8
 800178a:	d15c      	bne.n	8001846 <HAL_RCC_OscConfig+0x10e>
 800178c:	4baf      	ldr	r3, [pc, #700]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001798:	d155      	bne.n	8001846 <HAL_RCC_OscConfig+0x10e>
 800179a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800179e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80017a6:	fa93 f3a3 	rbit	r3, r3
 80017aa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80017ae:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b2:	fab3 f383 	clz	r3, r3
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	095b      	lsrs	r3, r3, #5
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	f043 0301 	orr.w	r3, r3, #1
 80017c0:	b2db      	uxtb	r3, r3
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d102      	bne.n	80017cc <HAL_RCC_OscConfig+0x94>
 80017c6:	4ba1      	ldr	r3, [pc, #644]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	e015      	b.n	80017f8 <HAL_RCC_OscConfig+0xc0>
 80017cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017d0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80017d8:	fa93 f3a3 	rbit	r3, r3
 80017dc:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80017e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017e4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80017e8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80017ec:	fa93 f3a3 	rbit	r3, r3
 80017f0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80017f4:	4b95      	ldr	r3, [pc, #596]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80017fc:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001800:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001804:	fa92 f2a2 	rbit	r2, r2
 8001808:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 800180c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001810:	fab2 f282 	clz	r2, r2
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	f042 0220 	orr.w	r2, r2, #32
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	f002 021f 	and.w	r2, r2, #31
 8001820:	2101      	movs	r1, #1
 8001822:	fa01 f202 	lsl.w	r2, r1, r2
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 8111 	beq.w	8001a50 <HAL_RCC_OscConfig+0x318>
 800182e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001832:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	2b00      	cmp	r3, #0
 800183c:	f040 8108 	bne.w	8001a50 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	f000 bfc6 	b.w	80027d2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001846:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800184a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x12e>
 8001858:	4b7c      	ldr	r3, [pc, #496]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a7b      	ldr	r2, [pc, #492]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 800185e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e036      	b.n	80018d4 <HAL_RCC_OscConfig+0x19c>
 8001866:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800186a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10c      	bne.n	8001890 <HAL_RCC_OscConfig+0x158>
 8001876:	4b75      	ldr	r3, [pc, #468]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a74      	ldr	r2, [pc, #464]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 800187c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b72      	ldr	r3, [pc, #456]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a71      	ldr	r2, [pc, #452]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 8001888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188c:	6013      	str	r3, [r2, #0]
 800188e:	e021      	b.n	80018d4 <HAL_RCC_OscConfig+0x19c>
 8001890:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001894:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x184>
 80018a2:	4b6a      	ldr	r3, [pc, #424]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a69      	ldr	r2, [pc, #420]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 80018a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ac:	6013      	str	r3, [r2, #0]
 80018ae:	4b67      	ldr	r3, [pc, #412]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a66      	ldr	r2, [pc, #408]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 80018b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b8:	6013      	str	r3, [r2, #0]
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0x19c>
 80018bc:	4b63      	ldr	r3, [pc, #396]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a62      	ldr	r2, [pc, #392]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 80018c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b60      	ldr	r3, [pc, #384]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a5f      	ldr	r2, [pc, #380]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 80018ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d059      	beq.n	8001998 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e4:	f7ff fbb4 	bl	8001050 <HAL_GetTick>
 80018e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ec:	e00a      	b.n	8001904 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018ee:	f7ff fbaf 	bl	8001050 <HAL_GetTick>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b64      	cmp	r3, #100	; 0x64
 80018fc:	d902      	bls.n	8001904 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	f000 bf67 	b.w	80027d2 <HAL_RCC_OscConfig+0x109a>
 8001904:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001908:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001910:	fa93 f3a3 	rbit	r3, r3
 8001914:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8001918:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191c:	fab3 f383 	clz	r3, r3
 8001920:	b2db      	uxtb	r3, r3
 8001922:	095b      	lsrs	r3, r3, #5
 8001924:	b2db      	uxtb	r3, r3
 8001926:	f043 0301 	orr.w	r3, r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b01      	cmp	r3, #1
 800192e:	d102      	bne.n	8001936 <HAL_RCC_OscConfig+0x1fe>
 8001930:	4b46      	ldr	r3, [pc, #280]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	e015      	b.n	8001962 <HAL_RCC_OscConfig+0x22a>
 8001936:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800193a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800193e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001942:	fa93 f3a3 	rbit	r3, r3
 8001946:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800194a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800194e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001952:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001956:	fa93 f3a3 	rbit	r3, r3
 800195a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800195e:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001966:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800196a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800196e:	fa92 f2a2 	rbit	r2, r2
 8001972:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8001976:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800197a:	fab2 f282 	clz	r2, r2
 800197e:	b2d2      	uxtb	r2, r2
 8001980:	f042 0220 	orr.w	r2, r2, #32
 8001984:	b2d2      	uxtb	r2, r2
 8001986:	f002 021f 	and.w	r2, r2, #31
 800198a:	2101      	movs	r1, #1
 800198c:	fa01 f202 	lsl.w	r2, r1, r2
 8001990:	4013      	ands	r3, r2
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0ab      	beq.n	80018ee <HAL_RCC_OscConfig+0x1b6>
 8001996:	e05c      	b.n	8001a52 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001998:	f7ff fb5a 	bl	8001050 <HAL_GetTick>
 800199c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a0:	e00a      	b.n	80019b8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a2:	f7ff fb55 	bl	8001050 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d902      	bls.n	80019b8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	f000 bf0d 	b.w	80027d2 <HAL_RCC_OscConfig+0x109a>
 80019b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019bc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80019c4:	fa93 f3a3 	rbit	r3, r3
 80019c8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80019cc:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019d0:	fab3 f383 	clz	r3, r3
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d102      	bne.n	80019ea <HAL_RCC_OscConfig+0x2b2>
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	e015      	b.n	8001a16 <HAL_RCC_OscConfig+0x2de>
 80019ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80019ee:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80019f6:	fa93 f3a3 	rbit	r3, r3
 80019fa:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80019fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001a02:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001a06:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <HAL_RCC_OscConfig+0x314>)
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a1a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001a1e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001a22:	fa92 f2a2 	rbit	r2, r2
 8001a26:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8001a2a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001a2e:	fab2 f282 	clz	r2, r2
 8001a32:	b2d2      	uxtb	r2, r2
 8001a34:	f042 0220 	orr.w	r2, r2, #32
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	f002 021f 	and.w	r2, r2, #31
 8001a3e:	2101      	movs	r1, #1
 8001a40:	fa01 f202 	lsl.w	r2, r1, r2
 8001a44:	4013      	ands	r3, r2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1ab      	bne.n	80019a2 <HAL_RCC_OscConfig+0x26a>
 8001a4a:	e002      	b.n	8001a52 <HAL_RCC_OscConfig+0x31a>
 8001a4c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a56:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 817f 	beq.w	8001d66 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001a68:	4ba7      	ldr	r3, [pc, #668]	; (8001d08 <HAL_RCC_OscConfig+0x5d0>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00c      	beq.n	8001a8e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001a74:	4ba4      	ldr	r3, [pc, #656]	; (8001d08 <HAL_RCC_OscConfig+0x5d0>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 030c 	and.w	r3, r3, #12
 8001a7c:	2b08      	cmp	r3, #8
 8001a7e:	d173      	bne.n	8001b68 <HAL_RCC_OscConfig+0x430>
 8001a80:	4ba1      	ldr	r3, [pc, #644]	; (8001d08 <HAL_RCC_OscConfig+0x5d0>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001a88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001a8c:	d16c      	bne.n	8001b68 <HAL_RCC_OscConfig+0x430>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a94:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001a98:	fa93 f3a3 	rbit	r3, r3
 8001a9c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001aa0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa4:	fab3 f383 	clz	r3, r3
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	095b      	lsrs	r3, r3, #5
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	f043 0301 	orr.w	r3, r3, #1
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d102      	bne.n	8001abe <HAL_RCC_OscConfig+0x386>
 8001ab8:	4b93      	ldr	r3, [pc, #588]	; (8001d08 <HAL_RCC_OscConfig+0x5d0>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	e013      	b.n	8001ae6 <HAL_RCC_OscConfig+0x3ae>
 8001abe:	2302      	movs	r3, #2
 8001ac0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ac8:	fa93 f3a3 	rbit	r3, r3
 8001acc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001ad6:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001ada:	fa93 f3a3 	rbit	r3, r3
 8001ade:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ae2:	4b89      	ldr	r3, [pc, #548]	; (8001d08 <HAL_RCC_OscConfig+0x5d0>)
 8001ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001aec:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001af0:	fa92 f2a2 	rbit	r2, r2
 8001af4:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001af8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001afc:	fab2 f282 	clz	r2, r2
 8001b00:	b2d2      	uxtb	r2, r2
 8001b02:	f042 0220 	orr.w	r2, r2, #32
 8001b06:	b2d2      	uxtb	r2, r2
 8001b08:	f002 021f 	and.w	r2, r2, #31
 8001b0c:	2101      	movs	r1, #1
 8001b0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b12:	4013      	ands	r3, r2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d00a      	beq.n	8001b2e <HAL_RCC_OscConfig+0x3f6>
 8001b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d002      	beq.n	8001b2e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	f000 be52 	b.w	80027d2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2e:	4b76      	ldr	r3, [pc, #472]	; (8001d08 <HAL_RCC_OscConfig+0x5d0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	21f8      	movs	r1, #248	; 0xf8
 8001b44:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b48:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001b4c:	fa91 f1a1 	rbit	r1, r1
 8001b50:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8001b54:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001b58:	fab1 f181 	clz	r1, r1
 8001b5c:	b2c9      	uxtb	r1, r1
 8001b5e:	408b      	lsls	r3, r1
 8001b60:	4969      	ldr	r1, [pc, #420]	; (8001d08 <HAL_RCC_OscConfig+0x5d0>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b66:	e0fe      	b.n	8001d66 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b68:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b6c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 8088 	beq.w	8001c8a <HAL_RCC_OscConfig+0x552>
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b80:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001b84:	fa93 f3a3 	rbit	r3, r3
 8001b88:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001b8c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b90:	fab3 f383 	clz	r3, r3
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b9a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba6:	f7ff fa53 	bl	8001050 <HAL_GetTick>
 8001baa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bae:	e00a      	b.n	8001bc6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bb0:	f7ff fa4e 	bl	8001050 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d902      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	f000 be06 	b.w	80027d2 <HAL_RCC_OscConfig+0x109a>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001bd8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bdc:	fab3 f383 	clz	r3, r3
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	095b      	lsrs	r3, r3, #5
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d102      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x4be>
 8001bf0:	4b45      	ldr	r3, [pc, #276]	; (8001d08 <HAL_RCC_OscConfig+0x5d0>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	e013      	b.n	8001c1e <HAL_RCC_OscConfig+0x4e6>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bfc:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001c00:	fa93 f3a3 	rbit	r3, r3
 8001c04:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001c08:	2302      	movs	r3, #2
 8001c0a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001c0e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	; (8001d08 <HAL_RCC_OscConfig+0x5d0>)
 8001c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1e:	2202      	movs	r2, #2
 8001c20:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001c24:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001c28:	fa92 f2a2 	rbit	r2, r2
 8001c2c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001c30:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001c34:	fab2 f282 	clz	r2, r2
 8001c38:	b2d2      	uxtb	r2, r2
 8001c3a:	f042 0220 	orr.w	r2, r2, #32
 8001c3e:	b2d2      	uxtb	r2, r2
 8001c40:	f002 021f 	and.w	r2, r2, #31
 8001c44:	2101      	movs	r1, #1
 8001c46:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0af      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c50:	4b2d      	ldr	r3, [pc, #180]	; (8001d08 <HAL_RCC_OscConfig+0x5d0>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	21f8      	movs	r1, #248	; 0xf8
 8001c66:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6a:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8001c6e:	fa91 f1a1 	rbit	r1, r1
 8001c72:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001c76:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001c7a:	fab1 f181 	clz	r1, r1
 8001c7e:	b2c9      	uxtb	r1, r1
 8001c80:	408b      	lsls	r3, r1
 8001c82:	4921      	ldr	r1, [pc, #132]	; (8001d08 <HAL_RCC_OscConfig+0x5d0>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
 8001c88:	e06d      	b.n	8001d66 <HAL_RCC_OscConfig+0x62e>
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c90:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c94:	fa93 f3a3 	rbit	r3, r3
 8001c98:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001c9c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca0:	fab3 f383 	clz	r3, r3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001caa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb6:	f7ff f9cb 	bl	8001050 <HAL_GetTick>
 8001cba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	e00a      	b.n	8001cd6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc0:	f7ff f9c6 	bl	8001050 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d902      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	f000 bd7e 	b.w	80027d2 <HAL_RCC_OscConfig+0x109a>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cdc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001ce0:	fa93 f3a3 	rbit	r3, r3
 8001ce4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001ce8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cec:	fab3 f383 	clz	r3, r3
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	095b      	lsrs	r3, r3, #5
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d105      	bne.n	8001d0c <HAL_RCC_OscConfig+0x5d4>
 8001d00:	4b01      	ldr	r3, [pc, #4]	; (8001d08 <HAL_RCC_OscConfig+0x5d0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	e016      	b.n	8001d34 <HAL_RCC_OscConfig+0x5fc>
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001d16:	fa93 f3a3 	rbit	r3, r3
 8001d1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001d1e:	2302      	movs	r3, #2
 8001d20:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d28:	fa93 f3a3 	rbit	r3, r3
 8001d2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d30:	4bbf      	ldr	r3, [pc, #764]	; (8002030 <HAL_RCC_OscConfig+0x8f8>)
 8001d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d34:	2202      	movs	r2, #2
 8001d36:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001d3a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8001d3e:	fa92 f2a2 	rbit	r2, r2
 8001d42:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001d46:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8001d4a:	fab2 f282 	clz	r2, r2
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	f042 0220 	orr.w	r2, r2, #32
 8001d54:	b2d2      	uxtb	r2, r2
 8001d56:	f002 021f 	and.w	r2, r2, #31
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d60:	4013      	ands	r3, r2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1ac      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d6a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0308 	and.w	r3, r3, #8
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 8113 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d80:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d07c      	beq.n	8001e86 <HAL_RCC_OscConfig+0x74e>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001d96:	fa93 f3a3 	rbit	r3, r3
 8001d9a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8001d9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001da2:	fab3 f383 	clz	r3, r3
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	461a      	mov	r2, r3
 8001daa:	4ba2      	ldr	r3, [pc, #648]	; (8002034 <HAL_RCC_OscConfig+0x8fc>)
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	461a      	mov	r2, r3
 8001db2:	2301      	movs	r3, #1
 8001db4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001db6:	f7ff f94b 	bl	8001050 <HAL_GetTick>
 8001dba:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff f946 	bl	8001050 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d902      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	f000 bcfe 	b.w	80027d2 <HAL_RCC_OscConfig+0x109a>
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001de0:	fa93 f2a3 	rbit	r2, r3
 8001de4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001dec:	601a      	str	r2, [r3, #0]
 8001dee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001df6:	2202      	movs	r2, #2
 8001df8:	601a      	str	r2, [r3, #0]
 8001dfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001dfe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	fa93 f2a3 	rbit	r2, r3
 8001e08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e16:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e1a:	2202      	movs	r2, #2
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e22:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	fa93 f2a3 	rbit	r2, r3
 8001e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e30:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001e34:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e36:	4b7e      	ldr	r3, [pc, #504]	; (8002030 <HAL_RCC_OscConfig+0x8f8>)
 8001e38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e42:	2102      	movs	r1, #2
 8001e44:	6019      	str	r1, [r3, #0]
 8001e46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e4a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	fa93 f1a3 	rbit	r1, r3
 8001e54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e58:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e5c:	6019      	str	r1, [r3, #0]
  return result;
 8001e5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e62:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	fab3 f383 	clz	r3, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	2101      	movs	r1, #1
 8001e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e7e:	4013      	ands	r3, r2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d09d      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x688>
 8001e84:	e08d      	b.n	8001fa2 <HAL_RCC_OscConfig+0x86a>
 8001e86:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e8a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e8e:	2201      	movs	r2, #1
 8001e90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e96:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	fa93 f2a3 	rbit	r2, r3
 8001ea0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ea4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001ea8:	601a      	str	r2, [r3, #0]
  return result;
 8001eaa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eae:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001eb2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb4:	fab3 f383 	clz	r3, r3
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4b5d      	ldr	r3, [pc, #372]	; (8002034 <HAL_RCC_OscConfig+0x8fc>)
 8001ebe:	4413      	add	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec8:	f7ff f8c2 	bl	8001050 <HAL_GetTick>
 8001ecc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ed2:	f7ff f8bd 	bl	8001050 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d902      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	f000 bc75 	b.w	80027d2 <HAL_RCC_OscConfig+0x109a>
 8001ee8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001eec:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ef8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	fa93 f2a3 	rbit	r2, r3
 8001f02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f06:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f14:	2202      	movs	r2, #2
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f1c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	fa93 f2a3 	rbit	r2, r3
 8001f26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f34:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f38:	2202      	movs	r2, #2
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f40:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	fa93 f2a3 	rbit	r2, r3
 8001f4a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f4e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001f52:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f54:	4b36      	ldr	r3, [pc, #216]	; (8002030 <HAL_RCC_OscConfig+0x8f8>)
 8001f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f5c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f60:	2102      	movs	r1, #2
 8001f62:	6019      	str	r1, [r3, #0]
 8001f64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f68:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	fa93 f1a3 	rbit	r1, r3
 8001f72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f76:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f7a:	6019      	str	r1, [r3, #0]
  return result;
 8001f7c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001f80:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	fab3 f383 	clz	r3, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	f003 031f 	and.w	r3, r3, #31
 8001f96:	2101      	movs	r1, #1
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d197      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fa6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0304 	and.w	r3, r3, #4
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 81a5 	beq.w	8002302 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <HAL_RCC_OscConfig+0x8f8>)
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d116      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fca:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_RCC_OscConfig+0x8f8>)
 8001fcc:	69db      	ldr	r3, [r3, #28]
 8001fce:	4a18      	ldr	r2, [pc, #96]	; (8002030 <HAL_RCC_OscConfig+0x8f8>)
 8001fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	61d3      	str	r3, [r2, #28]
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <HAL_RCC_OscConfig+0x8f8>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001fde:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fe2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fe6:	601a      	str	r2, [r3, #0]
 8001fe8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001fec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ff0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_RCC_OscConfig+0x900>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002000:	2b00      	cmp	r3, #0
 8002002:	d121      	bne.n	8002048 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002004:	4b0c      	ldr	r3, [pc, #48]	; (8002038 <HAL_RCC_OscConfig+0x900>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <HAL_RCC_OscConfig+0x900>)
 800200a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800200e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002010:	f7ff f81e 	bl	8001050 <HAL_GetTick>
 8002014:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	e010      	b.n	800203c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800201a:	f7ff f819 	bl	8001050 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b64      	cmp	r3, #100	; 0x64
 8002028:	d908      	bls.n	800203c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e3d1      	b.n	80027d2 <HAL_RCC_OscConfig+0x109a>
 800202e:	bf00      	nop
 8002030:	40021000 	.word	0x40021000
 8002034:	10908120 	.word	0x10908120
 8002038:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203c:	4b8d      	ldr	r3, [pc, #564]	; (8002274 <HAL_RCC_OscConfig+0xb3c>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d0e8      	beq.n	800201a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002048:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800204c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d106      	bne.n	8002066 <HAL_RCC_OscConfig+0x92e>
 8002058:	4b87      	ldr	r3, [pc, #540]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 800205a:	6a1b      	ldr	r3, [r3, #32]
 800205c:	4a86      	ldr	r2, [pc, #536]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 800205e:	f043 0301 	orr.w	r3, r3, #1
 8002062:	6213      	str	r3, [r2, #32]
 8002064:	e035      	b.n	80020d2 <HAL_RCC_OscConfig+0x99a>
 8002066:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800206a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10c      	bne.n	8002090 <HAL_RCC_OscConfig+0x958>
 8002076:	4b80      	ldr	r3, [pc, #512]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 8002078:	6a1b      	ldr	r3, [r3, #32]
 800207a:	4a7f      	ldr	r2, [pc, #508]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	6213      	str	r3, [r2, #32]
 8002082:	4b7d      	ldr	r3, [pc, #500]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	4a7c      	ldr	r2, [pc, #496]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 8002088:	f023 0304 	bic.w	r3, r3, #4
 800208c:	6213      	str	r3, [r2, #32]
 800208e:	e020      	b.n	80020d2 <HAL_RCC_OscConfig+0x99a>
 8002090:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002094:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	2b05      	cmp	r3, #5
 800209e:	d10c      	bne.n	80020ba <HAL_RCC_OscConfig+0x982>
 80020a0:	4b75      	ldr	r3, [pc, #468]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	4a74      	ldr	r2, [pc, #464]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 80020a6:	f043 0304 	orr.w	r3, r3, #4
 80020aa:	6213      	str	r3, [r2, #32]
 80020ac:	4b72      	ldr	r3, [pc, #456]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	4a71      	ldr	r2, [pc, #452]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6213      	str	r3, [r2, #32]
 80020b8:	e00b      	b.n	80020d2 <HAL_RCC_OscConfig+0x99a>
 80020ba:	4b6f      	ldr	r3, [pc, #444]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 80020bc:	6a1b      	ldr	r3, [r3, #32]
 80020be:	4a6e      	ldr	r2, [pc, #440]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 80020c0:	f023 0301 	bic.w	r3, r3, #1
 80020c4:	6213      	str	r3, [r2, #32]
 80020c6:	4b6c      	ldr	r3, [pc, #432]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	4a6b      	ldr	r2, [pc, #428]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 80020cc:	f023 0304 	bic.w	r3, r3, #4
 80020d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80020d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8081 	beq.w	80021e6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e4:	f7fe ffb4 	bl	8001050 <HAL_GetTick>
 80020e8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ec:	e00b      	b.n	8002106 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ee:	f7fe ffaf 	bl	8001050 <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e365      	b.n	80027d2 <HAL_RCC_OscConfig+0x109a>
 8002106:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800210a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800210e:	2202      	movs	r2, #2
 8002110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002116:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	fa93 f2a3 	rbit	r2, r3
 8002120:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002124:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800212e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002132:	2202      	movs	r2, #2
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800213a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	fa93 f2a3 	rbit	r2, r3
 8002144:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002148:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800214c:	601a      	str	r2, [r3, #0]
  return result;
 800214e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002152:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002156:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002158:	fab3 f383 	clz	r3, r3
 800215c:	b2db      	uxtb	r3, r3
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	b2db      	uxtb	r3, r3
 8002162:	f043 0302 	orr.w	r3, r3, #2
 8002166:	b2db      	uxtb	r3, r3
 8002168:	2b02      	cmp	r3, #2
 800216a:	d102      	bne.n	8002172 <HAL_RCC_OscConfig+0xa3a>
 800216c:	4b42      	ldr	r3, [pc, #264]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	e013      	b.n	800219a <HAL_RCC_OscConfig+0xa62>
 8002172:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002176:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800217a:	2202      	movs	r2, #2
 800217c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002182:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	fa93 f2a3 	rbit	r2, r3
 800218c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002190:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	4b38      	ldr	r3, [pc, #224]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 8002198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800219e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021a2:	2102      	movs	r1, #2
 80021a4:	6011      	str	r1, [r2, #0]
 80021a6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021aa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80021ae:	6812      	ldr	r2, [r2, #0]
 80021b0:	fa92 f1a2 	rbit	r1, r2
 80021b4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021b8:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80021bc:	6011      	str	r1, [r2, #0]
  return result;
 80021be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80021c2:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80021c6:	6812      	ldr	r2, [r2, #0]
 80021c8:	fab2 f282 	clz	r2, r2
 80021cc:	b2d2      	uxtb	r2, r2
 80021ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	f002 021f 	and.w	r2, r2, #31
 80021d8:	2101      	movs	r1, #1
 80021da:	fa01 f202 	lsl.w	r2, r1, r2
 80021de:	4013      	ands	r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d084      	beq.n	80020ee <HAL_RCC_OscConfig+0x9b6>
 80021e4:	e083      	b.n	80022ee <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e6:	f7fe ff33 	bl	8001050 <HAL_GetTick>
 80021ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021ee:	e00b      	b.n	8002208 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021f0:	f7fe ff2e 	bl	8001050 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002200:	4293      	cmp	r3, r2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e2e4      	b.n	80027d2 <HAL_RCC_OscConfig+0x109a>
 8002208:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800220c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002210:	2202      	movs	r2, #2
 8002212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002214:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002218:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	fa93 f2a3 	rbit	r2, r3
 8002222:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002226:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800222a:	601a      	str	r2, [r3, #0]
 800222c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002230:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002234:	2202      	movs	r2, #2
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800223c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	fa93 f2a3 	rbit	r2, r3
 8002246:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800224a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800224e:	601a      	str	r2, [r3, #0]
  return result;
 8002250:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002254:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002258:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d106      	bne.n	800227c <HAL_RCC_OscConfig+0xb44>
 800226e:	4b02      	ldr	r3, [pc, #8]	; (8002278 <HAL_RCC_OscConfig+0xb40>)
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	e017      	b.n	80022a4 <HAL_RCC_OscConfig+0xb6c>
 8002274:	40007000 	.word	0x40007000
 8002278:	40021000 	.word	0x40021000
 800227c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002280:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002284:	2202      	movs	r2, #2
 8002286:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002288:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800228c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	fa93 f2a3 	rbit	r2, r3
 8002296:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800229a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	4bb3      	ldr	r3, [pc, #716]	; (8002570 <HAL_RCC_OscConfig+0xe38>)
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022a8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022ac:	2102      	movs	r1, #2
 80022ae:	6011      	str	r1, [r2, #0]
 80022b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022b4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	fa92 f1a2 	rbit	r1, r2
 80022be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022c2:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80022c6:	6011      	str	r1, [r2, #0]
  return result;
 80022c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80022cc:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80022d0:	6812      	ldr	r2, [r2, #0]
 80022d2:	fab2 f282 	clz	r2, r2
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	f002 021f 	and.w	r2, r2, #31
 80022e2:	2101      	movs	r1, #1
 80022e4:	fa01 f202 	lsl.w	r2, r1, r2
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d180      	bne.n	80021f0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022ee:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d105      	bne.n	8002302 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f6:	4b9e      	ldr	r3, [pc, #632]	; (8002570 <HAL_RCC_OscConfig+0xe38>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	4a9d      	ldr	r2, [pc, #628]	; (8002570 <HAL_RCC_OscConfig+0xe38>)
 80022fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002300:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002302:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002306:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	f000 825e 	beq.w	80027d0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002314:	4b96      	ldr	r3, [pc, #600]	; (8002570 <HAL_RCC_OscConfig+0xe38>)
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f003 030c 	and.w	r3, r3, #12
 800231c:	2b08      	cmp	r3, #8
 800231e:	f000 821f 	beq.w	8002760 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002322:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002326:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	2b02      	cmp	r3, #2
 8002330:	f040 8170 	bne.w	8002614 <HAL_RCC_OscConfig+0xedc>
 8002334:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002338:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800233c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002340:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002342:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002346:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	fa93 f2a3 	rbit	r2, r3
 8002350:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002354:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002358:	601a      	str	r2, [r3, #0]
  return result;
 800235a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800235e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8002362:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800236e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	461a      	mov	r2, r3
 8002376:	2300      	movs	r3, #0
 8002378:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237a:	f7fe fe69 	bl	8001050 <HAL_GetTick>
 800237e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002382:	e009      	b.n	8002398 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002384:	f7fe fe64 	bl	8001050 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e21c      	b.n	80027d2 <HAL_RCC_OscConfig+0x109a>
 8002398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800239c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023aa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	fa93 f2a3 	rbit	r2, r3
 80023b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023b8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023bc:	601a      	str	r2, [r3, #0]
  return result;
 80023be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023c2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80023c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023c8:	fab3 f383 	clz	r3, r3
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	095b      	lsrs	r3, r3, #5
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	f043 0301 	orr.w	r3, r3, #1
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d102      	bne.n	80023e2 <HAL_RCC_OscConfig+0xcaa>
 80023dc:	4b64      	ldr	r3, [pc, #400]	; (8002570 <HAL_RCC_OscConfig+0xe38>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	e027      	b.n	8002432 <HAL_RCC_OscConfig+0xcfa>
 80023e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023e6:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80023ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80023ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80023f4:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f2a3 	rbit	r2, r3
 80023fe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002402:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800240c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002410:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800241a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	fa93 f2a3 	rbit	r2, r3
 8002424:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002428:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	4b50      	ldr	r3, [pc, #320]	; (8002570 <HAL_RCC_OscConfig+0xe38>)
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002436:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800243a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800243e:	6011      	str	r1, [r2, #0]
 8002440:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002444:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	fa92 f1a2 	rbit	r1, r2
 800244e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002452:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002456:	6011      	str	r1, [r2, #0]
  return result;
 8002458:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800245c:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	fab2 f282 	clz	r2, r2
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	f042 0220 	orr.w	r2, r2, #32
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	f002 021f 	and.w	r2, r2, #31
 8002472:	2101      	movs	r1, #1
 8002474:	fa01 f202 	lsl.w	r2, r1, r2
 8002478:	4013      	ands	r3, r2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d182      	bne.n	8002384 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800247e:	4b3c      	ldr	r3, [pc, #240]	; (8002570 <HAL_RCC_OscConfig+0xe38>)
 8002480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002482:	f023 020f 	bic.w	r2, r3, #15
 8002486:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800248a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002492:	4937      	ldr	r1, [pc, #220]	; (8002570 <HAL_RCC_OscConfig+0xe38>)
 8002494:	4313      	orrs	r3, r2
 8002496:	62cb      	str	r3, [r1, #44]	; 0x2c
 8002498:	4b35      	ldr	r3, [pc, #212]	; (8002570 <HAL_RCC_OscConfig+0xe38>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80024a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024a4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6a19      	ldr	r1, [r3, #32]
 80024ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024b0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	69db      	ldr	r3, [r3, #28]
 80024b8:	430b      	orrs	r3, r1
 80024ba:	492d      	ldr	r1, [pc, #180]	; (8002570 <HAL_RCC_OscConfig+0xe38>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
 80024c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024c4:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80024cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024d2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	fa93 f2a3 	rbit	r2, r3
 80024dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024e0:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80024e4:	601a      	str	r2, [r3, #0]
  return result;
 80024e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80024ea:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80024ee:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f0:	fab3 f383 	clz	r3, r3
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	461a      	mov	r2, r3
 8002502:	2301      	movs	r3, #1
 8002504:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002506:	f7fe fda3 	bl	8001050 <HAL_GetTick>
 800250a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800250e:	e009      	b.n	8002524 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002510:	f7fe fd9e 	bl	8001050 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e156      	b.n	80027d2 <HAL_RCC_OscConfig+0x109a>
 8002524:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002528:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800252c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002530:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002536:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	fa93 f2a3 	rbit	r2, r3
 8002540:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002544:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002548:	601a      	str	r2, [r3, #0]
  return result;
 800254a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800254e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002552:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	095b      	lsrs	r3, r3, #5
 800255c:	b2db      	uxtb	r3, r3
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b01      	cmp	r3, #1
 8002566:	d105      	bne.n	8002574 <HAL_RCC_OscConfig+0xe3c>
 8002568:	4b01      	ldr	r3, [pc, #4]	; (8002570 <HAL_RCC_OscConfig+0xe38>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	e02a      	b.n	80025c4 <HAL_RCC_OscConfig+0xe8c>
 800256e:	bf00      	nop
 8002570:	40021000 	.word	0x40021000
 8002574:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002578:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800257c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002580:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002582:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002586:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	fa93 f2a3 	rbit	r2, r3
 8002590:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002594:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800259e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80025a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ac:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fa93 f2a3 	rbit	r2, r3
 80025b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80025ba:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	4b86      	ldr	r3, [pc, #536]	; (80027dc <HAL_RCC_OscConfig+0x10a4>)
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025c8:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025cc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80025d0:	6011      	str	r1, [r2, #0]
 80025d2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025d6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	fa92 f1a2 	rbit	r1, r2
 80025e0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025e4:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80025e8:	6011      	str	r1, [r2, #0]
  return result;
 80025ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80025ee:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80025f2:	6812      	ldr	r2, [r2, #0]
 80025f4:	fab2 f282 	clz	r2, r2
 80025f8:	b2d2      	uxtb	r2, r2
 80025fa:	f042 0220 	orr.w	r2, r2, #32
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	f002 021f 	and.w	r2, r2, #31
 8002604:	2101      	movs	r1, #1
 8002606:	fa01 f202 	lsl.w	r2, r1, r2
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	f43f af7f 	beq.w	8002510 <HAL_RCC_OscConfig+0xdd8>
 8002612:	e0dd      	b.n	80027d0 <HAL_RCC_OscConfig+0x1098>
 8002614:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002618:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800261c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002620:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002622:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002626:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	fa93 f2a3 	rbit	r2, r3
 8002630:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002634:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002638:	601a      	str	r2, [r3, #0]
  return result;
 800263a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800263e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002642:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002644:	fab3 f383 	clz	r3, r3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800264e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	461a      	mov	r2, r3
 8002656:	2300      	movs	r3, #0
 8002658:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe fcf9 	bl	8001050 <HAL_GetTick>
 800265e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002662:	e009      	b.n	8002678 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe fcf4 	bl	8001050 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e0ac      	b.n	80027d2 <HAL_RCC_OscConfig+0x109a>
 8002678:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800267c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002680:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002684:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800268a:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	fa93 f2a3 	rbit	r2, r3
 8002694:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002698:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800269c:	601a      	str	r2, [r3, #0]
  return result;
 800269e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026a2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80026a6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	095b      	lsrs	r3, r3, #5
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d102      	bne.n	80026c2 <HAL_RCC_OscConfig+0xf8a>
 80026bc:	4b47      	ldr	r3, [pc, #284]	; (80027dc <HAL_RCC_OscConfig+0x10a4>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	e027      	b.n	8002712 <HAL_RCC_OscConfig+0xfda>
 80026c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026c6:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026d4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	fa93 f2a3 	rbit	r2, r3
 80026de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026e2:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026ec:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80026f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80026fa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	fa93 f2a3 	rbit	r2, r3
 8002704:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002708:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 800270c:	601a      	str	r2, [r3, #0]
 800270e:	4b33      	ldr	r3, [pc, #204]	; (80027dc <HAL_RCC_OscConfig+0x10a4>)
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002716:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800271a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800271e:	6011      	str	r1, [r2, #0]
 8002720:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002724:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002728:	6812      	ldr	r2, [r2, #0]
 800272a:	fa92 f1a2 	rbit	r1, r2
 800272e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8002732:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002736:	6011      	str	r1, [r2, #0]
  return result;
 8002738:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800273c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	fab2 f282 	clz	r2, r2
 8002746:	b2d2      	uxtb	r2, r2
 8002748:	f042 0220 	orr.w	r2, r2, #32
 800274c:	b2d2      	uxtb	r2, r2
 800274e:	f002 021f 	and.w	r2, r2, #31
 8002752:	2101      	movs	r1, #1
 8002754:	fa01 f202 	lsl.w	r2, r1, r2
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d182      	bne.n	8002664 <HAL_RCC_OscConfig+0xf2c>
 800275e:	e037      	b.n	80027d0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002760:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002764:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e02e      	b.n	80027d2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002774:	4b19      	ldr	r3, [pc, #100]	; (80027dc <HAL_RCC_OscConfig+0x10a4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800277c:	4b17      	ldr	r3, [pc, #92]	; (80027dc <HAL_RCC_OscConfig+0x10a4>)
 800277e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002780:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002784:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8002788:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800278c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8002790:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69db      	ldr	r3, [r3, #28]
 8002798:	429a      	cmp	r2, r3
 800279a:	d117      	bne.n	80027cc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800279c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80027a0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d10b      	bne.n	80027cc <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80027b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027b8:	f003 020f 	and.w	r2, r3, #15
 80027bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80027c0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80027d0:	2300      	movs	r3, #0
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000

080027e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b09e      	sub	sp, #120	; 0x78
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80027ea:	2300      	movs	r3, #0
 80027ec:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d101      	bne.n	80027f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e162      	b.n	8002abe <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f8:	4b90      	ldr	r3, [pc, #576]	; (8002a3c <HAL_RCC_ClockConfig+0x25c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0307 	and.w	r3, r3, #7
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d910      	bls.n	8002828 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b8d      	ldr	r3, [pc, #564]	; (8002a3c <HAL_RCC_ClockConfig+0x25c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 0207 	bic.w	r2, r3, #7
 800280e:	498b      	ldr	r1, [pc, #556]	; (8002a3c <HAL_RCC_ClockConfig+0x25c>)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	4313      	orrs	r3, r2
 8002814:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002816:	4b89      	ldr	r3, [pc, #548]	; (8002a3c <HAL_RCC_ClockConfig+0x25c>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0307 	and.w	r3, r3, #7
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d001      	beq.n	8002828 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e14a      	b.n	8002abe <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0302 	and.w	r3, r3, #2
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002834:	4b82      	ldr	r3, [pc, #520]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	497f      	ldr	r1, [pc, #508]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	2b00      	cmp	r3, #0
 8002850:	f000 80dc 	beq.w	8002a0c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d13c      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xf6>
 800285c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002860:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002864:	fa93 f3a3 	rbit	r3, r3
 8002868:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800286a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286c:	fab3 f383 	clz	r3, r3
 8002870:	b2db      	uxtb	r3, r3
 8002872:	095b      	lsrs	r3, r3, #5
 8002874:	b2db      	uxtb	r3, r3
 8002876:	f043 0301 	orr.w	r3, r3, #1
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b01      	cmp	r3, #1
 800287e:	d102      	bne.n	8002886 <HAL_RCC_ClockConfig+0xa6>
 8002880:	4b6f      	ldr	r3, [pc, #444]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	e00f      	b.n	80028a6 <HAL_RCC_ClockConfig+0xc6>
 8002886:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800288a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800288c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800288e:	fa93 f3a3 	rbit	r3, r3
 8002892:	667b      	str	r3, [r7, #100]	; 0x64
 8002894:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002898:	663b      	str	r3, [r7, #96]	; 0x60
 800289a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800289c:	fa93 f3a3 	rbit	r3, r3
 80028a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80028a2:	4b67      	ldr	r3, [pc, #412]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 80028a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80028aa:	65ba      	str	r2, [r7, #88]	; 0x58
 80028ac:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028ae:	fa92 f2a2 	rbit	r2, r2
 80028b2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80028b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028b6:	fab2 f282 	clz	r2, r2
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	f042 0220 	orr.w	r2, r2, #32
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	f002 021f 	and.w	r2, r2, #31
 80028c6:	2101      	movs	r1, #1
 80028c8:	fa01 f202 	lsl.w	r2, r1, r2
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d17b      	bne.n	80029ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e0f3      	b.n	8002abe <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d13c      	bne.n	8002958 <HAL_RCC_ClockConfig+0x178>
 80028de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e6:	fa93 f3a3 	rbit	r3, r3
 80028ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80028ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	095b      	lsrs	r3, r3, #5
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	f043 0301 	orr.w	r3, r3, #1
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d102      	bne.n	8002908 <HAL_RCC_ClockConfig+0x128>
 8002902:	4b4f      	ldr	r3, [pc, #316]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	e00f      	b.n	8002928 <HAL_RCC_ClockConfig+0x148>
 8002908:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002910:	fa93 f3a3 	rbit	r3, r3
 8002914:	647b      	str	r3, [r7, #68]	; 0x44
 8002916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800291a:	643b      	str	r3, [r7, #64]	; 0x40
 800291c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800291e:	fa93 f3a3 	rbit	r3, r3
 8002922:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002924:	4b46      	ldr	r3, [pc, #280]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800292c:	63ba      	str	r2, [r7, #56]	; 0x38
 800292e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002930:	fa92 f2a2 	rbit	r2, r2
 8002934:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002938:	fab2 f282 	clz	r2, r2
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	f042 0220 	orr.w	r2, r2, #32
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	f002 021f 	and.w	r2, r2, #31
 8002948:	2101      	movs	r1, #1
 800294a:	fa01 f202 	lsl.w	r2, r1, r2
 800294e:	4013      	ands	r3, r2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d13a      	bne.n	80029ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0b2      	b.n	8002abe <HAL_RCC_ClockConfig+0x2de>
 8002958:	2302      	movs	r3, #2
 800295a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295e:	fa93 f3a3 	rbit	r3, r3
 8002962:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <HAL_RCC_ClockConfig+0x1a0>
 800297a:	4b31      	ldr	r3, [pc, #196]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	e00d      	b.n	800299c <HAL_RCC_ClockConfig+0x1bc>
 8002980:	2302      	movs	r3, #2
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	627b      	str	r3, [r7, #36]	; 0x24
 800298c:	2302      	movs	r3, #2
 800298e:	623b      	str	r3, [r7, #32]
 8002990:	6a3b      	ldr	r3, [r7, #32]
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	61fb      	str	r3, [r7, #28]
 8002998:	4b29      	ldr	r3, [pc, #164]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	2202      	movs	r2, #2
 800299e:	61ba      	str	r2, [r7, #24]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	fa92 f2a2 	rbit	r2, r2
 80029a6:	617a      	str	r2, [r7, #20]
  return result;
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	fab2 f282 	clz	r2, r2
 80029ae:	b2d2      	uxtb	r2, r2
 80029b0:	f042 0220 	orr.w	r2, r2, #32
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	f002 021f 	and.w	r2, r2, #31
 80029ba:	2101      	movs	r1, #1
 80029bc:	fa01 f202 	lsl.w	r2, r1, r2
 80029c0:	4013      	ands	r3, r2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e079      	b.n	8002abe <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f023 0203 	bic.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	491a      	ldr	r1, [pc, #104]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029dc:	f7fe fb38 	bl	8001050 <HAL_GetTick>
 80029e0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e4:	f7fe fb34 	bl	8001050 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e061      	b.n	8002abe <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <HAL_RCC_ClockConfig+0x260>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f003 020c 	and.w	r2, r3, #12
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d1eb      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b0b      	ldr	r3, [pc, #44]	; (8002a3c <HAL_RCC_ClockConfig+0x25c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d214      	bcs.n	8002a44 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b08      	ldr	r3, [pc, #32]	; (8002a3c <HAL_RCC_ClockConfig+0x25c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 0207 	bic.w	r2, r3, #7
 8002a22:	4906      	ldr	r1, [pc, #24]	; (8002a3c <HAL_RCC_ClockConfig+0x25c>)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b04      	ldr	r3, [pc, #16]	; (8002a3c <HAL_RCC_ClockConfig+0x25c>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e040      	b.n	8002abe <HAL_RCC_ClockConfig+0x2de>
 8002a3c:	40022000 	.word	0x40022000
 8002a40:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d008      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a50:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	491a      	ldr	r1, [pc, #104]	; (8002ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d009      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a6e:	4b16      	ldr	r3, [pc, #88]	; (8002ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4912      	ldr	r1, [pc, #72]	; (8002ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a82:	f000 f829 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8002a86:	4601      	mov	r1, r0
 8002a88:	4b0f      	ldr	r3, [pc, #60]	; (8002ac8 <HAL_RCC_ClockConfig+0x2e8>)
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a90:	22f0      	movs	r2, #240	; 0xf0
 8002a92:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	fa92 f2a2 	rbit	r2, r2
 8002a9a:	60fa      	str	r2, [r7, #12]
  return result;
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	fab2 f282 	clz	r2, r2
 8002aa2:	b2d2      	uxtb	r2, r2
 8002aa4:	40d3      	lsrs	r3, r2
 8002aa6:	4a09      	ldr	r2, [pc, #36]	; (8002acc <HAL_RCC_ClockConfig+0x2ec>)
 8002aa8:	5cd3      	ldrb	r3, [r2, r3]
 8002aaa:	fa21 f303 	lsr.w	r3, r1, r3
 8002aae:	4a08      	ldr	r2, [pc, #32]	; (8002ad0 <HAL_RCC_ClockConfig+0x2f0>)
 8002ab0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002ab2:	4b08      	ldr	r3, [pc, #32]	; (8002ad4 <HAL_RCC_ClockConfig+0x2f4>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7fe fa86 	bl	8000fc8 <HAL_InitTick>
  
  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3778      	adds	r7, #120	; 0x78
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40021000 	.word	0x40021000
 8002acc:	080045cc 	.word	0x080045cc
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b08b      	sub	sp, #44	; 0x2c
 8002adc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	61bb      	str	r3, [r7, #24]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8002aea:	2300      	movs	r3, #0
 8002aec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 030c 	and.w	r3, r3, #12
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d002      	beq.n	8002b08 <HAL_RCC_GetSysClockFreq+0x30>
 8002b02:	2b08      	cmp	r3, #8
 8002b04:	d003      	beq.n	8002b0e <HAL_RCC_GetSysClockFreq+0x36>
 8002b06:	e03f      	b.n	8002b88 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b08:	4b25      	ldr	r3, [pc, #148]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b0a:	623b      	str	r3, [r7, #32]
      break;
 8002b0c:	e03f      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002b14:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002b18:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	fa92 f2a2 	rbit	r2, r2
 8002b20:	607a      	str	r2, [r7, #4]
  return result;
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	fab2 f282 	clz	r2, r2
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	40d3      	lsrs	r3, r2
 8002b2c:	4a1d      	ldr	r2, [pc, #116]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002b32:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	220f      	movs	r2, #15
 8002b3c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	fa92 f2a2 	rbit	r2, r2
 8002b44:	60fa      	str	r2, [r7, #12]
  return result;
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	fab2 f282 	clz	r2, r2
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	40d3      	lsrs	r3, r2
 8002b50:	4a15      	ldr	r2, [pc, #84]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002b52:	5cd3      	ldrb	r3, [r2, r3]
 8002b54:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b60:	4a0f      	ldr	r2, [pc, #60]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b70:	e007      	b.n	8002b82 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002b72:	4a0b      	ldr	r2, [pc, #44]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	fb02 f303 	mul.w	r3, r2, r3
 8002b80:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b84:	623b      	str	r3, [r7, #32]
      break;
 8002b86:	e002      	b.n	8002b8e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b88:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002b8a:	623b      	str	r3, [r7, #32]
      break;
 8002b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	372c      	adds	r7, #44	; 0x2c
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	40021000 	.word	0x40021000
 8002ba0:	007a1200 	.word	0x007a1200
 8002ba4:	080045e4 	.word	0x080045e4
 8002ba8:	080045f4 	.word	0x080045f4

08002bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000000 	.word	0x20000000

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002bca:	f7ff ffef 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bce:	4601      	mov	r1, r0
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bd8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002bdc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bde:	687a      	ldr	r2, [r7, #4]
 8002be0:	fa92 f2a2 	rbit	r2, r2
 8002be4:	603a      	str	r2, [r7, #0]
  return result;
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	fab2 f282 	clz	r2, r2
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	40d3      	lsrs	r3, r2
 8002bf0:	4a04      	ldr	r2, [pc, #16]	; (8002c04 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002bf2:	5cd3      	ldrb	r3, [r2, r3]
 8002bf4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	3708      	adds	r7, #8
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40021000 	.word	0x40021000
 8002c04:	080045dc 	.word	0x080045dc

08002c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002c0e:	f7ff ffcd 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002c12:	4601      	mov	r1, r0
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002c1c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002c20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	fa92 f2a2 	rbit	r2, r2
 8002c28:	603a      	str	r2, [r7, #0]
  return result;
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	fab2 f282 	clz	r2, r2
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	40d3      	lsrs	r3, r2
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002c36:	5cd3      	ldrb	r3, [r2, r3]
 8002c38:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	40021000 	.word	0x40021000
 8002c48:	080045dc 	.word	0x080045dc

08002c4c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b092      	sub	sp, #72	; 0x48
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80d4 	beq.w	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c70:	4b4e      	ldr	r3, [pc, #312]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c72:	69db      	ldr	r3, [r3, #28]
 8002c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10e      	bne.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7c:	4b4b      	ldr	r3, [pc, #300]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c7e:	69db      	ldr	r3, [r3, #28]
 8002c80:	4a4a      	ldr	r2, [pc, #296]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c86:	61d3      	str	r3, [r2, #28]
 8002c88:	4b48      	ldr	r3, [pc, #288]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c8a:	69db      	ldr	r3, [r3, #28]
 8002c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c90:	60bb      	str	r3, [r7, #8]
 8002c92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c94:	2301      	movs	r3, #1
 8002c96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c9a:	4b45      	ldr	r3, [pc, #276]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d118      	bne.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca6:	4b42      	ldr	r3, [pc, #264]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a41      	ldr	r2, [pc, #260]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cb0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cb2:	f7fe f9cd 	bl	8001050 <HAL_GetTick>
 8002cb6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb8:	e008      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cba:	f7fe f9c9 	bl	8001050 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b64      	cmp	r3, #100	; 0x64
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e1d6      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ccc:	4b38      	ldr	r3, [pc, #224]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d0f0      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002cd8:	4b34      	ldr	r3, [pc, #208]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8084 	beq.w	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cf2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d07c      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cf8:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d12:	fab3 f383 	clz	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4b26      	ldr	r3, [pc, #152]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	461a      	mov	r2, r3
 8002d22:	2301      	movs	r3, #1
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d2a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d36:	fab3 f383 	clz	r3, r3
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	461a      	mov	r2, r3
 8002d3e:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	461a      	mov	r2, r3
 8002d46:	2300      	movs	r3, #0
 8002d48:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d4a:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d4e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d52:	f003 0301 	and.w	r3, r3, #1
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d04b      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5a:	f7fe f979 	bl	8001050 <HAL_GetTick>
 8002d5e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d60:	e00a      	b.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d62:	f7fe f975 	bl	8001050 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d901      	bls.n	8002d78 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e180      	b.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7e:	fa93 f3a3 	rbit	r3, r3
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
 8002d84:	2302      	movs	r3, #2
 8002d86:	623b      	str	r3, [r7, #32]
 8002d88:	6a3b      	ldr	r3, [r7, #32]
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	61fb      	str	r3, [r7, #28]
  return result;
 8002d90:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d92:	fab3 f383 	clz	r3, r3
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f043 0302 	orr.w	r3, r3, #2
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b02      	cmp	r3, #2
 8002da4:	d108      	bne.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002da6:	4b01      	ldr	r3, [pc, #4]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	e00d      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002dac:	40021000 	.word	0x40021000
 8002db0:	40007000 	.word	0x40007000
 8002db4:	10908100 	.word	0x10908100
 8002db8:	2302      	movs	r3, #2
 8002dba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	fa93 f3a3 	rbit	r3, r3
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	4b9a      	ldr	r3, [pc, #616]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc8:	2202      	movs	r2, #2
 8002dca:	613a      	str	r2, [r7, #16]
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	fa92 f2a2 	rbit	r2, r2
 8002dd2:	60fa      	str	r2, [r7, #12]
  return result;
 8002dd4:	68fa      	ldr	r2, [r7, #12]
 8002dd6:	fab2 f282 	clz	r2, r2
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002de0:	b2d2      	uxtb	r2, r2
 8002de2:	f002 021f 	and.w	r2, r2, #31
 8002de6:	2101      	movs	r1, #1
 8002de8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d0b7      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002df2:	4b8f      	ldr	r3, [pc, #572]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002df4:	6a1b      	ldr	r3, [r3, #32]
 8002df6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	498c      	ldr	r1, [pc, #560]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d105      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e0c:	4b88      	ldr	r3, [pc, #544]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	4a87      	ldr	r2, [pc, #540]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e16:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0301 	and.w	r3, r3, #1
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e24:	4b82      	ldr	r3, [pc, #520]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	f023 0203 	bic.w	r2, r3, #3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	497f      	ldr	r1, [pc, #508]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d008      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e42:	4b7b      	ldr	r3, [pc, #492]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	4978      	ldr	r1, [pc, #480]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e50:	4313      	orrs	r3, r2
 8002e52:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0304 	and.w	r3, r3, #4
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d008      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e60:	4b73      	ldr	r3, [pc, #460]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	4970      	ldr	r1, [pc, #448]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d008      	beq.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e7e:	4b6c      	ldr	r3, [pc, #432]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f023 0210 	bic.w	r2, r3, #16
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	4969      	ldr	r1, [pc, #420]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002e9c:	4b64      	ldr	r3, [pc, #400]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	4961      	ldr	r1, [pc, #388]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d008      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002eba:	4b5d      	ldr	r3, [pc, #372]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f023 0220 	bic.w	r2, r3, #32
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a1b      	ldr	r3, [r3, #32]
 8002ec6:	495a      	ldr	r1, [pc, #360]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ed8:	4b55      	ldr	r3, [pc, #340]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	4952      	ldr	r1, [pc, #328]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d008      	beq.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ef6:	4b4e      	ldr	r3, [pc, #312]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	494b      	ldr	r1, [pc, #300]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f14:	4b46      	ldr	r3, [pc, #280]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	4943      	ldr	r1, [pc, #268]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f32:	4b3f      	ldr	r3, [pc, #252]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	493c      	ldr	r1, [pc, #240]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d008      	beq.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f50:	4b37      	ldr	r3, [pc, #220]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	4934      	ldr	r1, [pc, #208]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002f6e:	4b30      	ldr	r3, [pc, #192]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f72:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	492d      	ldr	r1, [pc, #180]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002f8c:	4b28      	ldr	r3, [pc, #160]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f98:	4925      	ldr	r1, [pc, #148]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002faa:	4b21      	ldr	r3, [pc, #132]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	491e      	ldr	r1, [pc, #120]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002fc8:	4b19      	ldr	r3, [pc, #100]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fcc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd4:	4916      	ldr	r1, [pc, #88]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002fe6:	4b12      	ldr	r3, [pc, #72]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	490f      	ldr	r1, [pc, #60]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d008      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003004:	4b0a      	ldr	r3, [pc, #40]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003010:	4907      	ldr	r1, [pc, #28]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003012:	4313      	orrs	r3, r2
 8003014:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00c      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003022:	4b03      	ldr	r3, [pc, #12]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	e002      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000
 8003034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003036:	4913      	ldr	r1, [pc, #76]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003038:	4313      	orrs	r3, r2
 800303a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003048:	4b0e      	ldr	r3, [pc, #56]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800304a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003054:	490b      	ldr	r1, [pc, #44]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003056:	4313      	orrs	r3, r2
 8003058:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d008      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003066:	4b07      	ldr	r3, [pc, #28]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003072:	4904      	ldr	r1, [pc, #16]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003074:	4313      	orrs	r3, r2
 8003076:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3748      	adds	r7, #72	; 0x48
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	40021000 	.word	0x40021000

08003088 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d101      	bne.n	800309a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e040      	b.n	800311c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d106      	bne.n	80030b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7fd feb0 	bl	8000e10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2224      	movs	r2, #36	; 0x24
 80030b4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0201 	bic.w	r2, r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 fb6e 	bl	80037a8 <UART_SetConfig>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d101      	bne.n	80030d6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e022      	b.n	800311c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d002      	beq.n	80030e4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fd38 	bl	8003b54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689a      	ldr	r2, [r3, #8]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003102:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f042 0201 	orr.w	r2, r2, #1
 8003112:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 fdbf 	bl	8003c98 <UART_CheckIdleState>
 800311a:	4603      	mov	r3, r0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3708      	adds	r7, #8
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08a      	sub	sp, #40	; 0x28
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	4613      	mov	r3, r2
 8003130:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003136:	2b20      	cmp	r3, #32
 8003138:	d13d      	bne.n	80031b6 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d002      	beq.n	8003146 <HAL_UART_Receive_IT+0x22>
 8003140:	88fb      	ldrh	r3, [r7, #6]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e036      	b.n	80031b8 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_UART_Receive_IT+0x34>
 8003154:	2302      	movs	r3, #2
 8003156:	e02f      	b.n	80031b8 <HAL_UART_Receive_IT+0x94>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2200      	movs	r2, #0
 8003164:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d018      	beq.n	80031a6 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	e853 3f00 	ldrex	r3, [r3]
 8003180:	613b      	str	r3, [r7, #16]
   return(result);
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	461a      	mov	r2, r3
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	623b      	str	r3, [r7, #32]
 8003194:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003196:	69f9      	ldr	r1, [r7, #28]
 8003198:	6a3a      	ldr	r2, [r7, #32]
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	61bb      	str	r3, [r7, #24]
   return(result);
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1e6      	bne.n	8003174 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	461a      	mov	r2, r3
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 fe81 	bl	8003eb4 <UART_Start_Receive_IT>
 80031b2:	4603      	mov	r3, r0
 80031b4:	e000      	b.n	80031b8 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031b6:	2302      	movs	r3, #2
  }
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3728      	adds	r7, #40	; 0x28
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b0ba      	sub	sp, #232	; 0xe8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69db      	ldr	r3, [r3, #28]
 80031ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80031ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80031ee:	4013      	ands	r3, r2
 80031f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80031f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d115      	bne.n	8003228 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003200:	f003 0320 	and.w	r3, r3, #32
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00f      	beq.n	8003228 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800320c:	f003 0320 	and.w	r3, r3, #32
 8003210:	2b00      	cmp	r3, #0
 8003212:	d009      	beq.n	8003228 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003218:	2b00      	cmp	r3, #0
 800321a:	f000 82a3 	beq.w	8003764 <HAL_UART_IRQHandler+0x5a4>
      {
        huart->RxISR(huart);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	4798      	blx	r3
      }
      return;
 8003226:	e29d      	b.n	8003764 <HAL_UART_IRQHandler+0x5a4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003228:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8117 	beq.w	8003460 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	2b00      	cmp	r3, #0
 800323c:	d106      	bne.n	800324c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800323e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003242:	4b85      	ldr	r3, [pc, #532]	; (8003458 <HAL_UART_IRQHandler+0x298>)
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 810a 	beq.w	8003460 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800324c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	2b00      	cmp	r3, #0
 8003256:	d011      	beq.n	800327c <HAL_UART_IRQHandler+0xbc>
 8003258:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800325c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003260:	2b00      	cmp	r3, #0
 8003262:	d00b      	beq.n	800327c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2201      	movs	r2, #1
 800326a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003272:	f043 0201 	orr.w	r2, r3, #1
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800327c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d011      	beq.n	80032ac <HAL_UART_IRQHandler+0xec>
 8003288:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00b      	beq.n	80032ac <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2202      	movs	r2, #2
 800329a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a2:	f043 0204 	orr.w	r2, r3, #4
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032b0:	f003 0304 	and.w	r3, r3, #4
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d011      	beq.n	80032dc <HAL_UART_IRQHandler+0x11c>
 80032b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00b      	beq.n	80032dc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2204      	movs	r2, #4
 80032ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032d2:	f043 0202 	orr.w	r2, r3, #2
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032e0:	f003 0308 	and.w	r3, r3, #8
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d017      	beq.n	8003318 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032ec:	f003 0320 	and.w	r3, r3, #32
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d105      	bne.n	8003300 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80032f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032f8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00b      	beq.n	8003318 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2208      	movs	r2, #8
 8003306:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800330e:	f043 0208 	orr.w	r2, r3, #8
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800331c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003320:	2b00      	cmp	r3, #0
 8003322:	d012      	beq.n	800334a <HAL_UART_IRQHandler+0x18a>
 8003324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00c      	beq.n	800334a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003338:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003340:	f043 0220 	orr.w	r2, r3, #32
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 8209 	beq.w	8003768 <HAL_UART_IRQHandler+0x5a8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335a:	f003 0320 	and.w	r3, r3, #32
 800335e:	2b00      	cmp	r3, #0
 8003360:	d00d      	beq.n	800337e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003366:	f003 0320 	and.w	r3, r3, #32
 800336a:	2b00      	cmp	r3, #0
 800336c:	d007      	beq.n	800337e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003384:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b40      	cmp	r3, #64	; 0x40
 8003394:	d005      	beq.n	80033a2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800339a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d04f      	beq.n	8003442 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fe32 	bl	800400c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b2:	2b40      	cmp	r3, #64	; 0x40
 80033b4:	d141      	bne.n	800343a <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3308      	adds	r3, #8
 80033bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80033cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	3308      	adds	r3, #8
 80033de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80033e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80033e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80033ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80033f2:	e841 2300 	strex	r3, r2, [r1]
 80033f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80033fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1d9      	bne.n	80033b6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	2b00      	cmp	r3, #0
 8003408:	d013      	beq.n	8003432 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	4a13      	ldr	r2, [pc, #76]	; (800345c <HAL_UART_IRQHandler+0x29c>)
 8003410:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd ff70 	bl	80012fc <HAL_DMA_Abort_IT>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d017      	beq.n	8003452 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800342c:	4610      	mov	r0, r2
 800342e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003430:	e00f      	b.n	8003452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f9a2 	bl	800377c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003438:	e00b      	b.n	8003452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f99e 	bl	800377c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003440:	e007      	b.n	8003452 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f99a 	bl	800377c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003450:	e18a      	b.n	8003768 <HAL_UART_IRQHandler+0x5a8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003452:	bf00      	nop
    return;
 8003454:	e188      	b.n	8003768 <HAL_UART_IRQHandler+0x5a8>
 8003456:	bf00      	nop
 8003458:	04000120 	.word	0x04000120
 800345c:	080040d3 	.word	0x080040d3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003464:	2b01      	cmp	r3, #1
 8003466:	f040 8143 	bne.w	80036f0 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800346a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800346e:	f003 0310 	and.w	r3, r3, #16
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 813c 	beq.w	80036f0 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 8135 	beq.w	80036f0 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2210      	movs	r2, #16
 800348c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003498:	2b40      	cmp	r3, #64	; 0x40
 800349a:	f040 80b1 	bne.w	8003600 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80034aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 815c 	beq.w	800376c <HAL_UART_IRQHandler+0x5ac>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80034ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034be:	429a      	cmp	r2, r3
 80034c0:	f080 8154 	bcs.w	800376c <HAL_UART_IRQHandler+0x5ac>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80034ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	f000 8085 	beq.w	80035e4 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80034e6:	e853 3f00 	ldrex	r3, [r3]
 80034ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80034ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003504:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003508:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003510:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800351c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1da      	bne.n	80034da <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	3308      	adds	r3, #8
 800352a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800352c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800352e:	e853 3f00 	ldrex	r3, [r3]
 8003532:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003534:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003536:	f023 0301 	bic.w	r3, r3, #1
 800353a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3308      	adds	r3, #8
 8003544:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003548:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800354c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003550:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003554:	e841 2300 	strex	r3, r2, [r1]
 8003558:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800355a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e1      	bne.n	8003524 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3308      	adds	r3, #8
 8003566:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800356a:	e853 3f00 	ldrex	r3, [r3]
 800356e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003570:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003572:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003576:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3308      	adds	r3, #8
 8003580:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003584:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003586:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003588:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800358a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800358c:	e841 2300 	strex	r3, r2, [r1]
 8003590:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003592:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1e3      	bne.n	8003560 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80035b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80035b4:	f023 0310 	bic.w	r3, r3, #16
 80035b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	461a      	mov	r2, r3
 80035c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80035c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80035ce:	e841 2300 	strex	r3, r2, [r1]
 80035d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1e4      	bne.n	80035a4 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035de:	4618      	mov	r0, r3
 80035e0:	f7fd fe53 	bl	800128a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	4619      	mov	r1, r3
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f000 f8c9 	bl	8003790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035fe:	e0b5      	b.n	800376c <HAL_UART_IRQHandler+0x5ac>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800360c:	b29b      	uxth	r3, r3
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b00      	cmp	r3, #0
 800361e:	f000 80a7 	beq.w	8003770 <HAL_UART_IRQHandler+0x5b0>
          && (nb_rx_data > 0U))
 8003622:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003626:	2b00      	cmp	r3, #0
 8003628:	f000 80a2 	beq.w	8003770 <HAL_UART_IRQHandler+0x5b0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800363a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003640:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	461a      	mov	r2, r3
 800364a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800364e:	647b      	str	r3, [r7, #68]	; 0x44
 8003650:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003654:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800365c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e4      	bne.n	800362c <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3308      	adds	r3, #8
 8003668:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366c:	e853 3f00 	ldrex	r3, [r3]
 8003670:	623b      	str	r3, [r7, #32]
   return(result);
 8003672:	6a3b      	ldr	r3, [r7, #32]
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3308      	adds	r3, #8
 8003682:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003686:	633a      	str	r2, [r7, #48]	; 0x30
 8003688:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800368c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800368e:	e841 2300 	strex	r3, r2, [r1]
 8003692:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003696:	2b00      	cmp	r3, #0
 8003698:	d1e3      	bne.n	8003662 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2220      	movs	r2, #32
 800369e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	e853 3f00 	ldrex	r3, [r3]
 80036b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f023 0310 	bic.w	r3, r3, #16
 80036c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	461a      	mov	r2, r3
 80036ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036ce:	61fb      	str	r3, [r7, #28]
 80036d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d2:	69b9      	ldr	r1, [r7, #24]
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	e841 2300 	strex	r3, r2, [r1]
 80036da:	617b      	str	r3, [r7, #20]
   return(result);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1e4      	bne.n	80036ac <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036e6:	4619      	mov	r1, r3
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f851 	bl	8003790 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036ee:	e03f      	b.n	8003770 <HAL_UART_IRQHandler+0x5b0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00e      	beq.n	800371a <HAL_UART_IRQHandler+0x55a>
 80036fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d008      	beq.n	800371a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003710:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 fe79 	bl	800440a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003718:	e02d      	b.n	8003776 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800371a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00e      	beq.n	8003744 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800372a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003736:	2b00      	cmp	r3, #0
 8003738:	d01c      	beq.n	8003774 <HAL_UART_IRQHandler+0x5b4>
    {
      huart->TxISR(huart);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	4798      	blx	r3
    }
    return;
 8003742:	e017      	b.n	8003774 <HAL_UART_IRQHandler+0x5b4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374c:	2b00      	cmp	r3, #0
 800374e:	d012      	beq.n	8003776 <HAL_UART_IRQHandler+0x5b6>
 8003750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00c      	beq.n	8003776 <HAL_UART_IRQHandler+0x5b6>
  {
    UART_EndTransmit_IT(huart);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 fcce 	bl	80040fe <UART_EndTransmit_IT>
    return;
 8003762:	e008      	b.n	8003776 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003764:	bf00      	nop
 8003766:	e006      	b.n	8003776 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003768:	bf00      	nop
 800376a:	e004      	b.n	8003776 <HAL_UART_IRQHandler+0x5b6>
      return;
 800376c:	bf00      	nop
 800376e:	e002      	b.n	8003776 <HAL_UART_IRQHandler+0x5b6>
      return;
 8003770:	bf00      	nop
 8003772:	e000      	b.n	8003776 <HAL_UART_IRQHandler+0x5b6>
    return;
 8003774:	bf00      	nop
  }

}
 8003776:	37e8      	adds	r7, #232	; 0xe8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	460b      	mov	r3, r1
 800379a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr

080037a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689a      	ldr	r2, [r3, #8]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	431a      	orrs	r2, r3
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	695b      	ldr	r3, [r3, #20]
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	4b92      	ldr	r3, [pc, #584]	; (8003a1c <UART_SetConfig+0x274>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	6979      	ldr	r1, [r7, #20]
 80037dc:	430b      	orrs	r3, r1
 80037de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68da      	ldr	r2, [r3, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	430a      	orrs	r2, r1
 80037f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	430a      	orrs	r2, r1
 8003818:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a80      	ldr	r2, [pc, #512]	; (8003a20 <UART_SetConfig+0x278>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d120      	bne.n	8003866 <UART_SetConfig+0xbe>
 8003824:	4b7f      	ldr	r3, [pc, #508]	; (8003a24 <UART_SetConfig+0x27c>)
 8003826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	2b03      	cmp	r3, #3
 800382e:	d817      	bhi.n	8003860 <UART_SetConfig+0xb8>
 8003830:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <UART_SetConfig+0x90>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	08003849 	.word	0x08003849
 800383c:	08003855 	.word	0x08003855
 8003840:	0800385b 	.word	0x0800385b
 8003844:	0800384f 	.word	0x0800384f
 8003848:	2301      	movs	r3, #1
 800384a:	77fb      	strb	r3, [r7, #31]
 800384c:	e0b5      	b.n	80039ba <UART_SetConfig+0x212>
 800384e:	2302      	movs	r3, #2
 8003850:	77fb      	strb	r3, [r7, #31]
 8003852:	e0b2      	b.n	80039ba <UART_SetConfig+0x212>
 8003854:	2304      	movs	r3, #4
 8003856:	77fb      	strb	r3, [r7, #31]
 8003858:	e0af      	b.n	80039ba <UART_SetConfig+0x212>
 800385a:	2308      	movs	r3, #8
 800385c:	77fb      	strb	r3, [r7, #31]
 800385e:	e0ac      	b.n	80039ba <UART_SetConfig+0x212>
 8003860:	2310      	movs	r3, #16
 8003862:	77fb      	strb	r3, [r7, #31]
 8003864:	e0a9      	b.n	80039ba <UART_SetConfig+0x212>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a6f      	ldr	r2, [pc, #444]	; (8003a28 <UART_SetConfig+0x280>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d124      	bne.n	80038ba <UART_SetConfig+0x112>
 8003870:	4b6c      	ldr	r3, [pc, #432]	; (8003a24 <UART_SetConfig+0x27c>)
 8003872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003874:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003878:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800387c:	d011      	beq.n	80038a2 <UART_SetConfig+0xfa>
 800387e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003882:	d817      	bhi.n	80038b4 <UART_SetConfig+0x10c>
 8003884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003888:	d011      	beq.n	80038ae <UART_SetConfig+0x106>
 800388a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800388e:	d811      	bhi.n	80038b4 <UART_SetConfig+0x10c>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d003      	beq.n	800389c <UART_SetConfig+0xf4>
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003898:	d006      	beq.n	80038a8 <UART_SetConfig+0x100>
 800389a:	e00b      	b.n	80038b4 <UART_SetConfig+0x10c>
 800389c:	2300      	movs	r3, #0
 800389e:	77fb      	strb	r3, [r7, #31]
 80038a0:	e08b      	b.n	80039ba <UART_SetConfig+0x212>
 80038a2:	2302      	movs	r3, #2
 80038a4:	77fb      	strb	r3, [r7, #31]
 80038a6:	e088      	b.n	80039ba <UART_SetConfig+0x212>
 80038a8:	2304      	movs	r3, #4
 80038aa:	77fb      	strb	r3, [r7, #31]
 80038ac:	e085      	b.n	80039ba <UART_SetConfig+0x212>
 80038ae:	2308      	movs	r3, #8
 80038b0:	77fb      	strb	r3, [r7, #31]
 80038b2:	e082      	b.n	80039ba <UART_SetConfig+0x212>
 80038b4:	2310      	movs	r3, #16
 80038b6:	77fb      	strb	r3, [r7, #31]
 80038b8:	e07f      	b.n	80039ba <UART_SetConfig+0x212>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a5b      	ldr	r2, [pc, #364]	; (8003a2c <UART_SetConfig+0x284>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d124      	bne.n	800390e <UART_SetConfig+0x166>
 80038c4:	4b57      	ldr	r3, [pc, #348]	; (8003a24 <UART_SetConfig+0x27c>)
 80038c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80038cc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038d0:	d011      	beq.n	80038f6 <UART_SetConfig+0x14e>
 80038d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80038d6:	d817      	bhi.n	8003908 <UART_SetConfig+0x160>
 80038d8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038dc:	d011      	beq.n	8003902 <UART_SetConfig+0x15a>
 80038de:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80038e2:	d811      	bhi.n	8003908 <UART_SetConfig+0x160>
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d003      	beq.n	80038f0 <UART_SetConfig+0x148>
 80038e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80038ec:	d006      	beq.n	80038fc <UART_SetConfig+0x154>
 80038ee:	e00b      	b.n	8003908 <UART_SetConfig+0x160>
 80038f0:	2300      	movs	r3, #0
 80038f2:	77fb      	strb	r3, [r7, #31]
 80038f4:	e061      	b.n	80039ba <UART_SetConfig+0x212>
 80038f6:	2302      	movs	r3, #2
 80038f8:	77fb      	strb	r3, [r7, #31]
 80038fa:	e05e      	b.n	80039ba <UART_SetConfig+0x212>
 80038fc:	2304      	movs	r3, #4
 80038fe:	77fb      	strb	r3, [r7, #31]
 8003900:	e05b      	b.n	80039ba <UART_SetConfig+0x212>
 8003902:	2308      	movs	r3, #8
 8003904:	77fb      	strb	r3, [r7, #31]
 8003906:	e058      	b.n	80039ba <UART_SetConfig+0x212>
 8003908:	2310      	movs	r3, #16
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e055      	b.n	80039ba <UART_SetConfig+0x212>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a47      	ldr	r2, [pc, #284]	; (8003a30 <UART_SetConfig+0x288>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d124      	bne.n	8003962 <UART_SetConfig+0x1ba>
 8003918:	4b42      	ldr	r3, [pc, #264]	; (8003a24 <UART_SetConfig+0x27c>)
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003920:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003924:	d011      	beq.n	800394a <UART_SetConfig+0x1a2>
 8003926:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800392a:	d817      	bhi.n	800395c <UART_SetConfig+0x1b4>
 800392c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003930:	d011      	beq.n	8003956 <UART_SetConfig+0x1ae>
 8003932:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003936:	d811      	bhi.n	800395c <UART_SetConfig+0x1b4>
 8003938:	2b00      	cmp	r3, #0
 800393a:	d003      	beq.n	8003944 <UART_SetConfig+0x19c>
 800393c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003940:	d006      	beq.n	8003950 <UART_SetConfig+0x1a8>
 8003942:	e00b      	b.n	800395c <UART_SetConfig+0x1b4>
 8003944:	2300      	movs	r3, #0
 8003946:	77fb      	strb	r3, [r7, #31]
 8003948:	e037      	b.n	80039ba <UART_SetConfig+0x212>
 800394a:	2302      	movs	r3, #2
 800394c:	77fb      	strb	r3, [r7, #31]
 800394e:	e034      	b.n	80039ba <UART_SetConfig+0x212>
 8003950:	2304      	movs	r3, #4
 8003952:	77fb      	strb	r3, [r7, #31]
 8003954:	e031      	b.n	80039ba <UART_SetConfig+0x212>
 8003956:	2308      	movs	r3, #8
 8003958:	77fb      	strb	r3, [r7, #31]
 800395a:	e02e      	b.n	80039ba <UART_SetConfig+0x212>
 800395c:	2310      	movs	r3, #16
 800395e:	77fb      	strb	r3, [r7, #31]
 8003960:	e02b      	b.n	80039ba <UART_SetConfig+0x212>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a33      	ldr	r2, [pc, #204]	; (8003a34 <UART_SetConfig+0x28c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d124      	bne.n	80039b6 <UART_SetConfig+0x20e>
 800396c:	4b2d      	ldr	r3, [pc, #180]	; (8003a24 <UART_SetConfig+0x27c>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003974:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003978:	d011      	beq.n	800399e <UART_SetConfig+0x1f6>
 800397a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800397e:	d817      	bhi.n	80039b0 <UART_SetConfig+0x208>
 8003980:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003984:	d011      	beq.n	80039aa <UART_SetConfig+0x202>
 8003986:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800398a:	d811      	bhi.n	80039b0 <UART_SetConfig+0x208>
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <UART_SetConfig+0x1f0>
 8003990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003994:	d006      	beq.n	80039a4 <UART_SetConfig+0x1fc>
 8003996:	e00b      	b.n	80039b0 <UART_SetConfig+0x208>
 8003998:	2300      	movs	r3, #0
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e00d      	b.n	80039ba <UART_SetConfig+0x212>
 800399e:	2302      	movs	r3, #2
 80039a0:	77fb      	strb	r3, [r7, #31]
 80039a2:	e00a      	b.n	80039ba <UART_SetConfig+0x212>
 80039a4:	2304      	movs	r3, #4
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e007      	b.n	80039ba <UART_SetConfig+0x212>
 80039aa:	2308      	movs	r3, #8
 80039ac:	77fb      	strb	r3, [r7, #31]
 80039ae:	e004      	b.n	80039ba <UART_SetConfig+0x212>
 80039b0:	2310      	movs	r3, #16
 80039b2:	77fb      	strb	r3, [r7, #31]
 80039b4:	e001      	b.n	80039ba <UART_SetConfig+0x212>
 80039b6:	2310      	movs	r3, #16
 80039b8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	69db      	ldr	r3, [r3, #28]
 80039be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c2:	d16c      	bne.n	8003a9e <UART_SetConfig+0x2f6>
  {
    switch (clocksource)
 80039c4:	7ffb      	ldrb	r3, [r7, #31]
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d838      	bhi.n	8003a3c <UART_SetConfig+0x294>
 80039ca:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <UART_SetConfig+0x228>)
 80039cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d0:	080039f5 	.word	0x080039f5
 80039d4:	080039fd 	.word	0x080039fd
 80039d8:	08003a05 	.word	0x08003a05
 80039dc:	08003a3d 	.word	0x08003a3d
 80039e0:	08003a0b 	.word	0x08003a0b
 80039e4:	08003a3d 	.word	0x08003a3d
 80039e8:	08003a3d 	.word	0x08003a3d
 80039ec:	08003a3d 	.word	0x08003a3d
 80039f0:	08003a13 	.word	0x08003a13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039f4:	f7ff f8e6 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 80039f8:	61b8      	str	r0, [r7, #24]
        break;
 80039fa:	e024      	b.n	8003a46 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039fc:	f7ff f904 	bl	8002c08 <HAL_RCC_GetPCLK2Freq>
 8003a00:	61b8      	str	r0, [r7, #24]
        break;
 8003a02:	e020      	b.n	8003a46 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <UART_SetConfig+0x290>)
 8003a06:	61bb      	str	r3, [r7, #24]
        break;
 8003a08:	e01d      	b.n	8003a46 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a0a:	f7ff f865 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8003a0e:	61b8      	str	r0, [r7, #24]
        break;
 8003a10:	e019      	b.n	8003a46 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a16:	61bb      	str	r3, [r7, #24]
        break;
 8003a18:	e015      	b.n	8003a46 <UART_SetConfig+0x29e>
 8003a1a:	bf00      	nop
 8003a1c:	efff69f3 	.word	0xefff69f3
 8003a20:	40013800 	.word	0x40013800
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40004400 	.word	0x40004400
 8003a2c:	40004800 	.word	0x40004800
 8003a30:	40004c00 	.word	0x40004c00
 8003a34:	40005000 	.word	0x40005000
 8003a38:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	77bb      	strb	r3, [r7, #30]
        break;
 8003a44:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a46:	69bb      	ldr	r3, [r7, #24]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d075      	beq.n	8003b38 <UART_SetConfig+0x390>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	005a      	lsls	r2, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	085b      	lsrs	r3, r3, #1
 8003a56:	441a      	add	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b0f      	cmp	r3, #15
 8003a68:	d916      	bls.n	8003a98 <UART_SetConfig+0x2f0>
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a70:	d212      	bcs.n	8003a98 <UART_SetConfig+0x2f0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	f023 030f 	bic.w	r3, r3, #15
 8003a7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	085b      	lsrs	r3, r3, #1
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	89fb      	ldrh	r3, [r7, #14]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	89fa      	ldrh	r2, [r7, #14]
 8003a94:	60da      	str	r2, [r3, #12]
 8003a96:	e04f      	b.n	8003b38 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	77bb      	strb	r3, [r7, #30]
 8003a9c:	e04c      	b.n	8003b38 <UART_SetConfig+0x390>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a9e:	7ffb      	ldrb	r3, [r7, #31]
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d828      	bhi.n	8003af6 <UART_SetConfig+0x34e>
 8003aa4:	a201      	add	r2, pc, #4	; (adr r2, 8003aac <UART_SetConfig+0x304>)
 8003aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aaa:	bf00      	nop
 8003aac:	08003ad1 	.word	0x08003ad1
 8003ab0:	08003ad9 	.word	0x08003ad9
 8003ab4:	08003ae1 	.word	0x08003ae1
 8003ab8:	08003af7 	.word	0x08003af7
 8003abc:	08003ae7 	.word	0x08003ae7
 8003ac0:	08003af7 	.word	0x08003af7
 8003ac4:	08003af7 	.word	0x08003af7
 8003ac8:	08003af7 	.word	0x08003af7
 8003acc:	08003aef 	.word	0x08003aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad0:	f7ff f878 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 8003ad4:	61b8      	str	r0, [r7, #24]
        break;
 8003ad6:	e013      	b.n	8003b00 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ad8:	f7ff f896 	bl	8002c08 <HAL_RCC_GetPCLK2Freq>
 8003adc:	61b8      	str	r0, [r7, #24]
        break;
 8003ade:	e00f      	b.n	8003b00 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ae0:	4b1b      	ldr	r3, [pc, #108]	; (8003b50 <UART_SetConfig+0x3a8>)
 8003ae2:	61bb      	str	r3, [r7, #24]
        break;
 8003ae4:	e00c      	b.n	8003b00 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ae6:	f7fe fff7 	bl	8002ad8 <HAL_RCC_GetSysClockFreq>
 8003aea:	61b8      	str	r0, [r7, #24]
        break;
 8003aec:	e008      	b.n	8003b00 <UART_SetConfig+0x358>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003af2:	61bb      	str	r3, [r7, #24]
        break;
 8003af4:	e004      	b.n	8003b00 <UART_SetConfig+0x358>
      default:
        pclk = 0U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	77bb      	strb	r3, [r7, #30]
        break;
 8003afe:	bf00      	nop
    }

    if (pclk != 0U)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d018      	beq.n	8003b38 <UART_SetConfig+0x390>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	085a      	lsrs	r2, r3, #1
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	441a      	add	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	2b0f      	cmp	r3, #15
 8003b20:	d908      	bls.n	8003b34 <UART_SetConfig+0x38c>
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b28:	d204      	bcs.n	8003b34 <UART_SetConfig+0x38c>
      {
        huart->Instance->BRR = usartdiv;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	60da      	str	r2, [r3, #12]
 8003b32:	e001      	b.n	8003b38 <UART_SetConfig+0x390>
      }
      else
      {
        ret = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b44:	7fbb      	ldrb	r3, [r7, #30]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3720      	adds	r7, #32
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	007a1200 	.word	0x007a1200

08003b54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00a      	beq.n	8003b7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00a      	beq.n	8003ba0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00a      	beq.n	8003bc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d00a      	beq.n	8003be4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	430a      	orrs	r2, r1
 8003be2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0a:	f003 0320 	and.w	r3, r3, #32
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00a      	beq.n	8003c28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d01a      	beq.n	8003c6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c52:	d10a      	bne.n	8003c6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	430a      	orrs	r2, r1
 8003c68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00a      	beq.n	8003c8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	605a      	str	r2, [r3, #4]
  }
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ca8:	f7fd f9d2 	bl	8001050 <HAL_GetTick>
 8003cac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0308 	and.w	r3, r3, #8
 8003cb8:	2b08      	cmp	r3, #8
 8003cba:	d10e      	bne.n	8003cda <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cc0:	9300      	str	r3, [sp, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f82d 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d001      	beq.n	8003cda <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e023      	b.n	8003d22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0304 	and.w	r3, r3, #4
 8003ce4:	2b04      	cmp	r3, #4
 8003ce6:	d10e      	bne.n	8003d06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ce8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f817 	bl	8003d2a <UART_WaitOnFlagUntilTimeout>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e00d      	b.n	8003d22 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3710      	adds	r7, #16
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b09c      	sub	sp, #112	; 0x70
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	60f8      	str	r0, [r7, #12]
 8003d32:	60b9      	str	r1, [r7, #8]
 8003d34:	603b      	str	r3, [r7, #0]
 8003d36:	4613      	mov	r3, r2
 8003d38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3a:	e0a5      	b.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d42:	f000 80a1 	beq.w	8003e88 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d46:	f7fd f983 	bl	8001050 <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d302      	bcc.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x32>
 8003d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d13e      	bne.n	8003dda <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d70:	667b      	str	r3, [r7, #100]	; 0x64
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d82:	e841 2300 	strex	r3, r2, [r1]
 8003d86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d1e6      	bne.n	8003d5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3308      	adds	r3, #8
 8003d94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d98:	e853 3f00 	ldrex	r3, [r3]
 8003d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da0:	f023 0301 	bic.w	r3, r3, #1
 8003da4:	663b      	str	r3, [r7, #96]	; 0x60
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3308      	adds	r3, #8
 8003dac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003dae:	64ba      	str	r2, [r7, #72]	; 0x48
 8003db0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db6:	e841 2300 	strex	r3, r2, [r1]
 8003dba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1e5      	bne.n	8003d8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e067      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0304 	and.w	r3, r3, #4
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d04f      	beq.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df6:	d147      	bne.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	e853 3f00 	ldrex	r3, [r3]
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e20:	637b      	str	r3, [r7, #52]	; 0x34
 8003e22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e28:	e841 2300 	strex	r3, r2, [r1]
 8003e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d1e6      	bne.n	8003e02 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	3308      	adds	r3, #8
 8003e3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	e853 3f00 	ldrex	r3, [r3]
 8003e42:	613b      	str	r3, [r7, #16]
   return(result);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	f023 0301 	bic.w	r3, r3, #1
 8003e4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	3308      	adds	r3, #8
 8003e52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e54:	623a      	str	r2, [r7, #32]
 8003e56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e58:	69f9      	ldr	r1, [r7, #28]
 8003e5a:	6a3a      	ldr	r2, [r7, #32]
 8003e5c:	e841 2300 	strex	r3, r2, [r1]
 8003e60:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1e5      	bne.n	8003e34 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2220      	movs	r2, #32
 8003e72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e84:	2303      	movs	r3, #3
 8003e86:	e010      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	69da      	ldr	r2, [r3, #28]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	4013      	ands	r3, r2
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	bf0c      	ite	eq
 8003e98:	2301      	moveq	r3, #1
 8003e9a:	2300      	movne	r3, #0
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	79fb      	ldrb	r3, [r7, #7]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	f43f af4a 	beq.w	8003d3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3770      	adds	r7, #112	; 0x70
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
	...

08003eb4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b091      	sub	sp, #68	; 0x44
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	88fa      	ldrh	r2, [r7, #6]
 8003ed4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ee6:	d10e      	bne.n	8003f06 <UART_Start_Receive_IT+0x52>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d105      	bne.n	8003efc <UART_Start_Receive_IT+0x48>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ef6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003efa:	e02d      	b.n	8003f58 <UART_Start_Receive_IT+0xa4>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	22ff      	movs	r2, #255	; 0xff
 8003f00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f04:	e028      	b.n	8003f58 <UART_Start_Receive_IT+0xa4>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10d      	bne.n	8003f2a <UART_Start_Receive_IT+0x76>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d104      	bne.n	8003f20 <UART_Start_Receive_IT+0x6c>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	22ff      	movs	r2, #255	; 0xff
 8003f1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f1e:	e01b      	b.n	8003f58 <UART_Start_Receive_IT+0xa4>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	227f      	movs	r2, #127	; 0x7f
 8003f24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f28:	e016      	b.n	8003f58 <UART_Start_Receive_IT+0xa4>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f32:	d10d      	bne.n	8003f50 <UART_Start_Receive_IT+0x9c>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d104      	bne.n	8003f46 <UART_Start_Receive_IT+0x92>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	227f      	movs	r2, #127	; 0x7f
 8003f40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f44:	e008      	b.n	8003f58 <UART_Start_Receive_IT+0xa4>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	223f      	movs	r2, #63	; 0x3f
 8003f4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f4e:	e003      	b.n	8003f58 <UART_Start_Receive_IT+0xa4>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2222      	movs	r2, #34	; 0x22
 8003f64:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f70:	e853 3f00 	ldrex	r3, [r3]
 8003f74:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	3308      	adds	r3, #8
 8003f84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f86:	637a      	str	r2, [r7, #52]	; 0x34
 8003f88:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f8e:	e841 2300 	strex	r3, r2, [r1]
 8003f92:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1e5      	bne.n	8003f66 <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa2:	d107      	bne.n	8003fb4 <UART_Start_Receive_IT+0x100>
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	691b      	ldr	r3, [r3, #16]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d103      	bne.n	8003fb4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a15      	ldr	r2, [pc, #84]	; (8004004 <UART_Start_Receive_IT+0x150>)
 8003fb0:	665a      	str	r2, [r3, #100]	; 0x64
 8003fb2:	e002      	b.n	8003fba <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	4a14      	ldr	r2, [pc, #80]	; (8004008 <UART_Start_Receive_IT+0x154>)
 8003fb8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	e853 3f00 	ldrex	r3, [r3]
 8003fce:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003fd6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe0:	623b      	str	r3, [r7, #32]
 8003fe2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe4:	69f9      	ldr	r1, [r7, #28]
 8003fe6:	6a3a      	ldr	r2, [r7, #32]
 8003fe8:	e841 2300 	strex	r3, r2, [r1]
 8003fec:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1e6      	bne.n	8003fc2 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3744      	adds	r7, #68	; 0x44
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	080042af 	.word	0x080042af
 8004008:	08004153 	.word	0x08004153

0800400c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800400c:	b480      	push	{r7}
 800400e:	b095      	sub	sp, #84	; 0x54
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004024:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004028:	64fb      	str	r3, [r7, #76]	; 0x4c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	461a      	mov	r2, r3
 8004030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004032:	643b      	str	r3, [r7, #64]	; 0x40
 8004034:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004036:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004038:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800403a:	e841 2300 	strex	r3, r2, [r1]
 800403e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1e6      	bne.n	8004014 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3308      	adds	r3, #8
 800404c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	e853 3f00 	ldrex	r3, [r3]
 8004054:	61fb      	str	r3, [r7, #28]
   return(result);
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	64bb      	str	r3, [r7, #72]	; 0x48
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	3308      	adds	r3, #8
 8004064:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004066:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004068:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800406c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e5      	bne.n	8004046 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407e:	2b01      	cmp	r3, #1
 8004080:	d118      	bne.n	80040b4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	e853 3f00 	ldrex	r3, [r3]
 800408e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	f023 0310 	bic.w	r3, r3, #16
 8004096:	647b      	str	r3, [r7, #68]	; 0x44
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a4:	6979      	ldr	r1, [r7, #20]
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	e841 2300 	strex	r3, r2, [r1]
 80040ac:	613b      	str	r3, [r7, #16]
   return(result);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e6      	bne.n	8004082 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80040c6:	bf00      	nop
 80040c8:	3754      	adds	r7, #84	; 0x54
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f7ff fb43 	bl	800377c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040f6:	bf00      	nop
 80040f8:	3710      	adds	r7, #16
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040fe:	b580      	push	{r7, lr}
 8004100:	b088      	sub	sp, #32
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	e853 3f00 	ldrex	r3, [r3]
 8004112:	60bb      	str	r3, [r7, #8]
   return(result);
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800411a:	61fb      	str	r3, [r7, #28]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	461a      	mov	r2, r3
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	61bb      	str	r3, [r7, #24]
 8004126:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	6979      	ldr	r1, [r7, #20]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	613b      	str	r3, [r7, #16]
   return(result);
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e6      	bne.n	8004106 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7fc fa5b 	bl	8000600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800414a:	bf00      	nop
 800414c:	3720      	adds	r7, #32
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b096      	sub	sp, #88	; 0x58
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004160:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004168:	2b22      	cmp	r3, #34	; 0x22
 800416a:	f040 8094 	bne.w	8004296 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004174:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004178:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800417c:	b2d9      	uxtb	r1, r3
 800417e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004182:	b2da      	uxtb	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004188:	400a      	ands	r2, r1
 800418a:	b2d2      	uxtb	r2, r2
 800418c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004192:	1c5a      	adds	r2, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d177      	bne.n	80042a6 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041ca:	653b      	str	r3, [r7, #80]	; 0x50
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d4:	647b      	str	r3, [r7, #68]	; 0x44
 80041d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80041da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80041dc:	e841 2300 	strex	r3, r2, [r1]
 80041e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80041e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e6      	bne.n	80041b6 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	623b      	str	r3, [r7, #32]
   return(result);
 80041f8:	6a3b      	ldr	r3, [r7, #32]
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3308      	adds	r3, #8
 8004206:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004208:	633a      	str	r2, [r7, #48]	; 0x30
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800420e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e5      	bne.n	80041e8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422c:	2b01      	cmp	r3, #1
 800422e:	d12e      	bne.n	800428e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	e853 3f00 	ldrex	r3, [r3]
 8004242:	60fb      	str	r3, [r7, #12]
   return(result);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0310 	bic.w	r3, r3, #16
 800424a:	64bb      	str	r3, [r7, #72]	; 0x48
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004258:	69b9      	ldr	r1, [r7, #24]
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	e841 2300 	strex	r3, r2, [r1]
 8004260:	617b      	str	r3, [r7, #20]
   return(result);
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1e6      	bne.n	8004236 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b10      	cmp	r3, #16
 8004274:	d103      	bne.n	800427e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2210      	movs	r2, #16
 800427c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004284:	4619      	mov	r1, r3
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff fa82 	bl	8003790 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800428c:	e00b      	b.n	80042a6 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fc f9c6 	bl	8000620 <HAL_UART_RxCpltCallback>
}
 8004294:	e007      	b.n	80042a6 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	699a      	ldr	r2, [r3, #24]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f042 0208 	orr.w	r2, r2, #8
 80042a4:	619a      	str	r2, [r3, #24]
}
 80042a6:	bf00      	nop
 80042a8:	3758      	adds	r7, #88	; 0x58
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b096      	sub	sp, #88	; 0x58
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80042bc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042c4:	2b22      	cmp	r3, #34	; 0x22
 80042c6:	f040 8094 	bne.w	80043f2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80042d0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80042da:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80042de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80042e2:	4013      	ands	r3, r2
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042e8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ee:	1c9a      	adds	r2, r3, #2
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b29a      	uxth	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d177      	bne.n	8004402 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431a:	e853 3f00 	ldrex	r3, [r3]
 800431e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004322:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	461a      	mov	r2, r3
 800432e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004330:	643b      	str	r3, [r7, #64]	; 0x40
 8004332:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004334:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004336:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004338:	e841 2300 	strex	r3, r2, [r1]
 800433c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1e6      	bne.n	8004312 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3308      	adds	r3, #8
 800434a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	e853 3f00 	ldrex	r3, [r3]
 8004352:	61fb      	str	r3, [r7, #28]
   return(result);
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f023 0301 	bic.w	r3, r3, #1
 800435a:	64bb      	str	r3, [r7, #72]	; 0x48
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3308      	adds	r3, #8
 8004362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004364:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004368:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800436a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800436c:	e841 2300 	strex	r3, r2, [r1]
 8004370:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1e5      	bne.n	8004344 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004388:	2b01      	cmp	r3, #1
 800438a:	d12e      	bne.n	80043ea <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	60bb      	str	r3, [r7, #8]
   return(result);
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f023 0310 	bic.w	r3, r3, #16
 80043a6:	647b      	str	r3, [r7, #68]	; 0x44
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	6979      	ldr	r1, [r7, #20]
 80043b6:	69ba      	ldr	r2, [r7, #24]
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	613b      	str	r3, [r7, #16]
   return(result);
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e6      	bne.n	8004392 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f003 0310 	and.w	r3, r3, #16
 80043ce:	2b10      	cmp	r3, #16
 80043d0:	d103      	bne.n	80043da <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2210      	movs	r2, #16
 80043d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80043e0:	4619      	mov	r1, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7ff f9d4 	bl	8003790 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043e8:	e00b      	b.n	8004402 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7fc f918 	bl	8000620 <HAL_UART_RxCpltCallback>
}
 80043f0:	e007      	b.n	8004402 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699a      	ldr	r2, [r3, #24]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f042 0208 	orr.w	r2, r2, #8
 8004400:	619a      	str	r2, [r3, #24]
}
 8004402:	bf00      	nop
 8004404:	3758      	adds	r7, #88	; 0x58
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <_ZdlPvj>:
 800441e:	f000 b800 	b.w	8004422 <_ZdlPv>

08004422 <_ZdlPv>:
 8004422:	f000 b825 	b.w	8004470 <free>
	...

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	4d0d      	ldr	r5, [pc, #52]	; (8004460 <__libc_init_array+0x38>)
 800442c:	4c0d      	ldr	r4, [pc, #52]	; (8004464 <__libc_init_array+0x3c>)
 800442e:	1b64      	subs	r4, r4, r5
 8004430:	10a4      	asrs	r4, r4, #2
 8004432:	2600      	movs	r6, #0
 8004434:	42a6      	cmp	r6, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	4d0b      	ldr	r5, [pc, #44]	; (8004468 <__libc_init_array+0x40>)
 800443a:	4c0c      	ldr	r4, [pc, #48]	; (800446c <__libc_init_array+0x44>)
 800443c:	f000 f882 	bl	8004544 <_init>
 8004440:	1b64      	subs	r4, r4, r5
 8004442:	10a4      	asrs	r4, r4, #2
 8004444:	2600      	movs	r6, #0
 8004446:	42a6      	cmp	r6, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004450:	4798      	blx	r3
 8004452:	3601      	adds	r6, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	f855 3b04 	ldr.w	r3, [r5], #4
 800445a:	4798      	blx	r3
 800445c:	3601      	adds	r6, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	08004604 	.word	0x08004604
 8004464:	08004604 	.word	0x08004604
 8004468:	08004604 	.word	0x08004604
 800446c:	08004610 	.word	0x08004610

08004470 <free>:
 8004470:	4b02      	ldr	r3, [pc, #8]	; (800447c <free+0xc>)
 8004472:	4601      	mov	r1, r0
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	f000 b80b 	b.w	8004490 <_free_r>
 800447a:	bf00      	nop
 800447c:	2000000c 	.word	0x2000000c

08004480 <memset>:
 8004480:	4402      	add	r2, r0
 8004482:	4603      	mov	r3, r0
 8004484:	4293      	cmp	r3, r2
 8004486:	d100      	bne.n	800448a <memset+0xa>
 8004488:	4770      	bx	lr
 800448a:	f803 1b01 	strb.w	r1, [r3], #1
 800448e:	e7f9      	b.n	8004484 <memset+0x4>

08004490 <_free_r>:
 8004490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004492:	2900      	cmp	r1, #0
 8004494:	d044      	beq.n	8004520 <_free_r+0x90>
 8004496:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800449a:	9001      	str	r0, [sp, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	f1a1 0404 	sub.w	r4, r1, #4
 80044a2:	bfb8      	it	lt
 80044a4:	18e4      	addlt	r4, r4, r3
 80044a6:	f000 f83f 	bl	8004528 <__malloc_lock>
 80044aa:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <_free_r+0x94>)
 80044ac:	9801      	ldr	r0, [sp, #4]
 80044ae:	6813      	ldr	r3, [r2, #0]
 80044b0:	b933      	cbnz	r3, 80044c0 <_free_r+0x30>
 80044b2:	6063      	str	r3, [r4, #4]
 80044b4:	6014      	str	r4, [r2, #0]
 80044b6:	b003      	add	sp, #12
 80044b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80044bc:	f000 b83a 	b.w	8004534 <__malloc_unlock>
 80044c0:	42a3      	cmp	r3, r4
 80044c2:	d908      	bls.n	80044d6 <_free_r+0x46>
 80044c4:	6825      	ldr	r5, [r4, #0]
 80044c6:	1961      	adds	r1, r4, r5
 80044c8:	428b      	cmp	r3, r1
 80044ca:	bf01      	itttt	eq
 80044cc:	6819      	ldreq	r1, [r3, #0]
 80044ce:	685b      	ldreq	r3, [r3, #4]
 80044d0:	1949      	addeq	r1, r1, r5
 80044d2:	6021      	streq	r1, [r4, #0]
 80044d4:	e7ed      	b.n	80044b2 <_free_r+0x22>
 80044d6:	461a      	mov	r2, r3
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	b10b      	cbz	r3, 80044e0 <_free_r+0x50>
 80044dc:	42a3      	cmp	r3, r4
 80044de:	d9fa      	bls.n	80044d6 <_free_r+0x46>
 80044e0:	6811      	ldr	r1, [r2, #0]
 80044e2:	1855      	adds	r5, r2, r1
 80044e4:	42a5      	cmp	r5, r4
 80044e6:	d10b      	bne.n	8004500 <_free_r+0x70>
 80044e8:	6824      	ldr	r4, [r4, #0]
 80044ea:	4421      	add	r1, r4
 80044ec:	1854      	adds	r4, r2, r1
 80044ee:	42a3      	cmp	r3, r4
 80044f0:	6011      	str	r1, [r2, #0]
 80044f2:	d1e0      	bne.n	80044b6 <_free_r+0x26>
 80044f4:	681c      	ldr	r4, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	6053      	str	r3, [r2, #4]
 80044fa:	4421      	add	r1, r4
 80044fc:	6011      	str	r1, [r2, #0]
 80044fe:	e7da      	b.n	80044b6 <_free_r+0x26>
 8004500:	d902      	bls.n	8004508 <_free_r+0x78>
 8004502:	230c      	movs	r3, #12
 8004504:	6003      	str	r3, [r0, #0]
 8004506:	e7d6      	b.n	80044b6 <_free_r+0x26>
 8004508:	6825      	ldr	r5, [r4, #0]
 800450a:	1961      	adds	r1, r4, r5
 800450c:	428b      	cmp	r3, r1
 800450e:	bf04      	itt	eq
 8004510:	6819      	ldreq	r1, [r3, #0]
 8004512:	685b      	ldreq	r3, [r3, #4]
 8004514:	6063      	str	r3, [r4, #4]
 8004516:	bf04      	itt	eq
 8004518:	1949      	addeq	r1, r1, r5
 800451a:	6021      	streq	r1, [r4, #0]
 800451c:	6054      	str	r4, [r2, #4]
 800451e:	e7ca      	b.n	80044b6 <_free_r+0x26>
 8004520:	b003      	add	sp, #12
 8004522:	bd30      	pop	{r4, r5, pc}
 8004524:	20000230 	.word	0x20000230

08004528 <__malloc_lock>:
 8004528:	4801      	ldr	r0, [pc, #4]	; (8004530 <__malloc_lock+0x8>)
 800452a:	f000 b809 	b.w	8004540 <__retarget_lock_acquire_recursive>
 800452e:	bf00      	nop
 8004530:	20000234 	.word	0x20000234

08004534 <__malloc_unlock>:
 8004534:	4801      	ldr	r0, [pc, #4]	; (800453c <__malloc_unlock+0x8>)
 8004536:	f000 b804 	b.w	8004542 <__retarget_lock_release_recursive>
 800453a:	bf00      	nop
 800453c:	20000234 	.word	0x20000234

08004540 <__retarget_lock_acquire_recursive>:
 8004540:	4770      	bx	lr

08004542 <__retarget_lock_release_recursive>:
 8004542:	4770      	bx	lr

08004544 <_init>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	bf00      	nop
 8004548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454a:	bc08      	pop	{r3}
 800454c:	469e      	mov	lr, r3
 800454e:	4770      	bx	lr

08004550 <_fini>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	bf00      	nop
 8004554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004556:	bc08      	pop	{r3}
 8004558:	469e      	mov	lr, r3
 800455a:	4770      	bx	lr
